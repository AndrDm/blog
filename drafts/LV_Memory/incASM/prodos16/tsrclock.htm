<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='&euro;ASM file tsrclock.htm'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>tsrclock.htm</title>
</head>
<body class='OBJLIB' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>tsrclock.htm
<br/><a href="#Header">Header</a>
<br/><a href="#Interrupt">Interrupt</a>
<br/><a href="#Initialization">Initialization</a>
</h1>
<p><strong>TSRclock</strong> is a simple <dfn>Terminate and Stay Resident</dfn> (TSR) program
<!---->for DOS which displays current time in the upper-right corner of textmode screen.</p>
<p>It is hooked on timer-interrupt 0x08 and updates the clock on screen every second.</p>
<br class="CLEAR"/>
<dl>
<dt>Format</dt><dd>COM TSR</dd>
<dt>Platform</dt><dd>DOS. It also works in console of 32bit Windows.</dd>
<dt>See also</dt><dd><a class="EXT" href="tsrup.htm">tsrup</a> as a sample of more sofisticated TSR program.</dd>
<dt>Build</dt><dd><code> euroasm tsrclock.htm</code></dd>
<dt>Run</dt><dd><code>tsrclock.com</code></dd>
</dl>
<dl id="Header"><dt><a href="#top">Header</a></dt><dd>This is a program prologue.
<!---->Code which provides the actual service job is located
<!---->at the beginning of TSR program and it belongs to the resident memory.
<!---->The rest (initialization, splash screen etc) is not resident
<!---->and will be discarded when the program ends.
</dd></dl><pre>
         EUROASM DumpWidth=21,CPU=186
         INCLUDE "biosapi.htm","dosapi.htm" ; Uses <a class="EXT" href="../maclib/biosapi.htm#BiosAPI">BiosAPI</a> and <a class="EXT" href="../maclib/dosapi.htm#DosAPI">DosAPI</a>.
tsrclock PROGRAM Format=COM
[COM]      SEGMENT Purpose=CODE+DATA+STACK
%Color     %SETA %Magenta | %BrYellow*16 ; How the clock will be displayed.
           JMP Initialization:           ; Fixed entry point of COM programs requires this skip.
</pre>
<dl id="Interrupt"><dt><a href="#top">Interrupt</a> routine</dt><dd><p>New handler for interrupt does the actual TSR's job.
<!---->The far jump at its end chains this handler to previously installed Int08 handlers (if any)
<!---->and, finally, to the  original BIOS handler which sends acknowledgement
<!---->to the interrupt controller 8259 and provides the final IRET from the interrupt.</p>
<p>Interrupt 08 is invoked by hardware timer every 55 ms. As we don't need to update the clock on display
<!---->that often, the update routine will be called only once per 18&nbsp;interruptions.</p>
<h6>Interrupt handlers should perform very fast, without waiting for user interaction
<!---->or huge data manipulation. </h6>
<p>When routine NewInt08 is called by hardware-invoked interruption, CS:IP points to NewInt08,
<!---->other registers are undefined and should be preserved.
<br/>Instruction <code>JMP 0:0</code> near its end (immediate segment:offset in the JMP instruction body)
<!---->will be referred as OldInt08 and replaced with current INT 08 vector taken from the interrupt table
<!---->at installation-time. </p>
<p>Memory between PSP (CS:0) and CS:TsrTop remains permanently resident in memory until reboot.</p>
</dd></dl><pre>
NewInt08 PROC Dist=Far
          PUSHF
          PUSH AX
            MOV AL,[CS:IntCounter]
            INC AL
            MOV [CS:IntCounter],AL
            CMP AL,18
            JB  .Skip:
            CALL Update: ; Once in 18 interruptions (once per second).
 .Skip:   POP AX
          POPF
          JMPF 0:0  ; Continue with older INT 08 handlers.
OldInt08  EQU $-4   ; Previous vector value is kept in the body of JMPF instruction.
         ENDP NewInt08

Update:  PROC Dist=Near ; Inquire the clock and display the time.
          PUSH BX,CX,DX,DI,ES
            MOV [CS:IntCounter],0 ; Reset the counter.
            BiosAPI AH=0x0F       ; Read screen width to AH (40|80|132).
            SHR AX,8
            SUB AX,8      ; Go back 8 characters from the right edge.
            ADD AX,AX     ; Each character on screen takes 2 bytes of memory.
            MOV DI,AX
            MOV AX,0xB800 ; Memory of textmode video screen begins at VA=0xB8000.
            MOV ES,AX     ; ES:DI is now address of videoram to write <kbd>hh:mm:ss</kbd>.
            BiosAPI INT=0x1A,AH=2 ; Get real-time clock. CH=hour, CL=min, DH=sec, BCD.
            MOV AH,%Color ; Videoattribute common for all 8 characters.
            CLD
            MOV AL,CH
            CALL StoBCD:  ; Hours.
            MOV AL,':'
            STOSW         ; Separator.
            MOV AL,CL
            CALL StoBCD:  ; Minutes.
            MOV AL,':'
            STOSW         ; Separator.
            MOV AL,DH
            CALL StoBCD:  ; Seconds.
          POP ES,DI,DX,CX,BX
         RET
        ENDPROC Update:

StoBCD: PROC Dist=Near ; Put BCD-encoded number from AL to video memory ES:DI.
         MOV CH,AL   ; Temporary save.
         SHR AL,4    ; Left digit only.
         OR AL,'0'   ; Convert BCD nibble to a digit character.
         STOSW       ; Put the digit to video RAM.
         MOV AL,CH   ; Restore.
         AND AL,0x0F ; Right digit only.
         OR AL,'0'   ; Convert BCD nibble to a digit character.
         STOSW       ; Put the digit to video RAM.
         RET
        ENDP StoBCD:

IntCounter  DB 0 ; Incremented on every INT 08 invocation, zeroed when it reaches 18.
        ALIGN 16
TsrTop: EQU $    ; Memory between PSP and TsrTop remains resident. The rest is retured to DOS when the program terminates.
</pre>
<dl id="Initialization"><dt><a href="#top">Initialization</a> routine</dt>
<dd>This part of TSR program runs only once, when the program is launched.
<br/>TSRclock is a most primitive skeleton, it doesn't prevent itself
<!---->from being installed multiple times. Program installs itself
<!---->to conventional (low) memory and each tsrclock instance together with its environment segment
<!---->permanently occupies 0x0170 bytes (see
<code>MEM /D</code>). It cannot be uninstalled or installed to high memory above videoram.</dd>
</dl><pre>
Message$ DB "Resident clock installed.",13,10,'$'
Initialization:
         DosAPI AX=0x3508             ; Get previous interrupt vector 08 to ES:BX.
         MOV [OldInt08+0],BX
         MOV [OldInt08+2],ES
         DosAPI AX=0x2508,DX=NewInt08 ; Establish interrupt vector 08 from DS:DX.
         DosAPI AH=9,DX=Message$      ; Show the message in terminal.
         MOV DX,TsrTop                ; Amount of residental memory in bytes.
         SHR DX,4                     ; Convert bytes to paragraphs (OWORDs).
         TerminateStayResident DX     ; Leave DX paragraphs in DOS lower memory.
      ENDPROGRAM tsrclock
</pre>
<!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
