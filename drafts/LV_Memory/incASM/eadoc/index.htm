<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='&euro;ASM file index.htm'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>index.htm manual</title>
</head>
<body class='EADOC' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->

<h1>EuroAssembler Manual</h1><br class="CLEAR"/>
<h2><a class="EXT" href="man_cze.htm">Česká verze tohoto manuálu</a></h2>
<h2><a class="EXT" href="tut_eng.htm">Tutorial - how to write in assembler</a></h2>
<h2><a href="#About">About EuroAssembler &darr;</a></h2>
<h2><a href="#IO">Input/Output &darr;</a></h2>
<h2><a href="#ProgStruc">Structure of &euro;ASM program &darr;</a></h2>
<h2><a href="#Elements">Elements of source &darr;</a></h2>
<h2><a href="#Instructions">Instructions &darr;</a></h2>
<h2><a href="#PgmFormats">Program formats &darr;</a></h2>
<h2><a href="#EaFn">&euro;ASM functions &darr;</a></h2>
<hr/>

<h2 id="About"><a href="#top">&uarr; About EuroAssembler</a></h2>
 <h3><a href="#ProductIdentification">Product identification &darr;</a></h3>
 <h3><a href="#ShortCharacteristic">Short characteristics &darr;</a></h3>
 <h3><a href="#Conventions">Notational typographic conventions &darr;</a></h3>
 <h3><a href="#Why">Why Assembler &darr;</a></h3>
 <h3><a href="#WhyYAA">Why Yet Another Assembler &darr;</a></h3>
 <h3><a href="#WhyEuro">Why EuroAssembler &darr;</a></h3>
 <h3><a href="#Licence">Licence &darr;</a></h3>
 <h3><a class="EXT" href="https://euroassembler.eu/download/#History">History</a></h3>
 <h3><a class="EXT" href="https://euroassembler.eu/download/#Download">Download</a></h3>
 <h3><a href="#Installation">Installation &darr;</a></h3>
<hr/>

<h3 id="ProductIdentification"><a href="#About">&uarr; Product identification</a></h3>
<P>The name of the software is <dfn>EuroAssembler</dfn>.
Please notice that there is no space between <em>Euro</em> and <em>Assembler</em>.
<br/>The name is often abbreviated as <strong>&euro;ASM</strong>.
<br/>In a 7-bit ASCII environment it may also be referred as <strong>EUROASM</strong>
and in some internal identifiers it's just <strong>ea</strong>.
<blockquote>The Euro character <kbd>&euro;</kbd> is available
on a Windows keyboard as <kbd>Alt~0128</kbd> or as HTML entity <kbd>&amp;euro;</kbd>.
</blockquote>

<h3 id="ShortCharacteristic"><a href="#About">&uarr; Short Characteristics</a></h3>

<ul>
<li>&euro;ASM is a macroassembler with an Intel-syntax for IA-32 and x64 AMD&amp;Intel<sup>&trade;</sup> Architecture.
<br/>It also <a href="#EaFn">works</a> as a linker, librarian, object convertor and make-manager.</li>
<li>EUROASM is a 32-bit console application for MS-Windows and for Linux which reads the source text
written in <em>assembly computer language</em> and produces compiled object or executable file, and listing file.</li>
<li>Programs written in &euro;ASM can run on 16-bit, 32-bit or 64-bit operating systems.</li>
<li>&euro;ASM is shipped with its commented <a class="EXT" href="../easource/">source text</a>,
<a class="EXT" href="../maclib/">macrolibraries</a> and
<a class="EXT" href="../objlib/">sample programmes</a> for a quick start.</li>
<li>&euro;ASM is available free of charge.</li>
</ul>
<p>Some features that are rarely seen in other assemblers:</p>
<ul>
<li>More than one source file can be assembled with a single Euroasm invocation.
Each source produces its own listing and object files.
<blockquote><code>euroasm.exe source1.asm, source2.asm, more*.asm</code>
</blockquote></li>
<li>A listing file successfully generated from a previous assembly session can be reused as an &euro;ASM source code again.
The listing format is compatible with assembly source because the hexadecimal dump of the generated code is ignored by the &euro;ASM parser.</li>
<li>&euro;ASM is an iterative multipass macroassembler with full forward-reference support
and partial datatype awareness.
<blockquote>Labels, EQUated symbols, structures may be referred (used) before they are defined (though this is not recommeded).
<samp>|0000:                 |   ; Referring structured memory variable Today which will be defined later.
|0000:C706[1000]E007   |   MOV [Today.Year],2016 ; Put immediate value to WORD memory variable.
|0006:C606[1200]0C     |   MOV [Today.Month],12  ; Put immediate value to BYTE memory variable.
|000B:C606[1300]1F     |   MOV [Today.Day],31    ; Put immediate value to BYTE memory variable.
|0010:                 |
|0010:00000000         |Today  DS Datum ; Definition of a structured symbol whose structure will be declared later.
|0014:                 |
|[Datum]               |Datum STRUC     ; Declaration of structure Datum.
|0000:....             |.Year   DW WORD
|0002:..               |.Month  DB BYTE
|0003:..               |.Day    DB BYTE
|0004:                 |      ENDSTRUC Datum
</samp></blockquote></li>

<li>Assembler instructions can be combined with HTML.
Source lines that begin with <code>&lt;HTML tags&gt;</code> are treated as comments.
This allows to keep the assembly source close to its rich-text documentation.</li>
<li>INCLUDE statements can import either, another source file as a whole, or only its divisions,
which can be specified as a range of lines or as a block delimited with the pseudoinstructions
<code>HEAD</code> and <code>ENDHEAD</code>. Includable interface division <code>HEAD..ENDHEAD</code>
of program module does not need to be kept in a separated header file (such as <q>*.h</q> files in C-language).</li>
<li>Errors and warnings are printed into the standard output and inserted also into the listing, right below the suspicious statement.
Text of the error message is tailored to the actual issue.</li>
<li>&euro;ASM recovers from errors in source text.
The assembly process does not stop at the first discovered error (unless it is
<a href="#MsgSeverity">fatal</a>).</li>
<li>The emitted code always defaults to the shortest form but the programmer may choose a longer variant,
using <a href="#InstructionModifiers">instruction modifiers</a>:
<samp>|00000000:41           | INC ECX
|00000001:41           | INC ECX,CODE=SHORT
|00000002:FFC1         | INC ECX,CODE=LONG
|00000004:             |
|00000004:83D801       | SBB EAX,1
|00000007:83D801       | SBB EAX,1,IMM=BYTE
|0000000A:81D801000000 | SBB EAX,1,IMM=DWORD
|00000010:             |
|00000010:E97D000000   | JMP $+0x82, DIST=SHORT
|## W2401 Modifier "DIST=SHORT" could not be obeyed in this instruction.
|00000015:             |
</samp></li>
<li>Data can be defined either explicitly (using pseudoinstruction D, DB, DW etc),
or with a literal (ad hoc) definition.
<samp>|[DATA]        |[DATA]   ; Switch to data section.
|0000:4578706C~|Explicit DB  "Explicit text definition.$",0
|[CODE]        |[CODE]   ; Switch to code section.
|0020:BA[0000] |         MOV DX,Explicit
|0023:B409     |         MOV AH,9 ; Write explicit string DS:DX to standard output.
|0025:CD21     |         INT 21h  ; Invoke DOS function.
|0027:BA[6400] |         MOV DX,=B"Implicit text definition (literal).$"
|002A:B409     |         MOV AH,9 ; Write implicit string DS:DX to standard output.
|002C:CD21     |         INT 21h  ; Invoke DOS function.
|002E:         |</samp></li>
<li>EuroAssembler supports <em>Advanced vector extension</em> set
including Intel<sup>®</sup> Xeon MVEX and EVEX-encoded AVX-512 instructions.</li>
<li>Beside the usual subprogram blocks <code>PROC..ENDPROC</code> &euro;ASM supports
<a href="#EaFnRfSemiinlineMacro">semiinline procedures</a> <code>PROC1..ENDPROC1</code>,
which are expanded from macro only once, during its first invocation.</li>
<li>&euro;ASM can link object modules (OMF, ELF, COFF) to executable formats (COM, EXE, DLL, ELFX)
as well as to other object modules and libraries.
See the <a class="EXT" href="../eatests/#LinkerCombinations">table</a>
of supported combinations.</li>
<li>Using of dynamically linked functions may specify its DLL during import declaration,
for instance <code>IMPORT RegCloseKey, LIB="user32.dll"</code>.
The import-libraries are not required by the &euro;ASM linker (though they are supported).</li>
<li>Each source file may contain more than one module (program),
each such block <code>PROGRAM..ENDPROGRAM</code> produces its own object or executable file.
A multi-module project source could be kept in one big file, if this is preferred by the author.</li>
<li>Command-line options, which clutter the invocation of many other assemblers and linkers,
are not necessary. If you were to distribute the source of your program, you don't have to specify
how to make it. Executable programs are created with a simple and single <code>euroasm source.asm</code>.</li>
<li>EuroAssembler is written in EuroAssembler, its source code can be <a class="EXT" href="../easource/">reviewed online</a>.</li>
<li id="HelloWorld">The following example creates two variants of a <em>Hello,&nbsp;world!</em> program,
<q>HelloL32.x</q> and <q>HelloL64.x</q>.
Both executable files will be created from this source file <q>hello.asm</q> with a single command <code>euroasm&nbsp;hello.asm</code>.
We may run them in Linux or in its Windows emulator WSL:</li>
<pre>
        EUROASM CPU=x64

HelloL32 PROGRAM Format=ELFX, Entry=Main:, Width=32 ; HelloL32.x works in 32-bit Linux.
 Main:    MOV EAX,4             ; Kernel operation sys_write=4.
          MOV EBX,1             ; File descriptor of the standard output (console).
          MOV ECX,Message       ; Address of the message.
          MOV EDX,SIZE# Message ; Size of the message.
          INT 0x80              ; Invoke the kernel.
          MOV EAX,1             ; Kernel operation sys_exit=1.
          XOR EBX,EBX           ; Returned errorlevel=0.
          INT 0x80              ; Invoke the kernel.
 Message: DB "Hello, world of %^Width bits in Linux!",10
         ENDPROGRAM HelloL32

HelloL64 PROGRAM Format=ELFX, Entry=Main:, Width=64 ; HelloL64.x works in 64-bit Linux.
 Main:    MOV RAX,1             ; Kernel operation sys_write=1.
          MOV RDI,1             ; File descriptor of the standard output (console).
          LEA RSI,[Message]     ; Address of the message.
          MOV RDX,SIZE# Message ; Size of the message.
          SYSCALL               ; Invoke the kernel.
          MOV RAX,60            ; Kernel operation sys_exit=60.
          XOR EDI,EDI           ; Returned errorlevel=0.
          SYSCALL               ; Invoke the kernel.
 Message: DB "Hello, world of %^Width bits in Linux!",10
         ENDPROGRAM HelloL64
</pre>
<p>We could hide most of assembly instruction in macroinstructions from the libraries <q>linapi.htm</q> (32 bit) and <q>linabi.htm</q> (64 bit),
and using literals (=B &quot;Hello...&quot;) for the definition of the printed strings:
</p>
<pre>
         EUROASM CPU=x64

HelloL32 PROGRAM Format=ELFX, Entry=Main:, Width=32 ; HelloL32.x works in 32-bit Linux.
          INCLUDE linapi.htm ; Define 32-bit macros <a class="EXT" href="../maclib/linapi.htm#StdOutput">StdOutput</a> and <a class="EXT" href="../maclib/linapi.htm#TerminateProgram">TerminateProgram</a>.
 Main:    StdOutput =B "Hello, world of %^Width bits in Linux!", Eol=Yes
          TerminateProgram Errorlevel=0
         ENDPROGRAM HelloL32

         %DROPMACRO *        ; Forget macros defined in "linapi.htm".

HelloL64 PROGRAM Format=ELFX, Entry=Main:, Width=64 ; HelloL64.x works in 64-bit Linux.
          INCLUDE linabi.htm ; Define 64-bit macros <a class="EXT" href="../maclib/linabi.htm#StdOutput">StdOutput</a> and <a class="EXT" href="../maclib/linabi.htm#TerminateProgram">TerminateProgram</a>.
 Main:    StdOutput =B "Hello, world of %^Width bits in Linux!", Eol=Yes
          TerminateProgram Errorlevel=0
         ENDPROGRAM HelloL64
</pre>
<p>A similar example for MS-Windows:</p>
<pre>
        EUROASM CPU=x64, SIMD=Yes

HelloW32 PROGRAM Format=PE, Entry=Main:, Width=32 ; HelloW32.exe works in 32-bit and 64-bit Windows.
         INCLUDE winapi.htm ; Define 32-bit macros <a class="EXT" href="../maclib/winapi.htm#WinAPI">WinAPI</a> and <a class="EXT" href="../maclib/winapi.htm#TerminateProgram">TerminateProgram</a>.
   Main: WinAPI MessageBox,0,="Hello, world of %^Width bits in Windows!",="Title",0, Lib=user32.dll
         TerminateProgram Errorlevel=0
        ENDPROGRAM HelloW32

        %DROPMACRO *        ; Forget macros defined in "winapi.htm".

HelloW64 PROGRAM Format=PE, Entry=Main:, Width=64 ; HelloW64.exe works in 64-bit Windows.
         INCLUDE winabi.htm ; Define 64-bit macros <a class="EXT" href="../maclib/winabi.htm#WinABI">WinABI</a> and <a class="EXT" href="../maclib/winabi.htm#TerminateProgram">TerminateProgram</a>.
   Main: WinABI MessageBox,0,="Hello, world of %^Width bits in Windows!",="Title",0, Lib=user32.dll
         TerminateProgram Errorlevel=0
        ENDPROGRAM HelloW64
</pre>

</ul>

<h3 id="Conventions" title="Typographic conventions"><a href="#About">&uarr; Notational typographic conventions</a></h3>
<p>This manual covers the programmer's guide, examples,  language references and implementation remarks.
Different styles are used to identify those elements.</p>
<p>The background color of the element in the web page helps to distinguish between</p>
<div style="background-color:white;padding:3px;">
 &nbsp; <span class="EADOC" title="class=&quot;EADOC&quot;">&nbsp;this manual and links</span>,&nbsp;
<span class="MACLIB" title="class=&quot;MACLIB&quot;">&nbsp;macroinstruction libraries </span>,&nbsp;
<span class="EASOURCE" title="class=&quot;EASOURCE&quot;">&nbsp;&euro;ASM source files </span>,&nbsp;
<span class="EATESTS" title="class=&quot;EATESTS&quot;">&nbsp;test files </span>,&nbsp;
<span class="OBJLIB" title="class=&quot;OBJLIB&quot;">&nbsp;objects and samples </span>.</div>

<p id="Navigation" title="Navigation conventions">
<p><a href="#Navigation" title="&lt;a&gt;">
Dashed hyperlinks</a> refer to another paragraph within the same page.</p>
<p><a class="EXT" href="#Navigation" title="&lt;a class=&quot;EXT&quot;&gt;">
Underlined hyperlinks</a> navigate to a different HTML page of this site.</p>
<p>Underlined <a class="EXTL" href="#Navigation" title="&lt;a class=&quot;EXTL&quot;&gt;">
hyperlinks with Link icon</a> navigate to signpost page <code>Links</code> with external references.</p>
<p>Underlined <a class="EXTW" href="https://www.google.com" title="&lt;a class=&quot;EXTW&quot;&gt;">
hyperlinks with Exit icon</a> navigate outside EuroAssembler website,
you may want to open them in a new tab or window.</p>

<p>The contents of this <strong>manual</strong> are organized in chapters with a <strong>tree structure</strong>.</p>
<h2><a href="#top">&uarr; Title</a></h2> Up-arrow near the chapter title is a link which navigates
from the Title <b>one level higher</b>.
<br class='CLEAR'/>
<h2><a href="#top">Title &darr;</a></h2> Down-arrow following the title navigates
from the Title downward to the <b>actual text</b>.<br class='CLEAR'/>

<h6 title="&lt;h6&gt;">Statements and rules which are worth remembering are marked with a bulb icon.</h6>
<p><dfn title="&lt;dfn&gt;">Definitions</dfn> of new terms is written in blue bold <i>italics</i>.</p>
<blockquote title="&lt;blockquote&gt;">
Implementation details, discussions and less important personal remarks
are printed with smaller font.</blockquote>

<p><q title="&lt;q&gt;">File names</q> are emphasized in quotes.</p>
<p>Characters used in <kbd title="&lt;kbd&gt;">text</kbd> have white background.</p>
<p>Short piece of <code title="&lt;code&gt;">source code</code> is displayed in a monospace font, black on yellow.</p>
<pre title="&lt;pre&gt;">; Longer examples of source code in this manual are presented in a box.
; They may have more lines.
; <del title="&lt;del&gt;">Errorneous, negative or wrong examples</del> are overstriked.
</pre>
<div class="MACLIB"><dl class="PRE" title="&lt;dl class=&quot;PRE&quot;&gt;"><dt>&nbsp;</dt>
<dd class="PRE">The examples of code in macrolibraries and &euro;ASM sources are ignored by EuroAssembler,
 because their physical lines begin with an HTML tag marker <kbd>&lt;</kbd>.</dd></dl>
</div>
<samp title="&lt;samp&gt;">               <abbr title="&lt;abbr&gt;">explaining metainformation &#x2510;</abbr>
|0000:0000| ; &euro;ASM printed output (listing) is displayed black on white background.
|0000:0000| ; It contains assembled machine code, copy of source instructions
|0000:0000| ; and error messages.
</samp>

<h3 id="Why"><a href="#About">&uarr; Why Assembler</a></h3>
<p><dfn>The assembly programming language</dfn> (ASM) gives programmers the
maximal possible control of emitted machine code.
Of course, having to write every instruction for the <dfn>Central Processing Unit</dfn> (CPU)
by hand is very tedious. That is why <dfn>subprograms</dfn> were invented:
<strong>procedures, functions and macroinstructions</strong>.
<br/>A subprogram is like a <em>black box</em> with a documented purpose, input and output.
The main difference between our own ASM subprogram and a HLL function is that when it
doesn't work as expected, we can easily trace down the mistake, stepping on each
machine instruction in a debugger, and that there is no-one else to blame but us.</p>

<p>ASM subprograms can do the same job as orders of <dfn>higher level languages</dfn> (HLL)
or invokations of <dfn>operating system</dfn> (OS) <dfn>application programming interface</dfn> (API).
The EuroAssembler macrolanguage allows to prepare in advance macros tailored
to the problem and use them to solv a task, which are similar to functions from OS or HLL libraries,
and they allow to develop programs in ASM almost as rapidly as in HLL.</p>

<p>The advantage of mastering the assembly language manifests when we are challenged
with a third-party program that is without its source code available, or when some badly written program
throws an exception and exits. DrWatson, debuggers or disassemblers
can only show the alien code converted to assembly instructions.
People who never met ASM will hardly know how to interpret the disassembled
code, while ASM programmer will feel like a fish in its natural environment.</p>

<blockquote>The main disadvantage of assemblers is a lack of standardized libraries
which unify programming in HLL such as C or Java.
In one hand, many ASM programmers build their own,
which makes their sources not portable unless the necessary libraries are
shipped together with source. On the other hand, making a library with our own functions
is the best method how to remember all the function and parameter names,
and on how to learn a lot about computers and operating systems.
<br/>The EuroAssembler package <q>euroasm.zip</q> contains several <a class="EXT" href="../maclib/">macrolibraries</a>
for a quick start and for inspiration.</blockquote>

<h6>Assembler is an universal construction kit. You may program
whatever is possible to imagine, but first you have to prepare
the building tools.</h6>

<table id="Phases" title="Assembly-time"><caption>Phases of program creation</caption>
<tr><th>Phase</th><th>Used tool</th></tr>
<tr><td>design-time</td><td>imagination</td></tr>
<tr><td>write-time</td><td>text editor</td></tr>
<tr><td>assembly-time</td><td>assembler</td></tr>
<tr><td>combine-time</td><td>linker</td></tr>
<tr><td>link-time</td><td>linker</td></tr>
<tr><td>load-time</td><td>operating system loader</td></tr>
<tr><td>bind-time</td><td>operating system loader</td></tr>
<tr><td>run-time</td><td>processor</td></tr>
</table>

<h3 id="WhyYAA"><a href="#About">&uarr; Why Yet Another Assembler</a></h3>
<p>Dissatisfation with available tools is one of the reasons why
some programmers want to invent their own language.
<blockquote><p>
And last but not least, creating an assembler is a very interresting challenge.
An incomplete list of assemblers and other tools, that I had the pleasure
to come into contact with, is presented at the link
<a class="EXTL" href="../eadoc/links.htm#Assemblers">[Assemblers]</a>
and <a class="EXTL" href="../eadoc/links.htm#UsefulTools">[UsefulTools]</a>.</p>
<p>The first assembler I met when I started to flirt with the assembly language in the early 80's,
was IBM's FDOS for S360 mainframe computers <a class="EXTL" href="../eadoc/links.htm#HLASM">[HLASM]</a>.
That was a very sofisticated product with advanced features such as sections, keyword operands, literals,
with a macro language which was able to manipulate not only
with the generated machine statements, but also with its own macro variables
and their names.</p>
<p>I missed many of those features in assemblers for the Intel architecture.
Some of them brought new ideas but none seemed ideal for me.
<a class="EXTL" href="../eadoc/links.htm#NASM">[NASM]</a> ver.0.99 was quite good,
in fact the first bootstrap version of &euro;ASM
was written in it, but I was irritated when it wasn't able to automatically
select SHORT or NEAR distance jumps and had other design flaws, such as not expanding
preprocessing variables in quoted strings.</p>
<p>I always wondered why constant EQU symbols had to be declared
before the first use. Why I can't declare a macro in a macro.
How to solve situations when file A includes files B and C,
and file C also includes file B, duplicating its definitions.</p>
<p>I don't like a language which is cluttered up with free space.
In <a class="EXTL" href="links.htm#HLASM">HLASM</a> a space in the operand list signalised that everything
up to the end of the punched card should be ignored.
&euro;ASM isn't that strict in this <em>horror vacui</em>, in fact white spaces
may be put anywhere between language elements to improve readability.
However, spaces are almost never <em>required</em> by syntax.</p>
<p>&euro;ASM does not use English word modifiers such as
<code>SHORT, NEAR, DWORD PTR, NOSPLIT</code> which are identified by their value only.
Instead, it prefers the <dfn>Name=Value</dfn> paradigma with keyword <em>instruction modifiers</em>
such as <code>DATA=QWORD,IMM=BYTE,MASK=K5,ZEROING=ON</code>, which remove ambiguity
and replace ugly decorators proposed in the Intel documentation.
</p>
</blockquote>

<h3 id="WhyEuro"><a href="#About">&uarr; Why <dfn>Euro</dfn>Assembler</a></h3>
<ol>
<li><dfn>Euro</dfn> because it comes from
<a class="EXTW" href="https://www.czechia-heart-of-europe.com">
Czechia, the heart of Europe</a>.</li>
<li>Both Europe and &euro;ASM are multilingual, as it supports national characters
in identifiers and strings.</li>
<li><kbd>&euro;</kbd> is one of the few characters left unoccupied
among many <a class="EXTL" href="../eadoc/links.htm#Assemblers">*ASM assemblers</a> :-) </li>
</ol>

<h3 id="Licence" title="Licence"><a href="#About">&uarr; Licence</a></h3>
<p>Permission to use EuroAssembler is granted to everybody who obeys this Licence.
<br/>There are <strong>no restrictions</strong> on purpose and scope of applications created with this tool.
It may be used in private, educational or commercial environments freely.</p>
<p>EuroAssembler is provided <strong>free of charge</strong> <em>as-is</em>, without any warranty guaranteed by its author.</p>
<p>This software <strong>may be redistributed</strong> in unmodified zipped form, as downloaded from
<a class="EXT" href="https://euroassembler.eu/download/">EuroAssembler.eu</a>.
No fee may be requested for the right to use this software.</p>
<blockquote>You may disseminate <q>euroasm.zip</q> on other websites, repositories, FTP archives, compact disks
and similar media. Please be sure to always distribute the latest available &euro;ASM version.
</blockquote>
<p><a class="EXT" href="/easource/">Source code</a> of EuroAssembler was written
by <em>Pavel Šrubař</em>, AKA <a class="EXTW" href="https://vitsoft.info/about.me/"><em>vitsoft</em></a>, and it is <b>copyrighted</b> as so.</p>
<p><a class="EXT" href="/maclib/">Macrolibraries</a> and <a class="EXT" href="/objlib/">sample projects</a>
are released as <b>public domain</b> and they may be modified freely.</p>
<blockquote>I cannot recommend modifying the libraries, though, because they may be changed in future releases
of &euro;ASM and your enhancements would have been overwritten. Create your own files with vacant names instead.
</blockquote>
<p><strong>You may modify</strong>  &euro;ASM source code for the sole purpose to fix a bug
or to enhance it with new function, but <strong>you may not distribute</strong> such modified software.
It may only be used by you on the same computer where it was edited, reassembled and linked.</p>
<blockquote>EuroAssembler is not open source. I don't want to fork &euro;ASM developement into a bazaar of incompatible versions, where each branch
provides different enhancements. Please propose your modifications to the author or to <a class="EXT" href="https://euroassembler.eu/forum/">
&euro;ASM forum</a> instead, so it might be incorporated in future releases of EuroAssembler.</blockquote>

<h3 id="Installation" title="Installation of &euro;ASM"><a href="#About">&uarr; Installation</a></h3>
<p>The distribution file <q>euroasm.zip</q> contains folders and files as listed on the
<a class="EXT" href="../sitemap.htm">Sitemap</a> page.
The modification time of all files is equally set to the nominal release time.
All file names are in lower case (Linux convention) and in 8.3 size (DOS convention),
so any old DOS utility can be used for unpacking.</p>
<p>Choose and create <dfn> EuroAssembler home directory</dfn>,
for instance <q>C:\euroasm</q> on Windows or <q>~/euroasm</q> on Linux, change to it
and unzip the downloaded <q>euroasm.zip</q>. You should get the directory structure
as seen on the <a class="EXT" href="../sitemap.htm">Sitemap</a>.</p>

<p>If you are on <strong>Linux</strong>, move or copy the executable <q>euroasm.x</q>
to some folder from system environment <code>$PATH</code>, for instance with
<code class="MSG">sudo mv euroasm.x /usr/local/bin/euroasm</code>.
When it is run for the first time, for instance with <code class="MSG">sudo euroasm</code>,
it will try to create configuration file <q>/etc/eurotool/euroasm.ini</q>.</p>

<p>If you are on <strong>Windows</strong>, move or copy the executable <q>euroasm.exe</q>
with elevated rights to some folder from system environment <code>%PATH%</code>, for instance with
<code class="MSG">copy euroasm.exe %windir%</code>.
When it is run for the first time, for instance with <code class="MSG">euroasm.exe</code>,
it will try to create configuration file <q>%AppData%\eurotool\euroasm.ini</q>.</p>

<p>EuroAssembler should be able to run from everywhere with the command <code>euroasm</code>.
You can tailor the global configuration file with a plain-text editor.</p>
<blockquote>You may want to replace relative IncludePath= and LinkPath=
in <code>[EUROASM]</code> section with an absolute path identifying the &euro;ASM home directory.
<br/>In <code>[PROGRAM]</code> section you can specify your preferred
target format, for instance <code>Format=PE, Subsystem=CON</code> and <code>Width=32</code>.
You could also replace <code>IconFile=&quot;euroasm.ico&quot;</code> with nothing or with
your preferred personal icon, copied to <q>objlib</q> subfolder.</blockquote>
<p>For the (not-recommended) bare-bone <strong>minimal installation</strong>
you are now done and you could erase the whole home directory now.
Yes, the executable <q>euroasm</q> itself does not need any other supporting files,
environment or registry modification.</p>
<p>If you prefer to read this documentation in other language</strong>,
rename the default English version of this manual <q>eadoc\index.htm</q> to <q>eadoc\man_eng.htm</q>
and then rename the chosen available human language translation, e.g. <q>eadoc\man_cze.htm</q>, to <q>eadoc\index.htm</q>.</p>
<p>For a <strong>developement installation</strong> go to the home directory
and unzip developer-scripts from the subarchive <q>generate.zip</q>.
You will also need webserver and PHP (version 5.3 or higher) installed on your localhost.</p>
<p>Most of EuroAssembler files are in HTML format, you may want
to incorporate &euro;ASM into your <strong>local web server</strong>, if you run it on your localhost computer. </p>
<blockquote><p>In my Apache installation I added the following paragraph
to the <q>httpd.conf</q> or <q>apache2.conf</q>:</p>
<pre>&lt;VirtualHost *:80&gt;
    DocumentRoot C:/euroasm/
    ServerName euroasm.localhost
&lt;/VirtualHost&gt;</pre>
<p>I appended the statement <code>127.0.0.1 euroasm.localhost</code>
into the file <q>%SystemRoot%/SYSTEM32/drivers/etc/hosts</q>.
Now I can write <code>euroasm.localhost</code> into address line of my internet browser
and explore the &euro;ASM documentation and other files locally.</p>
</blockquote>
<hr/>
<h2 id="IO"><a href="#top">&uarr; Input/Output</a></h2>
<h3><a href="#StandardIO">Standard streams &darr;</a></h3>
<h3><a href="#OtherIO">Other I/O &darr;</a></h3>
<h3><a href="#Messages">Messages &darr;</a></h3>
<h3><a href="#FilesIO">Input/Output files &darr;</a></h3>
<hr/>
<p>Computer programs exchange information with users through various channels:
standard streams, command-line parameters, environment variables,
errorlevel value, disk files and devices.</p>
<h3 id="StandardIO"><a href="#IO">&uarr; Standard streams</a></h3>
<p>The basic form of communication between programs and human user
has the form of characters streams, which are by default directed to the console terminal where was
the program launched from. They may also be redirected to a disk file
or device driver with command-line operators <kbd>&gt;</kbd>, <kbd>&gt;&gt;</kbd>,
<kbd>&lt;</kbd>, <kbd>|</kbd>.</p>
<p><strong>Standard input</strong> is not used in &euro;ASM.</p>
<p><strong>Standard output</strong> prints warnings, errors and informative <a href="#Messages">messages</a> produced by &euro;ASM.
</p>
<p><strong>Standard error output</strong> is not used in &euro;ASM.</p>
<h3 id="OtherIO"><a href="#IO">&uarr; Other I/O</a></h3>
<p><strong>Command-line parameters</strong> are not used.
&euro;ASM assumes that everything on the command line is the main source file name(s) intended to assemble.
All options controlling the assembly &amp; link process are defined in
the <dfn>configuration files <q>euroasm.ini</q></dfn> or directly in the source file itself.</p>
<blockquote>In fact there are semi-undocumented EUROASM options which are recognized in command-line,
however the preferred place for EUROASM options is the configuration file or the source file.
Command-line options are employed in <a class="EXT" href="../eatests/#Launch">test examples</a>
to suppress some variable informative messages, and its use should be kept to a minimum.</blockquote>
<p><strong>Environment variables</strong> are not used in &euro;ASM.</p>
<p>Environment variables may be incorporated into the source at assembly-time using
the pseudoinstruction <a href="#pcSETE">%SETE</a>. Of course, it is also possible
to read environment variables at run-time with the corresponding API call,
such as <code>GetEnvironmentVariable()</code>.</p>
<p>&euro;ASM does not use any <strong>other devices</strong> (I/O ports, printers, sound cards, graphic adapters, etc.)
at assembly-time.</p>

<h3 id="Messages" title="Messages"><a href="#IO">&uarr; Messages</a></h3>
<p>Important information detected by EuroAssembler during its activity
is published in the form of short text messages.
They are written on standard output (console window) and to the listing file.
</p>

<h4><a href="#MsgSeverity">Message severity &darr;</a></h4>
<h4><a href="#MsgInOutput">Messages in standard output &darr;</a></h4>
<h4><a href="#MsgInListing">Messages in listing &darr;</a></h4>
<p>Each message is identified by a combination of a capital letter
followed by four decimal digits.
The complete text of messages is defined in source file <a class="EXT"
href="../easource/msg.htm#MsgTexts">msg.htm</a>.</p>
<p>The letter prefix and the first digit (0..9) declare message severity.
The final <dfn id="Errorlevel" title="Errorlevel">errorlevel value</dfn>, which <q>euroasm.exe</q> terminates with,
is equal to the highest message severity encounterred during the assembly session.</p>
<table id="MsgSeverity" title="Message severity"><caption>Message severity</caption>
<tr><th>Type of<br/>message</th><th>Prefix</th><th>Identifier<br/>range</th><th>Severity</th><th>Search<br/>marker</th></tr>
<tr><td>Informative</td><td>I</td><td>I0000..I0999</td><td>0</td><td><kbd>|#</kbd></td></tr>
<tr><td>Debugging</td><td>D</td><td>D1000..D1999</td><td>1</td><td><kbd>|#</kbd></td></tr>
<tr><td>Warning</td><td>W</td><td>W2000..W3999</td><td>2..3</td><td><kbd>|##</kbd></td></tr>
<tr><td>Nonsuppressible warning</td><td>W</td><td>W4000..W4999</td><td>4</td><td><kbd>|##</kbd></td></tr>
<tr><td>User-defined error</td><td>U</td><td>U5000..U5999</td><td>5</td><td><kbd>|###</kbd></td></tr>
<tr><td>Error</td><td>E</td><td>E6000..E8999</td><td>6..8</td><td><kbd>|###</kbd></td></tr>
<tr><td>Fatal</td><td>F</td><td>F9000..F9999</td><td>9</td><td><kbd>|###</kbd></td></tr>
</table>
<p>EuroAssembler is verbose by default, but it may be totally silenced when launched with the parameter
<code>NOWARN=0000..0999</code>, and if no error occured in source.</p>
<p>Warnings usually do not prevent the compiled target from execution,
they are meant as a friendly reminder that the programmer might have forget about something
or has made a typo mistake.</p>
<p>Messages with a severity level tanging from 5..8 indicate that some statements were not compiled due to error.
Although the target file may be valid, it will probably not work as intended.</p>
<p>Fatal errors indicate an interaction failure with the operating system,
resource exhaustion, file errors or internal &euro;ASM errors.
The target and listing file might have not been written at all.</p>
<blockquote>Informative, debugging and warning messages in the range I0000..W3999 can
be suppressed with EUROASM option <a href="#WARNeq">NOWARN=</a>,
but this <em>ostrich-like policy</em> is not a good idea. It's always better
to fix the root cause of the message. If you intend to publish your code,
it should always assemble with an errorlevel&nbsp;0.</blockquote>

<h4 id="MsgInOutput" title="Output messages"><a href="#Messages">&uarr; Messages on standard output</a></h4>
<p>A typical message consists of its identifier followed by the actual tailored message text.
When it is printed on standard output, the text is accompanied by a <dfn>position indicator</dfn>
in the form of a quoted file name followed by a physical line number in curly brackets, for instance
<pre>E6601 Symbol "UnknownSym" mentioned at "t1646.htm"{71} was not found. "t1646.htm"{71}
<abbr>&#x25B2;&#x25B2;&#x25B2;&#x25B2;&#x25B2;                                                                 &#x25B2;&#x25B2;&#x25B2;&#x25B2;&#x25B2;&#x25B2;&#x25B2;&#x25B2;&#x25B2;&#x25B2;&#x25B2;&#x25B2;&#x25B2;&#x25B2;&#x25B2;
Identifier                                                         position indicator</abbr></pre>
<p>Usually there is just one position indicator per message, but
when the error was discovered in the macro expansion phase, another indicator
is added which determines the line in the macro library.
In case of a macro expanded in another macro, position indicators will be further chained.

<h4 id="MsgInListing" title="Listing messages"><a href="#Messages">&uarr; Messages in listing</a></h4>
<p>The messages printed to the listing file have a slightly different format.
The position indicator is omitted, because they are inserted just below the source
line which triggered the error:</p>
<samp>|002B:         | MOV SI,UnknownSym: ; E6601 expected.
|### E6601 Symbol "UnknownSym" mentioned at "t1646.htm"{71} was not found.
<abbr>&#x25B2;&#x25B2;&#x25B2;&#x25B2;
marker</abbr></samp>
<p>The message text is prefixed with a <dfn id="MsgSearchMarker" title="Message search marker">
search marker</dfn> which helps to find messages in listing.</p>
<blockquote><p>So you can use the internal function <em>Find/FindNext</em> <code>(Ctrl-F)</code>
of the editor or viewer used to examine the file listing.
<br/>As amatter of fact &euro;ASM syntax never uses multiple pound characters <kbd>##</kbd>,
so the <em>search marker</em> is unique in listing and it helps to skip (filter out)
from one error|warning to the next.
<br/>You could also try the specialized <a class="EXT" href="../prowin32/lstview.htm">&euro;ASM listing viewer</a>
distributed as one of the sample projects.
</blockquote>
<p>Debugging messages <code>D1???</code> produced by the pseudoinstruction
<a href="#pcDISPLAY">%DISPLAY</a> are published even when they are placed in false
<a href="#pcIF">%IF</a> branches or in blocks commented-out by
<a href="#pcCOMMENT">%COMMENT..%ENDCOMMENT</a>.</p>
<p>The listing file is created only during the final assembly pass,
and informative messages are not printed to listing at all,
except for informative linker messages in the <code>I056?</code> range.</p>

<hr/>
<h3 id="FilesIO"><a href="#IO">&uarr; Input/Output files</a></h3>
<h4><a href="#IniFile">Configuration file &darr;</a></h4>
<h4><a href="#SourceFile">Source file &darr;</a></h4>
<h4><a href="#ObjectFile">Object file &darr;</a></h4>
<h4><a href="#ListingFile">Listing file &darr;</a></h4>
<h4><a href="#FilePath">File path &darr;</a></h4>
<p>There are two kinds of <strong>input</strong> files which &euro;ASM reads: <dfn>configuration</dfn>
and <dfn>source</dfn>.</p><p>There are two kinds of <strong>output</strong> files which &euro;ASM writes:
<dfn>object</dfn> and <dfn>listing</dfn>.</p>
<h6>If the output file already exists, &euro;ASM will overwrite it without warning.</h6>

<h4 id="IniFile"><a href="#FilesIO">Configuration file</a></h4>
<p>The configuration file, which has the immovable (predetermined) name <q>euroasm.ini</q>, specifies
default options for assembler. &euro;ASM queries two configuration files with identical name and structure:
global and local.</p>
<p>A <strong>global configuration file in Windows</strong> version is located in the file
<q>%AppData\eurotool\euroasm.ini</q> and it is processed once after &euro;ASM
has started. If the file does not exist, &euro;ASM tries to create it with
the factory-default contents.</p>
<p>Similary <strong>global configuration file in Linux</strong> version is located in the file
<q>/etc/eurotool/euroasm.ini</q> and it is processed once after &euro;ASM
has started. If the file does not exist, &euro;ASM tries to create it with
the factory-default contents.</p>

<p>The <strong>local configuration file</strong> is searched for in the same directory as the
actual source file. If more than one source is specified at the command-line,
local configuration files are read each time when the actual source gets processed.
<br/>Local <q>euroasm.ini</q> is not automatically created by &euro;ASM,
you may need to copy or clone the global file manually, and eventually erase unchanged or unused options
from the local configuration file for better performance.</p>
<blockquote>Example of command line which assembles two sources:
<br/><code>euroasm Source1.asm D:\Temp\Source2.asm</code>
<br/>EuroAssembler will try to read its configuration from three files:
<code>C:\Users\<em>login</em>\AppData\Roaming\eurotool\euroasm.ini</code>,
<code>.\euroasm.ini</code>,
<code>D:\Temp\euroasm.ini</code>.
</blockquote>
<p>The initial contents of configuration file, which is built-in in <q>euroasm.exe</q>
and <q>euroasm.x</q> as factory-defaults, are defined in <a class="EXT" href="../objlib/euroasm.ini">
objlib/euroasm.ini</a>. There are two sections in the file:
<code>[EUROASM]</code> and <code>[PROGRAM]</code>.</p>
<p>The former specifies parameters for &euro;ASM itself, such as
CPU generation, what information should go to the listing file,
which warnings should be suppressed etc. The parameters from [EUROASM]
section of the configuration file can be redefined later in the source
with the <a href="#EUROASM">EUROASM</a> pseudoinstruction, where you will find
detailed explanation for each one of the parameters.</p>
<p>[PROGRAM] section of configuration file specifies the default working parameters
of program which is to be created by &euro;ASM, for instance the memory model,
format and name of the object file etc. These parameters can be modified further
with the <a href="#PROGRAM">PROGRAM</a> pseudoinstruction.</p>
<p>The configuration parameters order is not important.
Names of the parameters are case insensitive.
The parameters with a boolean value accept any of the predefined enumerated tokens such as
<code>ON, YES, TRUE, ENABLE, ENABLED</code> as <em>true</em>
and <code>OFF, NO, FALSE, DISABLE, DISABLED</code> as <em>false</em>.
They may also accept numeric expressions which are evaluated as boolean.</p>
<blockquote>When you give away your programs source code written in EuroAssembler,
you don't have to specify which comand-line parameters were used to compile and link,
because they can be declared in the source itself. A typical &euro;ASM source program begins with
configuration pseudoinstruction, such as <code> EUROASM AUTOALIGN=YES,CPU=PENTIUM</code>,
so it is easy to tell in which assembler was the program written.
<br/>As a developer of program written in EuroAssebler, you shouldn't rely
that users of your distributed source will have the same contents of
<q>euroasn.ini</q> as you have. Specify all important settings in the beginning
of the published source.
Local configuration file is convenient during the development phase, when sources
in the same directory do not have to explicitly specify all EUROASM and PROGRAM parameters.
</blockquote>
<p>The EuroAssembler options and directives can be defined in the configuration files
and in the source files (by the pseudoinstruction <a href="#EUROASM">EUROASM</a>).
They have the following order of precedence in their processing:</p>
<ol><li>When euroasm.exe starts, its options are already defined with
built-in <strong>factory defaults</strong>.</li>
<li>&euro;ASM looks at the <strong>command-line</strong>; if some EUROASM keyword options were
detected here, they overwride the current options in charge (factory defaults).</li>
<li>&euro;ASM looks for the <strong>global configuration file</strong>
and reapplies its options.</li>
<li>The <strong>command-line options</strong> are reapplied again (step 2 is repeated).</li>
<li>Then &euro;ASM looks for source filename(s) at the command-line,
and if a <strong>local configuration file</strong> exists in the same
directory, it is processed and applied to the current configuration derived from the previous steps.</li>
<li>Source file is now assembled. For each <strong>pseudoinstruction EUROASM</strong>
found in the source that definition overwrites current working options.</li>
<li>If another source file is provided at the command-line level in the same assembly session,
&euro;ASM restores configuration which was saved at the end of step 4
and then continues from step 5.</li>
</ol>

<h4 id="SourceFile"><a href="#FilesIO">&uarr; Source file</a></h4>
<p>The source file contains the instructions to be assembled, usually it is a plain-text file
or an HTML file arranged for &euro;ASM. The file name will be provided as a command-line parameter
of the command <code>euroasm</code>. The source file may be identified with an absolute path in the filesystem, e.g.
<code>euroasm /user/home/euroasm/MyProject/MySource.asm</code>,
or with a relative or omitted path, which will be related to the current shell or command line path.</p>
<p>The structure and syntax of source text, which &euro;ASM is able to assemble and link,
is described <a href="#ProgStruc">further</a> down in this document.</p>

<h4 id="ObjectFile"><a href="#FilesIO">&uarr; Object file</a></h4>
<p>The main purpose of programming is to obtain the target file from the source code.
The target file may be an <dfn>object module</dfn>
or a <dfn>library</dfn> linkable to other files, or a <dfn>binary file</dfn> for special purposes,
or an <dfn>executable file</dfn>.</p>
<p>The format of the output file is specified by the PROGRAM parameter FORMAT=.
Their layouts were standardized by their creators many, many years ago. For more details about supported output formats see the chapter
<a href="#PgmFormats">Program formats</a>.</p>
<p>The final name of the target file is determined by the label used in the previously described pseudoinstruction PROGRAM,
and it is appended with its default extension depending on program format. The target name is not necessarily derived
from the source filename, as in many other assemblers.
For instance, if the source code file has statement <code>Hello PROGRAM FORMAT=COM</code>, its output file will be
created in the current directory with the name <q>Hello.com</q>, no matter what the source file is named.
The default target name can be changed by the PROGRAM parameter <a href="#OUTFILEeq">OUTFILE=</a>.
If the OUTFILE= name is specified with relative or omitted path, current shell directory is assumed.</p>

<h4 id="ListingFile"><a href="#FilesIO">&uarr; Listing file</a></h4>
<h5><a href="#DumpParameters">Dump parameters &darr;</a></h5>
<h5><a href="#DumpSeparators">Dump separators &darr;</a></h5>
<h5><a href="#DumpDecoration">Dump decoration &darr;</a></h5>
<h5><a href="#ListParameters">List parameters &darr;</a></h5>
<p>A <dfn>listing</dfn> file is a plain text file with two columns where EuroAssembler logs its activity:</p>
<ol><li>The result of assembly of each statement is hexadecimally displayed in the <dfn>dump column</dfn>.</li>
<li>Statements, which were processed in the previous step, are copied to the <dfn>source column</dfn>.</li></ol>
<p>The name of the listing is determined by the name of source file, which is then appended an <b>.lst</b> extension,
and it is created in the source file directory.
<br/>The default listing filename and location might be changed
with the EUROASM parameter <a href="#LISTFILEeq">LISTFILE=</a>.</p>
<h5 id="DumpParameters" title="Dump parameters"><a href="#ListingFile">&uarr; Dump parameters</a></h5>
<p>Let's create the source file <q>Hello.asm</q> with the following contents:</p><pre>
      EUROASM DUMP=ON,DUMPWIDTH=18,DUMPALL=YES
Hello PROGRAM FORMAT=COM,LISTLITERALS=ON, \
              LISTMAP=OFF,LISTGLOBALS=OFF
       MOV DX,=B"Hello, world!$"
       MOV AH,9
       INT 21h
       RET
      ENDPROGRAM Hello
</pre>
<p>Submitting the file to EuroAssembler with the command
<code>euroasm Hello.asm</code>
will create the listing file <q>Hello.asm.lst</q>.
<p>The width of the dump column expressed in characters can be specified with the EUROASM option <a href="#DUMPeq">DUMPWIDTH=</a>.
Other EUROASM options which control the dump column are the boolean <a href="#DUMPeq">DUMPALL=</a>
and <a href="#DUMPeq">DUMP=OFF</a>, which can suppress the dump column completely.</p>
<samp><abbr>|&lt;-Dump column--&gt;|&lt;--Source column--------
&lt;--DumpWidth=18--&gt;</abbr>
|                |      EUROASM DUMP=ON,DUMPWIDTH=18,DUMPALL=YES
|                |Hello PROGRAM FORMAT=COM,LISTLITERALS=ON, \
|                |              LISTMAP=OFF,LISTGLOBALS=OFF
|[COM]           ::::Section changed.
|0100:BA[0801]   |       MOV DX,=B"Hello, world!$"
|0103:B409       |       MOV AH,9
|0105:CD21       |       INT 21h
|0107:C3         |       RET
|[@LT1]          ====ListLiterals in section [@LT1].
|0108:48656C6C6F =B"Hello, world!$"
|010D:2C20776F72 ----Dumping all. <abbr>(because of DUMPALL=YES)</abbr>
|0112:6C64212400 ----Dumping all.
|                |      ENDPROGRAM Hello
<abbr>                 &#x25B2;
                 column separator</abbr></samp>

<h5 id="DumpSeparators" title="Dump separators"><a href="#ListingFile">&uarr; Dump separators</a></h5>
<p>The dump column on the left side always starts with the <em>machine comment indicator</em>
(pipe character <kbd>|</kbd>) and it is terminated with a <em id="ListingColumns" title="Listing columns">
listing column separator</em>, which determines the origin of this line.</p>
<table><caption>Listing column separators</caption>
<tr><th>Character</th><th>Function</th></tr>
<tr><td><kbd>|</kbd> (pipe)</td><td>Termination of a machine comment. Used in ordinary statements, which can be reused as &euro;ASM source.</td></tr>
<tr><td><kbd>!</kbd> (exclamation)</td><td>Copy of the source line with expanded preprocessing %variables (when <code>LISTVAR=ENABLED</code> is used).</td></tr>
<tr><td><kbd>+</kbd> (plus)</td><td>Source line generated in %FOR,%WHILE,%REPEAT expansion (when <code>LISTREPEAT=ENABLED</code> is used).</td></tr>
<tr><td><kbd>+</kbd> (plus)</td><td>Source line generated in %MACRO expansion (when <code>LISTMACRO=ENABLED</code> is used).</td></tr>
<tr><td><kbd>:</kbd> (colon)</td><td>Inserted listing line to display a changed [section].</td></tr>
<tr><td><kbd>.</kbd> (fullstop)</td><td>Inserted listing line to display an autoalignment stuff (when <code>AUTOALIGN=ENABLED</code> is used).</td></tr>
<tr><td><kbd>-</kbd> (minus)</td><td>Inserted listing line to display the whole dump (when <code>DUMPALL=ENABLED</code> is used).</td></tr>
<tr><td><kbd>=</kbd> (equal)</td><td>Inserted listing line to display data literals (when <code>LISTLITERALS=ENABLED</code> is used).</td></tr>
<tr><td><kbd>&nbsp;</kbd> (space)</td><td> Inserted envelope PROGRAM / ENDPROGRAM line.</td></tr>
<tr><td><kbd>*</kbd> (asterix)</td><td>Inserted listing line in INCLUDE* statement when filename wildcards are resolved.</td></tr>
</table>
<p>As a side effect when the column separator is not <kbd>|</kbd>, the whole listing line has the form of a
<a href="#MachineRemarks">machine remark</a> and it is ignored if the listing is submitted again as a program source.</p>

<h5 id="DumpDecoration" title="Dump decoration"><a href="#ListingFile">&uarr; Dump decoration</a></h5>
<p>The dump of <strong>emitting statements</strong> has their hexadecimal address (offset in the current working section),
terminated with a colon <kbd>:</kbd>.
In a 16-bit section the offset is 16 bits wide (four hexadecimal digits), in a 32-bit and 64-bit sections it is 32 bits wide.
Then the emitted bytes follow. The data contents in the dump column is always in hexadecimal notation without
an explicit <a href="#NumberModifiers">number modifier</a>. If the chosen DUMPWIDTH= is too small for all emitted bytes to fit,
they are either right-trimmed and replaced with a tilde <kbd>~</kbd> (if&nbsp;<code>DUMPALL=OFF</code>),
or additional lines with separator <kbd>-</kbd> are inserted to the listing (<code>DUMPALL=ON</code>).</p>
<p id="Disp8N" title="Disp8*N">Some other decorators are used in the dumped bytes:</p>
<table><caption>Dump column decoration</caption>
<tr><th>Decorator</th><th>Description</th></tr>
<tr><td><kbd>~</kbd></td><td>Trimmed data indicator, used only when <code>DUMPALL=OFF</code></td></tr>
<tr><td><kbd>..</kbd></td><td>Byte of reserved data (instead of hexadecimal byte value when it's initialized)</td></tr>
<tr><td><kbd>[]</kbd></td><td>Absolute relocation</td></tr>
<tr><td><kbd>()</kbd></td><td>Relative relocation</td></tr>
<tr><td><kbd>{}</kbd></td><td>Paragraph address relocation</td></tr>
<tr><td><kbd>&lt;N</kbd></td><td>disp8*N compression used</td></tr>
</table>
<p>The brackets <kbd>[]</kbd> and <kbd>{}</kbd>, which may enclose the dumped word or dword, indicate
that the address requires relocation at link-time. Value printed in the listing
will differ from the offset viewed in a linked code or in a debugger at run-time.</p>
<p>The character <kbd>&lt;</kbd> followed with one decimal digit (<kbd>N</kbd>) signals that the previously
dumped byte is a 8-bit displacement which will be left-shifted by <kbd>N</kbd> bits at run-time to obtain
the effective displacement (the so called <b>disp8*N</b> compression).
The digit from 1..6 specifying scaling factor <kbd>N</kbd> is not emitted to the assembled code.</p>
<samp> <abbr>Brackets [ ] and { } indicate relocatable values.</abbr>
|                            |         EUROASM DUMPWIDTH=30,CPU=X64,SIMD=AVX512,EVEX=ENABLED
|[CODE] <abbr>&#x25BC;    &#x25BC;&#x25BC;    &#x25BC;</abbr>         |[CODE]   SEGMENT WIDTH=16
|0000:EA[0500]{0000}         |         JMPF Label ; Absolute far jump encodes immediate seg:offset.
|0005:CB                     |Label:   RETF
|[CODE64]                    |[CODE64] SEGMENT WIDTH=64
|00000000:62F36D28234D02&lt;504 |         VSHUFF32X4 YMM1,YMM2,[RBP+40h],4
|00000008:C3            <abbr>&#x25B2;&#x25B2;</abbr>   |         RET
                        <abbr>&lt;5 is a nonemitted disp8*N decorator.
                      &#x25B2;&#x25B2;Byte displacement +02h will be bit-shifted 5 times to the left,
                        so the effective displacement is in fact +40h.</abbr>
</samp>
<p>The dump of <strong>not emitting statements</strong> is either empty or contains auxiliary information.</p>
<samp>|[DATA]        |[DATA] ; <abbr>Segment|section switch quotes its <code>[name]</code> in dump column.</abbr>
|0000:         |; <abbr>Empty or comment-only line just displays the offset in current section.</abbr>
|0000:         |Label: ; <abbr>Ditto.</abbr>
|              |;; <abbr>Line comment starting with double semicolon will suppress the offset in dump.</abbr>
|[DATA]:0000   |Target EQU Label: ; <abbr>Address symbol definition is displayed as <code>[segment]:offset</code>.</abbr>
|4358          |%Counter %SET CX ; <abbr>Assignment of preprocessing %variable dumps its contents in hexadecimal.</abbr>
|TRUE          | %IF "%Counter" == "CX" ; <abbr>Preprocessing construct displays the evaluated boolean condition.</abbr>
|[]:0010       |  Bits EQU 16 ; <abbr>Scalar symbol definition is displayed with empty segment.</abbr>
|FALSE         | %ELSE ; <abbr>Boolean condition concerns %IF, %ELSE, %WHILE, %UNTIL.</abbr>
|              |  Bits EQU 32 ; <abbr>Dump of statements in false conditional branches is empty.</abbr>
|              | %ENDIF
</samp>

<h5 id="ListParameters" title="List parameters"><a href="#ListingFile">&uarr; List parameters</a></h5>
<p>A listing produced with the default (factory) configuration is more or less an exact copy of the source (except for the inserted dump column).
Sometimes it is useful to check if the high-level constructs worked as expected, and this is controlled
by the following boolean EUROASM options:
<br/><a href="#LISTeq">LISTINCLUDE=ON</a> unrolls the contents of the included file, which is
normally hidden from the main source.
<br/><a href="#LISTeq">LISTVAR=ON</a> creates a copy of the statements which contain preprocessing %variable,
and replace the %variable name with its expanded value in the copied line.
<br/><a href="#LISTeq">LISTMACRO=ON</a> inserts statements expanded by the macroinstruction.
<br/><a href="#LISTeq">LISTREPEAT=ON</a> inserts all iterations of the repeating constructs
<code>%FOR..%ENDFOR, %WHILE..%ENDWHILE, %REPEAT..%ENDREPEAT</code>.
A repeated expansion is listed as a commented-out by <a href="#DumpSeparators">dump column separator</a> <kbd>+</kbd>.
In the default state (defined by <code>LISTREPEAT=DISABLED</code>) only the first expansion is listed.</p>
<blockquote><p>A very useful trait by design of an EuroAssembler listing is to keep the generated listing re-usable as source code again,
in the following assembly session. The messages generated in the listing are ignored by the &euro;ASM parser, so they need not be removed
when we want to submit the listing file to a reassembly (nevertheless, those messages will be generated again
if the cause of error was not fixed).</p>
<p>I wanted to sustain this philosophy regardless of the LIST* parameters.
In the default state with <code>LISTINCLUDE=OFF</code> the statement INCLUDE is normally listed and the contents
of included file is hidden. With option <code>LISTINCLUDE=ON</code> it is reversed: the original INCLUDE statement
is commented out by <a href="#DumpSeparators">dump column separator</a> <kbd>*</kbd> but the included lines
are inserted into the listing and they become valid source statements. See also <a class="EXT" href="../eatests/t2220.htm">t2220</a>.</p>
<p>When options <code>LISTVAR, LISTMACRO, LISTREPEAT</code> are enabled, the original line is kept <em>as is</em>
and expanded lines will be inserted below it, commented-out by <a href="#DumpSeparators">dump column separator</a> <kbd>!</kbd> or <kbd>+</kbd>.
See also <a class="EXT" href="../eatests/t2230.htm">t2230</a>
</p></blockquote>
<p>The EUROASM option <a href="#LISTeq">LIST=DISABLE</a> will switch off the generating of listing lines until enabled again,
or until the end of source, whichever comes first, and of course such listing will be no longer reusable as source code.</p>


<h4 id="FilePath"><a href="#FilesIO">&uarr; File path</a></h4>
<p>Disk files can be specified by their <strong>absolute path</strong>, i. e. with a path
which begins at filesystem root, e.g. <code>C:\ProgFiles\euroasm.exe D:\Project\source.asm</code>.
Such files are unequivocally defined.</p>
<p>Files may be also specified with a <strong>relative path</strong>, e. g.
<code>euroasm ..\prowin32\skeleton.asm</code>.
These relative paths are always related to the current working directory.</p>
<p>Files can also be specified <strong>without a path</strong>,
i. e. when their name contains no colon and no slash <kbd>:</kbd>, <kbd>\</kbd>, <kbd>/</kbd>.
The location of such files is reviewed in the table below:</p>

<table><caption>Directory used when a file is specified without a path</caption>
<tr><th>Direction</th><th>File</th><th>Directory</th><th>See also</th></tr>
<tr><td>Executable</td><td><q>euroasm.exe</q></td><td>Exe-directory</td><td>OS PATH</td></tr>
<tr><td>Input</td><td>Global <q>euroasm.ini</q></td><td>See instalation instruction</td><td></td></tr>
<tr><td>Output</td><td>Global <q>euroasm.ini</q></td><td>See instalation instruction</td><td></td></tr>
<tr><td>Input</td><td>Local <q>euroasm.ini</q></td><td>Source directory</td><td></td></tr>
<tr><td>Input</td><td>Source file</td><td>Current directory</td><td></td></tr>
<tr><td>Input</td><td>Included source file</td><td>Include directory</td><td><code>EUROASM INCLUDEPATH=</code></td></tr>
<tr><td>Output</td><td>Target object file</td><td>Current directory</td><td><code>PROGRAM OUTFILE=</code></td></tr>
<tr><td>Output</td><td>Listing file</td><td>Source directory</td><td><code>EUROASM LISTFILE=</code></td></tr>
<tr><td>Input</td><td>Linked module file</td><td>Link directory</td><td><code>EUROASM LINKPATH=</code></td></tr>
<tr><td>Input</td><td>Linked stub file</td><td>Link directory</td><td><code>PROGRAM STUBFILE=</code></td></tr>
<tr><td>Input</td><td>Linked icon file</td><td>Link directory</td><td><code>PROGRAM ICONFILE=</code></td></tr>
<tr><td>Import</td><td>Dynamically imported function</td><td>OS-dependent</td><td><code>IMPORT LIB=</code></td></tr>
</table>

<p>The <dfn>current directory</dfn> is the actual folder
assigned to the shell process at the moment when <q>euroasm.exe</q> was launched.
It's never changed by &euro;ASM.</p>
<p>The <dfn>exe-directory</dfn> is the folder where <q>euroasm.exe</q> was found and executed,
usually it is one of the directories specified by the environment variable PATH.</p>
<p>The <dfn>source directory</dfn> is the folder where the currently assembled source file lies.</p>
<p>The <dfn>include directory</dfn> is one of the directories specified by the option
<code>EUROASM INCLUDEPATH=</code>.</p>
<p>The <dfn>link directory</dfn> is one of the directories specified by the option
<code>EUROASM LINKPATH=</code>.</p>

<hr/>
<h2 id="ProgStruc" title="Structure of program"><a href="#top">&uarr; Structure of an &euro;ASM program</a></h2>

<h3><a href="#ProgStrucChar">Character structure &darr;</a></h3>
<h3><a href="#ProgStrucHor">Horizontal structure &darr;</a></h3>
<h3><a href="#ProgStrucVer">Vertical structure &darr;</a></h3>

<p>This chapter describes the format of a typical source file which &euro;ASM understands
and which it is able to compile.</p>
<hr/>
<h3 id="ProgStrucChar"><a href="#ProgStruc">&uarr; Character structure</a></h3>
<h4><a href="#ProgStrucCharWidth">Character width &darr;</a></h4>
<h4><a href="#ProgStrucCharCode">Character encoding &darr;</a></h4>
<h4><a href="#ProgStrucCharCase">Character case &darr;</a></h4>
<h4><a href="#ProgStrucCharClass">Character classification &darr;</a></h4>

<hr/>
<h4 id="ProgStrucCharWidth"><a href="#ProgStrucChar">&uarr; Character width</a></h4>
<h6>Source file is a sequence of characters with 8-bit width or with a variable width 8..32 bits (in UTF-8 encoding).</h6>
<p>That is particulary important that if the source file is written in an editor that uses WIDE (16-bit) character encoding (UTF-16),
it should be saved as a plain text in UTF-8 or in 8-bit ANSI or OEM codepage before submitting the file for assembly.</p>

<h4 id="ProgStrucCharCode"><a href="#ProgStrucChar">&uarr; Character encoding</a></h4>
<p>A program written in &euro;ASM may need to display messages and texts in other languages than English.
Therefore, a string which defines the output text will contain characters
with their <dfn id="Codepoint" title="Codepoint">codepoint</dfn> value above 127
(codepoint is an ordinal number of the character in the <a class="EXTL" href="../eadoc/links.htm#Unicode">[Unicode]</a> chart).
<br/>Many European languages are satisfied with a limited set of 256 characters.
Historically the relation between their codes and corresponding glyphes is called a <dfn>code page</dfn>.</p>
<p>Be aware that MS-Windows uses different code pages in console applications (OEM)
and in GUI applications (ANSI) and it makes automatic conversion between them
in some circumstances. &euro;ASM itself never changes the code page of the source.</p>
<p>A programmer, who needs to mix several human-languages in MS-Windows application, may need to use 16-bit WIDE characters
instead of 8-bit ANSI in text strings at run-time. See <a class="EXT" href="../prowin32/cpmix32.htm">cpmix32</a>
as a demo example.
The wide (UTF-16) strings are declared with pseudoinstruction <code>DU</code> (Define data in Unichars)
instead of <code>DB</code> (Define data in Bytes) pseudoinstruction.
The wide variant of WinAPI call must be used for a visual representation of Unichar strings at run-time,
e. g. <code>TextOutW()</code> instead of <code>TextOutA()</code>. However, the in-source definition
of characters in <code>DU</code> statement is still 8-bit. You should tell &euro;ASM
which code page was used for writing the <code>DU</code> statement in the source file.
This information is provided by the <code>EUROASM CODEPAGE=</code> option.
The codepage may change dynamically in the source, thus allowing mixing of different
human-languages in one program.</p>
<p>The texts in your program which aim to run inside the console
(using the WinAPI function <code>WriteConsoleA()</code> or macroinstruction <a class="EXT" href="../maclib/winapi.htm#StdOutput">
StdOutput</a>) should be written in the OEM code page.
You may want to use a DOS plain-text editor, such as <q>EDIT.COM</q>
for writing console programs. As text mode editors use console fonts
which are in OEM code page, the text is displayed correctly both in editor
at write-time and in the console of your program at run-time.</p>
<p>Converserly text which would be presented in GUI windows (using the WinAPI function <code>TextOutA()</code>)
should be written in the ANSI code page, using a windowed editor such as <q>Notepad.exe</q>.
</p>

<p>The default is <code>EUROASM CODEPAGE=UTF-8</code>, where characters are encoded
with a variable length of one to four bytes. Thanks to the clever <a class="EXTL"
href="links.htm#UTF8">[UTF8]</a> design, all non-ASCII UTF-8 characters
are encoded as censecutive bytes with the values in the 128..255 range, which are treated as
<a href="#ProgStrucCharClass">letters</a> in &euro;ASM,
so any UTF-8 defined character can be used in identifiers <em>as is</em>.</p>
<h6>The recommended encoding of the EuroAssembler source files is UTF-8.</h6>
<p>Unlike the 8-bit ANSI or OEM encodings, which limit the repertoire
to 256 glyphs, CODEPAGE=UTF8 allows the mixing of
arbitrary character codepoints defined in <a class="EXTL" href="../eadoc/links.htm#Unicode">
[Unicode]</a>, including non-European alphabets.
MS-Windows API does not, by design, directly support UTF-8 strings, and they need run-time reencoding
to UTF-16 which is used by the WIDE variant of the WinAPI functions, such as TextOutW().
This reencoding can be performed by WinAPI MultiByteToWideChar() or by macro
<a class="EXT" href="../maclib/string32.htm#DecodeUTF8">DecodeUTF8</a>.
Exotic characters will be displayed correctly only if the used font
supports their glyphes, of course.</p>
<blockquote>Example of a freeware text editor that supports UTF-8 encoding
is <a class="EXTL" href="../eadoc/links.htm#PSPad">[PSPad]</a>.
<br/>Some UTF-8 text editors insert <dfn id="BOM" title="BOM byte order mark">
Byte Order Mark</dfn> characters <code>0xEF, 0xBB, 0xBF</code> at the start
of source file. EuroAssembler ignores those three characters.</blockquote>

 <h4 id="ProgStrucCharCase"><a href="#ProgStrucChar">&uarr; Character case</a></h4>
<h6>&euro;ASM is a case semi-sensitive assembler.</h6>
<p>All identifiers created by you,
the programmer, are <strong>case sensitive</strong>: labels, constants,
user-defined %variables, structures, macro names. On the other hand,
all built-in names are <strong>case insensitive</strong>. Case insensivity concerns
all enumerations: register names, machine instructions and prefixes, built-in data types,
number modifiers, pseudoinstruction names and parameters, symbol attributes,
system %^variables.</p>
<p>The case insensitive names are presented in UPPER CASE in this
manual but they may be used in lower or mixed case as well.</p>

<h4 id="ProgStrucCharClass"><a href="#ProgStrucChar">&uarr; Character classification</a></h4>
<p>Each byte (8 bits) in &euro;ASM source is treated as a <dfn>character</dfn>. Many characters
have special purpose in assembler syntax unless they are quoted inside double or single quotes.
A character is <dfn id="Unquoted" title="Unquoted">unquoted</dfn> if zero or an even number of quotes appears between the start of the line
and the character itself.</p>
<dl><dt>EOL</dt><dd>End-of-line control character is <dfn>Line Feed</dfn> alias <dfn>EOL</dfn> (ASCII 10).</dd>
<dt>White spaces</dt><dd>All other control characters, Delete and Space are considered <dfn>white spaces</dfn>.
White spaces are mainly used as separators which can improve readability but only seldom
have some syntactic significance.
Unquoted multiple white spaces are treated the same way as a single one.</dd>
<dt>Digits</dt><dd>Digits <kbd>0..9</kbd> create numbers and identifiers. Hexadecimal numbers
may also contain hexadecimal digits <kbd>A..F, a..f</kbd>.</dd>
<dt>Letters</dt><dd>Letters in &euro;ASM are defined as <kbd>a..z, A..Z</kbd>, underscore <kbd>_</kbd>,
at sign <kbd>@</kbd>, dollar sign <kbd>$</kbd>, grave accent <kbd>`</kbd>, question mark <kbd>?</kbd>
and all characters from the upper half of ASCII table (128..255).
<br/>Some of them are employed in &euro;ASM for special purposes, too:
<br/>Underscore <kbd>_</kbd> is used in identifiers and numbers as a word separator
instead of <em>space</em>.
<br/>A leading at-sign <kbd>@</kbd> indicates a literal section name.
<br/>The dollar sign <kbd>$</kbd> alone is used as an identifier that specifies a dynamic symbol representing
the current offset in a section.
<br/>The grave <kbd>`</kbd> is used as a prefix when some filename not starting with a letter
should represent a valid identifier.
</dd>
<dt>Punctuation</dt><dd>All punctuation and other characters have special semantic meaning
&ndash; operators, delimiters, modifiers etc. &ndash; unless they are enclosed in a pair of single
<kbd>'</kbd> or double <kbd>&quot;</kbd> quotes. Punctuation characters except for the
percent sign <kbd>%</kbd> and EOL are treated as ordinary letters when they are
placed inside a quoted string.</dd>
</dl>


<table id="CharacterTable" title="Character table">
<caption id="ASCIItable" title="ASCII characters">Character classification table</caption>
<tr class="row1"><th>ASCII</th><th>glyph</th> <th>name  </th><th>function in &euro;ASM</th></tr>
<tr><td>0..9</td><td> </td>      <td>controls           </td><td>white space</td></tr>
<tr><td>10</td><td> </td>        <td>line feed          </td><td>end of line</td></tr>
<tr><td>11..31</td><td> </td>    <td>controls           </td><td>white space</td></tr>
<tr><td>32</td><td> </td>        <td>space              </td><td>white space</td></tr>
<tr><td>33</td><td>!</td>        <td>exclamation mark   </td><td>logical operator</td></tr>
<tr><td>34</td><td>"</td>        <td>double quote       </td><td>string delimiter</td></tr>
<tr><td>35</td><td>#</td>        <td>number sign        </td><td>modifier</td></tr>
<tr><td>36</td><td>$</td>        <td>dollar sign        </td><td>letter</td></tr>
<tr><td>37</td><td>%</td>        <td>percent sign       </td><td>preprocessor apparatus prefix</td></tr>
<tr><td>38</td><td>&amp;</td>    <td>ampersand          </td><td>logical operator</td></tr>
<tr><td>39</td><td>'</td>        <td>apostrophe (single quote)</td><td>string delimiter</td></tr>
<tr><td>40</td><td>(</td>        <td>left parenthesis   </td><td>priority parenthesis</td></tr>
<tr><td>41</td><td>)</td>        <td>right parenthesis  </td><td>priority parenthesis</td></tr>
<tr><td>42</td><td>*</td>        <td>asterix            </td><td>arithmetic and special operator</td></tr>
<tr><td>43</td><td>+</td>        <td>plus sign          </td><td>arithmetic operator </td></tr>
<tr><td>44</td><td>,</td>        <td>comma              </td><td>operand separator</td></tr>
<tr><td>45</td><td>-</td>        <td>minus sign         </td><td>arithmetic operator </td></tr>
<tr><td>46</td><td>.</td>        <td>fullstop           </td><td>member separator </td></tr>
<tr><td>47</td><td>/</td>        <td>slash (solidus)    </td><td>arithmetic operator </td></tr>
<tr><td>48..57</td><td>0..9</td> <td>digits             </td><td>digit</td></tr>
<tr><td>58</td><td>:</td>        <td>colon              </td><td>field separator</td></tr>
<tr><td>59</td><td>;</td>        <td>semicolon          </td><td>comment separator</td></tr>
<tr><td>60</td><td>&lt;</td>     <td>less-then sign     </td><td>logical operator, comment separator </td></tr>
<tr><td>61</td><td>=</td>        <td>equals sign        </td><td>logical operator, key separator, literal indicator</td></tr>
<tr><td>62</td><td>&gt;</td>     <td>greater-than sign  </td><td>logical operator </td></tr>
<tr><td>63</td><td>?</td>        <td>question mark      </td><td>letter</td></tr>
<tr><td>64</td><td>@</td>        <td>commercial at      </td><td>letter</td></tr>
<tr><td>65..90</td><td>A..Z</td> <td>uppercase letters  </td><td>letter</td></tr>
<tr><td>91</td><td>[</td>        <td>left square bracket</td><td>content braces, substring operator</td></tr>
<tr><td>92</td><td>\</td>        <td>backslash (reverse solidus)</td><td>arithmetic operator, line continuation indicator</td></tr>
<tr><td>93</td><td>]</td>        <td>right square bracket</td><td>content braces, substring operator</td></tr>
<tr><td>94</td><td>^</td>        <td>caret (circumflex) </td><td>logical operator </td></tr>
<tr><td>95</td><td>_</td>        <td>underscore (low line)</td><td>letter, digit separator</td></tr>
<tr><td>96</td><td>`</td>        <td>grave accent</td>  <td>letter</td></tr>
<tr><td>97..122</td><td>a..z</td><td>lowercase letters  </td><td>letter</td></tr>
<tr><td>123</td><td>{</td>       <td>left curly bracket </td><td>sublist operator</td></tr>
<tr><td>124</td><td>|</td>       <td>vertical bar (pipe)</td><td>logical operator, comment separator</td></tr>
<tr><td>125</td><td>}</td>       <td>right curly bracket</td><td>sublist operator </td></tr>
<tr><td>126</td><td>~</td>       <td>tilde              </td><td>logical operator, shortcut indicator</td></tr>
<tr><td>127</td><td> </td>       <td>delete             </td><td>white space</td></tr>
<tr><td>128..255</td><td> </td>  <td>NonASCII characters</td><td>letter</td></tr>
<tr class="row1"><th>ASCII</th><th>glyph</th> <th>name  </th><th>function in &euro;ASM</th></tr>
</table>

<hr/>

<h3 id="ProgStrucHor"><a href="#ProgStruc">&uarr; Horizontal structure</a></h3>
<h4><a href="#PhysicalLine">Physical line &darr;</a></h4>
<h4><a href="#Statement">Statement &darr;</a></h4>
<h4><a href="#StmentMachineRem">Machine remark field &darr;</a></h4>
<h4><a href="#StmentLabel">Label field &darr;</a></h4>
<h4><a href="#StmentPrefix">Prefix field &darr;</a></h4>
<h4><a href="#StmentOperation">Operation field &darr;</a></h4>
<h4><a href="#StmentOperand">Operand field &darr;</a></h4>
<h4><a href="#StmentLineRem">Line remark field &darr;</a></h4>
<h4><a href="#StmentLineCont">Line continuation &darr;</a></h4>
<p>An assembler source is treated as a text consisting of lines which are processed
from left to right, from top to bottom.</p>
<hr/>
<h4 id="PhysicalLine" title="Physical line"><a href="#ProgStrucHor">&uarr; Physical line</a></h4>
<p>A source file consists of <dfn>physical lines</dfn>. A physical line
is a sequence of characters terminated with a <em>line feed</em> (ASCII 10).
The line feed (EOL) character is part of the physical line, too.</p>
<p>The EOL may be omitted in the last physical line of source file.</p>
<h4 id="Statement"><a href="#ProgStrucHor">&uarr; Statement</a></h4>
<p>A <dfn>statement</dfn> is an order for &euro;ASM to perform some action at assembly-time,
that is usually to emit some code to the object file or to change its internal state.
A typical statement is equivalent to a physical line but long statements
might span several lines when <a href="#StmentLineCont">line continuation</a> is used.</p>
<p>A statement consists of several <dfn>fields</dfn> which are recognized by
their position in the line, by the separator or by their contents. All fields are
facultative (optional), any of them may be omitted. However, no operand can be used
when the operation field is omitted.</p>
<table id="StmentFiedlsTable">
<caption>Fields in the statement</caption>
<tr><th>Order</th><th>Field name</th><th>Termination</th></tr>
<tr><td>1.</td><td>Machine remark</td><td><kbd>|</kbd> or <kbd>EOL</kbd></td></tr>
<tr><td>2.</td><td>Label          </td><td><kbd>:</kbd> or <kbd>white space</kbd></td></tr>
<tr><td>3.</td><td>Prefix         </td><td><kbd>:</kbd> or <kbd>white space</kbd></td></tr>
<tr><td>4.</td><td>Operation      </td><td><kbd>white space</kbd></td></tr>
<tr><td>5.</td><td>Operand        </td><td><kbd>,</kbd></td></tr>
<tr><td>6.</td><td>Line comment   </td><td><kbd>EOL</kbd></td></tr>
</table>
<p>Example of a statement:</p>
<samp><abbr>|    machine remark         |Label |Prefix|Operation|  Operands    | Line comment</abbr>
|00001234:F08705[78560000]  |Mutex: LOCK:  XCHG      EAX,[TheLock] ; Guard the thread.
</samp>


<h4 id="StmentMachineRem"><a href="#ProgStrucHor">&uarr; Machine remark field</a></h4>
<p>A machine remark begins with a vertical bar <code>|</code> when it is the first
non-white character on the physical line. It is terminated with the second occurence
of the same vertical bar or with the end of the physical line.</p>
<blockquote>The contents of a machine remark is usually an hexadecimal address followed by the machine code
emitted by the statement in question. As the field name indicates, this information is generated
by the computer into &euro;ASM <a href="#ListingFile">listing file</a>,
and because of that, the programmer should never need to write a machine remark manually.
Machine remarks are ignored in assembler source, thus any valid &euro;ASM listing file may be reused
as the source file without change. </blockquote>
<h4 id="StmentLabel" title="Label"><a href="#ProgStrucHor">&uarr; Label field</a></h4>
<p>A label field can accomodate any of these elements:</p>
<ol><li>A structure or a symbol name or a block identifier, for example
<code>My1stStructure</code>, <code>My1stLabel:</code>, <code>Outer</code></li>
<li>The name of a segment, section or group, for example <code>[.data]</code></li>
<li>The name of a symbolic %variable which is being set, for example <code>%Count</code></li>
<li>The colon itself <kbd>:</kbd>, as it is explicitly telling &euro;ASM that an empty label is used,
so the following field must be a prefix or an operation.</li>
</ol>
<P>In the first case the symbolic name may begin with a period (point) <code>.</code>,
making the label <dfn>local</dfn>. The symbol in the label field may be optionally terminated
with one or more colons <code>:</code> immediately following the identifier.
The white space between the label field and the next field may be omitted when the
colon is used.
<h4 id="StmentPrefix"><a href="#ProgStrucHor">&uarr; Prefix field</a></h4>
<p>The machine <dfn>prefix</dfn> is an order for CPU to change its internal state
at run-time. It is similar to a machine instruction code but it only modifies
the following instruction at run-time. Each prefix assembles to a single byte machine opcode.</p>

<table id="Prefixes" title="Prefixes">
<caption>Prefix table</caption>
<tr class="row1"><th>Name</th><th>Group</th><th>Opcode</th></tr>
<tr><td>LOCK</td><td>1</td><td>0xF0</td></tr>
<tr><td>REP</td><td>1</td><td>0xF3</td></tr>
<tr><td>REPE</td><td>1</td><td>0xF3</td></tr>
<tr><td>REPZ</td><td>1</td><td>0xF3</td></tr>
<tr><td>REPNE</td><td>1</td><td>0xF2</td></tr>
<tr><td>REPNZ</td><td>1</td><td>0xF2</td></tr>
<tr><td>XACQUIRE</td><td>1</td><td>0xF2</td></tr>
<tr><td>XRELEASE</td><td>1</td><td>0xF3</td></tr>
<tr><td>SEGCS</td><td>2</td><td>0x2E</td></tr>
<tr><td>SEGSS</td><td>2</td><td>0x36</td></tr>
<tr><td>SEGDS</td><td>2</td><td>0x3E</td></tr>
<tr><td>SEGES</td><td>2</td><td>0x26</td></tr>
<tr><td>SEGFS</td><td>2</td><td>0x64</td></tr>
<tr><td>SEGGS</td><td>2</td><td>0x65</td></tr>
<tr><td>SELDOM</td><td>2</td><td>0x2E</td></tr>
<tr><td>OFTEN</td><td>2</td><td>0x3E</td></tr>
<tr><td>OTOGGLE</td><td>3</td><td>0x66</td></tr>
<tr><td>ATOGGLE</td><td>4</td><td>0x67</td></tr>
</table>
<p>The last four mnemonic names are not known in other assemblers.
<br/>The <code>SELDOM</code> and <code>OFTEN</code> may be used in front of conditional jump instructions
as hints for newer CPUs to help with predictions of the jump target.
<br/>The <code>OTOGGLE</code> and <code>ATOGGLE</code> switch between 16-bit and 32-bit width of operand and address
portion of machine code. They are normally generated by the assembler
internally whenever needed, without an explicit request.</p>

<p>Up to four prefixes can be defined in one statement but not more than one prefix
from the same group.</p>
<h6>Prefix name cannot and should not be used as a label, regardless of character-case.</h6>
<p>The names of the prefixes are case insensitive and reserved, they cannot be used
as labels. A prefix name may be terminated with colon(s) <kbd>:</kbd>
(same as symbols).</p>

<p>AMD and Intel 64-bit architecture introduced special prefixes <code>REX</code>,
<code>XOP</code>, <code>VEX</code>, <code>MVEX</code>, <code>EVEX</code>.
&euro;ASM treats them as part of operation encoding and does not provide
mnemonic for their direct declaration.</p>
<blockquote><a class="EXTL" href="links.htm#AMDSSE5">[AMDSSE5]</a> introduced
another instruction prefix <code>DREX</code>, but DREX-encoded instructions are not
supported by &euro;ASM as they never made it to the production, as far as I know.</blockquote>
<p>The segment-override prefixes SEG*S can be alternatively requested as a component of
memory-variable <a href="#RegisterExpressions">register expression</a>.
In this case they are emitted only when they are not redundant (when they specify a non-default segment).
Explicitly specified prefixes are emitted always, in the order as they appeared in the statement.
</p>
<p>EuroAssembler warns when a prefix is used in contradiction with the CPU specification.
This can be overrided when the prefix is separated in extra statement.</p>
<samp>|0000:F091     |LOCK:    XCHG AX,CX   ; Prefix Lock should not be used with register operands.
|## W2356 Prefix LOCK: is not expected in this instruction.
|0002:F0       |LOCK:                 ; This can be outperformed when the prefix is separated in extra statement,
|0003:91       |         XCHG AX,CX   ;    for instance to investigate CPU behaviour in such situation.
|0004:         |
|0004:6691     |         XCHG EAX,ECX ; Operand-size prefix 0x66 is emitted internally (in 16-bit segment).
|0006:6691     |OTOGGLE: XCHG EAX,ECX ; Its explicit specification has no effect,
|0008:6691     |OTOGGLE: XCHG AX,CX   ;    but here it overrides the registers sizes from 16 to 32 bits.</samp>

<h4 id="StmentOperation" title="Operation"><a href="#ProgStrucHor">&uarr; Operation field</a></h4>
<p>The operation field is the most important field of an assembler statement; it tells &euro;ASM
what to do: declare something, change its internal state
or emit something to the object file. It often gives its name to the whole statement,
we may say an <em>EXTERN operation</em> instead of a <em>statement with EXTERN pseudoinstruction
in the operation field</em>.</p>
<p>&euro;ASM recognizes three types (genders) of operation:</p>
<ul>
<li><a href="#MachineInstructions">Machine instructions</a>, whose mnemonic names
are defined by <a class="EXTL" href="../eadoc/links.htm#InstructionsFromVendors">CPU manufacturers</a>, they are case insensitive,</li>
<li><a href="#PseudoInstructions">Pseudoinstructions</a> are specified by &euro;ASM syntax
(also case insensitive),</li>
<li><a href="#MacroInstructions">macroinstructions</a> are written by the user of &euro;ASM
(their names are case sensitive).</li></ul>
<p>Statement may have no operation at all:</p>
<pre>[CODE]   ; Redirect further emitting to section [CODE].
         ; Empty statement may be used for optical separation or for comments.
Label:   ; Define a label but do not emit any data or code.
LOCK:    ; Define a machine prefix for the following instruction.</pre>
<p id="Emit">Some statements tell &euro;ASM to generate assembled code|data to the object file,
they are called <dfn id="EmittingInstructions" title="Emitting instructions">emitting</dfn> instructions:</p><ul>
<li><a href="#Prefixes">prefixes</a>,</li>
<li><a href="#MachineInstructions">machine instructions</a>,</li>
<li><a href="#D">pseudoinstruction D</a> and its clones,</li>
<li><a href="#ALIGN">pseudoinstruction ALIGN</a>.</li>
</ul>

<h4 id="StmentOperand" title="Operand"><a href="#ProgStrucHor">&uarr; Operand field</a></h4>
<h5><a href="#OrdinalOperand">Ordinal operand &darr;</a></h5>
<h5><a href="#KeywordOperand">Keyword operand &darr;</a></h5>
<h5><a href="#MixingOperands">Mixing operands &darr;</a></h5>
<p>The operands specify the data which the operation works.
Conversely, the number of operands in the statement is not limited and it depends on the operation.
The operand can be a register name, number, expression, identifier, string,
and almost any of their various combinations.</p>
<p>The operation field is separated from the first operand with at least one white-space.
Operands are separated with an unquoted comma <kbd>,</kbd> from one another.
There are two kinds of operands recognised in &euro;ASM: ordinal and keyword.</p>
<hr/>
<h5 id="OrdinalOperand"><a href="#StmentOperand">&uarr; Ordinal operands</a></h5>
<p>The <dfn>ordinal operands</dfn> (or shortly <em>ordinals</em>) are referred by the order in the statement.
The first operand has an ordinal number one (that is one-based index); in macros it is identified as <code>%1</code>.
For instance, in the <code>MOV AL,BL</code> statement the AL register
is operand number 1 and BL is number 2. The machine instruction MOV is known
to copy contents of the second operand to the first.
The comma between operands will increase the ordinal number even when the operand is empty (nothing but white-spaces).</p>
<p>An operand of machine instruction may represent a register, immediate integer number, address,
memory variable enclosed in square braces, for instance <code>MOV AL,[ES:SI+16]</code>.
</p>
<blockquote>Some other assemblers allow for different syntax of <a href="#RegisterExpressions">address expression</a>,
which is not supported by EuroAssembler, for instance <code>MOV AL,<del>ES:[SI+16]</del></code> or
<code>MOV AL,<del>[ES:16]+SI</del></code>.
<br/>&euro;ASM requires that the entire memory operand is placed inside square braces [].</blockquote>

<h5 id="KeywordOperand"><a href="#StmentOperand">&uarr; Keyword operands</a></h5>
<p>Beside the ordinal parameters &euro;ASM introduces one more type of operands:
<dfn>keyword operand</dfn> (or shortly <em>keywords</em>).
They are referred by name (key word) rather than by their position in the operands list.
A keyword operand has the cannonical form <em>name=value</em> where <em>name</em> is an identifier
immediately followed by an equal sign.</p>
<blockquote><p>Keyword operands have many advantages: they are selfdescribing (if their name
is chosen wisely), they don't depend on position in the operand list
(no more tedious comma counting), they may be assigned a default value
and they may be completely omitted when they have the default value.</p>
<p>Keyword operands are best used with macroinstructions but
&euro;ASM also employs them in some pseudoinstructions and even in
machine instructions, too.
For instance, in <code>INC [EDI],DATA=DWORD</code>
the keyword parameter <code>DATA=</code> tells which form of the possible
INC machine instruction (increment byte, word or dword variable)
should be used.</p> </blockquote>
<p>It should not have an space between keyword and equal sign to be recognized as a valid instrukction modifier:</p>
<samp>|0000:       |<abbr>; Let's define two memory variables (with not recommended names).</abbr>
|0000:3412   |DATA: DW 1234h
|0002:7856   |WORD: DW 5678h
|0004:       |
|0004:50     |  PUSH AX, DATA=WORD
|0005:       |<abbr>; Assembled as <code>PUSH AX</code>.</abbr>
|0005:       |<abbr>; Operand <code>DATA=WORD</code> is recognized as a redundant but valid instruction modifier.</abbr>
|0005:       |
|0005:506A00 |  PUSH AX, DATA = WORD
|0008:       |<abbr>; Operand <code>DATA = WORD</code> is not recognized as keyword modifier</abbr>
|0008:       |<abbr>;   due to the space which follows identifier DATA.</abbr>
|0008:       |<abbr>; &euro;ASM sees the 2nd operand as a numerical comparison between symbols DATA and WORD,</abbr>
|0008:       |<abbr>;   which happen to exist in this program (otherwise E6601 would have been issued).</abbr>
|0008:       |<abbr>; Their offsets (0000h and 0002h) are different, the result is boolean FALSE</abbr>
|0008:       |<abbr>;   represented with value 0. The statement is recognized as <code>PUSH AX, 0</code></abbr>
|0008:       |<abbr>;   which is legal, because &euro;ASM accepts integration of multiple ordinal operands</abbr>
|0008:       |<abbr>;   to one statement in machine instructions PUSH, POP, INC, DEC.</abbr>
|0008:       |<abbr>; The statement is assembled as two instructions: <code>PUSH AX</code> and <code>PUSH 0</code>.</abbr>
</samp>

<h5 id="MixingOperands"><a href="#StmentOperand">&uarr; Mixing keyword and ordinal operands</a></h5>
<p>The order of keyword operands is not important. It is a good practice to list ordinal
operands first and then all keyword operands, but keywords may be mixed freely with ordinals, too.</p>
<h6>A keyword operand does not increase the ordinal number.</h6>
<pre>Label1: Operation1 Ordinal1,Ordinal2,,Ordinal4,,
Label2: Operation2 Ordinal1,Keyword1=Value1,Ordinal2,,Ordinal4</pre>
<p>Operation1 in the previous example has three operands with ordinal numbers 1,2 and 4.
The third operand is empty and the last two commas at the end of line are ignored, as no other
nonempty operand follows.</p>
<p>Mixed operands are used in Operation2 and notice that Ordinal2 has an ordinal number 2
although it is the third operand on the list. Keyword operands do not count into ordinal
numbers but empty operands do.</p>

<h4 id="StmentLineRem"><a href="#ProgStrucHor">&uarr; Line comment field</a></h4>
<p>A line comment begins with unquoted semicolon <kbd>;</kbd> and it extends to the end of this physical line.
Line comments are ignored by assembler, they are geared towards human reader of the source code.</p>

<h4 id="StmentLineCont"><a href="#ProgStrucHor">&uarr; Line continuation</a></h4>
<p>A statement continues on the next physical line when <dfn>line continuation character</dfn>,
which is an unquoted backslash <kbd>\</kbd>, is used at the position where the next field would normally begin.</p>
<pre>
 aLabel:       \ ; This semicolon is redundant.
     MOV EAX,  \ The first operand of MOV is <em>destination</em>
         EBX   ; and the second one is <em>source</em>.
</pre>
<blockquote>
<p>Everything that follows the line continuation character is treated like a comment field,
so the semicolon may be omitted in this case. In a multiline statement you may
add comments to any physical line.</p>
</blockquote>

<h6>A line continuation may appear at the beginning of any field, but not inside the field.</h6>
<p>The whole field of any statement must fit on one physical line.</p>
<p>The backslash <kbd>\</kbd> is also used as <a href="#NumericArithmetic">
modulo</a> binary operator, which cannot appear at the beginning of operation,
so the confusion is avoided.</p>
<pre><abbr>;                   modulo  modulo line-continuation
;                      |      |    |  </abbr>
|0000:01000200 |  DW 5 \ 4, 6 \ 4, \
|0004:03000000 |     7 \ 4, 8 \ 4
</pre>

<h3 id="ProgStrucVer"><a href="#ProgStruc">&uarr; Vertical structure</a></h3>
<h4><a href="#ProgStrucVerBlock">Block statements &darr;</a></h4>
<h4><a href="#ProgStrucVerSwitch">Switch statements &darr;</a></h4>
<h4><a href="#ProgStrucVerSolo">Standalone statements &darr;</a></h4>
<p>Statements in assembler source code are processed one by one,
from top to bottom in a downwards fashion and some of them might influence successive
statements but most instructions are standalone.
From this point of view there are three kinds of statements:</p>
<hr/>

<h4 id="ProgStrucVerBlock"><a href="#ProgStrucVer">&uarr; Block statements</a></h4>
<p>A block statement must appear in pair with its corresponding
 ending statement. The internal state of &euro;ASM is changed only
within the range between them, which is called a <dfn>block</dfn>.
<h6>A block is a continuous range of statements which starts with begin-block statement and ends with a matching end-block statement.</h6>
<p>A block actually begins at the operation field of a begin-block statement and it ends
at the operation field of the end-block statement.</p>
<p>Some block statements may be prematurely cancelled (broken) with an exit operation,
for instance when an error is detected during a macro expansion.</p>
<table>
<caption>Block statements</caption>
<tr><th colspan="3">Label field</th><th colspan="3">Operation field</th></tr>
<tr><th>Obligation</th><th>Represents</th><th>Declares</th> <th>Begin block</th><th>Break</th>   <th>End block  </th></tr>
<tr><td>mandatory</td><td>program name   </td><td>program</td>  <td>PROGRAM</td><td>not used    </td><td>ENDPROGRAM </td></tr>
<tr><td>mandatory</td><td>procedure name </td><td>symbol</td>   <td>PROC    </td><td>not used   </td><td>ENDPROC    </td></tr>
<tr><td>mandatory</td><td>procedure name </td><td>symbol</td>   <td>PROC1   </td><td>not used   </td><td>ENDPROC1   </td></tr>
<tr><td>mandatory</td><td>structure name </td><td>structure</td><td>STRUC   </td><td>not used   </td><td>ENDSTRUC   </td></tr>
<tr><td>optional</td><td>block identifier</td><td>nothing</td>  <td>HEAD   </td><td>not used    </td><td>ENDHEAD    </td></tr>
<tr><td>optional</td><td>block identifier</td><td>nothing</td>  <td>%COMMENT</td><td>not used   </td><td>%ENDCOMMENT</td></tr>
<tr><td>optional</td><td>block identifier</td><td>nothing</td>  <td>%IF     </td><td>%ELSE      </td><td>%ENDIF     </td></tr>
<tr><td>optional</td><td>block identifier</td><td>nothing</td>  <td>%WHILE  </td><td>%EXITWHILE </td><td>%ENDWHILE  </td></tr>
<tr><td>optional</td><td>ids of Begin/End swapped</td><td>nothing</td>  <td>%REPEAT </td><td>%EXITREPEAT</td><td>%ENDREPEAT </td></tr>
<tr><td>mandatory</td><td>formal control variable</td><td>%variable</td><td>%FOR    </td><td>%EXITFOR   </td><td>%ENDFOR    </td></tr>
<tr><td>mandatory</td><td>macro name     </td><td>macro</td>    <td>%MACRO  </td><td>%EXITMACRO </td><td>%ENDMACRO  </td></tr>
</table>
<p>Some end-block operations can be aliased:
<br><code>ENDPROC</code> alias <code>ENDP</code>,
<br><code>ENDPROC1</code> alias <code>ENDP1</code>,
<br><code>%ENDREPEAT</code> alias <code>%UNTIL</code>.</p>
<p>The label field of a block statement specifies the name of the program, procedure, structure or macro.
In the preprocessing of a %FOR loop the label field declares a
formal variable which changes its value in each loop cycle.
In other preprocessing loops (%REPEAT, %WHILE) the label field is optional and
it may contain identifier which optically connects the beginning and the ending
of block statements together (for nesting check) but has no further significance
- it does not declare a symbol.</p>
<p>The same block identifier may be used as the first and only operand of the corresponding end-block statement.</p>

<blockquote>
<p>Assemblers are not united in the cannonical format of pseudoinstructions block.
In one hand MASM uses the same block identifier in the label fields of both
begin- and end-block statements:</p>
<pre>
MyProcedure PROC    ; MASM syntax
     ; some code
MyProcedure ENDP
</pre>
<p>This is good when you eyeball the source code for a procedure definition, as
its name is on the left so it will hit your eyes when you scan
the leftmost column.
On the other hand, the same label appears in the source twice,
making an ugly exception from the rule that a non-local symbol declaration may occur only once in the program.</p>
<p>Perhaps for that reason Borland chose a different syntax in TASM IDEAL mode:</p>
<pre>
 PROC MyProcedure   ; TASM syntax
        ; some code
 ENDP MyProcedure
</pre>
<p>It solves the double label problem but the name of MyProcedure
never appears in the label field, although it is a regular label.</p>
<p>&euro;ASM presents a compromise solution: the name of block is defined
in the label field of a begin-block statement and it may appear
in the end-block statement:</p>
<pre>
MyProcedure PROC  ; &euro;ASM syntax
                  ; some code
            ENDP MyProcedure
</pre>
<p>The operand in the endblock statement may be omitted but,
if used, it must be identical to the label of the corresponding
begin-block statement label.
This helps to maintain a correct block nesting because &euro;ASM will
emit an error when block identifiers don't match.</p>
</blockquote>
<p>Blocks of code can be nested, but only correctly, that is, that there is no spillover between them.</p>

<h6>Two blocks are correctly nested when one block contains the entire other block.</h6>
<p>A %MACRO block in the example presented below contains a correctly nested %IF block.</p>

<pre>
WriteCMOS %MACRO Address,Value
           %IF %1 &lt;= 30h
             %ERROR "Checksum protected area!"
             %EXITMACRO WriteCMOS
           %ENDIF
           MOV AL,%1
           OUT 70h,AL
           MOV AL,%2
           OUT 71h,AL
          %ENDMACRO WriteCMOS
</pre>
<blockquote>Incorrect block nesting is only tolerated in procedures
declared with the <a href="#ProcNESTINGCHECKeq">NESTINGCHECK=OFF</a> option.
</blockquote>

<p>A block identifier in an operand field of end-block and exit-block statements
usually only guards the correct binding. When blocks of the same type are nested
one in another, exit-block operand can be used to identify the exiting block.
As an example see <a class="EXT" href="../eatests/t2642.htm">t2642</a>
where one <code>Inner %FOR</code> block is nested in <code>Outer %FOR</code> block, and the operand
of %EXITFOR statement specifies which block is exited.</p>

<h4 id="ProgStrucVerSwitch"><a href="#ProgStrucVer">&uarr; Switch statements</a></h4>
<p>A switching statement changes the internal state of &euro;ASM
for all following statements until another switching statement
changes the state again, or until the end of source code is found.</p>
<p>There are two switching pseudoinstructions in &euro;ASM: <a href="#EUROASM">EUROASM</a>,
and <a href="#SEGMENT">SEGMENT</a>.
The latter has two forms: <br/><code>[name] SEGMENT</code>
(define a new segment) and
<br/><code>[name]</code> (define new section in current segment if it wasn't defined yet,
and switch emitting to this section).
<br/>Examples of switching statements:</p>
<pre> EUROASM  AUTOSEGMENT=OFF, CPU=486 ; Change &euro;ASM options for all following statements.
[Subprocedures] SEGMENT PURPOSE=CODE, ALIGN=BYTE  ; Declare a new segment.
[.data]                  ; Switch emitting of following statements to previously defined segment [.data]
[StringData]             ; Define a new section in the current segment (in [.data]).
</pre>

<h4 id="ProgStrucVerSolo"><a href="#ProgStrucVer">&uarr; Standalone statements</a></h4>
<p>All the remaining pseudoinstructions and machine instructions are not logically bound with others
in a vertical structure of a program, so they are <dfn>standalone</dfn>, by definition.</p>
<hr/>
<h2 id="Elements"><a href="#top">&uarr; Elements of an &euro;ASM program</a></h2>
<p>The size of EuroAssembler elements is not limited by design.
This applies to the length of strings, physical text lines, identifiers, number notations,
expressions, nesting depth and number of operands. They are kept internally
as a signed 32-bit integer number so the theoretical size limit of each such element is
<code>2 GB = 2_147_483_647 bytes (characters)</code>.
<blockquote>In reality it is the amount of available virtual memory and stack space which
restrict elements of this size, and EuroAssembler may terminate well before with a fatal error message
<kbd>F9110 Cannot allocate virtual memory.</kbd> or
<kbd>F9210 Memory reserved for machine stack is too small for this source file.</kbd></blockquote>

<h3><a href="#Addresses">Addresses &darr;</a></h3>
<h3><a href="#AddressingSpace">Addressing space &darr;</a></h3>
<h3><a href="#Alignment">Alignment &darr;</a></h3>
<h3><a href="#Booleans">Boolean values &darr;</a></h3>
<h3><a href="#BooleansExt">Boolean extensions &darr;</a></h3>
<h3><a href="#Comments">Comments &darr;</a></h3>
<h3><a href="#ConditionCodes">Condition codes &darr;</a></h3>
<h3><a href="#DataTypes">Data types &darr;</a></h3>
<h3><a href="#Distance">Distance &darr;</a></h3>
<h3><a href="#Enumerates">Enumerated values &darr;</a></h3>
<h3><a href="#Expressions">Expressions &darr;</a></h3>
<h3><a href="#Groups">Groups &darr;</a></h3>
<h3><a href="#Identifiers">Identifiers &darr;</a></h3>
<h3><a href="#Length">Length &darr;</a></h3>
<h3><a href="#Literals">Literals &darr;</a></h3>
<h3><a href="#MemVariables">Memory variables &darr;</a></h3>
<h3><a href="#Namespace">Namespace &darr;</a></h3>
<h3><a href="#Numbers">Numbers &darr;</a></h3>
<h3><a href="#Operators">Operators &darr;</a></h3>
<h3><a href="#Registers">Registers &darr;</a></h3>
<h3><a href="#Scope">Scope &darr;</a></h3>
<h3><a href="#Sections">Sections &darr;</a></h3>
<h3><a href="#Segmentation">Segmentation &darr;</a></h3>
<h3><a href="#Segments">Segments &darr;</a></h3>
<h3><a href="#Size">Size &darr;</a></h3>
<h3><a href="#Strings">Strings &darr;</a></h3>
<h3><a href="#Structures">Structures&darr;</a></h3>
<h3><a href="#Symbols">Symbols &darr;</a></h3>
<h3><a href="#pcVariables">%Variables &darr;</a></h3>
<h3><a href="#Width">Width &darr;</a></h3>

<hr/>
<h3 id="Comments"><a href="#Elements">&uarr; Comments</a></h3>
<h4><a href="#BlockComments">Block comments &darr;</a></h4>
<h4><a href="#LineComments">Line comments &darr;</a></h4>
<h4><a href="#MachineRemarks">Machine remarks &darr;</a></h4>
<h4><a href="#MarkupComments">Markup comments &darr;</a></h4>
<p>Comments are parts of the source code which are not processed by assembler
and their only purpose is to explain the code for a human reader.
There are four types of comments recognised in &euro;ASM:</p>
<hr/>
<h4 id="LineComments"><a href="#Comments">&uarr; Line comments</a></h4>
<p>Line comments start with an unquoted semicolon; everything up to the end of line
is ignored by &euro;ASM. Line comments are copied to the listing file verbatim.</p>
<pre> Label: CALL SomeProc <span class="inner">; This is a line comment.</span></pre>
<h4 id="MachineRemarks"><a href="#Comments">&uarr; Machine remarks</a></h4>
<p>Machine remarks are written by &euro;ASM into the listing file and they contain
the generated machine code in hexadecimal notation.</p>
<p>A machine remark starts with a vertical bar <kbd>|</kbd> which is the first
non-white character on the physical line. A machine remark ends with the second occurence of
the same vertical bar <kbd>|</kbd , or with the end of line (whichever comes first).
So, when the closing <kbd>|</kbd> is omitted, the whole physical line is treated as a remark.
This is used for inserting error messages into the listing, just below the erroneous statement.</p>
<pre>
<span class="inner">|0030:E81234   |</span>Label1: CALL SomeProc  ; This is a line comment.
<span class="inner">|0033:         |</span>Label2: COLL OtherProc ; A typing error in the operation name.
<span class="inner">|### E6860 Unrecognized operation "COLL", ignored.</span>
</pre>
<p>Machine remarks are ignored by &euro;ASM and they are not copied to the listing.
Instead, &euro;ASM recreates them when the listing produced by previous assembly session is
submitted as a source to the assembler.</p>
<p>Machine remarks are not intended to be manually inserted by a programmer into the source text,
use an ordinary <a href="#LineComments">line comment</a> instead.</p>
<h4 id="MarkupComments"><a href="#Comments">&uarr; Markup comments</a></h4>
<p>When a physical line begins with less-than character <kbd>&lt;</kbd>,
it is treated as a markup comment and ignored up to the end of line.
This enables to mix source code and <em>hypertext markup language</em> tags.
Markup comments are not copied onto the listing.</p>
<p>Thanks to the markup comments, &euro;ASM source code can be stored not just only as a plain-text but also as HTML or XML hypertext.</p>
<pre><span class="inner">&lt;h2&gt;Description of SomeProcedure&lt;/h2&gt;</span>
<span class="inner">&lt;img src=&quot;SomeImage.png&quot;/&gt;</span>
SomeProcedure  PROC  ; See the image above for description.</pre>
<blockquote><p>All source code shipped with &euro;ASM is completely stored in HTML format,
which allows to document the source with hypertext links, tables, images and better visual representation
than simple line comments could yield.</p>
<p>If you want to keep your source codes in HTML, make sure that ordinary assembler statements
do not start with <kbd>&lt;</kbd> and rearrange the source so that every
markup comment line starts with some HTML tag.
You may also use void HTML tags <kbd>&lt;span/&gt;</kbd> or <kbd>&lt;!----&gt;</kbd>
to start the comment line.</p>
</blockquote>

<h4 id="BlockComments"><a href="#Comments">&uarr; Block comments</a></h4>
<p>A block comment can be used to temporary disable a portion of source code
or to include the documentation inside the source code.</p>
<p>Block comment begins with <a href="#pcCOMMENT">%COMMENT</a> statement
and it ends with the corresponding <a href="#pcCOMMENT">%ENDCOMMENT</a>. It can span over many lines of program,
which as a sole restriction don't have to start with semicolons.
<br/>Block comments are copied into the listing file.</p>
<p>&euro;ASM does not assemble the text inside the commented-out block,
but it needs to parse it anyway in order to find the coresponding %ENDCOMMENT statement,
so the commented-out text should be a valid source as well.</p>
<h6>Block comments are nestable.</h6>
<p>The text in %COMMENT block must be corectly nested, although it is ignored.</p>
<blockquote>The pseudoinstrucion <code>%COMMENT</code> could be easily replaced with
<code>%IF 0</code>, but the former one is more intuitive.</blockquote>
<pre>
 CALL SomeProc ; This is a line comment.
<span class="inner"> %COMMENT  ; This is a block comment.
 COLL OtherProc ; Intentional typing error in operation name.
    %COMMENT ; This is a nested block comment.
    %ENDCOMMENT ; End of inner block comment.
    ; This statement is ignored, too.
 %ENDCOMMENT</span>
 ; Emitting assembly continues here.</pre>

<h3 id="Identifiers" title="Identifier"><a href="#Elements">&uarr; Identifiers</a></h3>
<p>An identifier is a human readable text which gives the name to an element of assembler program:
a symbol, register, instruction, structure etc.</p>
<h6>Each identifier is a combination of <a href="#ProgStrucCharClass">letters</a> and
<a href="#ProgStrucCharClass">digits</a>, that begins with a letter.</h6>
<p>The length of identifiers is not limited in &euro;ASM and all characters are significant.</p>
<hr/>

<h3 id="Numbers"><a href="#Elements">&uarr; Numbers</a></h3>
<h4><a href="#DecNumbers">Decimal numbers &darr;</a></h4>
<h4><a href="#BinNumbers">Binary numbers &darr;</a></h4>
<h4><a href="#OctNumbers">Octal numbers &darr;</a></h4>
<h4><a href="#HexNumbers">Hexadecimal numbers &darr;</a></h4>
<h4><a href="#IntNumbers">Integer numbers overview &darr;</a></h4>
<h4><a href="#FpNumbers">Floating point numbers &darr;</a></h4>
<h4><a href="#FpSpecValues">Floating point special values &darr;</a></h4>
<h4><a href="#CharNumbers">Character constants &darr;</a></h4>
<p>A number notation is the way to write numeric value and those numeric values are kept and computed internally
by &euro;ASM as 64-bit signed integers.</p>
<h6>Number notation is a combination of digits and number modifiers,
which begins with a decimal digit (0..9).</h6>
<p>A <dfn id="NumberModifiers" title="Number modifiers">number modifier</dfn> is one
of the <kbd>B D E G H K M P Q T</kbd> character apended to the end
of a digits sequence, or <kbd>0N 0O 0X 0Y</kbd> (a zero followed by a letter) prefixed
in front of other digits. All number modifiers are case insensitive.
Except for the decimal format, which is the default, a modifier must always be used.</p>
<p>Floating point numbers shell use a period (fullstop) <kbd>.</kbd> to separate the integer and decimal part
of the number notation.</p>
<p>Another number modifier is the underscore character <kbd>_</kbd> which is ignored
by the number parser and it can be used as a digit separator instead of space or comma for a better readability of long numbers.
No white spaces are allowed in number notation.</p>

<h4 id="DecNumbers"><a href="#Numbers">&uarr; Decimal numbers</a></h4>
<p>A decimal number is a combination of decimal digits <kbd>0..9</kbd> optionally suffixed with a
<dfn>decimal modifier</dfn> <kbd>D</kbd>. There are five other decimal suffixes:
<br/><kbd>K</kbd> (Kilo), which tells &euro;ASM to multiply the number by 2<sup>10</sup>=1024,
<br/><kbd>M</kbd> (Mega), which tells &euro;ASM to multiply the number by 2<sup>20</sup>=1_048_576,
<br/><kbd>G</kbd> (Giga), which tells &euro;ASM to multiply the number by 2<sup>30</sup>=1_073_741_824,
<br/><kbd>T</kbd> (Tera), which tells &euro;ASM to multiply the number by 2<sup>40</sup>=1_099_511_627_776,
<br/><kbd>P</kbd> (Peta), which tells &euro;ASM to multiply the number by 2<sup>50</sup>=1_125_899_906_842_624.</p>
<p>Decimal numbers may be prefixed with <kbd>0N</kbd> modifier.
<p>All six numbers in the following example have the same value:
<code>1048576, 1048576d, 0n1048576, 1_048_576, 1024K, 1M</code>.
<br/>Pay attention of the fact that using a decimal modifier is done in powers of 2, not in the usual sense of powers of tens.</p>
<p>Maximal possible unsigned number which would fit into 32 bits is
0xFFFF_FFFF=4_294_967_295.</p>
<p>Maximal possible positive number which would fit into 63 bits is
0x7FFF_FFFF_FFFF_FFFF=9_223_372_036_854_775_807.</p>

<h4 id="BinNumbers"><a href="#Numbers">&uarr; Binary numbers</a></h4>
<p>A binary number is made of digits <kbd>0 1</kbd> appended with
a binary number modifier <kbd>B</kbd> or prefixed by a modifier <kbd>0Y</kbd>. Examples:
<code>0y101, 101b, 00110010b, 1_1111_0100B</code> are equivalent to decimal numbers
<code>5, 5, 50, 500</code> respectively.</p>
<p>Maximal 32-bit binary number is 1111_1111__1111_1111__1111_1111__1111_1111b.</p>

<h4 id="OctNumbers"><a href="#Numbers">&uarr; Octal numbers</a></h4>
<p>Each octal digit <kbd>0..7</kbd> represents three bits of the equivalent binary notation.
The number is terminated with octal suffix <kbd>Q</kbd> or prefixed with
<kbd>0O</kbd> alias <kbd>0o</kbd>
(digit zero followed by the capital or small letter <kbd>O</kbd>).</p>
<p>Example: <code>177_377q = 0o177_377 = 0xFEFF</code></p>
<p>The biggest 32-bit octal number is 37_777_777_777q.</p>
<p>The biggest 64-bit octal number is 1_777_777_777_777_777_777_777q.</p>

<h4 id="HexNumbers"><a href="#Numbers">&uarr; Hexadecimal numbers</a></h4>
<p>Each hexadecimal digit encodes four bits in one character, which requires 2<sup>4</sup>=16
possible values. Therefore the ten decadic digits are extended with letters <kbd>A, B, C, D, E, F</kbd>
with values 10, 11, 12, 13, 14, 15. Hexadecimal digits (letters) A..F are case insensitive.
When the first digit of a hexadecimal number is represented with a letter A..F, an additional
leading zero must be prefixed to the number notation to avoid confusions.
Hexadecimal number is terminated with suffix <kbd>H</kbd>
or it begins with prefix <kbd>0X</kbd>.</p>
<p>Example: <code>5h, 0x32, 1F4H, 0x1388, 0C350H</code> represent decadic numbers
<code>5, 50, 500, 5000, 50000</code> respectively.</p>
<blockquote>Keep in mind that all numbers in &euro;ASM are internally kept as 64-bit signed integer.
Although instructions <code>MOV EAX,0xFFFF_FFFF</code> and <code>MOV EAX,-1</code>
assemble to identical codes, their operands are internally represented as <code>0x0000_0000_FFFF_FFFF</code>
and <code>0xFFFF_FFFF_FFFF_FFFF</code>. Boolean expression <code>0xFFFF_FFFF = -1</code>
is <em>false</em>.
<samp>|00000000:B8FFFFFFFF | MOV EAX, 0xFFFF_FFFF
|00000005:B8FFFFFFFF | MOV EAX, -1
|FALSE               | %IF 0xFFFF_FFFF = -1</samp>
</blockquote>
<h4 id="IntNumbers"><a href="#Numbers">&uarr; Integer numbers overview</a></h4>
<p>Integers may be written in binary, decimal, octal or hexadecimal notation.
Some number modifiers overlap with hexadecimal digits <kbd>B, D, E</kbd>. &euro;ASM parses
as much of the element as possible to solve such ambiguity:
<br/><code>1BH</code> is recognized as a hexadecimal number 0x1B=27 and not <del>binary 1 followed with letter <kbd>H</kbd></del>.
<br/><code>2DH</code> is recognized as a hexadecimal number 0x2D=45 and not <del>decimal 2 followed with letter <kbd>H</kbd></del>.
<br/><code>3E2H</code> is recognized as a hexadecimal number 0x3E2=994 and not <del>3 * 10<sup>2</sup> followed with letter <kbd>H</kbd></del>.
</p>
<table id="IntegerNotation" title="Integer Nr notation"><caption>Integer number notation</caption>
<tr><th>Notation</th><th>Prefix</th><th>Base</th><th>Suffix</th><th>Multiplier</th></tr>
<tr><td>Binary</td><td>0Y</td><td>2</td><td>B</td><td>1</td></tr>
<tr><td>Octal</td><td>0O</td><td>8</td><td>Q</td><td>1</td></tr>
<tr><td rowspan="6">Decimal</td><td rowspan="6">0N</td><td rowspan="6">10</td><td>D</td><td>1</td></tr>
<tr><td>K</td><td>2<sup>10</sup></td></tr>
<tr><td>M</td><td>2<sup>20</sup></td></tr>
<tr><td>G</td><td>2<sup>30</sup></td></tr>
<tr><td>T</td><td>2<sup>40</sup></td></tr>
<tr><td>P</td><td>2<sup>50</sup></td></tr>
<tr><td>Hexadecimal</td><td>0X</td><td>16</td><td>H</td><td>1</td></tr>
</table>
<p>Binary, octal and hexadecimal numbers must always be written with prefix or suffix
(or both, however this is not recommended, and it feels awkward). There is no <dfn id="RADIX" title="RADIX">RADIX</dfn> directive in &euro;ASM.</p>
<p>For more examples of acceptable syntax see
<a class="EXT" href="../eatests/#Numbers">&euro;ASM numbers tests</a>.</p>

<h4 id="FpNumbers" title="Real Nr notation"><a href="#Numbers">&uarr; Floating point numbers</a></h4>
<p id="FloatNumbers" title="Floating point Nr">Floating point alias <em>real</em> numbers are parsed from the scientific notation
with decimal point and exponent of 10, using this syntax:
</p>
<table><caption>FP number notation anatomy</caption>
<tr><th>Order</th><th>Field name</th><th>Contents</th></tr>
<tr><td>1</td><td>number sign</td><td><kbd>+</kbd>, <kbd>-</kbd> or nothing</td></tr>
<tr><td>2</td><td>significand</td><td>digits <kbd>0</kbd>..<kbd>9</kbd>, digit separators <kbd>_</kbd></td></tr>
<tr><td>3</td><td>decimal point</td><td><kbd>.</kbd></td></tr>
<tr><td>4</td><td>fraction</td><td>digits <kbd>0..9</kbd>, digit separators <kbd>_</kbd></td></tr>
<tr><td>5</td><td>FP number modifier</td><td><kbd>E</kbd> or <kbd>e</kbd></td></tr>
<tr><td>6</td><td>exponent sign</td><td><kbd>+</kbd>, <kbd>-</kbd> or nothing</td></tr>
<tr><td>7</td><td>exponent part</td><td>digits <kbd>0..9</kbd>, digit separators <kbd>_</kbd></td></tr>
</table>

<p>For instance, in the floating point number <code>1234.56E3</code> has value 1234.56 * 10<sup>3</sup>=1234560.</p>
<p>An omitted sign is treated as <kbd>+</kbd>.</p>
<p>The decimal part can be omitted when it is zero(s), for instance <code>123.00E2 = 123.E2</code>.</p>
<p>The decimal point may be omitted when decimal part is omitted (it is equal to zero). The <kbd>E</kbd> modifier
still specifies the floating point format.
<code>123.00E2 = 123.E2 = 123E2 = 12300.</code></p>
<p>Exponent can be omitted when it is zero. The modifier <kbd>E</kbd> may be omitted in this case, too,
and without the E modifier it is the presence of the decimal point which decides if the number is integer or real.
In our example: <code>12345.67E0 = 12345.67E = 12345.67</code></p>
<p>No white space is allowed within FP number notation. </p>
<p>The number is considered as floating point when its notation contains either
decimal point <kbd>.</kbd>, or modifier <kbd>E</kbd> (capital or small letter <kbd>E</kbd>), or both.
Otherwise it is treated as an integer.</p>
<h6>&euro;ASM does not calculate with floating point numbers at assembly time.</h6>
<p>All internal assembly-time calculations in &euro;ASM are provided with 64-bit integers only.
When FP is used in mathematical expression, it is converted to an integer first.
And the error <a class="EXT" href="../easource/msg.htm#MsgE">E6130</a> (number overflow) is reported if the number does not fit to 64 bits.
Warning <a class="EXT" href="../easource/msg.htm#MsgW">W2210</a> (precision lost)
is reported if the FP number had decimal part which was rounded in conversion.</p>
<p>An actual FP number format <a class="EXTL" href="../eadoc/links.htm#IEEE754">[IEEE754]</a> is maintained only when
the scientific notation is used to define the static FP variable with pseudoinstruction <a href="#D">DD, DQ, DT</a>.</p>
<p>Half-precision FP numbers (float16) are not supported by &euro;ASM, neither they are supported by processors,
with exception of two packed SIMD instructions <a class="EXT" href="../easource/iiz.htm#IizVCVTPS2PH">VCVTPS2PH</a> and
<a class="EXT" href="../easource/iiz.htm#IizVCVTPH2PS">VCVTPH2PS</a>, and a few MVEX-encoded
<a href="#OPEReq">up/down conversion operations</a>.</p>
<blockquote>Unlike integer numbers, the sign of FP notation is inseparable from digits which follow.
If you by mistake put a space between the sign and the number, instead of FP definition it is treated
as an operation (unary minus applied to a number), and therefore the FP number is converted to integer first,
before the operation is evaluated. Examples:
<samp>|00000000:001DF1C7             | DD  -123.45E3 ; Single-precision FP number -123.45*10<sup>3</sup>.
|00000004:C61DFEFF             | DD - 123.45E3 ; Dword signed integer number -123450.
|00000008:00000000A023FEC0     | DQ  -123.45E3 ; Double-precision FP number -123.45*10<sup>3</sup>.
|00000010:C61DFEFFFFFFFFFF     | DQ - 123.45E3 ; Qword signed integer number -123450.
|00000018:0000000000001DF10FC0 | DT  -123.45E3 ; Extended-precision FP number -123.45*10<sup>3</sup>.
|00000022:                     | DT - 123.45E3 ; Tbyte integer number is not supported.
|### E6725 Datatype TBYTE expects plain floating-point number.</samp>
</blockquote>

<h4 id="FpSpecValues" title="Floating point specials"><a href="#Numbers">&uarr; Floating point special values</a></h4>
<p>Beside the standard scientific notation of floating-point numbers they may have a <dfn>special FP constant</dfn> value:</p>
<table><caption>Special floating-point constant values (in hexadecimal notation)</caption>
<tr><th>Constant</th><th>Interpretation</th><th>single precision (DD)</th><th>double precision (DQ)</th><th>extended precision (DT)</th></tr>
<tr><th>#ZERO</th><td>zero</td><td><code>00000000</code></td><td><code>00000000_00000000</code></td>
<td><code>0000_00000000_00000000</code></td></tr>
<tr><th>+#ZERO</th><td>positive zero</td><td><code>00000000</code></td><td><code>00000000_00000000</code></td>
<td><code>0000_00000000_00000000</code></td></tr>
<tr><th>-#ZERO</th><td>negative zero</td><td><code>80000000</code></td><td><code>80000000_00000000</code></td>
<td><code>8000_00000000_00000000</code></td></tr>
<tr><th>#INF</th><td>infinity</td><td><code>7F800000</code></td><td><code>7FF00000_00000000</code></td>
<td><code>7FFF_80000000_00000000</code></td></tr>
<tr><th>+#INF</th><td>positive infinity</td><td><code>7F800000</code></td><td><code>7FF00000_00000000</code></td>
<td><code>7FFF_80000000_00000000</code></td></tr>
<tr><th>-#INF</th><td>negative infinity</td><td><code>FF800000</code></td><td><code>FFF00000_00000000</code></td>
<td><code>FFFF_80000000_00000000</code></td></tr>
<tr><th>#PINF</th><td>pseudo infinity</td><td><code>7F800000</code></td><td><code>7FF00000_00000000</code></td>
<td><code>7FFF_00000000_00000000</code></td></tr>
<tr><th>+#PINF</th><td>positive pseudo infinity</td><td><code>7F800000</code></td><td><code>7FF00000_00000000</code></td>
<td><code>7FFF_00000000_00000000</code></td></tr>
<tr><th>-#PINF</th><td>negative pseudo infinity</td><td><code>FF800000</code></td><td><code>FFF00000_00000000</code></td>
<td><code>FFFF_00000000_00000000</code></td></tr>
<tr><th>#NAN</th><td>not a number</td><td><code>7FC00000</code></td><td><code>7FF80000_00000000</code></td>
<td><code>7FFF_C0000000_00000000</code></td></tr>
<tr><th>+#NAN</th><td>positive not a number</td><td><code>7FC00000</code></td><td><code>7FF80000_00000000</code></td>
<td><code>7FFF_C0000000_00000000</code></td></tr>
<tr><th>-#NAN</th><td>negative not a number</td><td><code>FFC00000</code></td><td><code>FFF80000_00000000</code></td>
<td><code>FFFF_C0000000_00000000</code></td></tr>
<tr><th>#PNAN</th><td>pseudo not a number</td><td><code>7F800001</code></td><td><code>7FF00000_00000001</code></td>
<td><code>7FFF_00000000_00000001</code></td></tr>
<tr><th>+#PNAN</th><td>positive pseudo not a number</td><td><code>7F800001</code></td><td><code>7FF00000_00000001</code></td>
<td><code>7FFF_00000000_00000001</code></td></tr>
<tr><th>-#PNAN</th><td>negative pseudo not a number</td><td><code>FF800001</code></td><td><code>FFF00000_00000001</code></td>
<td><code>FFFF_00000000_00000001</code></td></tr>
<tr><th>#QNAN</th><td>quiet not a number</td><td><code>7FC00000</code></td><td><code>7FF80000_00000000</code></td>
<td><code>7FFF_C0000000_00000000</code></td></tr>
<tr><th>+#QNAN</th><td>positive quiet not a number</td><td><code>7FC00000</code></td><td><code>7FF80000_00000000</code></td>
<td><code>7FFF_C0000000_00000000</code></td></tr>
<tr><th>-#QNAN</th><td>negative quiet not a number</td><td><code>FFC00000</code></td><td><code>FFF80000_00000000</code></td>
<td><code>FFFF_C0000000_00000000</code></td></tr>
<tr><th>#SNAN</th><td>signaling not a number</td><td><code>7F800001</code></td><td><code>7FF00000_00000001</code></td>
<td><code>7FFF_80000000_00000001</code></td></tr>
<tr><th>+#SNAN</th><td>positive signaling not a number</td><td><code>7F800001</code></td><td><code>7FF00000_00000001</code></td>
<td><code>7FFF_80000000_00000001</code></td></tr>
<tr><th>-#SNAN</th><td>negative signaling not a number</td><td><code>FF800001</code></td><td><code>FFF00000_00000001</code></td>
<td><code>FFFF_80000000_00000001</code></td></tr>
</table>
<p>Names of special constants are case insensitive. If the sign <kbd>+</kbd> or <kbd>-</kbd> is used,
it is unseparable. Examples:
<br/><code>FourNans DY 4 * QWORD #NaN ; Define vector of four double-precision not-a-number FP values.</code>
<br/><code> MOV ESI,=8*Q#ZERO ; Define 8*8 zero bytes in literal section and set ESI to point at them.</code></p>


<h4 id="CharNumbers"><a href="#Numbers">&uarr; Character constants</a></h4>
<p>A number can also be written as a <dfn>character constant</dfn>,
which is a string containing not more than eight characters.
Its numeric value is taken from ordinal number of each character
in the ASCII table.
Example of character constants and their values:</p>
<pre>
'0'   =     30h =      48
'abc' = 636261h = 6513249
"4%%" =   2534h =    9524
</pre>
<h6 id="CharacterConstans" title="Character constants">A character with the least significant value is on the left position in the string.</h6>
<blockquote><p>Assemblers are not united in character constants treatment.
MASM and TASM use <em>scriptual convention</em>
where the order of characters in the written source code corresponds
with the way we write numbers: least significant digit is on the right side.
</p>
<p>&euro;ASM as well as other newer assemblers
use the <em>memory convention</em> where the order of characters
in the written source code corresponds with the order how they are stored
in memory on <em>little endian</em> architecture processors.</p>
<samp>|                    | ; MASM and TASM:
|00000000:616263     | DB 'abc'      ; String.
|00000003:63626100   | DD 'abc'      ; Character constant.
|00000007:B863626100 | MOV EAX,'abc' ; AL='c'.

|                    | ; &euro;ASM, FASM, GoASM, NASM, SpASM:
|00000000:616263     | DB 'abc'      ; String.
|00000003:61626300   | DD 'abc'      ; Character constant.
|00000007:B861626300 | MOV EAX,'abc' ; AL='a'.
</samp>
</blockquote>

<hr/>
<h3 id="Enumerates" title="Enumerations"><a href="#Elements">&uarr; Enumerated values</a></h3>
<p>Some operands may acquire only one of the few predefined values,
e.g. the <a href="#EUROASM">EUROASM</a> option <a href="#CPUeq">CPU=</a>
may be <code>086, 186, 286, 386, 486, 586, 686, PENTIUM, P6, X64</code>.</p>
<p>Although some enumerated values may look like a number, they are not countable, they merely represent a position in a predefined collection.</p>

<h3 id="Booleans" title="Boolean values"><a href="#Elements">&uarr; Boolean values</a></h3>
<p>Any number can be interpreted as a boolean (logical) value, too.
Boolean values can acquire one of the two states: <em>false</em> or <em>true</em>.
Number 0 is treated as boolean <em>false</em> in logical expression, any nonzero number
is treated as <em>true</em>.</p>

<h3 id="BooleansExt" title="Boolean extensions"><a href="#Elements">&uarr; Boolean extended values</a></h3>
<p>All built-in <dfn>&euro;ASM boolean options</dfn> have an <dfn>extended repertoire</dfn>
of possible values. Those boolean values accept</p>
<ul><li>a numeric value 0 as logical <em>false</em> and nonzero value
as logical <em>true</em>,</li>
<li>a string which is evaluated as <em>false</em> when the string is empty,
and <em>true</em> otherwise (string of white-spaces is not empty), </li>
<li>enumerated tokens <dfn>TRUE, YES, ON, ENABLE, ENABLED</dfn>
as logical <em>true</em>, and
<dfn>FALSE, NO, OFF, DISABLE, DISABLED</dfn> as logical <em>false</em>
(case insensitive).</li>
</ul>
<p>This aplies to the:</p><ul>
<li><a href="#pcIF">Conditional preprocessing pseudoinstructions</a> %IF, %WHILE, %UNTIL.</li>
<li>Boolean pseudoinstruction <a href="#pcSETB">%SETB</a>.</li>
<li><a href="#InstructionModifiers">Machine instruction logical modifiers</a> BCST=, EH=, SAE=, ZEROING=.</li>
<li><a href="#EUROASM">EUROASM's pseudoinstruction</a> logical modifiers AUTOALIGN=, AUTOSEGMENT=,
DEBUG=, DISPLAYENC=, DISPLAYSTM=, DUMP=, DUMPALL=, LIST=, LISTINCLUDE=,
LISTMACRO=, LISTREPEAT=, LISTVAR=, PROFILE=, UNICODE=, and all CPU features.</li>
<li><a href="#PROGRAM">PROGRAM's pseudoinstruction</a> logical modifiers LISTGLOBALS=, LISTLITERALS=, LISTMAP=.
<li><a href="#PROC">PROC, PROC1 pseudoinstruction</a> logical modifier NESTINGCHECK=.</li></ul>
<p>Extended boolean enumeration is used only with operands built in the &euro;ASM.
They are not <a href="#Symbols">symbols</a> that could be used elsewhere,
such as <code><del>MOV EAX,TRUE</del></code>.
To achieve similar functionality in macros, the programmer would have to define such symbols first, e.g.</p><pre>
FALSE   EQU 0
false   EQU 0
TRUE    EQU -1
true    EQU !false
MOV EAX,TRUE
</pre>
<p>When an extended Boolean value is used as the macro keyword operand, it can be also tested in the macro body
with <code>%IF, %WHILE, %UNTIL</code>, for instance</p><pre>
MacroWithBool  %MACRO Bool=On
  %IF %Bool
    ; Do something when Bool is set to TRUE.
  %ELSE
    ; Do something when Bool is set to FALSE.
  %ENDIF
 %ENDMACRO MacroWithBool</pre>
<p>Now we may invoke the macro as <code> MacroWithBool Bool=Enable</code>, <code> MacroWithBool Bool=No</code> etc.</p>
<h6>Extended enumerated Boolean values are not allowed in <a href="#BooleanAlgebra">logical expressions</a></h6><pre>
MacroWithBool  %MACRO Bool=0
  %IF ! %Bool
    ; Do someting when Bool is set to FALSE.
  %ENDIF
  %ENDMACRO MacroWithBool</pre>
<p>The previous example would not work with extended Boolean values, for instance <code>MacroWithBool Bool=False</code>
will complain that <kbd>E6601 Symbol "False" was not found.</kbd>. However, reversing the logic should work well:<pre>
MacroWithBool  %MACRO Bool=0
  %IF  %Bool
  %ELSE
    ; Do someting when Bool is set to FALSE.
  %ENDIF
  %ENDMACRO MacroWithBool</pre>


<h3 id="Strings" title="String"><a href="#Elements">&uarr; Strings</a></h3>
<p>A string is a set of arbitrary characters enclosed in quotes.
Either double <kbd title="ASCII=34">&quot;</kbd> or single quotes
<kbd title="ASCII=39">'</kbd> (also called <em>apostrophes</em>) may be
used to mark the borders of a string. The surrounding quotes do not count
into the string contents. All characters within the string lose
their semantic significance, with three exceptions:</p>
<ol><li><kbd title="ASCII=10">EOL</kbd> cannot be used in strings.
In other words, each portion of quoted &quot;string data&quot; must fit to one physical line.
Definition of long strings can be split, e.g.
<samp>|0000:5468697320697320 |MultilineString: DB "This is the first line",13,10, \
|0008:7468652066697273~|                    "and this is the second one.",13,10,0
|0036:                 |</samp></li>
<li>The same quote character which is used to surround the string cannot be used inside,
unless it is doubled, e.g.
<samp>|0000:4F27427269656E00 |Surname: DB 'O''Brien',0
|0008:                 |</samp></li>
<li>The percent sign <kbd title="ASCII=37">%</kbd> keeps its
function of a %variable prefix.
Use two adjacent percent signs when a single <kbd>%</kbd>
is required in a string, e.g.
<samp>|0000:313030252073617665642E00 |Status: DB "100%% saved.",0
|000C:                         |</samp></li></ol>
<h6>Preprocessing %variables are expanded in strings.</h6>

<p id='EscapeChar'>No escape character is employed in &euro;ASM, in fact the percent sign and quote escape themselves.
If you need to use any of the above mentioned characters within a string,
they must be doubled. This duplication (self-escaping) concerns only the notation in the source text and it does not increase
the final string size in emitted computer memory.</p>
<p id='FilenameStrings'>Strings enclosed in 'single quotes' and &quot;double quotes&quot; are equivalent with a single exception:
if the contents of a string is a filename, only double quotes may be used, because the apostrophe is a valid
character when used in filenames on most filesystems. More examples of string definitions:</p>
<samp>|0000:3830202520           |DB "80 %% "
|0005:766F74656420224E6F22 |DB "voted ""No"""
|000F:                     |DB ''        ; Empty string.
|000F:27                   |DB "'"       ; Single apostrophe.
|0010:27                   |DB ''''      ; Single apostrophe.
|0011:                     |; Examples of invalid syntax (odd number of quotes):
|0011:                     |DB """
|### E6721 Invalid data expression """"".
|0011:                     |DB "It ain't necessarilly so'
|### E6721 Invalid data expression ""It ain't necessarilly so'".
|0011:                     |</samp>

<h3 id="AddressingSpace"><a href="#Elements">&uarr; Addressing space</a></h3>
<p>The processor, otherwise known as <dfn>Central Processing Unit</dfn> (CPU),
operates with data and communicates with its environment (registers, memory and devices).
A typical operation reads a piece of information from a register, memory or port (I/O device),
makes some manipulation with the data and writes it back to the environment.
The least addressable unit is a single <strong>byte</strong> (1 B) and their number is limited by the
<dfn>addressing space</dfn>.
A register is identified by its name, a device is identified by its port number,
a byte in memory is identified by its address.</p>

<table><caption>CPU addressing space</caption>
<tr><th>CPU mode</th><th>GPR </th><th>I/O port </th><th>Memory addressing </th></tr>
<tr><th>16-bit</th><td> 8* 2 B</td><td>64 KB (2<sup>16</sup>)</td><td>1 MB (2<sup>16+4</sup>)</td></tr>
<tr><th>32-bit</th><td> 8* 4 B</td><td>64 KB (2<sup>16</sup>)</td><td>4 GB (2<sup>32</sup>)</td></tr>
<tr><th>64-bit</th><td>16* 8 B</td><td>64 KB (2<sup>16</sup>)</td><td>16384 PB (2<sup>64</sup>)</td></tr>
</table>

<h3 id="Addresses"><a href="#Elements">&uarr; Addresses</a></h3>
<p>Addressing space is limited by the CPU architecture and by
the number of wires connecting addressing pins between the CPU and the memory chips.
A combination of logical zeros and ones, which can be measured on those wires,
is called <dfn id="PhysicalAddress" title="PhA - physical address">physical address</dfn> (PhA).</p>
<p>From an application programmer's point of view, the processor writes or reads
from <dfn id="VirtualAddress" title="VA - virtual address">virtual address</dfn> (VA).
If the memory segmentation is not taken into account, virtual address is sometimes called
<dfn id="LinearAddress" title="LA - linear address">linear address</dfn> (LA).
As a matter of historical fact both virtual and physical address were identical only
in first generations of processors operating in real mode without memory cache and memory paging.</p>
<p>The objects in the linked image of a protected-mode program are often addressed
with an offset from the beginning of an image loaded in memory (from the ImageBase).
Such offset is called <dfn id="RelativeVirtualAddress"
title="RVA - relative virtual address">relative virtual address</dfn> (RVA).</p>
<p>And similary, the position of the data items in file formats are sometimes identified with
<dfn id="FA" title="FA - File Address">file address</dfn> (FA), that is
defined as the distance between start of the file and the actual data item position in this file.</p>
<h6>Address is a symbolic representation of some position in memory.</h6>
<p>PhA, VA, LA, RVA, FA are integer non-negative <strong>plain numbers</strong>,
but addressing objects or data at assembly-time is rather more complicated.
From historical reasons, the addressing space is divided into segments of memory
and each segment is identified by the contents of a <em>segment register</em>.
An <dfn id="Address" title="Address">address</dfn> at assembly-time is expressed
as number of bytes off, (hence the name <strong>offset</strong>) between the position
and the start of its segment, and the <strong>segment</strong> identification.
See also the chapters <a href="#AddressSymbols">Address symbols</a>
and <a href="#AddressExpressions">Address expressions</a>.</p>
<h3 id="Alignment"><a href="#Elements">&uarr; Alignment</a></h3>
<p>Data and code are retrieved from memory faster when their address is <em>aligned</em>,
which means that is <em>rounded</em> to a value which in turn is a multiple of power of two.
Even though most of IA-32 CPU instructions can cope with unaligned data, it takes more time as the data
read from memory are not in the same cache page and the CPU may need to shift
the information internally during the fetch-time.</p>
<p>For the best performance, memory variables should be aligned to their <em>natural alignment</em> which
corresponds with their size, see the <em>Autoalign</em> column in
<a href="#DataTypes">Data types</a> table. Doublewords, for instance, have
autoalign value 4, which says that the last two bits of a properly aligned address
should be zero. QWORD are aligned to 8, therefore the last three bits (8=2<sup>3</sup>)
should be zero.</p>
<p>This alignment can be achieved explicitly with <a href="#ALIGN">ALIGN</a> pseudoinstruction,
or with the <a href="#ALIGNeq">ALIGN=</a> keyword given in machine instruction or in
<a href="#PROC">PROC</a> and <a href="#PROC1">PROC1</a> pseudoinstructions.</p>
<p>Memory variables are being aligned by &euro;ASM implicitly when the <a href="#EUROASM">EUROASM</a>
option <a href="#AUTOALIGNeq">AUTOALIGN=ON</a> is set. For instance the statement
<code>SomeDword: DD 1234</code> is autoaligned by 4 (offset of SomeDword can be
divided by 4 without a remainder). An important concept is the <em>alignment stuff</em>, which fills the space
in front of the aligned instruction. It is zero <kbd>0x00</kbd> in data segments
and NOP <kbd>0x90</kbd> or <a href="#InsEnhNOP">multibyte NOP</a> in code segments. </p>

<p>The align value may be a numeric expression which evaluates to 1, 2, 4, 8 or a higher power of two.
&euro;ASM accepts without warning a zero or an empty value, too, which is identical to ALIGN=1
(it has no effect). Beside the numeric values ALIGN also accepts the enumerated values
<dfn>BYTE, WORD, DWORD, QWORD, OWORD, YWORD, ZWORD</dfn> or their short versions
<dfn>B, W, D, Q, O, Y, Z</dfn>.</p>
<p>Alignment is always limited by the alignment of the segment on which the statement lies in.
If the current segment is DWORD aligned, we cannot ask for a QWORD or an OWORD alignment
in this segment. The default segment alignment is OWORD (10h) in &euro;ASM and it is increased
to <a href="#SECTIONALIGNeq">SectionAlign</a> (usually by 1000h) when the assembled program is in ELF or PE/DLL format.</p>
<p>Beside the instruction modifier <code>ALIGN=</code> the alignment may also be established
with the  explicit  <a href="#ALIGN">ALIGN</a> pseudoinstruction, which allows for intentional disalignment, too.</p>

<h3 id="Registers" title="Register"><a href="#Elements">&uarr; Registers</a></h3>
<h6>Register is a small and fast variable with fixed-size located on the CPU chip.</h6>
<p>Though a register remembers information written to it,
it is not a part of the addressable memory.
Registers can be referenced by their names only, they have no address.</p>
<table>
<caption>Registers table</caption>
<tr><th>Family</th><th><small>REGTYPE#</small></th><th>Members</th><th>Size</th></tr>
<tr><td>GPR 8-bit</td><td>'B'</td><td>AL, AH, BL, BH, CL, CH, DL, DH,
<br/>DIB, SIB, BPB, SPB, R8B, R9B, R10B, R11B, R12B, R13B, R14B, R15B
<br/>DIL, SIL, BPL, SPL, R8L, R9L, R10L, R11L, R12L, R13L, R14L, R15L</td><td>1</td></tr>
<tr><td>GPR 16-bit</td><td>'W'</td><td>AX, BX, CX, DX, BP, SP, SI, DI, R8W, R9W, R10W, R11W, R12W, R13W, R14W, R15W</td><td>2</td></tr>
<tr><td>GPR 32-bit</td><td>'D'</td><td>EAX, EBX, ECX, EDX, EBP, ESP, ESI, EDI, R8D, R9D, R10D, R11D, R12D, R13D, R14D, R15D</td><td>4</td></tr>
<tr><td>GPR 64-bit</td><td>'Q'</td><td>RAX, RBX, RCX, RDX, RBP, RSP, RSI, RDI, R8, R9, R10, R11, R12, R13, R14, R15</td><td>8</td></tr>
<tr><td>Segment</td><td>'S'</td><td>CS, SS, DS, ES, FS, GS</td><td>2</td></tr>
<tr><td>FPU</td><td>'F'</td><td>ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7</td><td>10</td></tr>
<tr><td>MMX</td><td>'M'</td><td>MM0, MM1, MM2, MM3, MM4, MM5, MM6, MM7</td><td>8</td></tr>
<tr><td>XMM</td><td>'X'</td><td>XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6, XMM7, XMM8, XMM9, XMM10, XMM11, XMM12, XMM13, XMM14, XMM15,
XMM16, XMM17, XMM18, XMM19, XMM20, XMM21, XMM22, XMM23, XMM24, XMM25, XMM26, XMM27, XMM28, XMM29, XMM30, XMM31</td><td>16</td></tr>
<tr><td>AVX</td><td>'Y'</td><td>YMM0, YMM1, YMM2, YMM3, YMM4, YMM5, YMM6, YMM7, YMM8, YMM9, YMM10, YMM11, YMM12, YMM13, YMM14, YMM15,
YMM16, YMM17, YMM18, YMM19, YMM20, YMM21, YMM22, YMM23, YMM24, YMM25, YMM26, YMM27, YMM28, YMM29, YMM30, YMM31</td><td>32</td></tr>
<tr><td>AVX-512</td><td>'Z'</td><td>ZMM0, ZMM1, ZMM2, ZMM3, ZMM4, ZMM5, ZMM6, ZMM7, ZMM8, ZMM9, ZMM10, ZMM11, ZMM12, ZMM13, ZMM14, ZMM15,
ZMM16, ZMM17, ZMM18, ZMM19, ZMM20, ZMM21, ZMM22, ZMM23, ZMM24, ZMM25, ZMM26, ZMM27, ZMM28, ZMM29, ZMM30, ZMM31</td><td>64</td></tr>
<tr><td>Mask</td><td>'K'</td><td>K0. K1, K2. K3, K4, K5, K6, K7</td><td>8</td></tr>
<tr><td>Bound</td><td>'N'</td><td>BND0, BND1, BND2, BND3</td><td>16</td></tr>
<tr><td>Control</td><td>'C'</td><td>CR0, CR2, CR3, CR4, CR8</td><td>4</td></tr>
<tr><td>Debug</td><td>'E'</td><td>DR0, DR1, DR2, DR3, DR6, DR7</td><td>4</td></tr>
<tr><td>Test</td><td>'T'</td><td>TR3, TR4, TR5</td><td>4</td></tr>
</table>

<p>Register names are case insensitive.
<dfn id="GPR" title="GPR">General Purpose Registers</dfn> (GPR) are aliased, for instance
AL is another name for the lower half of AX, which is the lower half
of EAX, which is the lower half of RAX.</p>
<p>Similary, SIMD (AVX) registers are aliased as well: XMM0 is another name for the lower half of YMM0,
which is the lower half of ZMM0.</p>
<p>Names of 8-bit registers DIB, SIB, BPB, SPB, R8B..R15B are aliases for the least significant
byte of RDI, RSI, RBP, RSP, R8..R15. They may also be referred
as DIL, SIL, BPL, SPL, R8L..R15L, as used in Intel manual. &euro;ASM supports both suffixes ~L and ~B.
Those registers are available in 64-bit mode only.</p>
<p>Some other assemblers and Intel manuals use notation ST(0), ST(1)..ST(7) for Floating-Point Unit
register names, but this syntax is not accepted in &euro;ASM. Neither can be ST0 register
aliased with ST (top of the FPU stack).</p>
<p>Processor x86 contains some other registers which hold flags, descriptor tables, FPU control and status registers,
but they are not listed in the table above because they are not directly accessible by their name.
</p>

<h3 id="ConditionCodes"><a href="#Elements">&uarr; Condition codes</a></h3>
<h4><a href="#ConditionCodesGeneral">General condition codes &darr;</a></h4>
<h4><a href="#ConditionCodesSSE">SSE condition codes &darr;</a></h4>
<p>The result of some CPU operations is treated as a predicate with mnemonic shortcut
that can be used as a part of instruction name.</p>

<h4 id="ConditionCodesGeneral"><a href="#ConditionCodes">&uarr; General condition codes</a></h4>
<p>Some combinations of CPU flags ZF, CF, OF, SF, PF are given special names,
so called <dfn>condition codes</dfn>. They are used in mnemonic of conditional
branching using the jump instructions or in bit-manipulation general-purpose instructions.</p>
<p>Inverted code can be used in macroinstructions to bypass region of code when the condition is not met.
See the automatic %variable  <a href="#InvertedCondition">inverted condition code</a>.</p>
<table>
<caption>General condition codes table</caption>
<tr><th>Num.<br/>value</th><th>Mnemonic<br/>code</th><th>Alias</th><th>Description</th><th>Condition</th><th>Inverted<br/>mnem.code</th></tr>
<tr><td>0x4</td><td>E   </td><td>Z  </td><td>Equal                </td><td>ZF=1          </td><td>NE  </td></tr>
<tr><td>0x5</td><td>NE  </td><td>NZ </td><td>Not Equal            </td><td>ZF=0          </td><td>E   </td></tr>
<tr><td>0x4</td><td>Z   </td><td>E  </td><td>Zero                 </td><td>ZF=1          </td><td>NZ  </td></tr>
<tr><td>0x5</td><td>NZ  </td><td>NE </td><td>Not Zero             </td><td>ZF=0          </td><td>Z   </td></tr>
<tr><td>0x2</td><td>C   </td><td>B  </td><td>Carry                </td><td>CF=1          </td><td>NC  </td></tr>
<tr><td>0x3</td><td>NC  </td><td>NB </td><td>Not Carry            </td><td>CF=0          </td><td>C   </td></tr>
<tr><td>0x2</td><td>B   </td><td>C  </td><td>Borrow               </td><td>CF=1          </td><td>NB  </td></tr>
<tr><td>0x3</td><td>NB  </td><td>NC </td><td>Not Borrow           </td><td>CF=0          </td><td>B   </td></tr>
<tr><td>0x0</td><td>O   </td><td>   </td><td>Overflow             </td><td>OF=1          </td><td>NO  </td></tr>
<tr><td>0x1</td><td>NO  </td><td>   </td><td>Not Overflow         </td><td>OF=0          </td><td>O   </td></tr>
<tr><td>0x8</td><td>S   </td><td>   </td><td>Sign                 </td><td>SF=1          </td><td>NS  </td></tr>
<tr><td>0x9</td><td>NS  </td><td>   </td><td>Not Sign             </td><td>SF=0          </td><td>S   </td></tr>
<tr><td>0xA</td><td>P   </td><td>PE </td><td>Parity               </td><td>PF=1          </td><td>NP  </td></tr>
<tr><td>0xB</td><td>NP  </td><td>PO </td><td>Not Parity           </td><td>PF=0          </td><td>P   </td></tr>
<tr><td>0xA</td><td>PE  </td><td>P  </td><td>Parity Even          </td><td>PF=1          </td><td>PO  </td></tr>
<tr><td>0xB</td><td>PO  </td><td>NP </td><td>Parity Odd           </td><td>PF=0          </td><td>PE  </td></tr>
<tr><td>0x7</td><td>A   </td><td>NBE</td><td>Above                </td><td>CF=0 &amp;&amp; ZF=0  </td><td>NA  </td></tr>
<tr><td>0x6</td><td>NA  </td><td>BE </td><td>Not Above            </td><td>CF=1 || ZF=1  </td><td>A   </td></tr>
<tr><td>0x3</td><td>AE  </td><td>NB </td><td>Above or Equal       </td><td>CF=0          </td><td>NAE </td></tr>
<tr><td>0x2</td><td>NAE </td><td>B  </td><td>Not Above nor Equal  </td><td>CF=1          </td><td>AE  </td></tr>
<tr><td>0x2</td><td>B   </td><td>NAE</td><td>Below                </td><td>CF=1          </td><td>NB  </td></tr>
<tr><td>0x3</td><td>NB  </td><td>AE </td><td>Not Below            </td><td>CF=0          </td><td>B   </td></tr>
<tr><td>0x6</td><td>BE  </td><td>NA </td><td>Below or Equal       </td><td>CF=1 || ZF=1  </td><td>NBE </td></tr>
<tr><td>0x7</td><td>NBE </td><td>A  </td><td>Not Below nor Equal  </td><td>CF=0 &amp;&amp; ZF=0  </td><td>BE </td></tr>
<tr><td>0xF</td><td>G   </td><td>NLE</td><td>Greater              </td><td>SF=OF &amp;&amp; ZF=0 </td><td>NG  </td></tr>
<tr><td>0xE</td><td>NG  </td><td>LE </td><td>Not Greater          </td><td>SF&lt;&gt;OF || ZF=1</td><td>G   </td></tr>
<tr><td>0xD</td><td>GE  </td><td>NL </td><td>Greater or Equal     </td><td>SF=OF         </td><td>NGE </td></tr>
<tr><td>0xC</td><td>NGE </td><td>L  </td><td>Not Greater nor Equal</td><td>SF&lt;&gt;OF        </td><td>GE  </td></tr>
<tr><td>0xC</td><td>L   </td><td>NGE</td><td>Less                 </td><td>SF&lt;&gt;OF        </td><td>NL  </td></tr>
<tr><td>0xD</td><td>NL  </td><td>GE </td><td>Not Less             </td><td>SF=OF         </td><td>L   </td></tr>
<tr><td>0xE</td><td>LE  </td><td>NG </td><td>Less or Equal        </td><td>SF&lt;&gt;OF || ZF=1</td><td>NLE </td></tr>
<tr><td>0xF</td><td>NLE </td><td>G  </td><td>Not Less nor Equal   </td><td>SF=OF &amp;&amp; ZF=0 </td><td>LE  </td></tr>
<tr><td></td><td>CXZ </td><td>   </td><td>CX register is Zero  </td><td>CX=0          </td><td>    </td></tr>
<tr><td></td><td>ECXZ</td><td>   </td><td>ECX register is Zero </td><td>ECX=0         </td><td>    </td></tr>
<tr><td></td><td>RCXZ</td><td>   </td><td>RCX register is Zero </td><td>RCX=0         </td><td>    </td></tr>
</table>

<h4 id="ConditionCodesSSE"><a href="#ConditionCodes">&uarr; SSE condition codes</a></h4>
<p>Streaming Single Instruction Multiple Data Extension instructions
(V)CMP<em>cc</em>SS,(V)CMP<em>cc</em>SD,(V)CMP<em>cc</em>PS,(V)CMP<em>cc</em>PD
use different set of condition codes <em>cc</em>.
<blockquote>Only aliased mnemonic code is documented
for legacy instructions CMP<em>cc</em>SS,CMP<em>cc</em>SD,CMP<em>cc</em>PS,CMP<em>cc</em>PD.
</blockquote>
<table>
<caption>SSE condition codes table</caption>
<tr><th>Num.<br/>value</th><th>Mnemonic<br/>code</th><th>Alias</th><th>Description</th></tr>
<tr><td>0x00</td><td>EQ_OQ</td><td>EQ</td><td>Equal, Ordered, Quiet</td></tr>
<tr><td>0x01</td><td>LT_OS</td><td>LT</td><td>Less Than, Ordered, Signaling</td></tr>
<tr><td>0x02</td><td>LE_OS</td><td>LE</td><td>Less than or Equal, Ordered, Signaling</td></tr>
<tr><td>0x03</td><td>UNORD_Q</td><td>UNORD</td><td>Unordered, Quiet</td></tr>
<tr><td>0x04</td><td>NEQ_UQ</td><td>NEQ</td><td>Not Equal, Unordered, Quiet</td></tr>
<tr><td>0x05</td><td>NLT_US</td><td>NLT</td><td>Not Less Than, Unordered, Signaling</td></tr>
<tr><td>0x06</td><td>NLE_US</td><td>NLE</td><td>Not Less than or Equal,Unordered, Signaling</td></tr>
<tr><td>0x07</td><td>ORD_Q</td><td>ORD</td><td>Ordered, Quiet</td></tr>
<tr><td>0x08</td><td>EQ_UQ</td><td>  </td><td>Equal, Unordered, Quiet</td></tr>
<tr><td>0x09</td><td>NGE_US</td><td>NGE</td><td>Not Greater than or Equal, Unordered, Signaling</td></tr>
<tr><td>0x0A</td><td>NGT_US</td><td>NGT</td><td>Not Greater Than, Unordered, Signaling</td></tr>
<tr><td>0x0B</td><td>FALSE_OQ</td><td>FALSE</td><td>False, Ordered, Quiet</td></tr>
<tr><td>0x0C</td><td>NEQ_OQ</td><td>   </td><td>Not Equal, Ordered, Quiet</td></tr>
<tr><td>0x0D</td><td>GE_OS</td><td>GE</td><td>Greater than or Equal, Ordered, Signaling</td></tr>
<tr><td>0x0E</td><td>GT_OS</td><td>GT</td><td>Greater Than, Ordered, Signaling</td></tr>
<tr><td>0x0F</td><td>TRUE_UQ</td><td>TRUE</td><td>True, Unordered, Quiet</td></tr>
<tr><td>0x10</td><td>EQ_OS</td><td></td><td>Equal, Ordered, Signaling</td></tr>
<tr><td>0x11</td><td>LT_OQ</td><td></td><td>Less Than, Ordered, Quiet</td></tr>
<tr><td>0x12</td><td>LE_OQ</td><td></td><td>Less than or Equal, Ordered, Quiet</td></tr>
<tr><td>0x13</td><td>UNORD_S</td><td></td><td>Unordered, Signaling</td></tr>
<tr><td>0x14</td><td>NEQ_US</td><td></td><td>Not Equal, Unordered, Signaling</td></tr>
<tr><td>0x15</td><td>NLT_UQ</td><td></td><td>Not Less Than, Unordered, Quiet</td></tr>
<tr><td>0x16</td><td>NLE_UQ</td><td></td><td>Not Less than or Equal, Unordered, Quiet</td></tr>
<tr><td>0x17</td><td>ORD_S</td><td></td><td>Ordered, Signaling</td></tr>
<tr><td>0x18</td><td>EQ_US</td><td></td><td>Equal, Unordered, Signaling</td></tr>
<tr><td>0x19</td><td>NGE_UQ</td><td></td><td>Not Greater than or Equal, Unordered, Quiet</td></tr>
<tr><td>0x1A</td><td>NGT_UQ</td><td></td><td>Not Greater Than, Unordered, Quiet</td></tr>
<tr><td>0x1B</td><td>FALSE_OS</td><td></td><td>False, Ordered, Signaling</td></tr>
<tr><td>0x1C</td><td>NEQ_OS</td><td></td><td>Not Equal, Ordered, Signaling</td></tr>
<tr><td>0x1D</td><td>GE_OQ</td><td></td><td>Greater than or Equal, Ordered, Quiet</td></tr>
<tr><td>0x1E</td><td>GT_OQ</td><td></td><td>Greater Than, Ordered, Quiet</td></tr>
<tr><td>0x1F</td><td>TRUE_US</td><td></td><td>True, Unordered, Signaling</td></tr>
</table>

<h3 id="Operators"><a href="#Elements">&uarr; Operators</a></h3>
<h6>Operator is an order to compute at assembly-time.</h6>
<p>Combination of punctuation characters is used in &euro;ASM to prescribe various operations with numbers,
addresses, strings and registers in the assembly process. Placing a <dfn>binary operator</dfn>
between the two numbers tells &euro;ASM to replace these three elements with the result of operation.
Some operators are <dfn>unary</dfn>, they modify the value of operand which they stand in front of.</p>
<p>All operations implemented in &euro;ASM are presented in the following table.</p>
<table id="OpPriority" title="Operators priority">
<caption id="Priority" title="Priority of operations">Operation table</caption>
<tr><th>Operation       </th><th>Priority</th><th>Properties                   </th><th>Left<br/>operand</th><th>Operator</th>                 <th>Right<br/>operand</th><th>Result</th><th>II <sup>(6)</sup></th></tr>
<tr><td>Membership            </td><td>16</td><td>binary noncomm. <sup>(1)</sup></td><td>identifier</td><td><kbd>.</kbd>                       </td><td>identifier</td><td>identifier        </td><td>    </td></tr>
<tr><td>Attribute             </td><td>15</td><td>unary noncomm.  <sup>(3)</sup></td><td>         </td><td><kbd><em>attr</em>#</kbd>          </td><td>element    </td><td>number or address  </td><td>    </td></tr>
<tr><td>Case-insens. Equal    </td><td>14</td><td>binary commutative <sup>(2)</sup></td><td>string</td><td><kbd>==</kbd>                       </td><td>string    </td><td>boolean           </td><td>CMPS</td></tr>
<tr><td>Case-sens. Equal      </td><td>14</td><td>binary commutative           </td><td>string    </td><td><kbd>===</kbd>                      </td><td>string    </td><td>boolean           </td><td>CMPS</td></tr>
<tr><td>Case-insens. Nonequal </td><td>14</td><td>binary commutative <sup>(2)</sup></td><td>string</td><td><kbd>!==</kbd>                      </td><td>string    </td><td>boolean           </td><td>CMPS</td></tr>
<tr><td>Case-sens. Nonequal   </td><td>14</td><td>binary commutative           </td><td>string    </td><td><kbd>!===</kbd>                     </td><td>string    </td><td>boolean           </td><td>CMPS</td></tr>
<tr><td>Plus                  </td><td>13</td><td>unary <sup>(3)</sup>         </td><td>          </td><td><kbd>+</kbd>                        </td><td>number    </td><td>numeric           </td><td>NOP </td></tr>
<tr><td>Minus                 </td><td>13</td><td>unary <sup>(3)</sup>         </td><td>          </td><td><kbd>-</kbd>                        </td><td>number    </td><td>numeric           </td><td>NEG </td></tr>
<tr><td>Shift Logical Left    </td><td>12</td><td>binary noncommutative        </td><td>number    </td><td><kbd>&lt;&lt;</kbd>                 </td><td>number    </td><td>numeric           </td><td>SHL </td></tr>
<tr><td>Shift Arithmetic Left </td><td>12</td><td>binary noncommutative        </td><td>number    </td><td><kbd>#&lt;&lt;</kbd>                </td><td>number    </td><td>numeric           </td><td>SAL </td></tr>
<tr><td>Shift Logical Right   </td><td>12</td><td>binary noncommutative        </td><td>number    </td><td><kbd>&gt;&gt;</kbd>                 </td><td>number    </td><td>numeric           </td><td>SHR </td></tr>
<tr><td>Shift Arithmetic Right</td><td>12</td><td>binary noncommutative        </td><td>number    </td><td><kbd>#&gt;&gt;</kbd>                </td><td>number    </td><td>numeric           </td><td>SAR </td></tr>
<tr><td>Signed Division       </td><td>11</td><td>binary noncommutative        </td><td>number    </td><td><kbd>#/</kbd>                       </td><td>number    </td><td>numeric           </td><td>IDIV</td></tr>
<tr><td>Division              </td><td>11</td><td>binary noncommutative        </td><td>number    </td><td><kbd>/</kbd>                        </td><td>number    </td><td>numeric           </td><td>DIV </td></tr>
<tr><td>Signed Modulo         </td><td>11</td><td>binary noncommutative        </td><td>number    </td><td><kbd>#\</kbd>                       </td><td>number    </td><td>numeric           </td><td>IDIV</td></tr>
<tr><td>Modulo                </td><td>11</td><td>binary noncommutative        </td><td>number    </td><td><kbd>\</kbd>                        </td><td>number    </td><td>numeric           </td><td>DIV </td></tr>
<tr><td>Signed Multiplication </td><td>11</td><td>binary commutative           </td><td>number    </td><td><kbd>#*</kbd>                       </td><td>number    </td><td>numeric           </td><td>IMUL</td></tr>
<tr><td>Multiplication        </td><td>11</td><td>binary commutative           </td><td>number    </td><td><kbd>*</kbd>                        </td><td>number    </td><td>numeric           </td><td>MUL </td></tr>
<tr><td>Scaling               </td><td>10</td><td>binary commutative <sup>(5)</sup></td><td>number</td><td><kbd>*</kbd>                        </td><td>register  </td><td>address expression</td><td>    </td></tr>
<tr><td>Addition              </td><td> 9</td><td>binary commutative           </td><td>number    </td><td><kbd>+</kbd>                        </td><td>number    </td><td>numeric           </td><td>ADD </td></tr>
<tr><td>Subtraction           </td><td> 9</td><td>binary noncommutative        </td><td>number    </td><td><kbd>-</kbd>                        </td><td>number    </td><td>numeric           </td><td>SUB </td></tr>
<tr><td>Indexing              </td><td> 9</td><td>binary commutative <sup>(5)</sup></td><td>number</td><td><kbd>+</kbd>                        </td><td>register  </td><td>address expression</td><td>    </td></tr>
<tr><td>Bitwise NOT           </td><td> 8</td><td>unary <sup>(3)</sup>         </td><td>          </td><td><kbd>~</kbd>                        </td><td>number    </td><td>numeric           </td><td>NOT </td></tr>
<tr><td>Bitwise AND           </td><td> 7</td><td>binary commutative           </td><td>number    </td><td><kbd>&amp;</kbd>                    </td><td>number    </td><td>numeric           </td><td>AND </td></tr>
<tr><td>Bitwise OR            </td><td> 6</td><td>binary commutative           </td><td>number    </td><td><kbd>|</kbd>                        </td><td>number    </td><td>numeric           </td><td>OR  </td></tr>
<tr><td>Bitwise XOR           </td><td> 6</td><td>binary commutative           </td><td>number    </td><td><kbd>^</kbd>                        </td><td>number    </td><td>numeric           </td><td>XOR </td></tr>
<tr><td>Above                 </td><td> 5</td><td>binary noncommutative        </td><td>number    </td><td><kbd>&gt;</kbd>                     </td><td>number    </td><td>boolean           </td><td>JA  </td></tr>
<tr><td>Greater               </td><td> 5</td><td>binary noncommutative        </td><td>number    </td><td><kbd>#&gt;</kbd>                    </td><td>number    </td><td>boolean           </td><td>JG  </td></tr>
<tr><td>Below                 </td><td> 5</td><td>binary noncommutative        </td><td>number    </td><td><kbd>&lt;</kbd>                     </td><td>number    </td><td>boolean           </td><td>JB  </td></tr>
<tr><td>Lower                 </td><td> 5</td><td>binary noncommutative        </td><td>number    </td><td><kbd>#&lt;</kbd>                    </td><td>number    </td><td>boolean           </td><td>JL  </td></tr>
<tr><td>Above or Equal        </td><td> 5</td><td>binary noncommutative        </td><td>number    </td><td><kbd>&gt;=</kbd>                    </td><td>number    </td><td>boolean           </td><td>JAE </td></tr>
<tr><td>Greater or Equal      </td><td> 5</td><td>binary noncommutative        </td><td>number    </td><td><kbd>#&gt;=</kbd>                   </td><td>number    </td><td>boolean           </td><td>JGE </td></tr>
<tr><td>Below or Equal        </td><td> 5</td><td>binary noncommutative        </td><td>number    </td><td><kbd>&lt;=</kbd>                    </td><td>number    </td><td>boolean           </td><td>JBE </td></tr>
<tr><td>Lower or Equal        </td><td> 5</td><td>binary noncommutative        </td><td>number    </td><td><kbd>#&lt;=</kbd>                   </td><td>number    </td><td>boolean           </td><td>JLE </td></tr>
<tr><td>Numeric Equal         </td><td> 5</td><td>binary commutative           </td><td>number    </td><td><kbd>=</kbd>                        </td><td>number    </td><td>boolean           </td><td>JE  </td></tr>
<tr><td>Numeric Nonequal      </td><td> 5</td><td>binary commutative <sup>(4)</sup></td><td>number</td><td><kbd>!=</kbd> or <kbd>&lt;&gt;</kbd></td><td>number    </td><td>boolean           </td><td>JNE </td></tr>
<tr><td>Logical NOT           </td><td> 4</td><td>unary <sup>(3)</sup>         </td><td>          </td><td><kbd>!</kbd>                        </td><td>number    </td><td>boolean           </td><td>NOT </td></tr>
<tr><td>Logical AND           </td><td> 3</td><td>binary commutative           </td><td>number    </td><td><kbd>&amp;&amp;</kbd>               </td><td>number    </td><td>boolean           </td><td>AND </td></tr>
<tr><td>Logical OR            </td><td> 2</td><td>binary commutative           </td><td>number    </td><td><kbd>||</kbd>                       </td><td>number    </td><td>boolean           </td><td>OR  </td></tr>
<tr><td>Logical XOR           </td><td> 2</td><td>binary commutative           </td><td>number    </td><td><kbd>^^</kbd>                       </td><td>number    </td><td>boolean           </td><td>XOR </td></tr>
<tr><td>Segment separation    </td><td> 1</td><td>binary noncommutative        </td><td>number    </td><td><kbd>:</kbd>                        </td><td>number    </td><td>address expression</td><td>    </td></tr>
<tr><td>Data duplication      </td><td> 0</td><td>binary noncomm. <sup>(1) (5)</sup></td><td>number</td><td><kbd>*</kbd>                       </td><td>datatype  </td><td>data expression   </td><td>    </td></tr>
<tr><td>Range                 </td><td> 0</td><td>binary noncomm. <sup>(1)</sup></td><td>number    </td><td><kbd>..</kbd>                      </td><td>number    </td><td>range             </td><td>    </td></tr>
<tr><td>Substring             </td><td> 0</td><td>binary noncomm. <sup>(1)</sup></td><td>text      </td><td><kbd>[ ]</kbd>                     </td><td>range     </td><td>text              </td><td>    </td></tr>
<tr><td>Sublist               </td><td> 0</td><td>binary noncomm. <sup>(1)</sup></td><td>text      </td><td><kbd>{ }</kbd>                     </td><td>range     </td><td>text              </td><td>    </td></tr>
</table>
<p><sup>(1)</sup> Special operations <b>Membership, Duplication, Range, Substring, Sublist</b>
are solved at parser level rather than by the &euro;ASM expression evaluator. They are listed here only for completeness.</p>
<p><sup>(2)</sup> <b>Case insensitive</b> string-compare operations ignore the character case of letters <kbd>A..Z</kbd> but not the case
of accented national letters above ASCII 127.</p>
<p><sup>(3)</sup>  <b>Unary</b> operator applies to the following operand. <b>Binary</b> operators work with two operands.
<b>Attribute</b> operator applies to the following element or expression in parenthesis/brackets.</p>
<p><sup>(4)</sup> <b>Numeric Nonequal</b> operation has two aliased operators <kbd>!=</kbd> and <kbd>&lt;&gt;</kbd>.
You can choose whichever you like.</p>
<p><sup>(5)</sup> Operation <b>Multiplication</b>, <b>Scaling</b> and <b>Duplication</b> share the same operator <kbd>*</kbd>.
Similary <b>Addition</b> and <b>Indexing</b> share operator <kbd>+</kbd>. The actual operation is determined by the operands types.</p>
<p><sup>(6)</sup> Column <b>II</b> illustrates which equivalent machine instruction is used internally
to compute the operation at assembly-time.</p>
<p>The <b>commutative</b> property specifies whether both operands of a binary operation can be exchanged
without having impact to the result.</p>
<p><b>Priority</b> column specifies the order of processing operators.
Higher priority operations compute sooner but this can be changed with priority parenthesis <kbd>( )</kbd>.
Operation with equal priority compute in their notation order (from left to right).</p>
<p>Operations which calculate with <b>signed integers</b> have the operator
prefixed with <kbd>#</kbd>. Operations <b>Addition</b> and <b>Subtraction</b> do not
need a special &quot;#signed&quot; version because they compute with signed and
unsigned integer numbers in the same way.</p>
<p>Both numeric and boolean operations return 64-bit number.
In case of <b>boolean operations</b> the result number has one of the two
possible values: <code>0</code> (FALSE) or <code>-1 = 0xFFFF_FFFF_FFFF_FFFF</code> (TRUE).
For example the expression
<br/><code>  '+' &amp; %1 #&gt;= 0   |  '-' &amp;  %1 #&lt; 0  </code>
is evaluated as
<br/><code>('+' &amp; (%1 #&gt;= 0)) | ('-' &amp; (%1 #&lt; 0))</code>
and its result is the minus sign (45) if <code>%1</code> is negative
and plus sign (43) otherwise.</p>

<blockquote><p>Spaces which separate operands and operators
in expression examples serve only for better readability and they
are not required by &euro;ASM syntax.</p>
<p>Rich set of operators allows &euro;ASM to get rid of cloned pseudoinstructions
such as <code>IFE, IFB, IFIDN, IFIDNI, IFDIF, ERRIDNI, ERRNB...</code>
</p>
<p>The Shift operators family
is given higher priority than in other languages because I treat shifts
as a special kind of multiplication/division.<br />
NASM evaluates the expression <code>4+3&lt;&lt;2</code> as
<code>(4+3)&lt;&lt;2 = 28</code> but in &euro;ASM it is evaluated as
<code>4+(3&lt;&lt;2) = 16)</code>.
</blockquote>
<hr/>
<h3 id="Expressions"><a href="#Elements">&uarr; Expressions</a></h3>
<h4><a href="#NumericExpressions">Numeric and logical expressions &darr;</a></h4>
<h4><a href="#AddressExpressions">Address expressions &darr;</a></h4>
<h4><a href="#RegisterExpressions">Register expressions &darr;</a></h4>
<h4><a href="#DataExpressions">Data expressions &darr;</a></h4>
<h4><a href="#SpecialExpressions">Special expressions &darr;</a></h4>
<p><dfn>Expression</dfn> is a combination of operands, operators and
priority parenthesis <kbd>()</kbd> which follows the rules in the table below.</p>
<table>
<caption>Syntax of expression</caption>
<tr><td>What may follow</td><th>left parenthesis</th><th>unary operator</th>
<th>operand</th><th>binary operator</th><th>right parenthesis</th><th>end of expression</th></tr>
<tr><th>beginning of expression</th><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>no</td><td>yes <sup>(2)</sup></td></tr>
<tr><th>left parenthesis</th><td>yes</td><td>yes</td><td>yes</td><td>no</td><td>yes <sup>(2)</sup></td><td>no</td></tr>
<tr><th>unary operator</th><td>yes</td><td>no</td><td>yes</td><td>no</td><td>no</td><td>no</td></tr>
<tr><th>operand</th><td>no</td><td>no</td><td>no</td><td>yes</td><td>yes</td><td>yes</td></tr>
<tr><th>binary operator</th><td>yes</td><td>yes <sup>(1)</sup></td><td>yes</td><td>no</td><td>no</td><td>no</td></tr>
<tr><th>right parenthesis</th><td>no</td><td>no</td><td>no</td><td>yes</td><td>yes</td><td>yes</td></tr>
</table>
<p><sup>(1)</sup> Unary operator is permitted after the binary operation,
e.g. <code>5*-3</code> evaluates as <code>5*(-3)</code>.</p>
<p><sup>(2)</sup> Empty expression, empty parenthesis contents and superabundant parenthesis are valid.</p>

<p>The table shows which combinations are permitted.
It should be read by rows, for instance the first line stipulates that
expression may begin with the left parenthesis, unary operator or an operand.
<p>Expression is parsed into elementar unary and binary
operations, which are calculated according to the priority.
Operations with the same priority are computed from left to right.
Priority can be increased using parenthesis <kbd>( )</kbd>.
</p>

<h4 id="NumericExpressions"><a href="#Expressions">&uarr; Numeric and logical expressions</a></h4>
<h5><a href="#StringCompare">String compare &darr;</a></h5>
<h5><a href="#NumericCompare">Numeric compare &darr;</a></h5>
<h5><a href="#NumericArithmetic">Numeric arithmetic &darr;</a></h5>
<h5><a href="#Shift">Shift &darr;</a></h5>
<h5><a href="#BitwiseArithmetic">Bitwise arithmetic &darr;</a></h5>
<h5><a href="#BooleanAlgebra">Boolean algebra &darr;</a></h5>

<h6>Numeric operations calculate internally with 64-bit integers,
no matter if the target program is intended to run in 64-bit mode or not.</h6>

<p>Result of the numeric or logical expression is a scalar 64-bit numeric value (signed integer).
It may be treated as a number or as a logical value. Zero result is treated
as boolean <dfn>false</dfn> and any nonzero result is boolean <dfn>true</dfn>.
Pure logical expressions, such as logical NOT, AND, OR, XOR and all compare operations
return 0 when false and 0xFFFF_FFFF_FFFF_FFFF = -1 when true. This enables to use the result
of logical expression in subsequent bitwise operations with all bits.</p>

<h5 id="StringCompare" title="Compare strings"><a href="#NumericExpressions">&uarr; String compare</a></h5>
<p>String compare expressions return a boolean value.
Case insensitive versions convert both strings to the same case before actual comparing;
however this concerns ASCII letters <kbd>A..Z</kbd> only. National letters with
accents in any codepage are always compared case sensitively.</p>
<p>String compare is given the highest priority since no other assembly-time operation
can be performed with strings beside the test of equality.
At assembly time &euro;ASM cannot tell which string is &quot;bigger&quot;.
<samp>|00000000:FFFFFFFFFFFFFFFF | DQ "EAX" ==  "eax"          ; TRUE, the strings are equal.
|00000008:0000000000000000 | DQ "EAX" === "eax"          ; FALSE, the strings differ in character case.
|00000010:FFFFFFFFFFFFFFFF | DQ "I'm OK." === 'I''m OK.' ; TRUE, their netto value is equal.
|00000018:0000000000000000 | DQ "Müller" == "MÜLLER"     ; FALSE because of the different case of umlauted U's.
|00000020:0000000000000000 | DQ "012" == "12"            ; FALSE, the strings are not equal.
|00000028:0000000000000000 | DQ "123" = 123              ; FALSE; the character constant "123"=3355185 which is not 123.
|00000030:                 | DQ "123" == 123             ; Syntax error; right operand is not a string.
|### E6321 String compare InsensEqual with non-string operand in expression ""123" == 123".
|00000030:</samp>
<p>Case insensitive string compare should be used with built-in &euro;ASM elements, such as register or datatype names  , e.g.</p><pre>
 %IF '%1' !== 'ECX'
   %ERROR Only register ECX is expected as the first macro operand.
 %ENDIF</pre>
<p>When we are investigating the presence of punctuation, it's better to use case-sensitive compare,
because it assembles faster (&euro;ASM doesn't have to convert both sides to a common character case):</p><pre>
DoSomethingWithMemoryVar %MACRO
 %IF '%1[1]' !=== '['  ; Test if the 1st operand begins with a square bracket.
   %ERROR The first operand should be a memory variable in [brackets].
 %ENDIF
%ENDMACRO DoSomethingWithMemoryVar</pre>
<p>The test on square bracket in previous example fails if the macro operand is a string or character-constant
in quotes, e.g. <code>DoSomethingWithMemoryVar 'xyz'</code>. The string compare operation will raise
<kbd>E6101 Expression "''' !=== '" is followed by unexpected character "[".</kbd> because of syntax error.
A trick how to avoid E6101 is to compare doubled values. In this case both single or double quotes escape themselves:</p><pre>
DoSomethingWithMemoryVar %MACRO
 %IF '%1[1]%1[1]' !=== '[['  ; Test if the 1st operand begins with a square bracket.
   %ERROR The first operand should be a memory variable in [brackets].
 %ENDIF</pre>

<h5 id="NumericCompare" title="Compare numbers"><a href="#NumericExpressions">&uarr; Numeric compare</a></h5>

<p>The numeric compare operations use a single equal sign <kbd>=</kbd>, optionally combined with
<kbd>&lt;</kbd> or <kbd>&gt;</kbd>
and they can compare values of two plain numbers or offsets of two addresses within the same segment.</p>
<p>Numeric compare can be used to test which side of operation is bigger.
Terms <dfn>above/below</dfn> are used when comparing unsigned numbers or addresses.
Terms <dfn>greater/lower</dfn> are used for comparing signed numbers.
Operators which treat numbers as signed are prefixed with <kbd>#</kbd> modifier.
Virtual addresses are always unsigned, therefore we cannot ask whether they are greater
or lower.</p>
<samp>|00000000:FFFFFFFFFFFFFFFF | DQ 5  <  7              ; TRUE, 5 is below 7.
|00000008:FFFFFFFFFFFFFFFF | DQ 5 #<  7              ; TRUE, 5 is lower than 7.
|00000010:0000000000000000 | DQ 5 #< -7              ; FALSE, 5 is not lower than -7.
|00000018:FFFFFFFFFFFFFFFF | DQ 5  < -7              ; TRUE, 5=0x0000_0000_0000_0005 is below -7=0xFFFF_FFFF_FFFF_FFF9.
|00000020:FFFFFFFFFFFFFFFF | DQ  123   =  0123       ; TRUE, both numbers are equal.
|00000028:0000000000000000 | DQ "123" == "0123"      ; FALSE, both strings are different.
|00000030:0000000000000000 | DQ "123"  = "0123"      ; FALSE, both sides are treated as character constants with different values.
|00000038:                 | DQ "123"  = "000000123" ; "000000123" is not a number, its too big for a character constant.
|### E6131 Character constant "123"  = "000000123" is too big for 64 bits.
|00000038:                 |</samp>

<h5 id="NumericArithmetic"><a href="#NumericExpressions">&uarr; Numeric arithmetic</a></h5>
<p>Common arithmetic operations are <em>Addition, Subtraction, Multiplication,
Division</em> and <em>Modulo</em> (remainder after division).</p>
<p><em>Unary minus</em> may be applied to scalar numeric operand only. <em>Unary plus</em> does not change
the value of operand; it is included in the operator set only for completeness.
Adjacent binary and unary numeric operator is accepted by &euro;ASM, however weird
this may seem. This is useful in evalution expressions with substituted value,
such as <code>5 + %1</code> where the symbolic argument %1 happens to be
negative, e. g. <code>-2</code>. This expression is calculated as
<code>5 + %1 <del>-&gt;</del> 5 + -2 <del>-&gt;</del> 5 + (-2) <del>-&gt;</del> 3</code>.</p>

<p>The greatest permitted value of integer number in &euro;ASM source is
<code>0xFFFF_FFFF_FFFF_FFFF <del>-&gt;</del> 18_446_744_073_709_551_615</code>
as unsigned, or <code>0x7FFF_FFFF_FFFF_FFFF <del>-&gt;</del> 9_223_372_036_854_775_808 </code> as signed.
Overflow at assembly time is ignored in <em>Addition, Subtraction</em> and <em>Shift Logical</em> operation.
Assembly error is reported when overflow occurs during <em>Multiplication</em>
and <em>Shift Arithmetic Left</em> operation, or when division-by-zero happens
during <em>Division</em> or <em>Modulo</em> operation.
This maximum must not be exceeded even in intermediate results during the evaluation,
such as <code>0x7FFF_FFFF_FFFF_FFFF * 2 / 2</code> (&euro;ASM reports error). However, rearranged code
<code>0x7FFF_FFFF_FFFF_FFFFF * (2 / 2)</code> assembles well.</p>
<p>No overflow is reported in following examples of numeric expressions evaluation:</p>
<samp>|00000000:0E00000000000000 | DQ  2 + 3 * 4                                    ; Result is 14.
|00000008:0200000000000000 | DQ 0xFFFF_FFFF_FFFF_FFF9 + 0x0000_0000_0000_0009 ; Result is 2.
|00000010:0200000000000000 | DQ -7 + 9                                        ; Result is 2 (0xFFFF_FFFF_FFFF_FFF9 + 0x0000_0000_0000_0009).
|00000018:0200010000000000 | DQ 0xFFF9 + 0x0009                               ; Result is 65538 (0x0000_0000_0000_FFF9 + 0x0000_0000_0000_0009).
|00000020:                 |</samp>

<p>&euro;ASM calculates with the integer truncated division and with <a class="EXTL" href="links.htm#Modulo">[Modulo]</a>
at assembly-time in the same way as machine instruction
<a class="EXT" href="../easource/iig.htm#IigIDIV">IDIV</a>.</p>
<p>Before the signed division applies, both divident and divisor are internally converted to
positive numbers. Then, having been divided as unsigned, the quotient is converted to negative if one
of the operands (but not both) was negative.
<br/>Remainder in signed modulo operation is converted to negative only when the divident was negative.</p>
<samp>|00000000:                 |; Signed division:
|00000000:0300000000000000 | DQ +14 #/ +4 ; +(0x0000_0000_0000_000E / 0x0000_0000_0000_0004) is +3.
|00000008:FDFFFFFFFFFFFFFF | DQ -14 #/ +4 ; -(0x0000_0000_0000_000E / 0x0000_0000_0000_0004) is -3.
|00000010:FDFFFFFFFFFFFFFF | DQ +14 #/ -4 ; -(0x0000_0000_0000_000E / 0x0000_0000_0000_0004) is -3.
|00000018:0300000000000000 | DQ -14 #/ -4 ; +(0x0000_0000_0000_000E / 0x0000_0000_0000_0004) is +3.
|00000020:                 |; Unsigned division:
|00000020:0300000000000000 | DQ +14  / +4 ;  (0x0000_0000_0000_000E / 0x0000_0000_0000_0004) is 3.
|00000028:FCFFFFFFFFFFFF3F | DQ -14  / +4 ;  (0xFFFF_FFFF_FFFF_FFF2 / 0x0000_0000_0000_0004) is  4_611_686_018_427_387_900.
|00000030:0000000000000000 | DQ +14  / -4 ;  (0x0000_0000_0000_000E / 0xFFFF_FFFF_FFFF_FFFC) is 0.
|00000038:0000000000000000 | DQ -14  / -4 ;  (0xFFFF_FFFF_FFFF_FFF2 / 0xFFFF_FFFF_FFFF_FFFC) is 0.
|00000040:                 |; Signed modulo:
|00000040:0200000000000000 | DQ +14 #\ +4 ; +(0x0000_0000_0000_000E \ 0x0000_0000_0000_0004) is +2.
|00000048:FEFFFFFFFFFFFFFF | DQ -14 #\ +4 ; -(0x0000_0000_0000_000E \ 0x0000_0000_0000_0004) is -2.
|00000050:0200000000000000 | DQ +14 #\ -4 ; +(0x0000_0000_0000_000E \ 0x0000_0000_0000_0004) is +2.
|00000058:FEFFFFFFFFFFFFFF | DQ -14 #\ -4 ; -(0x0000_0000_0000_000E \ 0x0000_0000_0000_0004) is -2.
|00000060:                 |; Unsigned modulo:
|00000060:0200000000000000 | DQ +14  \ +4 ;  (0x0000_0000_0000_000E \ 0x0000_0000_0000_0004) is 2.
|00000068:0200000000000000 | DQ -14  \ +4 ;  (0xFFFF_FFFF_FFFF_FFF2 \ 0x0000_0000_0000_0004) is 2.
|00000070:0E00000000000000 | DQ +14  \ -4 ;  (0x0000_0000_0000_000E \ 0xFFFF_FFFF_FFFF_FFFC) is 14.
|00000078:F2FFFFFFFFFFFFFF | DQ -14  \ -4 ;  (0xFFFF_FFFF_FFFF_FFF2 \ 0xFFFF_FFFF_FFFF_FFFC) is 18_446_744_073_709_551_602.
|00000080:                 |</samp>

<h5 id="Shift" title="Shift operations"><a href="#NumericExpressions">&uarr; Shift</a></h5>
<p>The <em>shift</em> operations are not commutative. Operand on the left side is treated
as a 64-bit integer and shifted to the left or right by the number of bits specified
by the operand on the right side.</p>
<p>Shift operations at assembly time are given higher priority than other numeric operation
because they correspond with computing power of 2 rather than with multiplication or division.
For instance <code>1 &lt;&lt; 7</code> is equivalent to <code>1 * 2<sup>7</sup></code>.</p>
<blockquote>NASM evaluates the expression <code>4 + 3 &lt;&lt; 2</code> as
<code>(4 + 3) &lt;&lt; 2 <del>-&gt;</del> 28</code>, but in &euro;ASM it is evaluated as
<code>4 + (3 &lt;&lt; 2) <del>-&gt;</del> 16</code>.</blockquote>

<p>Bits which enter the least significant bit (LSb) during <em>Shift Left</em> operation
are always 0. Bits which enter the most significant bit (MSb) during <em>Shift Right</em>
operation are either 0 (<em>Shift Logical Right</em>),
or they copy their previous value (<em>Shift Arithmetic Right</em>), thus preserving
the sign of operand.</p>
<p>Bits which leave LSb during <em>Shift Right</em> are discarded.
Bits which leave MSb during <em>Shift Left</em> are discarded, too,
but overflow error <a class="EXT" href="../easource/msg.htm#MsgE">E6311</a> is reported
by &euro;ASM when the sign of result (kept in MSb)
has changed during <em>Shift Arithmetic Left</em>. Overflow sensitivity is the only
difference between <em>Shift Arithmetic Left</em> and <em>Shift Logical Left</em>.</p>
<p>The right operand may be arbitrary number; however when it is greater than 64,
the result is 0 with one exception: negative number shifted arithmetic right by more
than 64 bit results in <code>0xFFFF_FFFF_FFFF_FFFF <del>-&gt;</del> -1</code>.</p>
<p>Shift by 0 bits does nothing. Shift by a negative number just reverses the direction
of actual shift from left to right and vice versa.</p>
<p>Assembly-time rotate operations are not supported.</p>
<samp>|00000000:0000010000000000 | DQ  1 << 16                    ; The result is 65536.
|00000008:F4FFFFFFFFFFFFFF | DQ -3 #<< 2                    ; The result is -12.
|00000010:8078675645342312 | DQ 0x1122_3344_5566_7788  << 4 ; The result is 0x1223_3445_5667_7880.
|00000018:98A9BACBDCEDFE0F | DQ 0xFFEE_DDCC_BBAA_9988  >> 4 ; The result is 0x0FFE_EDDC_CBBA_A998.
|00000020:98A9BACBDCEDFEFF | DQ 0xFFEE_DDCC_BBAA_9988 #>> 4 ; The result is 0xFFFE_EDDC_CBBA_A998.
|00000028:0000000000000000 | DQ 0x8000_0000_0000_0000  << 1 ; The result is 0x0000_0000_0000_0000.
|00000030:                 | DQ 0x8000_0000_0000_0000 #<< 1 ; Overflow, MSb would have been changed.
|### E6311 ShiftArithmeticLeft 64-bit overflow in "0x8000_0000_0000_0000 #<< 1".
|00000030:                 |</samp>

<h5 id="BitwiseArithmetic" title="Bitwise operations"><a href="#NumericExpressions">&uarr; Bitwise arithmetic</a></h5>
<p><em>Bitwise NOT, AND, OR, XOR</em> perform logical operation
with the whole operands bit per bit.</p>
<samp>|0000:FA | DB   ~  5 ;            ~ 0000_0101b is 1111_1010b which is -6.
|0001:04 | DB 5 &amp; 12 ; 0000_0101b &amp; 0000_1100b is 0000_0100b which is  4.
|0002:0D | DB 5 | 12 ; 0000_0101b | 0000_1100b is 0000_1101b which is 13.
|0003:09 | DB 5 ^ 12 ; 0000_0101b ^ 0000_1100b is 0000_1001b which is  9.</samp>

<h5 id="BooleanAlgebra"><a href="#NumericExpressions">&uarr; Boolean algebra</a></h5>
<p><em>Logical NOT, AND, OR, XOR</em> operate with the numbers as well as with the boolean values.
<br/>Each operand, which is internally stored as a nonzero 64-bit number, is converted to boolean
<em>true</em> (<code>0xFFFF_FFFF_FFFF_FFFF</code>) before the actual logical operation.
<br/>Operand with the value 0 is treated as <em>false</em>.</p>
<samp>|0000:FF | DB 3 &amp;&amp; 4 ; 0000_0011b &amp;&amp; 0000_0100b is TRUE &amp;&amp; TRUE (both operands are non-zero) which is TRUE.
|0001:00 | DB 3  &amp; 4 ; 0000_0011b  &amp; 0000_0100b have no common bit set, result is 0000_0000b, which is FALSE.</samp>

<h4 id="AddressExpressions" title="Address expressions"><a href="#Expressions">&uarr; Address expressions</a></h4>

<p>Numeric expressions operate with immediate numeric values, such as <code>1, 0x23, '4567'</code>
or with symbols representing such scalar numeric value, such as <code>NumericSymbolTen EQU 10</code>.
On the other hand, most symbols in a real assembler program represent address value which points
to some data in memory or to some position in the program code.</p>
<p>While a plain number (scalar) is internally stored by &euro;ASM in eight bytes,
an address needs additional room to keep information of the segment it belongs to.</p>
<blockquote id="SegmentHighway">Imagine yourself driving a car. You're passing the milestone <kbd>123</kbd> on a highway when
some friends of yours ring you up that they're passing the milestone <kbd>97</kbd>.
How far are you from one another? The answer is as easy as subtracting only when you are
both driving on the same highway.</blockquote>
<p>The set of operations defined with address symbols is very limited in comparison
with numeric expressions. They cannot be multiplied, divided, shifted, logically operated.
Only two kind of operations are allowed with addresses:</p>
<ol><li>A scalar numeric value may be added to the address symbol or substracted from it.
The result is address symbol again; this operation affects the offset part of address;
segment part remains intact.</li>
<li>Two symbols may be subtracted from one another (or compared with one another)
if they both belong to the same segment.
The result is a scalar numeric value calculated as the difference of their offsets.</li></ol>

<h4 id="RegisterExpressions" title="Addressing modes"><a href="#Expressions">&uarr; Register expressions</a></h4>
<p id="MemVariables" title="Memory variables">Memory variables are addressed as the offset from the first byte of used memory segment
(<dfn>displacement</dfn>) which may be updated at run-time with the contents of one or two registers.
Notation of such address is called <dfn>register expression</dfn> or <dfn>memory address expression</dfn>.</p>
<p>Unlike instructions with immediate number embedded in the instruction code, such as
<code>ADD EAX,1234</code>, machine instructions which load|store data somewhere from|to memory,
must have the entire operand enclosed in brackets <kbd>[ ]</kbd>.
For instance <code>ADD EAX,[1234]</code>, where 1234 is offset of dword variable in data segment
where the addend is loaded from.</p>
<blockquote>MASM allows to omit square brackets even when the operand is a variable
defined in memory, for instance <code>ADD EAX,Something</code>.
A poor reader of MASM program has to search for the definition of the variable
to learn whether it was defined in memory (<code>Something DD 1</code>)
or if it was defined as a constant (<code>Something EQU 1</code>).
Newer assemblers abandoned this design flaw, luckily.</blockquote>

<p>When the address expression is used in machine instruction, it may be completed
with registry names; it becomes <dfn>register address expression</dfn>.
Complete address expression follows the schema
<br/><dfn>segment: base + scale * index + displacement</dfn>
where <br/><dfn>segment</dfn> is segment register <code>CS, DS, ES, SS, FS, GS</code>,
<br/><dfn>base</dfn> is <code>BX, BP</code> in 16-bit addressing mode, or
<code>EAX, EBX, ECX, EDX, EBP, ESP, ESI, EDI, R8D..R15D</code> in 32-bit addressing mode, or
<code>RAX, RBX, RCX, RDX, RBP, RSP, RSI, RDI, R8..R15</code> in 64-bit addressing mode,
<br/><dfn>scale</dfn> is a numeric expression which evaluates to a scalar number <code>0, 1, 2, 4 or 8</code>,
<br/><dfn>index</dfn> is <code>SI, DI</code> in 16-bit addressing mode, or
<code>EAX, EBX, ECX, EDX, EBP, ESI, EDI, R8D..R15D</code> in 32-bit addressing mode, or
<code>RAX, RBX, RCX, RDX, RBP, RSI, RDI, R8..R15</code> in 64-bit addressing mode,
<br/><dfn>displacement</dfn> is an address or numeric expression with magnitude (width)
not exceeding the addressing mode.</p>
<blockquote>Some assemblers allow different syntax of memory addressing, for instance
<code><del>MOV EAX,Displ[ESI]</del></code>,
<code><del>MOV EAX,dword ptr [Displ+ESI]</del></code>,
<code><del>MOV EAX,Displ+[4*ESI]</del></code>,
<code><del>MOV EAX,Displ+4*[ESI]+[EBX]</del></code>.
<br/>EuroAssembler requires that the whole operand is surrounded in square brackets:
<code>MOV EAX,[Disp+4*ESI+EBX]</code>.</blockquote>

<p>The order of components in addressing expression is arbitrary.
Any portion of register address expression may be omitted.
<br/>Scale is not permitted in 16-bit addressing mode and scale cannot be used if indexregister is not specified.
<br/>ESP and RSP cannot be used as index register (they cannot be scaled).
<br/>Addressing modes of different sizes cannot be mixed in the same instruction, e. g. <code><del>[EBX+SI]</del></code>.
<br/>16-bit addressing mode is not available in 64-bit CPU mode.
</p>

<table>
<caption>Registers allowed in addressing modes</caption>
<tr><th colspan="2">16-bit addressing mode in 16-bit and 32-bit segment</th></tr>
<tr><td>base register</td><td>BX <sup>SS:</sup>BP</td></tr>
<tr><td>index register</td><td>SI DI</td></tr>
<tr><td>displacement</td><td>16-bit signed integer, sign-extended to segment's width at run-time</td></tr>
<tr><th colspan="2">32-bit addressing mode in 16-bit and 32-bit segment</th></tr>
<tr><td>base register</td><td>EAX EBX ECX EDX ESI EDI <sup>SS:</sup>EBP <sup>SS:</sup>ESP</td></tr>
<tr><td>index register</td><td>EAX EBX ECX EDX ESI EDI EBP</td></tr>
<tr><td>displacement</td><td>32-bit signed integer, sign-extended|truncated to segment's width at run-time</td></tr>
<tr><th colspan="2">32-bit addressing mode in 64-bit segment</th></tr>
<tr><td>base register</td><td>EAX EBX ECX EDX ESI EDI <sup>SS:</sup>EBP <sup>SS:</sup>ESP R8D..R15D</td></tr>
<tr><td>index register</td><td>EAX EBX ECX EDX ESI EDI EBP R8D..R15D</td></tr>
<tr><td>displacement</td><td>32-bit signed integer, sign-extended to segment's width at run-time</td></tr>
<tr><th colspan="2">64-bit addressing mode in 64-bit segment</th></tr>
<tr><td>base register</td><td>RAX RBX RCX RDX RSI RDI <sup>SS:</sup>RBP <sup>SS:</sup>RSP R8..R15</td></tr>
<tr><td>index register</td><td>RAX RBX RCX RDX RSI RDI RBP R8..R15</td></tr>
<tr><td>displacement</td><td>32-bit signed integer, sign-extended to segment's width at run-time</td></tr>
<tr><th colspan="2">MOFFS addressing mode in 16-bit, 32-bit and 64-bit segment</th></tr>
<tr><td>base register</td><td>none</td></tr>
<tr><td>index register</td><td>none</td></tr>
<tr><td>displacement</td><td>unsigned integer of segment's width (16|32|64 bits)</td></tr>
</table>

<p>When the <em>segment</em> register is not explicitly specified, a default segment is used for addressing
the operand. If BP, EBP, RBP, ESP or RSP is used as a baseregister, the default segment is <code>SS</code>,
otherwise it is <code>DS</code>.
Nondefault segment register used for data retrieving may be specified either as an explicit
<a href="#StmentPrefix">instruction prefix</a> <code>SEGCS SEGDS SEGES SEGSS SEGFS SEGGS</code>,
or as a segment register which becomes part of the register expression (implicit segment override).
The segment register may be included in expression either with colon <kbd>:</kbd>
(segment separator) or with plus <kbd>+</kbd> (indexing operator):</p>
<samp>|0000:268A04     |SEGES MOV AL,[SI]
|0003:268A04     |      MOV AL,[ES:SI]
|0006:268A04     |      MOV AL,[ES+SI]</samp>
<p>There is a subtle difference between implicit and explicit segment override:
if it requests the same segment register which is already used as a default,
&euro;ASM emits the prefix only when it is specified explicitly (in the prefix field of the statement):</p>
<samp>|0000:8B04    |        MOV AX,[SI]
|0002:8B04    |        MOV AX,[DS:SI]
|0004:3E8B04  | SEGDS: MOV AX,[SI]
|0007:3E8B04  | SEGDS: MOV AX,[DS:SI]</samp>
<p>See <a class="EXT" href="../eatests/t3021.htm">t3021</a>,
 <a class="EXT" href="../eatests/t3022.htm">t3022</a>,
 <a class="EXT" href="../eatests/t3023.htm">t3023</a> for more examples.</p>

<p>In expressions where scaling is not used and therefore it's not obvious
which of the two registers is meant as an index,
&euro;ASM treats the leftmost register as a base.
So in <code>[ESI+EBP]</code> the base is ESI and implicit segment is DS,
while in <code>[EBP+ESI]</code> the implicit segment is register SS.
</p>
<blockquote><p>We don't have to bother with implicit segment selection in 32-bit and 64-bit FLAT model
programs, because both SS and DS are loaded with the same segment descriptor at load-time.</p>
<p>Although the operators <kbd>*</kbd> or <kbd>+</kbd> in register
address expression look like an ordinary multiplication or addition, they specify
a very different kind of operation called <em>Scaling</em> or <em>Indexing</em>
when applied to a register.
The actual multiplication or addition is performed at run-time rather than
at assembly-time, because the assembler cannot know the contents of registers.
</p>
<p><em>Indexing</em> operation has lower <a href="#Priority">priority</a>
than the corresponding <em>Multiplication</em>.
Hence, the register expression <code>[EBX + 5 + ESI * 2 * 2]</code> is evaluated as
<code>[EBX + 5 + ESI * (2 * 2)] <del>-&gt;</del> [EBX + 5 + ESI * 4]</code>.</p>
</blockquote>

<h4 id="DataExpressions" title="Data expressions"><a href="#Expressions">&uarr; Data expressions</a></h4>
<p>Data expression specifies static data declared with pseudoinstruction
<a href="#D">D</a> or with <a href="#Literals">literals</a>.
Format of data expression is <br/><dfn>duplicator * type value</dfn>, where
<em>duplicator</em> is a non-negative integer number, <em>type</em> is primitive
data type in full <code>BYTE UNICHAR WORD DWORD QWORD TBYTE OWORD YWORD ZWORD INSTR</code>
or short <code>B U W D Q T S O Y Z I</code> notation, or a structure name.
Optional <em>value</em> defines the contents of data which is repeated
<em id="times" title="Times">duplicator</em> times.</p>
<p><em>Duplication</em> is not a commutative operation; duplicator
must be on the left side of <em>duplication operator</em> <kbd>*</kbd>.
Default duplicator value is <kbd>1</kbd> (the data is not duplicated).
Nested duplication is not supported in &euro;ASM.
Priority of duplication is very low, so the data expression
<code>2 + 3 * B 4</code> is evaluated as five bytes where each contains the value&nbsp;4.
Example:</p>
<pre>D 3 * BYTE          ; Declare three bytes with uninitialized contents.
D W 0x5             ; Declare one word with value 5.
D 2 * U "some text" ; Declare Unicode (UTF-16) string containing "some textsome text".
D 3 * MyStruc       ; Declare three instances of structured memory variable MyStruc.
</pre>
<p>See also <a href="#D">pseudoinstruction D</a> and tests
<a class="EXT" href="../eatests/t2480.htm">t2480</a>,
<a class="EXT" href="../eatests/t2481.htm">t2481</a>,
<a class="EXT" href="../eatests/t2482.htm">t2482</a> for more examples.</p>

<h4 id="SpecialExpressions"><a href="#Expressions">&uarr; Special expressions</a></h4>
<h5><a href="#Membership">Membership &darr;</a></h5>
<h5><a href="#Range">Range &darr;</a></h5>
<h5><a href="#Substring">Substring &darr;</a></h5>
<h5><a href="#Sublist">Sublist &darr;</a></h5>
<p>The remaining expression are not calculated with mathematical
<a class="EXT" href="../easource/exp.htm#ExpEval">expression evaluator</a>;
they are evaluated by the parser.</p>
<h5 id="Membership" title="Membership operations"><a href="#SpecialExpressions">&uarr; Membership</a></h5>
<p>The fullstop alias the point <kbd>.</kbd> which joins two identifiers will make them
a <dfn id="FQN" title="FQN name">fully qualified name</dfn> (FQN),
which looks like a namespace identificator followed by the local name. FQN is nonlocal,
it never starts with fullstop.
For instance, when a local symbol <code>.bar</code> is declared in a procedure or structure
<code>Foo</code>, it is treated by &euro;ASM as symbol with FQN <code>Foo.bar</code>.</p>
<p><a href="#Namespace">Namespace</a> can be local, too, so the membership operation can nest.
</p>
<h5 id="Range" title="Range expressions"><a href="#SpecialExpressions">&uarr; Range</a></h5>
<p><dfn>Range</dfn> is defined as two numeric expressions separated with
<em>range operator</em>, which is <kbd>..</kbd> (two adjacent fullstops)
and it represents the set of integer numbers between those values, including the first and the last value.</p>
<p>A range has the property <dfn id="Slope" title="Slope">slope</dfn>, which can be negative, zero or positive.
Slope is defined as the sign of the difference between the right and the left value. Examples:</p>
<pre>
0 .. 15    ; Range represents sixteen numbers from 0 to 15; slope is positive.
-5 .. -4   ; Range represents values -5 and -4; slope is positive.
3 .. 4 - 1 ; Range represents one value 3; slope is zero.
2..-2      ; Range represents five values; slope is negative.
</pre>
<h5 id="Substring" title="Substring operations"><a href="#SpecialExpressions">&uarr; Substring</a></h5>
<p id="Suboperations" title="Suboperations"><em>Substring</em> is an operation which returns only part of the input text.
Substring operator is a <a href='#Range'>range</a> enclosed in a pair of
square brackets <kbd>[]</kbd>. The text is treated as a sequence of 8-bit characters
(<strong>bytes</strong>) and the range specifies which of them are used.</p>

<pre>%Sample1 %SET ABCDEFGH ; Preprocessing variable %Sample1 now contains 8 characters.
 DB "%Sample1[3..5]"   ; This actually assembles as <code> DB "CDE"</code></pre>

<h5 id="Sublist" title="Sublist operations"><a href="#SpecialExpressions">&uarr; Sublist</a></h5>
<p><em>Sublist</em> operation is similar to <a href="#Substring">Substring</a>
with the difference that curly brackets <kbd>{}</kbd> are used instead of
braces and that it treats the input text as an array of comma-separated <strong>items</strong>
(in case of %variable expansion), or as a sequence of physical <strong>lines</strong>
(in case of file inclusion).</p>
<pre> INCLUDE "MySource.asm"{1..10} ; Include the first ten lines of file "MySource.asm"
</pre>
<p> &nbsp; <strong>Common properties of suboperations <em>Substring</em> and <em>Sublist</em>:</strong></p>
<p>Suboperator is appended to the suboperated resource (text) without spaces.
<br/>Suboperations can be applied on four kinds of elements:<ul>
<li><a href='#pcVariables'>preprocessing %variable</a> at the time of its expansion,
for instance <code>%MyVar[2..8]</code></li>
<li><a href='#FilenameStrings'>name of included file</a> in INCLUDE family of pseudoinstructions,
for instance <code> INCLUDEBIN "tada.wav"[44..%&amp;]</code></li>
<li><a href="#FilePath">name of source file</a> when euroasm.exe is launched from command line,
for instance <code>euroasm "MySource1.asm"{0..24}</code></li>
<li><a href='#OUTFILEeq'>name of target file</a> in OUTFILE= option,
for instance <code>BootSec PROGRAM OutFile=&quot;boot.sec&quot;[0x7C01..0x7E00]</code>.</li>
</ul>
<p>When applied to files, the file name must always be specified in double quotes.</p>
<h6>Character and items are 1-based, the first suboperable member (character/item/line) has number 1.</h6>
<h6>Number of the last suboperable member is automatically assigned to a
special variable <code>%&amp;</code>.</h6>
<p>Ordinal number of the last character|item|line of input text is assigned by &euro;ASM
to an <a href="#AutomaticVariables">automatic preprocessing variable</a> with the name <kbd>%&amp;</kbd>.
This %variable is valid only in the suboperation, it cannot be used outside the braces.</p>
<blockquote>You can use pseudoinstruction <a href="#pcSETS">%SETS</a> to get the number of
characters assigned to a %variable, or pseudoinstruction <a href="#pcSETL">%SETL</a>
to get the number of items in it (array length).
<br/>You can use attribute operator <a href="#FILESIZEha">FILESIZE#</a> to get the number of bytes
in a file at assembly-time.</blockquote>
<p>In <em>Substring</em>
operation the value of automatic %variable <code>%&amp;</code> specifies the number of characters assigned in the %variable
or it specifies the size of the included file or the object file in bytes.
<br/>In <em>Sublist</em> operation it represents the ordinal number of the last non-empty item
in the %variable, or the number of physical lines in the included file.</p>
<samp>|4142432C4445462C2C4748492C4A4B4C |%Sample %SET ABC,DEF,,GHI,JKL
|0000:                            | ; %&amp; is now 16 in %Sample[%&amp;] and 5 in %Sample{%&amp;}.
|0000:4B4C                        | DB "%Sample[15..%&amp;]" ; DB "KL"
|0002:4445462C2C4748492C4A4B4C    | DB "%Sample{2..%&amp;}"  ; DB "DEF,,GHI,JKL"</samp>

<p>A suboperated included file must be enclosed in double quotes even when its name doesn't
contain spaces. The opening square bracket must immediately follow
the input value (%variable name or the quote which terminates the filename).
No white spaces are allowed between the %variable and the suboperation left bracket.</p>
<p>Suboperations are very tolerant about the range values. No warning is reported
when they refer to a nonexisting character or item, for instance when the range member
is zero or negative. Ranges with negative slope simply return nothing.
Ranges with zero slope return one character|item|line when the index is between
<kbd>1</kbd> and <kbd>%&amp;</kbd>, otherwise they return nothing.</p>
<samp>|4142434445464748                    |%Sample %SET ABCDEFGH ; Variable %Sample now contains 8 characters.
|0000:4142434445                     | DB "%Sample[-3..5]"  ; DB "ABCDE"
|0005:434445464748                   | DB "%Sample[ 3..99]" ; DB "CDEFGH"
|000B:43                             | DB "%Sample[ 3..3]"  ; DB "C"
|000C:                               | DB "%Sample[5..3]"   ; DB ""
|000C:4142434445464748205B352E2E335D | DB "%Sample [5..3]"  ; DB "ABCDEFGH [5..3]" ; Not a suboperation.</samp>

<p>Suboperation range consists of three components:</p><ol>
<li>minimum range indices</li>
<li>range operator <kbd>..</kbd></li>
<li>maximum range indices</li></ol>
<p>Some of those components may be omitted, they will be given the default value.
Default minimum indices is <kbd>1</kbd>. Default maximum indices is <kbd>%&amp;</kbd>.
<samp>|4142434445464748      |%Sample %SET ABCDEFGH ; Preprocessing variable %Sample now contains 8 characters.
|0000:4142434445       | DB "%Sample[..5]" ; <del>-&gt;</del> DB "%Sample[1..5]" <del>-&gt;</del> DB "ABCDE"
|0005:434445464748     | DB "%Sample[3..]" ; <del>-&gt;</del> DB "%Sample[3..8]" <del>-&gt;</del> DB "CDEFGH"
|000B:4142434445464748 | DB "%Sample[..]"  ; <del>-&gt;</del> DB "%Sample[1..8]" <del>-&gt;</del> DB "ABCDEFGH"
|0013:4142434445464748 | DB "%Sample[]"    ; <del>-&gt;</del> DB "%Sample[1..8]" <del>-&gt;</del> DB "ABCDEFGH"</samp>

<p>All the following notations are identical in %variable expansion:
<pre>%variable
%variable[1..%&amp;]
%variable[..%&amp;]
%variable[1..]
%variable[..]
%variable[]
%variable{1..%&amp;}
%variable{..%&amp;}
%variable{1..}
%variable{..}
%variable{}
</pre>
<p>The last notation in previous example is useful in %variable names concatenating
when we need to append some literal text to the %variable, for instance <code>123</code> to the <code>%variable</code> contents.
We cannot write <code>%variable123</code> because the appended digits change
the name of original %variable. The solution is to use empty suboperation,
which doesn't change the %variable contents but it separates its name from
the successive text: <code>%variable[]123</code> or <code>%variable{}123</code>.</p>
<p>When the range inside braces contains only one index without range operator,
it is treated as both minimum and maximum value and only one character|item|line
is expanded: <code>%Sample1[3] <del>-&gt;</del> %Sample[3..3] <del>-&gt;</del> C</code>.
</p>
<p>Suboperations may be chained. The chain is processed from left to right. Example:
<samp>|4142432C4445462C2C4748492C4A4B4C  |%Sample %SET ABC,DEF,,GHI,JKL ; %&amp; is now 16 in %Sample[%&amp;] and 5 in %Sample{%&amp;}.
|0000:4A4B                         | DB "%Sample{4..5}[2..6]{2}"  ;  DB "JK"</samp>
<p>The first sublist in previous example takes items nr.4 and 5,
giving the list of two items <code>GHI,JKL</code>. The next substring extracts characters
from second to sixth from that sublist, giving <code>HI,JK</code>. The last sublist operation
expands the second item, which is <code>JK</code>.</p>

<p>Suboperations may be nested. Inner ranges are calculated before the outer ones:
<samp>|31323334353637383930  |%Sample %SET 1234567890
|0000:3233343536       | DB "%Sample[2..%Sample[6]]" ; <del>-&gt;</del> DB "%Sample[2..6]"  <del>-&gt;</del>  DB "23456"</samp>

<h3 id="Sections" title="Sections"><a href="#Elements">&uarr; Sections</a></h3>
<p>For each <a href="#Emit">emitting</a> statement the assembler generates some
data or machine code which will be dumped to the output file in the end.
Fortunately we don't have to write the whole program in the exact sequence
which is required by the output file format. Assembled data and code is tossed
on demand to one of several output <dfn>sections</dfn>. The statement, which will switch assembly to
a different section, is quite simple: just the name of the section in square brackets <kbd>[ ]</kbd>
in the label field of the statement.</p>

<blockquote>Imagine that you (the programmer) act like a manager dictating some code and data
to your secretary (EuroAssembler). You have dictated a few instructions, which were written in shorthand
by your secretary on a sheet of paper labeled <code>[TEXT]</code>.
Then you decided to dictate other kind of data. The secretary will grab another sheet,
label it <code>[DATA]</code> and start to write there. Later, when you want to dictate
some other instructions, your secretary takes the sheet labeled <code>[TEXT]</code> again,
and continues from the point (origin) where it was interrupted.
<br/>You are free to open new sheets and to switch between them <em>ad libitum</em>.
When the dictation ends, all used sheets will be stapled together (linked).</blockquote>
<p>In EuroAssembler is the term <dfn>section</dfn> used for a named division of segment.
Each segment has one or more sections. By default any segment has just one section with
identical name (base section) which was created at segment definition.</p>

<h3 id="Segments" title="Segments"><a href="#Elements">&uarr; Segments</a></h3>
<p>Intel Architecture divides memory to <dfn>segments</dfn> controlled by segment registers.
Segment is defined in &euro;ASM by the pseudoinstruction <a href="#SEGMENT">SEGMENT</a>.</p>
<blockquote>In the dawn of computer age, programmers demanded more memory then mere 256 bytes
or 64 kilobytes which was addressable by 8-bit and 16-bit registers. Designers at Intel
in pre-32-bit times might have chosen to use joinder of two 16-bit general registers,
such as <code>DX:AX</code> or <code>SI:BX</code>
and to address inconceivable 4 GB of memory with them, but they didn't.
Instead, they invented new 16-bit segment registers specialized by the purpose of addressed memory:
register CS for machine code, DS for data, SS for machine stack, ES for extra temporary usage.
<br/>Segment registers are used for addressing of 16 bytes long chunks of memory
called <dfn id="Paragraph" title="Paragraph">paragraphs</dfn> (alias octonary word, OWORD).
Linear address in real CPU mode is calculated as a sum of
<ul><li>16-bit or 32-bit offset, and</li>
<li>paragraph address,
obtained from the segment register which is currently in charge, and multiplied by 16.</li></ul>
Using segment registers for addressing of 16byte paragraphs yields 1 MB of memory
addressable by each segment register, which seemed enough for everybody in those times.
</blockquote>

<p>Contents of the segment register in <strong>real</strong> processor mode represents
<strong>paragraph address</strong> of the segment.
<br/>Contents of the segment register in <strong>protected</strong> processor mode represents
index to a <strong>descriptor table</strong>, which holds some auxilliary information
about the addressed segment (beside its address and size limit): access privileges and width.</p>
<blockquote>Those auxilliary properties are fixed in real mode:<ul>
<li>segment bottom address is specified with segment register contents multiplied by&nbsp;16</li>
<li>segment size limit is 64 KB in 16-bit addressing mode</li>
<li>access privilege is <em>allow everything</em></li>
<li>segment width is 16 bits but using 32-bit offsets is also allowed on CPU 386 or newer.</li></ul>

</blockquote>

<p><strong>Segment at run-time</strong> is a continuous range of operational memory addressable
with the contents of one segment register.</p>

<p><strong>Segment at link-time</strong> is a named part of object file, which can be
concatenated with segments of the same name from other linkable files.</p>
<blockquote>In <a class="EXTL" href="../eadoc/links.htm#MS_PECOFF">[MS_PECOFF]</a> terminology is the linkable segment
called <em>section</em>. I think the term <em>segment</em> would be more appropriate here,
because COFF &quot;sections&quot; are differentiated by access privileges as they are
addressed by different segment registers, ergo by different segment descriptors.
<br/>In our <a href="#SegmentHighway">segment-highway</a> parable, segments in flat protected mode
are highway lanes running in parallel, so they share common milestones (offsets),
but each lane is dedicated to a different kind of vehicles.
</blockquote>

<p><strong>Segment at write-time</strong> is a part of assembler source
which begins with <dfn>section switching statement</dfn>, and which ends with
another switching statement or with the end of program.</p>
<blockquote>There is no ENDS (end-of-segment) directive in &euro;ASM.
It is not possible to say <em>this part of source code doesn't belong to any segment</em>.
When you write the very first statement of your source text, it already belongs
to the default (envelope) program, and every program implicitly defines its default segments.
Nevertheless, when a structure or numeric constant is being defined, it is irrelevant
which segment is currently in charge, because structures and scalar symbols do not belong
to any segment, no matter where was the structure or symbol defined in the source.</blockquote>
<p>Segments and section divisions of assembler source do not have to be continuous.
In fact, discontinuity is their main <em>raison d'être</em>.
It allows to keep data in the source text near the code which manipulates with it,
and this is good for readability and understanding of program function.</p>

<h3 id="Groups" title="Groups"><a href="#Elements">&uarr; Groups</a></h3>
<p>When segments of assembler program are not much huge, they may be coalesced
into segment <dfn>group</dfn>. The whole group of segments is addressable
with one segment register. Group can be defined with pseudoinstruction
<a href="#GROUP">GROUP</a>.</p>
<p>When a group is defined, e. g. <code>[DGRP] GROUP [DATA],[STRINGS]</code>
beside the group [DGRP] it automatically creates a segment with the same name [DGRP]
(and consequently a section with the same name [DGRP]). It also declares
that segments [DATA] and [STRINGS] belong to group [DGRP] together with
its base segment [DGRP].
Nevertheless, when nothing is emitted to the implicitely defined segment [DGRP],
it will be discarder in the end.</p>

<h3 id="Segmentation"><a href="#Elements">&uarr; Segmentation</a> (more about sections, segments, groups)</h3>
<h4><a href="#SegmentationBase">Base segment and section &darr;</a></h4>
<h4><a href="#SegmentationLifeTime">Segmentation lifetime &darr;</a></h4>
<h4><a href="#SegmentationImplicit">Implicit segments &darr;</a></h4>
<h4><a href="#SegmentationNaming">Segment naming conventions &darr;</a></h4>
<h4><a href="#SegmentationRegisters">Loading segment registers &darr;</a></h4>
<h4><a href="#SegmentationOrdering">Ordering of sections and segments &darr;</a></h4>
<h4><a href="#SegmentationMap">Displaying the segment map &darr;</a></h4>
<p>The relation between segment and its sections in EuroAssembler is similar
to the relation between group and its segments.</p>

<h4 id="SegmentationBase"><a href="#Segmentation">&uarr; Base section and segment</a></h4>
<p>Whenever a segment is defined (with the pseudoinstruction <a href="#SEGMENT">SEGMENT</a>),
a section with the same name is automatically created in it (it is called <dfn>base section</dfn>).
Other sections of the same segment may be created on demand later.
This is done by the statement which has only the section name in its label field
(there is no explicit SECTION directive in &euro;ASM).</p>
<p>Section properties (class=, purpose=, combine=, align=) are inherited from the segment which they belong to.
The alignment is not inherited when special literal sections <code>[@LT64] .. [@LT1], [@RT0], [@RT1]..</code>
are created; literal sections are aligned according to the type of data which they keep.</p>
<p>Whenever a group is defined (with the pseudoinstruction <a href="#GROUP">GROUP</a>),
a segment with the same name is created in it (it is called <dfn>base segment</dfn>),
together with other segments which we want to incorporate to the group.</p>

<h4 id="SegmentationLifeTime"><a href="#Segmentation">&uarr; Segmentation lifetime</a></h4>
<p>Each segment has one or more sections.
Each section belongs to exactly one segment.
During assembly time all segments are assumed to be loaded at virtual address 0.
At the end of each assembly pass are sections virtually linked to their segment,
so they begin at higher VA, where the preceeding section ended.
However, in pass&nbsp;1 it is not known yet what size will those
sections have, so all sections are assumed to start at VA=0 in pass 1.
When the last assembly pass ends, all sections are linked physically
(their emitted contents and relocations are concatenated to the segment=base section)
and sections are then discarded. Linker is not aware of &euro;ASM sections at all.
</p>
<blockquote><p>Why should we actually split a segment to sections? Well, it is not necessary,
mostly we can get by with just one default section per segment. In big programs,
on the other hand, it may be useful to group similar kind of data together;
we may want to create separate section for double word sized variables,
for floating-point numbers, for text strings. This may save a few bytes
of alignment stuff, which would be necessary when variables of different sizes
are mixed together. Also literal sektions are organized in that way.</p>
<p>Another occasion where sections are handy is fast retrieving from
read-only &quot;databases&quot; defined statically somewhere in data segment.
<br/>Database can be mentally visualized as a table with many rows
and with columns containing data items of constant size.
For fast selection of a particular row by an item of a &quot;indexed&quot; key value
it is profitable to emit all items from one column sequentially to a section,
one after another. The data from every column will have their own section.
The width of &quot;indexed&quot; column should be padded to 1, 2, 4 or 8 bytes,
so its items can be scanned with a single
machine instruction <code>REPNE SCAS</code>. When an item is found, the difference
between register rDI and the start of section identifies the selected row index.
Remaining items of this row then can be addressed with the knowledge of row index.
<br/>This access method was used in a sample project
<a class="EXT" href="../prowin32/euroconv.htm#Tables">
EuroConvertor</a> and in EuroAssembler itself, where it assigns address
of instruction handler to each of the two thousands mnemonics,
see <a class="EXT" href="../easource/dict.htm#DictLookupIi">DistLookupIi</a>.
</p></blockquote>

<p>Each group has one or more segments. Each segment belongs to exactly one group
(even when it wasn't explicitly grouped, a group with the segment's name
will be implicitly created at link time for the addressing purposes).
When a program with executable format is linked, all groups are physically concatenated
into an image and the loader of a real mode executable image is not aware of groups and segments.</p>

<h4 id="SegmentationImplicit" title="Segment implicit names"><a href="#Segmentation">&uarr; Implicit segments and groups</a></h4>
<p>&euro;ASM creates implicit segments when it starts to assemble a program.
Implicit segment names depend on the chosen program format:</p>
<table><caption>Implicit segments</caption>
<tr><th>FORMAT=</th><th>Implicit segment names</th></tr>
<tr><th>BIN</th><td>[BIN]</td></tr>
<tr><th>BOOT</th><td>[BOOT]</td></tr>
<tr><th>COM</th><td>[COM]</td></tr>
<tr><th>OMF | MZ</th><td>[CODE],[RODATA],[DATA],[BSS],[STACK]</td></tr>
<tr><th>COFF | PE | DLL | ELF | ELFX | ELFSO</th><td>[.text],[.rodata],[.data],[.bss]</td></tr>
</table>

<p>If you are not satisfied with the implicit segments created by &euro;ASM,
you may redefine them at the start of program or create
a new set of segments with different names.
Segments and sections which were not used (nothing was emitted to them)
will not be linked to output file and they can be ignored.</p>
<p>When the assembly ends and all segments from linked modules have been
incorporated (combined) to the base program, &euro;ASM looks at segments
which are not part of any group, and creates implicit group for them
(name of the group is the same as the segment).
Here the <a href="#MODELeq">memory model</a> is taken into account:</p>
<p>Models with <b>single code segment</b> (TINY, SMALL, COMPACT) link
all code into a single group, no matter how many code segments are actually defined
in the program.</p>
<p>Multicode models (MEDIUM, LARGE) keep each code segment it its own
implicit group, (if they weren't grouped explicitly),
hence intersegment jumps, calls and returns should have DIST=FAR.</p>
<p>Similary, <b>single data models</b> (TINY, SMALL, MEDIUM)
assume that all initialized and uninitialized data fits into one group not exceeding 64&nbsp;KB,
so the &euro;ASM linker will assign all data segments into the implicit group and
register DS does not have to be changed when accessing data from various segments,
which may have been defined in the base program or in the linked modules.</p>


<h4 id="SegmentationNaming"><a href="#Segmentation">&uarr; Segment naming conventions</a></h4>
<p>Name of the group, segment and section is always surrounded by square brackets in &euro;ASM source.</p>
<p>Unlike symbols, namespace is not preposited to segment name when it starts with <kbd>.</kbd> (fullstop).
Group, segment, section names are always nonlocal.</p>
<p>Number of characters in group|segment|section name is not limited by &euro;ASM but it may be limited
by the output format. In OMF object module the name of a group or segment must not exceed 255 characters.
In PE COFF executables the name in section header is truncated to 8 characters.</p>
<p>&euro;ASM treats all names as case sensitive. If you want to link your segment with
object module produced by an external compiler which converts segment name to uppercase
or which mangles the names by prepending underscores <kbd>__</kbd>,
you should adapt your naming convention to it.</p>
<p>Segment name should be unique, you cannot define two segments with the identical name
in a program, except for the implicitly created segments, if there were not used yet.
However, it is possible to define segments with same names in different programs
and link them together; their contents will be concatenated according to their
<code>COMBINE=</code> property. Similar rule applies to groups.</p>
<p>Section names cannot be duplicated on principle. When a section name appears
in the source for the second time, it will only switch to that section rather than creating a new one.</p>
<p>Implicit literal section name begins with @LT or @RT, you'd better avoid
names which begin with this combination of letters.</p>
<p>Segment which have dollar sign <kbd>$</kbd> in their name are treated in a special way.
If the characters on the left side of this <kbd>$</kbd> match, all such segments will be linked
adjacently in alphabetic order.</p>
<p>There are <a href="#SegmentPURPOSEeq">conventions</a> how &quot;sections&quot; are named in COFF modules,
you may need to adapt to them to succesfully link &euro;ASM program with modules
created by different compilers.</p>

<h4 id="SegmentationRegisters"><a href="#Segmentation">&uarr; Loading segment registers</a></h4>
<p>When &euro;ASM creates a protected executable <b>ELFX</b> or <b>PE</b> 32-bit or 64-bit program format, we don't have to bother with segments, groups or stack at all.
All segment registers are preloaded by Linux or Windows and the stack is established automatically.</p>
<p>When the DOS launches a tiny <b>COM</b> program, it loads CS=DS=SS=ES with the paragraph address of its
<a class="EXTL" href="links.htm#PSP">PSP</a>, sets IP=100h and SP to the end of the stack segment, usually 0FFFEh.
Again, we don't have to bother with segment registers at all.</p>
<p>When a <b>MZ</b> executable program is prepared to start, its segment registers have been set
by the DOS loader. CS:IP is set to the program entry point, SS:SP is set to the top of machine
stack, but both DS and ES point to <a class="EXTL" href="links.htm#PSP">PSP</a>, which is not our data segment.
<p>There is no instruction in Intel architecture to load segment register
with immediate value directly, so this is usually done via register or stack:</p>
<pre>; Loading paragraph address of [DATA] to segment register
; using a general purpose register (which is faster):
MOV AX, PARA# [DATA]
MOV DS,AX
; or using the machine stack (which is shorter):
PUSH PARA# [DATA]
POP DS</pre>
<p>It is the responsibility of programmer to load segment register
with the address of another segment, whenever it is used.
&euro;ASM makes no assumption about the contents of segment registers; there is
no <span id="ASSUME" title="ASSUME">ASSUME</span>,
<span id="USING" title="USING">USING</span>, <span id="WRT" title="WRT">WRT</span>
directive in &euro;ASM.</p>

<h4 id="SegmentationOrdering" title="Segment order"><a href="#Segmentation">&uarr; Ordering of sections and segments</a></h4>
<p>Order is generally based on four sorting keys:</p>
<ol><li>Purpose of the segment, which stipulates access privilegies Read|Write|Execute.</li>
<li>Order in which segments were declared in source text.</li>
<li>Segments with <kbd>$</kbd> in their name, which belong to the same group,
and the left-side substrings of their names up to the <kbd>$</kbd> are identical,
are kept together and sorted alphabetically by name.</li></ol>

<p><strong>Order of sections</strong></p>
<p>At the end of each assembly pass are all sections linked to their segments in this order:</p>
<ol><li>Base section, defined implicitly together with each segment.</li>
<li>Other non-literal sections in the order as they were defined.</li>
<li>Data-literal sections in descending order of their alignment
(<code>[@LT64], [@LT32],..[@LT1]</code>).</li>
<li>Code-literal sections in alphabetical order (<code>[@RT0], [@RT1], [@RT2]..</code>).</li>
</ol>
<p><strong>Order of segments</strong></p>
<p>Segments are combined and linked at link time in this order:</p>
<ol><li>Group(s) of initialized segments in the order as they were defined.</li>
<li>Initialized segments which are not in any group.</li>
<li>Group(s) of uninitialized segments in the order as they were defined.</li>
<li>Uninitialized segments which are not in any group.</li>
</ol>
<p>Segments in each group are in the order as they were defined in the source
(not as they were declared in the GROUP statement). The base segment is always the first in a group.
</p>
<p>When an executable format is linked, every segment is assigned to some group,
at least to the implicit one (with identical name).</p>
<blockquote>Implicit groups of segments are used internally for relocation purposes only.
Protected mode programs (MODEL=FLAT) do not care of segment registers much,
so we don't have to bother with groups in programs for Windows or Linux.</blockquote>


<table><caption>Anatomy of COFF-based file:</caption>
<tr><th>Name</th><th>Segment<br/>purpose</th><th>Access</th><th>Size<br/>32-bit | 64-bit</th>
<th>File alignment<br/>32-bit | 64-bit</th><th>Remark</th></tr>
<tr><td><a class="EXT" href="../easource/pfmz.htm#PFMZ_DOS_HEADER"><em>MZ DOS header</em></a></td>
<td></td><td>RW</td><td>128 | 128</td><td></td><td>0) 2)</td></tr>
<tr><td><em>MZ stub program</em></td><td></td><td>RW</td><td></td><td>16 | 16</td><td>0) 2)</td></tr>
<tr><td><em>PE signature</em></td><td></td><td>RW</td><td>4 | 4</td><td>32 | 32</td><td>0) 2)</td></tr>
<tr><td><a class="EXT" href="../easource/pfcoff.htm#PFCOFF_FILE_HEADER"><em>File header</em></a></td>
<td></td><td>R</td><td>20 | 20</td><td>16 | 16</td><td>0)</td></tr>
<tr><td><a class="EXT" href="../easource/pfpe.htm#PFPE_OPTIONAL_HEADER32"><em>Optional header</em></a></td>
<td></td><td>R</td><td>224 | 240</td><td>16 | 16</td><td>0) 2)</td></tr>
<tr><td><a class="EXT" href="../easource/pfcoff.htm#PFCOFF_SECTION_HEADER"><em>Section headers</em></a></td>
<td></td><td>R</td><td>NrOfSe*40</td><td>16 | 16</td><td>0)</td></tr>
<tr><td>.text</td><td>CODE</td><td>RX</td><td></td><td>FiAl|SeAl</td><td></td></tr>
<tr><td>.rodata</td><td>RODATA</td><td>R</td><td></td><td>FiAl|SeAl</td><td></td></tr>
<tr><td>.data</td><td>DATA</td><td>RW</td><td></td><td>FiAl|SeAl</td><td></td></tr>
<tr><td>.bss</td><td>BSS</td><td>RW</td><td></td><td>FiAl|SeAl</td><td></td></tr>
<tr><td>.idata</td><td>IMPORT+IAT</td><td>RWX</td><td></td><td>16|16</td><td>0) 2)</td></tr>
<tr><td>.edata</td><td>EXPORT</td><td>RW</td><td></td><td>16|16</td><td>0) 2) 5)</td></tr>
<tr><td>.reloc</td><td>BASERELOC</td><td>RW</td><td></td><td>16|16</td><td>0) 2)</td></tr>
<tr><td>.rsrc</td><td>RESOURCE</td><td>RW</td><td></td><td>16|16</td><td>0)</td></tr>
<tr><td><a class="EXT" href="../easource/pfcoff.htm#PFCOFF_SYMBOL"><em>Symbol table</em></a></td>
<td>(SYMBOLS)</td><td>R</td><td>NrOfSym*18</td><td>16 | 16</td><td>0) 1) 3)</td></tr>
<tr><td><em>String table</em></td><td>(STRINGS)</td><td></td><td></td><td>4 | 4</td><td>0) 1) 3)</td></tr>
</table>

<table><caption>Anatomy of ELF-based file:</caption>
<tr><th>Name</th><th>Segment<br/>purpose</th><th>Access</th><th>Size<br/>32-bit | 64-bit</th>
<th>File alignment<br/>32-bit | 64-Sbit</th><th>Remark</th></tr>
<tr><td><a class="EXT" href="../easource/pfelf.htm#PFELF_EHDR32"><em>File header</em></a></td>
<td></td><td>R</td><td>52 | 64</td><td></td><td>0)</td></tr>
<tr><td><a class="EXT" href="../easource/pfelf.htm#PFELF_PHDR32"><em>Program headers</em></a></td>
<td></td><td>R</td><td>NrOfPh*(32|56)</td><td>16 | 8</td><td>0) 2)</td></tr>
<tr><td><a class="EXT" href="../easource/pfelf.htm#PFELF_SHDR32"><em>Section headers</em></a></td>
<td></td><td>R</td><td>NrOfSe*(40|64)</td><td>8 | 16)</td><td>0)</td></tr>
<tr><td>.symtab</td><td>SYMBOLS</td><td></td><td>NrOfSym*(16|24)</td><td>16 | 8</td><td> </td></tr>
<tr><td>.hash</td><td>HASH</td><td>R</td><td></td><td>4 | 4</td><td>4)</td></tr>
<tr><td>.strtab</td><td>STRINGS</td><td></td><td></td><td>1 | 1</td><td></td></tr>
<tr><td>.shstrtab</td><td>STRINGS</td><td></td><td></td><td>1 | 1</td><td></td></tr>
<tr><td>.interp</td><td>RODATA</td><td>R</td><td></td><td>1 | 1</td><td>4)</td></tr>
<tr><td>.plt</td><td>PLT</td><td>RX</td><td>NrOfJmp*16</td><td>16</td><td>4)</td></tr>
<tr><td>.text</td><td>CODE</td><td>RX</td><td></td><td>FiAl|SeAl</td><td> </td></tr>
<tr><td>.rodata</td><td>RODATA</td><td>R</td><td></td><td>FiAl|SeAl</td><td> </td></tr>
<tr><td>.data</td><td>DATA</td><td>RW</td><td></td><td>FiAl|SeAl</td><td> </td></tr>
<tr><td>.bss</td><td>BSS</td><td>RW</td><td></td><td>FiAl|SeAl</td><td> </td></tr>
<tr><td>.dynamic</td><td>DYNAMIC</td><td>RW</td><td>NrOfRec*(8|16)</td><td>8 | 16</td><td>4)</td></tr>

</table>
<p>Remarks:
<br/><b>0)</b> Special structure without its own section header.
<br/><b>1)</b> Used in relocatable module only.
<br/><b>2)</b> Used in executable image only.
<br/><b>3)</b> Used in executable image only when EUROASM DEBUG=ENABLED.
<br/><b>4)</b> Used in executable image only when linked with shared object library.
</p>
<p>Access rights:
<br/><b>R</b> Allocate memory in process address space and allow read.
<br/><b>W</b> Allow write.
<br/><b>X</b> Allow execute.
<br/><b>FiAl|SeAl</b> maximum of File Alignment | Segment Alignment.</p>


<h4 id="SegmentationMap"><a href="#Segmentation">&uarr; Displaying the segment map</a></h4>
<p>Pseudoinstruction <a href="#pcDISPLAY"><code>%DISPLAY Sections</code></a>
prints to the listing file a complete map of groups, segments and sections
defined so far at assembly time, one object per line represented by
a debugging message D1260 (group), D1270 (segment), D1280 (section).
Segment is indented with two spaces, section is indented with four spaces.
<blockquote>Instead of <code>%DISPLAY Sections</code> we could use
<code>%DISPLAY Segment</code> or <code>%DISPLAY Groups</code>, the result is identical.
The entire group/segment/section map is always displayed with those statements.</blockquote>
<p>At link time &euro;ASM prints
a similar map of groups and segments to the listing, with finally used virtual addresses,
unless it was disabled with option <code>PROGRAM LISTMAP=OFF</code>.</p>


<h3 id="Distance" title="Distance"><a href="#Elements">&uarr; Distance</a></h3>
<p>The <dfn>distance</dfn> is property of a difference between two addresses.
It is not just the numeric difference of two offsets; in &euro;ASM this term
represents one of three enumerated values: <code>FAR, NEAR, SHORT</code>.</p>
<p>The distance of two addresses is <em>FAR</em> when they belong to different
groups/segments, otherwise it is <em>NEAR</em> or <em>SHORT</em>. Difference of offsets
is <em>SHORT</em> if it fits into 8-bit signed integer, i. e. -128..+127.</p>

<h3 id="Width" title="Width"><a href="#Elements">&uarr; Width</a></h3>
<p>&euro;ASM is 64-bit assembler, it can also compile programs for the older CPU
which worked with 32 and 16 bit words only. The number of bits which CPU works with simultaneously
is called <dfn>width</dfn> and it is either <code>16</code>, <code>32</code> or <code>64</code>.</p>
<h6>Width is always measured in bits.</h6>
<p>The <em>width</em> is a property of segment. Some 32-bits object file formats
allow to mix segments of different widths in one file.
Width of addressing and operating mode can be <em>ad hoc</em> changed with
instruction <a href="#Prefixes">prefix</a> ATOGGLE, OTOGGLE.</p>
<p>Pseudoinstruction <a href="#PROGRAM">PROGRAM</a>
has the <em>WIDTH=</em> property, too. It will establish the default
for all segments declared in the program. Program width is also used to select
the format of output file, for instance if the PExecutable should be created as 32-bit or 64-bit.</p>

<h3 id="Size" title="Size"><a href="#Elements">&uarr; Size</a></h3>
<p>Size is a plain non-negative number which specifies the number of bytes
in object (register, memory variable, structure, segment, file etc). Size of a string is specified
in bytes, no matter if the string is composed of ANSI or WIDE characters.</p>
<p>Size of an object can be counted with at assembly time, using the attribute operator
<a href="#SIZEha">SIZE#</a> or <a href="#FILESIZEha">FILESIZE#</a>.</p>
<p>Size of a preprocessing %variable contents can be retrieved
with pseudoinstruction <a href="#pcSETS">%SETS</a>.</p>
<h6>Size is always measured in bytes.</h6>
<p id="SizeLimits" title="Limitation">Size and length of &euro;ASM elements
(identifiers, numbers, structures, expressions, file contents, nesting depth, number of operands, etc.)
is not limited by design, but such sizes are internally stored as the signed 32-bit integers,
so the actual limitation is 2_147_483_647 characters.
In practice we will be restricted by the amount of available memory, of course.</p>

<h3 id="Length" title="Length"><a href="#Elements">&uarr; Length</a></h3>
<p>This term is used to count the number of comma-separated items in an array, for instance
the length of operand list in the statement
<code>VPERMI2B XMM1,XMM2,XMM3,MASK=K4,ZEROING=ON</code> is 5.</p>
<p>Length of a preprocessing %variable contents can be retrieved
with pseudoinstruction <a href="#pcSETL">%SETL</a>.</p>


<h3 id="Namespace" title="Namespace"><a href="#Elements">&uarr; Namespace</a></h3>
<p>The names of symbols and structures created in a program must be unique. In large projects
it might be difficult to maintain unique names, especially when
more people work on separate parts of the program. That is why the programmer can
use <dfn>local</dfn> identifiers which must be unique only in a division of
source file called <dfn>namespace</dfn>. The <em>namespace</em> is a range
of the source specified by <em>namespace block</em>. There are four block-pseudoinstructions
in &euro;ASM which create the namespace: <code>PROGRAM, PROC,
PROC1, STRUC</code>. The block name is also the name of the namespace.
An identifier is <em>local</em> when its name begins with fullstop <kbd>.</kbd>.
Unlike with standards symbols, the characters following the leading fullstop
may start with a decimal digit and it is not an error when they form
a <a href="#ReservedSymbols">reserved name</a>. Example of valid local identifiers:
<code> .L1, .20, .AX</code>.</p>
<p>Names of local identifiers are kept in &euro;ASM internally concatenated
with namespace name, so they form <a href="#FQN">fully qualified name</a> (FQN).
Local symbols may be referred with .local name only within their
native namespace block; they may also be referred with fully qualified name
anywhere in the program.</p>
<p>The namespace actually starts at the operation field
of the block statement and it ends at the operation field of the corresponding
endblock statement. Thanks to this, the namespace itself (label of the block)
may be local, too, and the namespaces may be nested.</p>
<pre>
MyProg <span class="outer">PROGRAM      ; PROGRAM starts the namespace <kbd>MyProg</kbd>.         ;
                                                                    ;
Main    <span class="inner">PROC        ; PROC starts inner namespace Main.             ;
  .10:   RET        ; Local label; its FQN is <kbd>Main.10</kbd>.             ;
        ENDP</span> Main   ; After ENDP we are in <kbd>MyProg</kbd> namespace again. ;
                                                                    ;
.Local  <span class="inner">PROC        ; Its FQN is <kbd>MyProg.Local</kbd>.                     ;
  .10:   RET        ; FQN of this label is <kbd>MyProg.Local.10</kbd>.        ;
        ENDP</span> .Local ; <kbd>MyProg.Local</kbd> namespace ends right after ENDP.;
                                                                    ;
       ENDPROGRAM</span> MyProg
</pre>
<p>Beside the namespace blocks there is one more occasion where namespace
is unfolded: operand fields of the structured data definition statement,
which temporarily take over the namespace of a structure which is being instanceized.</p>
<pre>
DateProg <span class="outer">PROGRAM      ; PROGRAM starts the namespace <kbd>DateProg</kbd>.           ;
                                                                         ;
Datum <span class='inner'>STRUC  ; Declaration of structure Datum creates namespace <kbd>Datum</kbd>.   ;
.day   DB 0                                                              ;
.month DB 0                                                              ;
.year  DW 0                                                              ;
      ENDSTRUC</span> Datum ; Namespace <kbd>Datum</kbd> ends right behind ENDSTRUC field. ;
                                                                         ;
[.data] ; Segment name is not local label, namespace is ignored here.    ;
Birthday DS Datum,<span class='inner'> .day=1, .month=1, .year=1970</span>                          ;
                                                                         ;
; The previous statement defines 4 bytes long structured memory variable ;
; called Birthday in section [.data] and statically sets its members.    ;
; On creating the variable "Birthday" &euro;ASM uses properties               ;
; declared as Datum.day, Datum.month, Datum.year (B,B,W).                ;
; Members can be referred as Birthday.day, Birthday.month, Birthday.year.;</span>
</pre>


<h3 id="Scope" title="Scope"><a href="#Elements">&uarr; Scope</a></h3>
<h6>Scope is the property of a symbol which specifies symbol visibility.</h6>
<p>A symbol defined in the assembler program, such as label or memory variable,
may be referred anywhere within the program at assembly time.
Our program may be linked with other programs, object modules or libraries, which
might have misused the same name for their own symbols, but it's OK and no conflict occurs
because programs are compiled separately.
This is the standard behaviour, such symbols have <dfn>standard private scope</dfn>
and their visibility is limited to the inside of PROGRAM..ENDPROGRAM block.</p>
<p>When a symbol name begins with fullstop <kbd>.</kbd>, visibility of such
<dfn>private local name</dfn> is even narrower, it is limited to the smallest namespace block
in which was the symbol defined (PROC..ENDPROC, STRUC..ENDSTRUC).</p>
<p>On the other hand, executables which are linked from several programs (modules, libraries)
need to acces symbols outside their standard private scope, for instance to call
an entry point of a library function. Names of such <em>global symbols</em> should be unique
among all linked programs.</p>
<table><caption>Scope recognized in &euro;ASM</caption>
<tr><td colspan="2">private</td><td colspan="4"><u>G</u>lobal</td></tr>
<tr><td rowspan="2"><u>S</u>tandard</td><td rowspan="2">local</td><td colspan="2">static link</td>
<td colspan="2">dynamic link</td></tr>
<tr><td><u>P</u>ublic</td><td><u>E</u>xtern</td><td>e<u>X</u>port</td><td><u>I</u>mport</td></tr></table>
<p>Scope of a symbol can be examined at assembly time with attribute operator SCOPE#,
which returns ASCII value of uppercase scope shortcut, for instance
<pre>MySymbol EXTERN
MOV AL,SCOPE# MySymbol ; This is equivalent to MOV AL,'E'</pre>
<p>Available shortcuts are underlined in the table above. The same shortcuts are also used
when symbol properties are listed by <code>%DISPLAY Symbols</code> and after the link phase
if LISTGLOBALS=ENABLED.</p>
<p>GLOBAL, PUBLIC, EXTERN, EXPORT and IMPORT scope of a symbol can be explicitly declared by
<a href="#PUBLIC">pseudoinstruction with the corresponding name</a>.
GLOBAL scope can be also declared implicitly,
using two (or more) terminating colons <kbd>::</kbd> after the symbol name. A symbol declared as GLOBAL
is either available as PUBLIC (if it is defined in the same program), or it is marked as EXTERN
(if it is not defined in the program).</p>
<p>Only the scopes for static linking (PUBLIC, EXTERN)
can be declared by simplified global scope declaration (using two colons).
When the symbol will be exported (if a DLL file is created), or when it should be dynamically imported
from other DLL, using two colons is not enough and either explicit declaration
<code>EXPORT/IMPORT symbol</code> or <code>LINK import_library</code> is required.</p>
<pre>
Word1:  DW 1   ; Standard private scope.
Word2:: DW 2   ; Public scope declared implicitly (with double colon).
Word3   PUBLIC ; Public scope declared explicitly.
Word4   GLOBAL ; Public or extern scope (which depends on Word4 definition in this program).
Word5   GLOBAL ; Public or extern scope (which depends on Word5 definition in this program).
Word6   EXTERN ; Extern scope. Symbol Word6 must not be defined anywhere else in this program.
Word4:         ; Definition of symbol Word4.
        MOV EAX,Word5 ; Reference of external symbol Word5.
; Scope of Word1 is PRIVATE.
; Scope of Word2, Word3, Word4 is PUBLIC.
; Scope of Word5, Word6 is EXTERN.
</pre>

<h3 id="DataTypes" title="Data types"><a href="#Elements">&uarr; Data types</a></h3>
<p>Information in computer memory or register represents the code or data.
Important properties of stored texts and numbers is data <dfn>type</dfn>,
which is a rule specifying how to interpret the information.
&euro;ASM recognizes following types of data:</p>

<table>
<caption>Fundamental data types</caption>
<tr><th>Typename</th><th>Short</th><th>Size</th><th>Autoalign</th><th>Width</th>
<th>Typical<br/>storage</th><th>Character<br/>string</th><th>Integer<br/>number</th>
<th>Floating-point<br/>number</th><th>Packed<br/>vector</th></tr>
<tr><th>BYTE</th><th>B</th><td>1</td><td>1</td><td>8</td>
<td>R8</td><td>ANSI</td><td>8-bit</td><td></td><td></td></tr>
<tr><th>UNICHAR</th><th>U</th><td>2</td><td>2</td><td>16</td>
<td>R16</td><td>WIDE</td><td></td><td></td><td></td></tr>
<tr><th>WORD</th><th>W</th><td>2</td><td>2</td><td>16</td>
<td>R16</td><td></td><td>16-bit</td><td></td><td></td></tr>
<tr><th>DWORD</th><th>D</th><td>4</td><td>4</td><td>32</td>
<td>R32,ST</td><td></td><td>32-bit</td><td>Single precision</td><td></td></tr>
<tr><th>QWORD</th><th>Q</th><td>8</td><td>8</td><td>64</td>
<td>R64,ST</td><td></td><td>64-bit</td><td>Double precision</td><td></td></tr>
<tr><th>TBYTE</th><th>T</th><td>10</td><td>8</td><td>80</td>
<td>ST</td><td></td><td></td><td>Extended precision</td><td></td></tr>
<tr><th>OWORD</th><th>O</th><td>16</td><td>16</td><td>128</td>
<td>XMM</td><td></td><td></td><td></td><td>4&times;D | 2&times;Q</td></tr>
<tr><th>YWORD</th><th>Y</th><td>32</td><td>32</td><td>256</td>
<td>YMM</td><td></td><td></td><td></td><td>8&times;D | 4&times;Q</td></tr>
<tr><th>ZWORD</th><th>Z</th><td>64</td><td>64</td><td>512</td>
<td>ZMM</td><td></td><td></td><td></td><td>16&times;D | 8&times;Q</td></tr>
</table>
<table><caption>Other data types</caption>
<tr><th>Typename</th><th>Short</th><th>Size</th><th>Autoalign</th>
<th>Usage</th></tr>
<tr><th><em>Structure name</em></th><th>S</th><td><em>variable</em></td><td><em>STRUC explicit alignment,<br/>otherwise program width</em></td><td>structured variables</td></tr>
<tr><th>INSTR</th><th>I</th><td><em>variable</em></td><td>1</td><td>machine instructions</td></tr>
</table>
<p>Using of fundamental typenames is often reduced to their first letter.
Data types in short or long notation are used for explicit static data definition
with pseudoinstruction <a href="#D">D</a>, for implicit data definition in <a href="#Literals">literals</a>,
as an alignment specification,or in <a href="#InstructionModifiers">instruction modifiers</a>.</p>
<blockquote><p>&euro;ASM has some type awareness, though not so strong as in higher programming languages.
For instance when processing instruction <code> INC [MemoryVariable]</code> it looks how was MemoryVariable
defined and the it selects appropriate encoding version (byte|word|dword).</p>
</blockquote>

<hr/>
<h3 id="Symbols" title="Symbol"><a href="#Elements">&uarr; Symbols</a></h3>
<h4><a href="#SymbolName">Name of symbols &darr;</a></h4>
<h4><a href="#NumericSymbols">Numeric symbols &darr;</a></h4>
<h4><a href="#AddressSymbols">Address symbols &darr;</a></h4>
<h4><a href="#do">$ - current origin address &darr;</a></h4>
<h4><a href="#Attributes">Attributes of symbol &darr;</a></h4>
<h4><a href="#Literals">Literal symbols &darr;</a></h4>

<p><dfn>Symbol</dfn> in assembly language is an alias to a number or address.
</p>
<h6>There are two kinds of symbols in assembler: <dfn>numeric</dfn> and <dfn>address</dfn>.</h6>
<p>Numeric symbol answers the question <em>how many</em> and address symbol answers the question
<em>where</em> (at which position in the program).</p>
<p>Numeric symbol is defined with pseudoinstruction <a href="#EQU">EQU</a>
or with its alias <kbd>=</kbd>, for instance <code>Dozen EQU 12</code> or <code>Gross = 144</code>.
<br/>Address symbol is defined when its name appears in a label field of a statement.</p>
<blockquote>Value of the numeric symbol is internally kept in 8 bytes (signed QWORD)
but address symbols need an additional information about the section where they belong to.
<br/>It is not possible in &euro;ASM to define numeric symbol as a label
of other statement than EQU, or as a solo label without operation field.
Each program statement compulsorily belongs to some section (either explicitly defined
or implicitly created when assembly of program block starts).</blockquote>

<h4 id="SymbolName"><a href="#Symbols">&uarr; Name of symbols</a></h4>
<p>Symbol name is an identifier (letter or fullstop optionally followed with other letters, fullstops and digits),
which is not a <a href="#ReservedSymbols"><dfn>reserved symbol name</dfn></a> in either character case.
<br/>Symbol name may always be terminated with one or more colons <kbd>:</kbd> which helps to
recognize the identifier as a symbol name. The colon itself is not a part of the symbol name.
Symbols should have self-explaining mnemonic name.</p>
<blockquote>Termination of each symbol name with <kbd>:</kbd> is a good habit
both when the symbol is defined and referred,
though many other assemblers do not support this.
It's easier to copy&amp;paste the symbol name without having to delete colon at its end.
Colon tells both assembler and human reader that the name represents a symbol,
and it protects from mistake when you choose a symbol name which accidentally happens
to collide with one of thousands instruction mnemonics.
<br/>Structure names, register names (except for segment registers), or
machine instruction mnemonics names are never colon-terminated.
</blockquote>

<h6>Symbol name must be unique in the program.</h6>
<p>Symbols and structures may be referred (used in statement) before they are
actually defined. However, it's a good practice to define numeric symbols and structures
at the beginning of the program, because <dfn>forward references</dfn> require
additional program passes, which extends the duration of assembly.</p>

<table id="ReservedSymbols" title="Reserved symbols names"><caption>Reserved symbol names</caption>
<tr><th>Category</th><th>Reserved names</th></tr><tr><td>Assembly-time current pointer</td><td>$</td></tr>
<tr><td>Segment register names</td><td>CS, DS, ES, FS, GS, SS</td></tr>
<tr><td>Prefix names</td><td>ATOGGLE, LOCK, OFTEN, OTOGGLE, REP, REPE, REPNE, REPNZ, REPZ, SEGCS, SEGDS,
SEGES, SEGFS, SEGGS, SEGSS, SELDOM, XACQUIRE, XRELEASE</td></tr>
</table>

<p>Name of symbol may contain fullstop <kbd>.</kbd>, which usually
connects namespace with symbol's local name.
Leading <kbd>.</kbd> makes the symbol <a href="#Scope">local</a>, as it is in fact
connected with the current <a href="#Namespace">namespace</a> internally.</p>
<p>Creating symbol names which collide with names of registers or instructions is discouraged.
If you really want to use some of those <a href="#NonRecommendedSymbols"><dfn>not recommended name</dfn> for a symbol</a>,
it must be always followed with colon, e.g.</p><pre>
  Byte: DB 1    ; Define a symbol named "Byte".
  MOV AX,Byte:  ; Load AX with offset of the symbol.</pre>
<p>In other cases, terminating symbol name with  <kbd>:</kbd> is voluntary, but recommended.</p>


<table id="NonRecommendedSymbols">
<caption>Not recommended symbol names</caption>
<tr><th>Category</th><th>Not recommended names</th></tr>
<tr><td>Fundamental data types</td>
<td>B, BYTE, D, DWORD, I, INSTR, O, OWORD, Q, QWORD, S, T, TBYTE, U, UNICHAR, W, WORD, Y, YWORD, Z, ZWORD</td></tr>
<tr><td>Register names</td><td>
AH, AL, AX, BH, BL, BND0, BND1, BND2, BND3, BP, BPB, BPL, BX, CH, CL, CR0, CR2, CR3, CR4, CR8,
CX, DH, DI, DIB, DIL, DL, DR0, DR1, DR2, DR3, DR6, DR7,
DX, EAX, EBP, EBX, ECX, EDI, EDX, ESI, ESP, K0, K1, K2, K3, K4, K5, K6, K7
MM0, MM1, MM2, MM3, MM4, MM5, MM6, MM7,
R10, R10B, R10D, R10L, R10W, R11, R11B, R11D, R11L, R11W, R12, R12B, R12D, R12L, R12W,
R13, R13B, R13D, R13L, R13W, R14, R14B, R14D, R14L, R14W, R15, R15B, R15D, R15L, R15W,
R8, R8B, R8D, R8L, R8W, R9, R9B, R9D, R9L, R9W, RAX, RBP, RBX, RCX, RDI, RDX, RSI, RSP,
SEGR6, SEGR7, SI, SIB, SIL, SP, SPB, SPL, ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7, TR3, TR4, TR5,
XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6, XMM7, XMM8, XMM9, XMM10, XMM11, XMM12, XMM13, XMM14, XMM15,
XMM16, XMM17, XMM18, XMM19, XMM20, XMM21, XMM22, XMM23, XMM24, XMM25, XMM26, XMM27, XMM28, XMM30, XMM31
YMM0, YMM1, YMM2, YMM3, YMM4, YMM5, YMM6, YMM7, YMM8, YMM9, YMM10, YMM11, YMM12, YMM13, YMM14, YMM15,
YMM16, YMM17, YMM18, YMM19, YMM20, YMM21, YMM22, YMM23, YMM24, YMM25, YMM26, YMM27, YMM28, YMM30, YMM31
ZMM0, ZMM1, ZMM2, ZMM3, ZMM4, ZMM5, ZMM6, ZMM7, ZMM8, ZMM9, ZMM10, ZMM11, ZMM12, ZMM13, ZMM14, ZMM15,
ZMM16, ZMM17, ZMM18, ZMM19, ZMM20, ZMM21, ZMM22, ZMM23, ZMM24, ZMM25, ZMM26, ZMM27, ZMM28, ZMM30, ZMM31</td></tr>
<tr><td>Pseudoinstruction names</td>
<td>ALIGN, D, DB, DD, DI, DO, DQ, DS, DU, DW, DY, DZ,
ENDHEAD, ENDP, ENDP1, ENDPROC, ENDPROC1, ENDPROGRAM, ENDSTRUC,
EQU, EUROASM, EXTERN, GLOBAL, GROUP, HEAD, INCLUDE, INCLUDE1, INCLUDEBIN, INCLUDEHEAD, INCLUDEHEAD1,
PROC, PROC1, PROGRAM, PUBLIC, SEGMENT, STRUC</td></tr>
<tr><td>Machine instruction mnemonics</td><td>AAA, AAD, ... XTEST, see <a class="EXT" href="../easource/ii.htm#IiHandlers">
IiHandlers</a> in &euro;ASM source for the complete list.</td></tr>
</table>


<h4 id="NumericSymbols"><a href="#Symbols">&uarr; Numeric symbols</a></h4>
<p>Numeric symbol is defined with pseudoinstruction <a href="#EQU">EQU</a>
(or with its alias <kbd>=</kbd>) which specifies a number, numeric expression
or other numeric symbol. Examples:</p>
<pre>BufferSize: EQU 16K
WM_KEYDOWN = 0x0100
Total      EQU 2*BufferSize
   MOV ECX,BufferSize
</pre>
<blockquote>Using numeric symbol instead of the direct number notation has its advantages:<ul>
<li>When the symbol name is carefully chosen, e.g. <code>BufferSize</code>,
it is selfexplaining and we do not need to comment why we loaded ECX with
this particular value <code>16K</code>.</li>
<li>If we decide to increase <code>BufferSize</code> during the program developement,
it is easier to change its value only at one place where it is defined.
</li></ul></blockquote>

<h4 id="AddressSymbols"><a href="#Symbols">&uarr; Address symbols</a></h4>
<p>An address symbol is defined when it appears as a label of machine instruction or prefix,
as a label of empty instruction or as a label of pseudoinstruction <a href="#D">D*</a>,
<a href="#PROC">PROC</a>, <a href="#PROC1">PROC1</a>.</p> Examples: <pre>
[DATA]
SomeValue:   DD 4
[CODE]
             MOV EAX,[SomeValue:]
StartOfLoop: CALL SomeProcedure:
             DEC EAX
             JNZ  StartOfLoop:
</pre>
<p>While numeric symbol <code>BufferSize</code> was completely defined with its value,
in case of address symbol <code>SomeValue</code> it is not sufficient.
Instruction <code>MOV EAX,SomeValue</code> loads EAX with the symbol offset,
i. e. with the distance between its position and the start of its segment.
Address symbol is defined with two properties: its <dfn>segment</dfn> and <dfn>offset</dfn>.
That is why address symbol is sometimes called <dfn>vector</dfn> or <dfn>relative symbol</dfn>
and numeric symbol is called <dfn>scalar</dfn> or <dfn>absolute symbol</dfn>
or <dfn>constant</dfn>.
</p>
<blockquote>There are five methods how to create a symbol in EuroAssembler:
<ol><li>Symbol is defined when its name occurs in the label field of a statement.
Such symbol represents address within the section it was defined in,
and the data or code emitted by the statement, too.
The statement may be empty (solo label) or it may declare <a href="#D">data</a>,
prefix or machine instruction. Pseudoinstructions <a href="#PROC">PROC</a>
and <a href="#PROC1">PROC1</a> also define the symbol with their name, but
pseudoinstructions <a href="#PROGRAM">PROGRAM</a>, <a href="#STRUC">STRUC</a>,
<a href="#SEGMENT">SEGMENT</a> do not.</li>
<li>External and imported symbols are created with pseudoinstructions <a href="#EXTERN">EXTERN</a>,
<a href="#IMPORT">IMPORT</a> or <a href="#GLOBAL">GLOBAL</a>, or when they are referred with two colons appended
to their name. Extern symbol is not defined in the current program,
it must not appear in label field (with an exception of EXTERN
pseudoinstruction itself, which declares it as external).</li>
<li><a href="#Literals">Literal symbol</a> is created when it is referred
for the first time. It does not have an explicit name, in fact its name is represented
by its value, for instance the instruction <code> LEA ESI,[=D 123]</code>
creates literal symbol, which is stored in &euro;ASM symbol table
under the pseudo-name <code>=D 123</code>.</li>
<li>&euro;ASM maintains a special dynamic symbol <code>$</code> for each section,
which represents the current assembly position in the section.</li>
<li>Symbol can be defined with pseudoinstruction <a href="#EQU">EQU</a>
or with its alias <kbd>=</kbd>. This is the only way how to define
a plain numeric symbol.</li>
</ol></blockquote>

<h4 id="do" title="$ symbol"><a href="#Symbols">&uarr; $ symbol</a></h4>
<p>A special dynamic symbol <code>$</code> represents the address of next
free position in emitted code at the beginning of assembly of the statement,
in which it is referred. Value of this symbol is not constant but it is
changed by &euro;ASM after an emitting statement has been assembled.</p>
<p>Programmer may change the offset of current origin <kbd>$</kbd> with
<a href="#EQU">EQU</a> pseudoinstruction, this is equivalent to pseudoinstruction
ORG known from other assemblers.</p>
<h6 id="ORG" title="ORG">There is no ORG pseudoinstruction in &euro;ASM,
<kbd>$</kbd> is made <em>l-value</em> instead.</h6>
<samp id="UNION" title="Union">|00000100:44444444 |DataDword  DD  0x44444444
|00000104:         |   ; Redefine DataDword as a word-accessible union:
|00000100:         |   $       EQU DataDword  ; Return emitting pointer back.
|00000100:1111     |DataLoWord DW  0x1111     ; Re-emit new data which will overwrite
|00000102:2222     |DataHiWord DW  0x2222     ;    data defined at DataDword.
|00000104:         |</samp>
<p>See also the test <a class="EXT" href="../eatests/t2551.htm">t2551</a>
or sample project <a class="EXT" href="../probin/boot16.htm">boot16</a>.


<hr/>
<h4 id="Attributes" title="Attributes"><a href="#Symbols">&uarr; Symbol, register and file attributes</a></h4>
<h5><a href="#SIZEha">SIZE# &darr;</a></h5>
<h5><a href="#TYPEha">TYPE# &darr;</a></h5>
<h5><a href="#REGTYPEha">REGTYPE# &darr;</a></h5>
<h5><a href="#SCOPEha">SCOPE# &darr;</a></h5>
<h5><a href="#OFFSETha">OFFSET# &darr;</a></h5>
<h5><a href="#SECTIONha">SECTION# &darr;</a></h5>
<h5><a href="#SEGMENTha">SEGMENT# &darr;</a></h5>
<h5><a href="#GROUPha">GROUP# &darr;</a></h5>
<h5><a href="#PARAha">PARA# &darr;</a></h5>
<h5><a href="#FILESIZEha">FILESIZE# &darr;</a></h5>
<h5><a href="#FILETIMEha">FILETIME# &darr;</a></h5>
<hr/>
<p>Some important symbol properties are available for next processing in a program at assembly time,
they are called <dfn>attributes</dfn>. When a symbol is defined, it automatically
gets its attributes. They can be referred by prefixing the symbol name with attribute operator.
An <dfn>attribute operator</dfn> is an identifier which defines the kind of attribute, immediately
followed with <kbd>#</kbd>. The object, which the attribute operator is applied on,
may be separated by zero or more white spaces and it may be in parenthesis.
For instance <code>SIZE#SymbolName</code> or <code>SIZE# SymbolName</code> or <code>SIZE#(SymbolName)</code>.
Remember that the symbol name is case sensitive but the attribute name is not.</p>
<p>Attributes <em>GROUP#</em>, <em>SEGMENT#</em> and <em>SECTION#</em> return an address
when applied to an address symbol; they return scalar zero when applied to a numeric symbol.
Other attributes always return scalar (plain number).</p>

<h5 id="OFFSETha"><a href="#Attributes">&uarr; OFFSET#</a></h5>
<p>Attribute <em>OFFSET#</em> returns the offset of symbol in the current segment
as a plain number, i. e. the number of bytes between the start of the segment
and the symbol itself. If the symbol is numeric, its value is returned.</p>
<p><code>Symbol</code> and <code>OFFSET#Symbol</code> are identical only when
Symbol is a scalar value, otherwise the former represents its address and the latter
represents a plain number.</p>
<p>The expression <code>Symbol - SEGMENT#Symbol</code> is identical with
<code>OFFSET#Symbol</code> for both numeric and address kind of symbols.</p>

<h5 id="PARAha"><a href="#Attributes">&uarr; PARA#</a></h5>
<p>Attribute <em>PARA#</em> represents the paragraph address of beginning of the group
that the symbol belongs to. It is the value which has to be loaded to the segment register
which will be used for addressing.
When PARA# is applied to a numeric symbol, it returns scalar zero.</p>

<h5 id="GROUPha"><a href="#Attributes">&uarr; GROUP#</a></h5>
<p>Attribute <em>GROUP#</em> represents the address of beginning of the group
that the symbol belongs to, i.e. address of the first byte of the first (lowest) segment
of the group. When applied to a numeric symbol, it returns scalar zero.</p>

<h5 id="SEGMENTha"><a href="#Symbols">&uarr; SEGMENT#</a></h5>
<p>Attribute <em>SEGMENT#</em> represents the address of beginning of the segment
that the symbol belongs to. When applied to a numeric symbol, it returns scalar zero.</p>

<h5 id="SECTIONha"><a href="#Attributes">&uarr; SECTION#</a></h5>
<p>Attribute <em>SECTION#</em> represents the address of beginning of the section
that the symbol belongs to. When applied to a numeric symbol, it returns scalar zero.
If the symbol lies in default section (with the same
name as its segment), both SECTION# and SEGMENT# attributes return identical address.</p>

<h5 id="SCOPEha"><a href="#Attributes">&uarr; SCOPE#</a></h5>
<p>Attribute <em>SCOPE#</em> returns a number representing the ASCII value
of capital letter corresponding with the symbol scope, which can be
<code>'E'</code> for external symbols, <code>'P'</code> for public symbols,
<code>'X'</code> for exported symbols, <code>'I'</code> for imported symbols,
<code>'S'</code> for standard (private) symbols, or <code>'?'</code>
when the symbol is undeclared.</p>

<h5 id="SIZEha"><a href="#Attributes">&uarr; SIZE#</a></h5>
<p><em>SIZE#</em> represents the amount of bytes emitted by the statement
which defines the symbol. Typically it is the size of data defined with <a href="#D">D</a>
pseudoinstruction or the size of machine instruction. Symbols defined with
<a href="#EQU">EQU</a> pseudoinstruction or defined in non-emitting instruction
have attribute SIZE# equal to zero.</p>

<h5 id="TYPEha"><a href="#Attributes">&uarr; TYPE#</a></h5>
<p>Attribute <em>TYPE#</em> returns a number representing the ASCII value of
a capital letter corresponding with the symbol type. It may be one of the
<a href="#DataTypes">fundamental data types</a> <code>'B', 'U', 'W', 'D',
'Q', 'T', 'O', 'Y', 'Z'</code>, structured data type <code>'S'</code> or
machine instruction type <code>'I'</code> when the symbol is defined with
data definition pseudoinstruction <a href="#D">D</a>.
<br/>Numeric symbol returns type attribute <code>'N'</code>.
<br/>Label of a machine instruction or machine prefix have type attribute <code>'I'</code>.
<br/>Address symbols defined with just a label, or as a label of PROC | PROC1,
and external symbols return <code>'A'</code>.
<br/>Undefined symbol returns <code>'?'</code>.</p>
<blockquote>Forward reference to a symbol will create its record in the symbol table.
However, in the first pass its type attribute is <code>'?'</code> (undefined)
until its definition is encounterred.
On the other hand, applying an attribute to undefined symbol does not make it <em>referred</em>.
That is why we may test with the pseudoinstruction <code>%IF TYPE#Symbol = '?'</code>
whether the symbol is undefined in program.
</blockquote>
<p>Beside symbols, some attribute operators may be applied to other elements than symbols:
to a register, structure name, string, expression in parenthesis <kbd>()</kbd> or braces <kbd>[]</kbd>.
</p>
<p>TYPE# of a register is <code>'R'</code> and its SIZE#
is equal to the register width in bytes (1,2,4,8,10,16,32,64).</p>
<p>TYPE# of a structure or segment is <code>'S'</code> and SIZE# computes its size in bytes.</p>

<samp>|[.data]                   |[.data]
|00000000:456E642E0D0A00   |Message D 'End.',13,10,0  ; Defined as DB or DU.
|[.text]                   |[.text]
|TRUE                      | %IF TYPE# Message = 'B'  ; If UNICODE is disabled
|00000000:B907000000       |   MOV ECX,SIZE# Message  ;  load ECX with its size in bytes.
|FALSE                     | %ELSE                    ; Otherwise UNICODE is enabled,
|                          |   MOV ECX,SIZE#Message/2 ; and SIZE# returns 14 bytes.
|                          | %ENDIF ; ECX is now 7 (message length in characters).</samp>
<blockquote><p>Why should we use SIZE# or TYPE# attributes when the querried symbol is defined
by ourselves and therefore we already know its size and type?
If we would decide to change the text of Message later, we won't have to bother
with its length recalculation.</p>
<p>Attribute operators are often used in macros to determine what type of operand
was the macro provided: if it's a register, data symbol, immediate value etc.
When we need to check in a macro if the provided operand <code>%1</code> is a plain number,
we could test this with query <code>%IF TYPE# %1 = 'N'</code>.</p>
</blockquote>
<p>See tests <a class="EXT" href="../eatests/#Symbols">t16*</a> for more attribute examples.</p>
<p>Detailed differentiation of data symbol which attribute TYPE# yields is sometimes not necessary.
For instance we may need to distinguish whether the macro operand <code>%1</code>
needs relocation at link time. This happens when this is address symbol or memory variable
which contains some address symbol. <code>TYPE# DataSymbol</code> or <code>TYPE# [DataSymbol+RSI]</code>
may return 'A', 'B','W','D','Q','T' or whichever kind of data was the DataSymbol defined with.
Otherwise it will return 'N' when the operand was a number which doesn't use relocation, such as
<code>TYPE# MAX_PATH_SIZE</code> or <code>TYPE# [RBP-16]</code>.
Here we may need to unify all kinds of address+external symbols with attribute operator SEGMENT#,
wich returns relocatable address of its bottom, regardless of its datatype.
Attribute TYPE# applied to such SEGMENT# attribute will always return 'A'.
On the other hand, <code>SEGMENT# ScalarSymbol</code> and <code>TYPE#(SEGMENT#ScalarSymbol)</code>
return 'N'.</p>
<pre>
%IF TYPE# (SEGMENT# %1) = 'A'
  ; %1 is address expression which requires relocation.
%ELSE
  ; %1 is nonrelocatable expression.
%ENDIF</pre>
<blockquote>Notice that the chained attributes require parenthesis. This is because all attribute
operators have equal priority, so they are evaluated from left to right, and without parenthesis
the first operator would attempt to apply itself on another unary operator.
<br/>See also test <a class="EXT" href="../eatests/t1695.htm">t1695</a> for more examples.</blockquote>


<h5 id="REGTYPEha"><a href="#Attributes">&uarr; REGTYPE#</a></h5>
<p>Attribute TYPE# applied on register returns value <code>'R'</code>, regardless of register family.
Sometimes it is useful to know the exact kind of register.
Attribute <em>REGTYPE#</em> returns a number representing the ASCII value of capital letter
corresponding with the register family. General-purpose registers return <code>'B', 'W', 'D', 'Q'</code>,
SIMD registers return <code>'X', 'Y', 'Z'</code>, segment registers return <code>'S'</code>
etc. See the <a href="#Registers">Registers</a> table for the complete list.
When this attribute is applied to an element which is not a register, it returns <code>'?'</code>.
See also test <a class="EXT" href="../eatests/t1648.htm">t1648</a>.</p>


<h5 id="FILESIZEha"><a href="#Attributes">&uarr; FILESIZE#</a></h5>
<h5 id="FILETIMEha"><a href="#Attributes">&uarr; FILETIME#</a></h5>
<p>Unlike previous attributes, FILESIZE# and FILETIME# can be applied only to files
specified by their name, which must be surrounded with double quotes&nbsp;<kbd>&quot;</kbd>. The filename may have absolute, relative, or no path, it is related to
the current directory at assembly time.</p>
<p>Both file attribute operators investigate the file properties at assembly time.</p>
<p><code>FILESIZE# "filename"</code> returns the number of bytes in the file,
or 0 if the file was not available.
<br/><code>FILETIME# "filename"</code> returns the timestamp of the file,
i. e. the number of seconds between <em>midnight, January 1st 1970 UTC</em>
and the last file modification. It returns 0 when the file was not found.
See also test <a class="EXT" href="../eatests/t1690.htm">t1690</a>.
</p>


<h3 id="Literals" title="Literal"><a href="#Elements">&uarr; Literals</a></h3>
<p>Literal symbols alias <dfn>literals</dfn> are similar to the standard assembler
<a href="#Symbols">symbols</a>.
The main difference is that they don't have explicit definition and name.
A literal is defined whenever it is referred and its name is represented with
equal sign <kbd>=</kbd> followed with <a href="#DataExpressions">data expression</a>,
for instance <code>=D(5)</code> or <code>=B&quot;Some text.&quot;</code>.
They may be duplicated, but unlike in <a href="#D">D</a> pseudoinstruction
(which may have many operands), only one data expression
can be specified. Examples of instructions with literals:</p>
<pre>
DIV [=W(10)]   ; Divide DX:AX by an anonymous word memory variable with value 10.
MOV DX,=B"This is a literal message.$" ; Load DX with offset of a string defined ad hoc somewhere in data segment.
LEA ESI,[=D 0] ; Load ESI with address of a DWORD memory variable which contains the value 0.
CALL =I"RET"   ; Push EIP and then load EIP with offset of machine instruction RET defined somewhere in code segment.
<del>LEA EBX,[=D 0,1,2,3]</del> ; Error: multiple data expressions.
<del>MOV DX,=B"This is a literal message.",13,10</del> ; Error: multiple data expressions.
</pre>
<blockquote>The first example declares a word variable <code>=W(10)</code>.
Without literals we would have to explicitly define a data variable
<code>Ten DW 10</code> somewhere in data section and give it an explicit unique name.</blockquote>
<p>Advantage of literal is that we don't need to invent unique symbol name
and explicitly declare the symbol in data section with <a href="#D">D</a> pseudoinstruction.
The data contents is visible directly in the instruction which uses the literal.</p>
<h6>Literals are automatically aligned.</h6>
<p>All literals are autoaligned according to their <a href="#DataTypes">type</a>,
for instance <code>=D 5</code> is DWORD aligned regardless of current
<a href="#AUTOALIGNeq">EUROASM AUTOALIGN=</a> option.</p>
<h6>String literals are automatically zero-terminated.</h6>
<p>String literals, such as <code>=B&quot;Some text&quot;</code> or <code>=U&quot;Some text&quot;</code>
are always implicitly terminated with byte or unichar zero when they are declared as literals.
<br/>&euro;ASM allows simplified declaration of nonduplicated literal strings, where the type identifier
(<code>B</code> or <code>U</code>) is omitted, e.g. <code>=&quot;Some text&quot;</code>.
The actual type of string (B or U) is then determined by system preprocessing variable
<a href="#pcVariables">%^UNICODE</a>.</p>
<blockquote><p>Implicit data definition with literals does not allow to control
the exact location where the literals will be emitted to. &euro;ASM creates a subservient section
for each type of data depending on their natural alignment.
The literal section is created either<ol>
<li>in the last segment with explicit purpose LITERAL and purpose RODATA or DATA</li>
<li>if no LITERAL segment exists, the last segment with purpose RODATA is chosen</li>
<li>if no RODATA segment exists, the last segment with purpose DATA is chosen</li>
<li>if no DATA|RODATA segment exists, an implicit one <code>@LT</code> will be created with the purpose RODATA+LITERAL.</li></ol>

<p>Names of literal sections are <code>[@LT64], [@LT32], [@LT16], [@LT8],
[@LT4], [@LT2], [@LT1]</code>.
<br/>Literals with <code>INSTRUC</code> data type, such as <code>=8*I"MOVSD"</code>,
are emitted to subservient section <code>[@RT0]</code> which is similarly
created in the segment with <code>PURPOSE=CODE+LITERAL</code>, or in the last code segment,
or in automatically created implicit code segment <code>[@RT]</code>.</p>
<p>Repeated literals with the same declaration are reused, they represent the same
memory variable. Literals with non-verbatim match, such as
<code>=W+4</code>, <code>=W 4</code> and <code>=W(2+2)</code> are stored separately
as different symbols, nevertheless their value is reused when it's identical, so it occupies
common space in literal section.
Similarly <code>=B&quot;Some text&quot;</code>,
<code>=B'Some text'</code> and <code>=B 'Some text'</code> are different
but those three symbols together will occupy only 9+1 bytes
in literal section memory at run-time.</p>
</blockquote>
<h6>Literals should always be treated as read-only memory variables.</h6>
<p>Although the programmer cannot be stopped from overwriting the literal value at run-time,
this could corrupt behaviour of other parts of the program, which might be reusing the same literal data.</p>

<table><caption>Comparison of standard symbols and literals</caption>
<tr><th>Property</th><th>Standard symbol</th><th>Literal symbol</th></tr>
<tr><th>Declaration</th><td>It is defined explicitly,
with pseudoinstruction <a href="#D">D</a> or its clones, e.g.
<code>Dozen: DD 12</code></td>
<td>It is declared when it is first used in any instruction,
e.g. <code>MOV ECX,=D 12</code></td></tr>
<tr><th>Name</th><td>Programmer must invent unique symbol name.</td>
<td>Name of literal symbol is created from its value.</td></tr>
<tr><th>Position in object code</th><td>Placement of the symbol
is fully in programmer's hands.</td>
<td>The placement is not directly controlled by a programmer.</td></tr>
<tr><th>Alignment</th><td>If required, it must be specified explicitly with
pseudoinstruction <a href="#ALIGN">ALIGN</a>, or with modifier
<a href="#ALIGNeq">ALIGN=</a> or with EUROASM option
<a href="#AUTOALIGNeq">AUTOALIGN=</a>.</td>
<td>Literals are always naturally aligned, as if <code>EUROASM AUTOALIGN=ENABLED</code>
were set at their declaration.</td></tr>
<tr><th>Alignment stuff</th><td>In order to minimalize necessary alignment stuff,
programer should pay attention when mixing aligned data with different sizes.</td>
<td>Literal data of all sizes are packed together in the descending order which minimalizes
alignment stuff between them.</td></tr>
<tr><th>Multioperands</th><td>
Data definition pseudoinstruction <a href="#D">D</a> and its clones
support multiple operands, e.g. <code>Hello DB "Hello, world",13,10,'$'</code></td>
<td>Multiple literal operands are not supported.</td></tr>
<tr><th>String NUL termination</th><td>Only when explicitly declared, for instance
<code>Hello: DU "Hello, world",0</code></td>
<td>Automatically, e.g. <code>MOV ESI,=U "Hello, world"</code></td></tr>
<tr><th>Duplication</th><td>Duplication is supported, e.g.
<code>FourDoublePrecOnes: DY 4 * Q 1.0</code></td>
<td>Duplication is supported, e.g. <code>VMOVUPD YMM7, [= 4 * Q 1.0]</code></td></tr>
<tr><th>Value overwriting</th><td>Ad libitum.</td><td>This should be avoided.</td></tr>
</table>

<h3 id="Structures" title="Structure in assembly"><a href="#Elements">&uarr; Structures</a></h3>
<p>The <dfn>structure</dfn> is declared by a piece of assembly code represented with
<a href="#STRUC">STRUC..ENDSTRUC</a> block. The block declares names, datatypes, sizes
and offsets of structure members. In OOP terminology the structure is a <em>class</em>
and structured memory variable is an <em>object</em>. Example:</p>
<pre>
DATUM STRUC           ; Declaration of the structure (class) DATUM.
 .Year  D W
 .Month D B
 .Day   D B
      ENDSTRUC DATUM

Today DS DATUM        ; Definition of memory variable (object) Today.
</pre>
<h6>Members of structure should have local names (beginning with period <kbd>.</kbd>).
Structure declaration defines <a href="#Namespace">namespace</a> block.</h6>
<p>Structure declaration creates symbols <code>DATUM.Year, DATUM.Month, DATUM.Day</code>
with values <code>0, 2, 3</code> respectively. Those symbols are absolute (scalars)
and they give names to relative offsets inside the structure.</p>
<p>Data definition creates structured memory variable - symbol <code>Today</code>.
At the same time it also creates symbols <code>Today.Year, Today.Month, Today.Day</code>.
Their addresses are defined somewhere in data or bss section,
they are not scalars but have relocatable addresses.</p>
<p>Value of structure members is undefined (when the structured variable was defined in BSS segment)
or it contains all zeroes (if defined in DATA segment).
Members of structured memory variable can be defined statically at definition-time
with keyword operands, for instance <code>Today DS Datum, .Day=31</code>,
see also pseudoinstruction <a href="#DS">DS</a>.
</p>

<p>Memory-variable member can be accessed directly, for instance</p>
<pre>MOV [Today.Month],12</pre>
<p>We could also use a register to address
the whole memory-variable, and employ this register to address individual members
with relative offsets specified in structure declaration:</p>
<pre> MOV EDI,Today
 MOV [EDI+DATUM.Month],12</pre>
<p>More about structures see <a href="#STRUC">here</a>.</p>


<hr/>
<h3 id="pcVariables" title="%Variables"><a href="#Elements">&uarr; %Variables</a></h3>
<h4><a href="#UserVariables">User-defined %variables &darr;</a></h4>
<h4><a href="#FormalVariables">Formal %variables &darr;</a></h4>
<h4><a href="#AutomaticVariables">Automatic %variables &darr;</a></h4>
<h4><a href="#SystemVariables">System %variables &darr;</a></h4>
<p>&euro;ASM program uses <dfn>preprocessing variables</dfn> (alias <dfn>%variables</dfn>)
for easy manipulation with the source text at assembly-time. Hand in hand with
<a href='#MacroInstructions'>macroinstructions</a> they make a powerful tool
to save repetitive programmer's labour. Preprocessing apparatus does not affect
the object code directly, as plain assembler does. Instead, it manipulates
with the source text, which can be modified with %variables and repeated
with preprocessing %pseudoinstructions.</p>
<p>Preprocessing variables always treat their contents
as a sequence of characters, without inspecting its syntactic significance,
no matter if they were assigned with literal text, string, numeric or logical expression
or whatever.</p>
<p>Once assigned, the contents of %variable will be used (expanded) whenever
the %variable appears in the source text (except for comments). Expansion takes place before the physical
line of source file is parsed into the statement fields.
By default the whole contents of %variable is expanded, but this can be limited
with <a href="#Substring">Substring</a> or <a href="#Sublist">Sublist</a> operation.</p>
<p>See also &euro;ASM function <a href="#EaFnPreprocessing">Preprocessing</a>.</p>
<table id="VariablesTable" title="Variables table">
<caption>Preprocessing %variables families</caption>
<tr><th rowspan="2">%Variable&nbsp;family&nbsp;&#9658;</th><th rowspan="2">User-defined</th>
<th rowspan="2">Formal</th><th rowspan="2">Automatic</th>
<th colspan="3"> &nbsp; System</th></tr>
<tr><th>EUROASM</th><th>PROGRAM</th><th>&euro;ASM</th></tr>
<tr><th>name format</th><td>%identifier</td><td>%identifier</td><td>%spec.character(s)</td>
<td>%^option</td><td>%^option</td><td>%^fixed</td></tr>
<tr><th>case-sensitive</th><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td><td>No</td><td>No</td></tr>
<tr><th>(re)assignmentable</th><td>explicitly<br/>with %SET*</td>
<td>indirectly by<br/>FOR-loop | MACRO expansion</td>
<td>indirectly by<br/>macro expansion</td>
<td>indirectly by<br/>EUROASM option</td>
<td>indirectly by<br/>PROGRAM option</td>
<td>No</td></table>
<hr/>
<h4 id="UserVariables" title="User %variables"><a href="#pcVariables">&uarr; User-defined %variables</a></h4>
<p>Name of user-defined %variable is represented with a percent sign <kbd>%</kbd> immediately followed
by an identifer, which is not <a href="#ReservedVariables"><dfn>reserved %variable name</dfn></a>
in either case.
Identifier name must begin with a letter and may not contain
fullstop or other punctuation.</p>
<h6>User-defined %variable name is case-sensitive.</h6>

<table id="ReservedVariables" title="Reserved %variables"><caption>Reserved %variable names</caption>
<tr><th>Category</th><th>Reserved names</th></tr>
<tr><td>Pseudoinstructions</td><td>
%COMMENT,
%DEBUG,
%DISPLAY,
%DROPMACRO,
%ELSE,
%ENDCOMMENT,
%ENDFOR,
%ENDIF,
%ENDMACRO,
%ENDREPEAT,
%ENDWHILE,
%ERROR,
%EXITFOR,
%EXITMACRO,
%EXITREPEAT,
%EXITWHILE,
%FOR,
%IF,
%MACRO,
%PROFILE,
%REPEAT,
%SET,
%SET2
%SETA,
%SETB,
%SETC,
%SETE,
%SETL,
%SETS,
%SETX,
%SHIFT,
%UNTIL,
%WHILE
</td></tr>
</table>
<p>User %variables are assigned (created) by the programmer with one of the
<a href="#pcSET">%SET*</a> family of pseudoinstructions.</p>
<p>%Variables may be reassigned later with a different value, they don't have to be unique in the source.</p>
<h6>Scope of user-defined %variable begins at its definition and it ends at the end of source file.</h6>
<p>%Variables need not be assigned before the first use. Unassigned %variable expands
to nothing (empty text). Once defined %variable cannot be unassigned, there is no
<em id="pcUNSET" title="%UNSET">%UNSET</em>, <em>UNDEFINE</em> or <em>UNASSIGN</em> directive in &euro;ASM. Nevertheless, setting
a %variable to emptiness (e.g. <code>%SomeVar %SET</code>) is equivalent to
unsetting it. &euro;ASM reports no warning if it encounters user-defined %variable
which is empty, which has not been defined earlier or which is not defined
in the source file at all.</p>
<p>See also test <a class="EXT" href="../eatests/t7321.htm">t7321</a>.</p>

<table>
<caption>Differences between symbols and %variables</caption>
<tr><th>Symbols</th><th>User-defined %variables</th></tr>
<tr><td>are properties of PROGRAM</td>
<td>are properties of EuroAssembler</td></tr>
<tr><td>their name never begins with %</td>
<td>their name always begins with %</td></tr>
<tr><td>may have membership fullstop in their name</td>
<td>never have fullstop in their name</td></tr>
<tr><td>are declared in label field of a statement</td>
<td>are assigned with %SET* pseudoinstruction</td></tr>
<tr><td>have assembly attributes such as TYPE# and SIZE#.</td>
<td>are simply a piece of text without attributes</td></tr>
<tr><td>may be forward referenced</td>
<td>cannot be forward referenced</td></tr>
<tr><td>must be declared just once in a program</td>
<td>may be redeclared many times</td></tr>
<tr><td>cannot be referenced if not declared somewhere in the main or linked program</td>
<td>may be referenced without declaration</td></tr>
<tr><td>cannot be subject of sublist or substring operation</td>
<td>can be sublisted or substringed</td></tr>
</table>

<hr/>
<h4 id="FormalVariables" title="Formal %variables"><a href="#pcVariables">&uarr; Formal %variables</a></h4>
<p>Formal %variable expands to a parameter value used in a <a href="#pcFOR">%FOR</a> loop
or in %MACRO invocation. It is represented by an identifier which stands
in the label field of the %FOR statement, or as an operand in the %MACRO prototype.</p>
<p>The scope of formal variables is limited to the block which is being expanded.</p>
<pre>Count %FOR 1..8
        DB %Count
      %ENDFOR Count</pre>
<p>The previous example generates eight DB statements which define
byte values from 1 to 8. Identifier <code>Count</code> used in %FOR
and %ENDFOR statements is <dfn>%FOR-control variable</dfn>, which is accessible
inside the %FOR block as a formal %variable <code>%Count</code>.</p>
<p>Formal variables are also used to access macro operand by name during the macro expansion.
In the next example we have two <dfn>%MACRO-formal variables</dfn>
provided in the %MACRO definition as identifiers <code>Where</code>
and <code>Stuff</code>. In the macro body their values are available
as formal %variables <code>%Where</code> and <code>%Stuff</code>.</p>
<pre>Fill %MACRO Where, Stuff=0   ; Definition of macro Fill.
       MOV %Where,%Stuff
     %ENDMACRO Fill

; invocations of macro Fill:
   Fill [Counter], Stuff=255 ; Will be assembled as <code>MOV [Counter],255</code>
   Fill EBX                  ; Will be assembled as <code>MOV EBX,0</code>
</pre>
<p>Notice that formal %variables are always written without the percent sign
when they are declared, but <kbd>%</kbd> must be prefixed to their name
when they are referred in the %FOR or %MACRO body. This is important
for inheriting of arguments in nested and recursively expanded macroinstructions,
see <a class="EXT" href="../eatests/t7233.htm">t7233</a> as an example.</p>
<p>Scope of the formal %variables has higher priority than user-defined %variables
with identical name, no matter if they were assigned outside or inside the scope.
Reassignment of a %variable with formal name inside the macro body will assign
the new value to the user-defined %variable, but inside the macro the value of formal
%variable prevails, see <a class="EXT" href="../eatests/t7347.htm">t7347</a>,
<a class="EXT" href="../eatests/t7362.htm">t7362</a>.
%Variable with reassigned value will be visible outside the macro, though.</p>

<hr/>

<h4 id="AutomaticVariables" title="Automatic %variables"><a href="#pcVariables">&uarr; Automatic %variables</a></h4>
<p>Automatic preprocessing variables are created and maintained by EuroAssembler
at assembly time; their names contain punctuation characters and, unlike user-defined %variables,
they cannot be explicitly reassigned with <a href="#pcSET">%SET</a> pseudoinstruction.</p>
<p>The scope of automatic %variables is limited, using them outside their scope leads to an error.</p>
<dl>

<dt id="pcam" title="%&amp; (subop size|length)">%&amp;</dt><dd><p>
<dfn>Suboperation size | suboperation length</dfn> (percent sign followed by an ampersand) <dfn><strong>%&amp;</strong></dfn> represents the
number of characters | list items | physical lines in the suboperated object.
<br/>Its <strong>scope is constrained to the suboperation braces</strong> <kbd>[ ]</kbd>
or <kbd>{ }</kbd>.</p>
<p><dfn>Automatic suboperation variable <strong>%&amp;</strong></dfn>
is created when the expansion of included file or of another %variable
uses suboperations.</p>
<p>When the <strong>substring</strong> operator <kbd>[ ]</kbd> is appended to the %variable name
or to the included file name, automatic variable <code>%&amp;</code> can be used
inside the brackets, e. g. <code>[1..%&amp;]</code>, and it represents the number
of bytes in expanded %variable or in the included &quot;file&quot;.
<br>For instance, when the user has assigned %aVariable with five letters <code>%aVariable %SET ABCDE</code>,
then its size is 5 and the statement <code> DB "%aVariable[4..%&amp;]"</code>
expands to <code> DB "DE"</code>.</p>
<p>When the <strong>sublist</strong> operator <kbd>{ }</kbd> is appended to the %variable name,
the contents of this %variable is treated as an array of comma-separated items
and <code>%&amp;</code> represents their count (ordinal number of the last nonempty item).
<br/>E. g. when the user has assigned <code>%aReglist %SET ax,cx,dx,bx,bp</code>
then its length is 5 operands (items)
and the statement <code> MOV %aReglist{3},%aReglist{%&amp;}</code>
expands to <code> MOV dx,bp</code>.</p>
<p>When the same sublist operator <kbd>{ }</kbd> is appended to the included file name,
contents of the file is treated as a set of physical lines
and <code>%&amp;</code> represents number of lines in the file. For instance
<code>INCLUDE &quot;file.inc&quot;{%&amp;-10 .. %&amp;}</code> will include the last ten lines
from &quot;file.inc&quot;.</p>
<p>Using the <code>%&amp;</code> variable outside brackets will throw an error.</p>
<h6>The index of a suboperation span from <code>1</code> to <code>%&amp;</code>.</h6></dd>
</dl>

<dl id="ExpansionCounter" title="Expansion counter">
<dt id="pcpt" title="%. (expansion counter)">%.</dt><dd>
<p>The <dfn>expansion counter</dfn> (percent sign followed by a fullstop) <dfn><strong>%.</strong></dfn>
maintains a decadic number which is incremented by &euro;ASM in each expansion of preprocessing block and can be used
to create unique labels in repeating blocks.
<br/>Its <strong>scope is limited to the body of preprocessing blocks
%MACRO, %FOR, %WHILE, %REPEAT</strong>. If used outside those blocks,
it will expand to the single digit 0, see <a class="EXT" href="../eatests/t7362.htm">t7362</a>.</p>
<p>If there is some private or local label declared within a macro or repeating block,
and if the macro or block is expanded more than once,
the same symbols will be defined more than once, and assembler treats that as an error.
The identifier used as a label within macro or other expanding
pseudooperations (%FOR, %REPEAT, %WHILE) should be unique.
This can be achieved with the expansion counter embedded into symbol name.</p>
<p>See the example of macro <a href="#AbortIf">AbortIf</a> below.
The label <code>Skip</code> is postfixed with <kbd>%.</kbd>, giving the label
<code>Skip%.</code> which expands to <code>Skip1</code>
and which will expand to <code>Skip2</code> on the next AbortIf
invocation.</p>
<samp id="AbortIf">|00000008:                 |
|                          |AbortIf %MACRO Condition=, Errorlevel=1 ; Definition of macro AbortIf.
|                          |        J%!Condition Skip%.: ; Use inverted condition to bypass the abortion.
|                          |        PUSH %Errorlevel     ; Prepare operand for API invocation.
|                          |        CALL ExitProcess::   ; Windows API for program termination.
|                          |Skip%.:                      ; Label where the program continues.
|                          |        %ENDMACRO AbortIf
|00000008:                 |
|00000008:                 |      ; Example of conditional abortion:
|                          |      EUROASM ListMacro=Yes, ListVar=Yes ; Display the expanded instructions.
|00000008:833D[04000000]00 |      CMP [Something],0                  ; Test the condition and then invoke macro.
|0000000F:                 |      AbortIf Condition=E, Errorlevel=8  ; The program exits when Something is zero.
|                          +AbortIf %MACRO Condition=, Errorlevel=1 ; Definition of macro AbortIf.
|0000000F:7507             +        J%!Condition Skip%.: ; Use inverted condition to bypass the abortion.
|                          !JNE Skip1:
|00000011:6A08             +        PUSH %Errorlevel     ; Prepare operand for API invocation.
|                          !PUSH 8
|00000013:E8(00000000)     +        CALL ExitProcess::   ; Windows API for program termination.
|00000018:                 +Skip%.:                      ; Label where the program continues.
|                          !Skip1:
|                          +        %ENDMACRO AbortIf
|00000018:                 |      ; Continue with the program if not aborted.</samp>
<h6>The automatic variable <code>%.</code> helps to create unique symbol names.</h6></dd>
</dl>

<dl>
<dd><p>All the following <dfn>automatic macro %variables</dfn> have their
<strong>scope limited to the %MACRO block body</strong>.
They refer to operands used when the macro is invoked (expanded).</p></dd>

<dt id="pcco" title="%: (macro label)">%:</dt><dd>
<p>If a label is used in a macro invocation, the label is by default placed
in the first of expanded statements. This behaviour can be overridden when
the automatic <dfn>macro label %variable <strong>%:</strong></dfn> (percent sign followed by a colon)
is explicitly declared somewhere in the macro definition. Only one such label may be defined in the macro.
Resettlement of macro label may spare a few clocks when jumping to the macro expansion which begins
with code which would have to be skipped, see the following example:</p>
<pre>
SaveCursor %MACRO Videopage=BH
   %IF TYPE#CursorSave != 'W' ; If the memory variable CursorSave was not defined yet.
     JMP %:                   ; Skip to $+4 (below the DW) when the macro is entered in normal statements flow.
     CursorSave DW 0          ; Space for storing the cursor is reserved here in the code section.
   %ENDIF
%: MOV AH,3                   ; Entry point of the macro is here when the macro invocation is jumped to.
   MOV BH,%Videopage
   INT 10h                    ; Get cursor shape via BIOS API.
   MOV [CursorSave],CX
 %ENDMACRO SaveCursor
  ...
Save: SaveCursor Videopage=0  ; Use the macro in program.
  ...
  JMP Save:                   ; Jumps to the instruction <code>MOV AH,3</code>.
</pre>
<h6>The automatic variable <code>%:</code> represents the &quot;entry&quot; of macro body.</h6>
<p>See also test <a class="EXT" href="../eatests/t7215.htm">t7215</a>.</p>
</dd>

<dt id="pc1" title="%1 (ordinal operand)">%1</dt><dd><p><dfn>Ordinal operands</dfn> of the macro can be referred by digits
Unlike in batch scripts for DOS and Windows, their number is not limited to&nbsp;9,
but any positive decadic number is possible, for instance <strong>%11</strong>.
Of course, when the eleventh operand is not specified in the macro invocation, %11 expands to nothing.
<br/>See also pseudoinstruction <a href="#pcSHIFT">%SHIFT</a>.</p>
<p>Automatic %variable <strong>%0</strong> expands to the macro name.</p></dd>

<dt>%Formal</dt><dd><p>Another method how to refer to macro operand (both ordinal and keyword)
is prefixing the <dfn>formal name</dfn> of the operand with percent sign.</p>
</dd>

<dt id="InvertedCondition" title="%!1 (inverted cond.code)">%!1 or %!Formal</dt><dd>
<p>When the ordinal number or formal operand name is prefixed with <em>logical NOT operator</em>
(exclamation <kbd>!</kbd>), it expands to the <dfn>inverted condition code from ordinal operand</dfn>.
This requires that the referred operand contains a general <a href="#ConditionCodesGeneral">condition code</a>
(case insensitive) such as <code>E, NE, C</code> etc. Operand contents
will be replaced with corresponding <em>inverted code</em>. &euro;ASM reports error
if the operand did not contain valid condition code.</p>
<blockquote>NASM uses unary-minus operator <kbd>-</kbd> to achieve similar functionality.
I believe that the logical-not operator <kbd>!</kbd> is more appropriate for the inversion of logical values.</blockquote>
<p>See the macro <a href="#AbortIf">AbortIf</a> above as an example.</p>
</dd>

<dt id="pcas" title="%* (ordinal list)">%*</dt><dd><p><dfn>Ordinal operand list <strong>%*</strong></dfn>
(percent sign followed by an asterisk) is assigned with all ordinal operands
from macro invocation, comma-separated. Keyword operands are omitted from the list.</p>
<blockquote><p>Macro operands can be referred by various methods.
The following example demonstrates three possible ways how to refer the macro ordinal operands:</p>
<pre>CopyStr %MACRO FirstOp, SecondOp, ThirdOp ; Macro prototype.
          MOV ESI,%FirstOp ; Using formal %variable name of the operand.
          MOV EDI,%2       ; Using ordinal number of the operand.
          MOV ECX,%*{3}    ; Using the third item of operand list.
          REP MOVSB
        %ENDMACRO CopyStr
          ...
        CopyStr Source, Dest, SIZE# Dest ; invocation of the macro.
</pre></blockquote></dd>
<dt id="pcha" title="%# (number of ordinals)">%#</dt><dd><p>Length of the ordinal operand list
(ordinal number of the last non-empty operand) is set to
<dfn>ordinals count variable <strong>%#</strong></dfn> (percent sign followed by a pound character) and it represents
the number of ordinal operands used in macro invocation (not the number declared in macro prototype).</p>
<blockquote>The same length could be also obtained with <code>%NrOfOrdinals %SETL %*</code>.</blockquote></dd>

<dt id="pceqas" title="%=* (keyword list)">%=*</dt><dd><p><dfn>List of keyword operands <strong>%=*</strong></dfn>
is similar to the automatic variable <strong>%*</strong>
but is contains only comma-separated <code>keyword=value</code> operands
actually used in macro invocation.</p>
<blockquote><p>Both %* and %=* can be used to make cloned macros with different names.
For example</p>
<pre>copystr %MACRO
          CopyStr %*, %=*
        %ENDMACRO copystr</pre>
<p>This creates a clone of previously defined macro CopyStr but with a different name copystr.
All operands used in invocation of copystr will be passed verbatim to CopyStr.</p></blockquote>
</dd>
<dt id="pceqha" title="%=# (number of keywords)">%=#</dt><dd><p><dfn>Keyword count variable <strong>%=#</strong></dfn>
represents the number of keyword operands actualy used in macro invocation
(not the number declared in macro prototype).
<br/>See also <a class="EXT" href="../eatests/t7364.htm">t7364</a>.</dd></dl>

<hr/>
<h4 id="SystemVariables" title="System %^variables"><a href="#pcVariables">&uarr; System %variables</a></h4>
<h5><a href="#SystemVariablesEUROASM">EUROASM system %variables &darr;</a></h5>
<h5><a href="#SystemVariablesPROGRAM">PROGRAM system %variables &darr;</a></h5>
<h5><a href="#SystemVariablesEASM">&euro;ASM system %variables &darr;</a></h5>
<p>EuroAssembler maintains a collection of preprocessing variables
with the values specified by configuration parameters. Their current value can be tested
at asm-time, so the assembly process can branch accordingly.</p>
<p>The name of a system variable consists of <code>%^</code> followed with
one of enumerated identifiers.</p>
<h6>System %^variable names are case insensitive.</h6>
<p>Value of system %^variable cannot be assigned
with %SET* pseudoinstruction; it is dynamically maintained by &euro;ASM
and it reflects the current value in charge.</p>
<code><del>%^DumpWidth %SETA 32</del> ; Use <strong>EUROASM DumpWidth=32</strong> instead.</code>
<h6>System %^variables are read-only.</h6>
<p>Programmer can involve the value of system %^variable only indirectly,
with options specified in <q><a href="../objlib/euroasm.ini">euroasm.ini</a></q>
configuration file or with <a href="#EUROASM">EUROASM</a> and <a href="#PROGRAM">PROGRAM</a>
pseudoinstructions.</p>



<table><caption>System preprocessing %variables</caption>
<tr><th>Category</th><th>%variable names (case insensitive)</th></tr>
<tr><td>EUROASM</td><td>
%^AES,
%^AMD,
%^AutoAlign,
%^AutoSegment,
%^CET,
%^CodePage,
%^CPU,
%^CYRIX,
%^D3NOW,
%^Debug,
%^DisplayEnc,
%^DisplayStm,
%^Dump,
%^DumpAll,
%^DumpWidth,
%^EVEX,
%^FPU,
%^ImportPath,
%^IncludePath,
%^Interpreter,
%^Linkpath,
%^List,
%^ListFile,
%^ListInclude,
%^ListMacro,
%^ListRepeat,
%^ListVar,
%^LWP,
%^MaxInclusions,
%^MaxLinks,
%^MMX,
%^MPX,
%^MVEX,
%^NoWarn,
%^Profile,
%^Prot,
%^Prov,
%^RunPath,
%^RTF,
%^RTM,
%^SHA,
%^SIMD,
%^Spec,
%^SVM,
%^TBM,
%^TimeStamp,
%^TSX,
%^Undoc,
%^Unicode,
%^VIA,
%^VMX,
%^Warn,
%^XOP,
</td></tr>
<tr><td>PROGRAM</td><td>
%^DllCharacteristics,
%^Entry,
%^FileAlign,
%^Format,
%^IconFile,
%^ImageBase,
%^ListGlobals,
%^ListLiterals,
%^ListMap,
%^MajorImageVersion,
%^MajorLinkerVersion,
%^MajorOSVersion,
%^MajorSubsystemVersion,
%^MaxExpansions,
%^MaxPasses,
%^MinorImageVersion,
%^MinorLinkerVersion,
%^MinorOSVersion,
%^MinorSubsystemVersion,
%^Model,
%^OutFile,
%^SectionAlign,
%^SizeOfHeapCommit
%^SizeOfHeapReserve,
%^SizeOfStackCommit,
%^SizeOfStackReserve,
%^StubFile,
%^Subsystem,
%^TimeStamp,
%^Width,
%^Win32VersionValue,
</td></tr>
<tr><td>&euro;ASM</td><td>
%^Date,
%^Errorlevel,
%^EuroasmOs,
%^Pass,
%^Proc,
%^Program,
%^Section,
%^Segment,
%^SourceExt,
%^SourceFile,
%^SourceLine,
%^SourceName,
%^Time,
%^Version,
</td></tr>
</table>

<h5><a id="SystemVariablesEUROASM" href="#SystemVariables">&uarr; EUROASM system %^variables</a></h5>
<p>are assigned with values specified in <code>[EUROASM]</code> division
of the <q><a class="EXT" href="../objlib/euroasm.ini">euroasm.ini</a></q>
or with the pseudoinstruction EUROASM.</p>
<p>For description of system %variables of this category see the corresponding
keyword of pseudoinstruction <a href="#EUROASM">EUROASM</a>.</p>

<h5><a id="SystemVariablesPROGRAM" href="#SystemVariables">&uarr; PROGRAM system %^variables</a></h5>
<p>are assigned with values specified in <code>[PROGRAM]</code> division
of the <q><a class="EXT" href="../objlib/euroasm.ini">euroasm.ini</a></q>
or with the PROGRAM pseudoinstruction.</p>
<p>For description of system %variables of this category see the corresponding
keyword of the pseudoinstruction <a href="#PROGRAM">PROGRAM</a>.</p>

<h5><a id="SystemVariablesEASM" href="#SystemVariables">&uarr; &euro;ASM system %^variables</a></h5>
<p>Value of &euro;ASM system %variables is maintained by &euro;ASM itself and the programmer
cannot change them directly. They are described here:</p>

<dl><dt>%^Version</dt><dd>Eight decimal digits which identify the version number
of EuroAssembler. The version number can be deciphered as the day
of &euro;ASM release in the format YYYYMMDD.</dd>
<dt>%^Date, %^Time</dt><dd> Current time of assembly in the format YYYYMMDD, HHMMSS.
These two %^variables are set only once when &euro;ASM starts.
All source files assembled with one command <code>euroasm source*.asm</code>
will share the same %^Date and %^Time which were set from the current local time
at the moment when euroasm.exe launched.</dd>
<dt>%^Errorlevel</dt><dd>Current value of &euro;ASM severity code.</dd>
<dt>%^EuroasmOs</dt><dd>identifies operation system which EuroAssembler runs on
during the assembly. It contains shortcut of operating system, such as <kbd>Win</kbd>
or <kbd>Lin</kbd>.
<br/>This is not necessarily the operating system which the output program is intended to run on.</dd>
<dt>%^SourceFile, %^SourceName, %^SourceExt</dt><dd>
Those three %^variables contain full <strong>file</strong> name including path,
<strong>name</strong> (without path and extension) and <strong>extension</strong>
(including the&nbsp;leading&nbsp;<kbd>.</kbd>)
of the source file which is currently assembled. &euro;ASM updates the contents of
%^Source* variables at the start of source assembly and whenever some other file is included.
<br/>When those %^variables are used in a macro,
instead of position within the macro body they specify position of the macro invokation.
</dd>
<dt>%^SourceLine</dt><dd>contains the physical line number of the current statement
in the current source file.
<br/>In multiline statements (with line continuation&nbsp;<kbd>\</kbd>) it is the last physical line.
<br/>When %^SourceLine is used in a macro,
instead of position within the macro body it specifies the line number of the macro invokation.</dd>
<dt>%^Pass</dt><dd> expands to the number (1, 2, 3,,,) of pass through the current program.</dd>
<dt>%^Program</dt><dd>is the name of current PROGRAM..ENDPROGRAM block.</dd>
<dt>%^Proc</dt><dd>is the name of the current procedure.
This %^variable is empty outside PROC..ENDPROC or PROC1..ENDPROC1 block.</dd>
<dt>%^Segment</dt><dd>is the name of current segment (without braces).</dd>
<dt>%^Section</dt><dd>is the name of current section (without braces).</dd>
</dl>

<p>Combination of &euro;ASM system %^variables is used internally to identify position of statement
in error messages: <code>&quot;%^SourceName%^SourceExt&quot;{%^SourceLine}</code>, e.g.
<code>&quot;HelloWorld.asm&quot;{3}</code></p>

<p>&euro;ASM %^variable <code>%^Section</code> can be used to save and restore the current section|segment
in macros. Together with statement <code>EUROASM PUSH</code> it guaranties that the &euro;ASM environment
will not be modified by expanding a macro, even if the macro required to temporarily change it.</p><pre>
aMacro %MACRO              ; Declaration of a macro which needs to emit to its own private section.
         EUROASM PUSH      ; Save all EUROASM options on their own stack.
%BackupSec %SET %^Section  ; Save the current section name to a user-defined %variable.
[.MacroPrivateSection]     ; Switch to the desired section.
               ...         ; Declare the macro body.
[%BackupSec]               ; Switch back to the original section, whatever it was.
         EUROASM POP       ; Restore EUROASM options.
        %ENDMACRO aMacro
</pre>

<p>Another example using system &euro;ASM %^variables:</p>
<pre>%MonthList %SET Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec
%Day %SETA %^DATE[7..8] ; Using %SETA instead of %SET will assign %Day with decimal numeric value to get rid of leading zero.
InfoMsg DB "This program was assembled with &euro;ASM %^EuroasmOs ver.%^Version",13,10
        DB "on %MonthList{%^Date[5..6]} %Day-th, %^Date[1..4] at %^Time[1..2]:%^Time[3..4].",13,10,0
; InfoMsg now contains something like
;           This program was assembled with &euro;ASM Win ver.20081231
;           on Feb 8-th, 2009 at 22:05.
</pre>
<p><strong>Enumerated option</strong>, such as %^CPU, %^FORMAT, %^MODEL etc.
is assigned as upper case text. They can be tested at assembly time with <a href="#StringCompare">
string-compare</a> operations.</p>
<p><strong>Numeric options</strong> are always assigned as numbers in decimal notation
where the positive sign <kbd>+</kbd> is omitted.
They can be tested at assembly time with <a href="#NumericCompare"> numeric-compare</a> operations.</p>
<p><strong>Boolean options</strong>, such as <code>AutoSegment=, Priv=</code> etc.,
are assigned to corresponding system %^variables <code>%^Autosegment, %^Priv</code>
as <kbd>0</kbd> (false) or <kbd>-1</kbd> (true), no matter whether they
were specified using enumerated tokens ON/OFF, YES/NO, TRUE/FALSE or with a logical expression.
They can be tested at assembly time
with <a href="#BooleanAlgebra">boolean expression</a> or directly as an operand of %IF,
e.g. <code> %IF %^UNDOC</code>.</p>
<p><strong>Range EUROASM options</strong> WARN= and NOWARN= are assigned to system %variables
<code>%^Warn, %^NoWarn</code> as series of 3999 digits <kbd>0</kbd> (false) and <kbd>1</kbd> (true).
The first digit reflects the current status of message I0001, the second I0002, the last W3999.
<br/>Example: <code> %IF %^WARN[2820]</code> will assemble the following statements
only if message W2820 is currently enabled.</p>
<p>System %^variables can be used in macros to warn users of the macro that
the &euro;ASM environment is not set as desired. Examples:</p><pre>
 %IF "%^MODEL" !== "FLAT"
    %ERROR Macro "%0" is intended for flat memory model only.
 %ENDIF
 %IF %^SizeOfStackCommit < 16K
    %ERROR This recursive macro requires stack size at least 16 KB.
 %ENDIF
 %IF %^Width = 64 &amp;&amp; ! %^AMD
    %ERROR This 64-bit program for MS-Windows should have AMD=Enabled.
 %ENDIF
 %IF %^NoWarn[2101]
    %ERROR You shouldn't suppress W2101. Move unused symbols to an included file instead.
 %ENDIF
</pre>

<hr/>
<h2 id="Instructions"><a href="#top">&uarr; Instructions</a></h2>
<h3><a href="#MachineInstructions">Machine instructions &darr;</a></h3>
<h3><a href="#PseudoInstructions">Pseudoinstructions &darr;</a></h3>
<h3><a href="#MacroInstructions">Macroinstructions &darr;</a></h3>
<h6><dfn>Instruction</dfn> is an identifier specified in <a href="#StmentOperation">
operation</a> field of the <a href="#Statement">statement</a>.</h6>
<p>There are three genders (types) of instructions in assembly language:
<br/><dfn>machine instructions</dfn> invented by the CPU manufacturer,
<br/><dfn>pseudoinstructions</dfn> invented by the assembler manufacturer,
<br/><dfn>macroinstructions</dfn> invented by the programmer.</p>
<hr/>
<h3 id="MachineInstructions"><a href="#Instructions">&uarr; Machine instructions</a></h3>
<h4><a href="#InstructionSuffixes">Instruction suffixes &darr;</a></h4>
<h4><a href="#InstructionModifiers">Instruction modifiers &darr;</a></h4>
<h4><a href="#InstructionEnhancements">Instruction enhancements &darr;</a></h4>
<h4><a href="#UndocInstructions">Undocumented instructions &darr;</a></h4>
<p><dfn>Machine instruction</dfn> is the least order for CPU to make some calculation
or data manipulation at run-time.</p>

<p>EuroAssembler uses the <dfn>Intel syntax</dfn> where the first instruction operand specifies
<em>destination</em> (which is often one of source operands, too), and one or more <em>sources</em> may follow.</p>
<blockquote>This is the syntax used in CPU-vendor documentation and also used
in most other assemblers, with exception for the Unix-based <em>gas</em>, which prefers
alternative paradigma represented by <dfn>AT&amp;T syntax</dfn> with reversed
operand order. For more differences between AT&amp;T and Intel syntax see
<a class="EXTL" href="links.htm#ATTsyntax">[ATTsyntax]</a>.</blockquote>

<p>EuroAssembler implements machine instructions mnemonics as defined in
specifications by <a class="EXTL" href="links.htm#InstructionsFromVendors">CPU vendors</a>.
It also implements some <a  class="EXTL" href="links.htm#InstructionsFromOthers">
undocumented instructions</a> and instruction-format enhancements which are described below.</p>
<h6>Machine instruction mnemonic names and their suffixes are case-insensitive.</h6>
<p>Some machine instructions allow alternative encoding of the same mnemonic,
&euro;ASM prefers the shortest one, if not instructed differently.
<br/><b>&euro;ASM respects the mnemonic</b> chosen by the programmer, therefore it never encodes
e. g. <code>LEA ESI,[MemoryVariable]</code> as <code>MOV ESI,MemoryVariable</code>,
although the latter encoding is one byte shorter. There are only two notable <b>exceptions</b>
when the mnemonics is not obeyed:</p><ul>
<li>8086 short conditional jumps and loops out of byte range are encoded
as a composition of proxy-JMPN bypassed by short loop/jump with an inverted condition,
see <a href="#InsEnhLOOP">near and far LOOP and Jcc</a>.</li>
<li>Another exception is <code>MOVZX r64,r/m32</code> which is implemented
as <code>MOV r32,r/m32</code> as it uses the IA-64 side effect
of zeroing higher half of 64-bit register when the lower half is being written to.
See the test <a class="EXT" href="../eatests/t3043.htm">t3043</a>.
</li></ul>

<h4 id="InstructionSuffixes"><a href="#MachineInstructions">Instruction suffixes &darr;</a></h4>
<p>A machine instruction can manipulate with registers and memory variables
of different width, usually with a byte, word or doubleword operands.
However, CPU-manufacturer manuals define the same mnemonic regardless of data size.
For instance, <code>SUB [MemoryVariable],4</code> tells CPU to subtract the immediate
number 4 from the contents of MemoryVariable, which might have been defined as DB, DW, DD or DQ. &euro;ASM looks
at the type of MemoryVariable and selects appropriate encoding according to its size.
However, the offset might also be external or expressed as a register contents or plain number, such as in
<code>SUB [ESI],4</code>, and the type of memory variable is unknown in this case.
One method, how to tell EuroAssembler which data-width is desired,
is using an <dfn>instruction suffix</dfn>, which is one of the letters <kbd>B W D Q S N F</kbd>
appended to the mnemonic name.</p>
<p id='Suffixable'>&euro;ASM allows to extend many general-purpose instructions with mnemonic suffix <kbd>B, W, D, Q</kbd>
to specify operand size.</p>
<p>Transfer control instructions <code>CALL, JMP, RET</code> may be modified
with suffix <kbd>N</kbd> or <kbd>F</kbd> which tells whether the distance of the target
is <em>near</em> or <em>far</em>, i. e. if the target belongs to the same segment
or if segment descriptor value needs to change, too. The unconditional <code>JMP</code> instruction may be also completed with
suffix <kbd>S</kbd> when the distance to the target can be encoded into 8 bits (-128..+127).</p>

<table><tr><th>Suffix aware instructions in &euro;ASM</th><th>Suffix</th></tr>
<tr><td>ADC, ADD, AND, CMP, CMPS, CRC32, DEC, DIV, IDIV, IMUL, INC,
LODS, MOV, MOVS, MUL, NEG, NOT, OR, RCL, RCR, ROL, ROR, SAL, SAL2,
SAR, SBB, SCAS, SHL, SHR, STOS, SUB, TEST, TEST2, XOR</td>
<td>B,&nbsp;W,&nbsp;D,&nbsp;Q</td></tr>
<tr><td>BT, BTC, BTS, BTR, ENTER, HINT_NOP, IRET, LEAVE, POP, POPF, PUSH, PUSHF</td>
<td>W, D, Q </td></tr>
<tr><td>PUSHA, POPA</td><td>W, D</td></tr>
<tr><td>INS, MOVSX, MOVZX, OUTS</td><td>B, W, D</td></tr>
<tr><td>XLAT</td><td>B</td></tr>
<tr><td>CALL, RET</td><td>N, F</td></tr>
<tr><td>JMP</td><td>S, N, F</td></tr>
</table>
<p>Suffix instruction usage is not necessary in most cases because
the width of the memory variable can be deduced by its type attribute
or the width is determined by the register used as one of the operands.
An error is reported if the register is in conflict with the suffix,
for instance in <code>MOVW AL,[ESI]</code>.</p>

<blockquote><p>Mnemonic suffix notation is sporadicly used in other
assemblers or in CPU documentations, see STOSB/W/D, OUTSB/W/D,
RETN/F etc. &euro;ASM just extends this enhancement.</p>
<p>Mnemonics of many SIMD instructions terminate with letters <code>~SS, ~SD, ~PS, ~PD</code>
which specify the type of operands, too (Scalar/Packed Single/Double-precision).
&euro;ASM does not treat them as mnemonic suffixes.</p>
<p>There are a few <b>overloads</b> (conflicts) of suffixed mnemonics with IA-32 instructions, they are resolvable
by the type and by the number of operands:</p>
<samp>|00000000:                 | ; Standard Move versus MMX Move Doubleword:
|00000000:C7450800000000   | MOVD [EBP+8],0     ; Store immediate number to DWORD memory location (suffix ~D).
|00000007:0F7E4508         | MOVD [EBP+8],MM0   ; Store DWORD from MMX register to the memory location.
|0000000B:                 |
|0000000B:                 | ; Shift versus Double Precision Shift:
|0000000B:C1650804         | SHLD [EBP+8],4     ; Shift left logical the DWORD in memory location by 4 bits (suffix ~D).
|0000000F:0FA4450804       | SHLD [EBP+8],EAX,4 ; Shift left 4 bits from register EAX to the memory location.
|00000014:                 |
|00000014:                 | ; Compare String versus Compare Scalar Double-precision FP number:
|00000014:A7               | CMPSD              ; Compare DWORDs at [DS:ESI] and [ES:EDI] (suffix ~D).
|00000015:A7               | CMPSD [ESI],[EDI]  ; Ditto, documented with explicit operands.
|00000016:F20FC2CA00       | CMPSD XMM1,XMM2,0  ; Compare scalar float64 numbers for EQUAL.
</samp>
</blockquote>

<hr>
<h4 id="InstructionModifiers"><a href="#MachineInstructions">&uarr; Instruction modifiers</a></h4>
<h5><a href="#CODEeq">CODE= &darr;</a></h5>
<h5><a href="#DATAeq">DATA= &darr;</a></h5>
<h5><a href="#IMMeq">IMM= &darr;</a></h5>
<h5><a href="#DISPeq">DISP= &darr;</a></h5>
<h5><a href="#SCALEeq">SCALE= &darr;</a></h5>
<h5><a href="#DISTeq">DIST= &darr;</a></h5>
<h5><a href="#ADDReq">ADDR= &darr;</a></h5>
<h5><a href="#PREFIXeq">PREFIX= &darr;</a></h5>
<h5><a href="#MASKeq">MASK= &darr;</a></h5>
<h5><a href="#ZEROINGeq">ZEROING= &darr;</a></h5>
<h5><a href="#EHeq">EH= &darr;</a></h5>
<h5><a href="#SAEeq">SAE= &darr;</a></h5>
<h5><a href="#ROUNDeq">ROUND= &darr;</a></h5>
<h5><a href="#BCSTeq">BCST= &darr;</a></h5>
<h5><a href="#OPEReq">OPER= &darr;</a></h5>
<h5><a href="#ALIGNeq">ALIGN= &darr;</a></h5>
<h5><a href="#NESTINGCHECKeq">NESTINGCHECK= &darr;</a></h5>
<p>Machine instructions with the same mnemonic name and functionality sometimes may be encoded
to a different machine codes. For instance, an immediate value can be optionally encoded in one byte
when it does not exceed the range -128..+127, or it can be encoded as a full word or doubleword.
Similar rule applies to encoding of displacement value in an address expressions.
Scaled address expression such as <code>[1*ESI+EBX]</code> may be encoded without SIB as
<code>[ESI+EBX]</code> or using the SIB byte with explicit scaling factor 1.</p>
<p>&euro;ASM prefers the shortest variant but this may be changed with
additional keyword operands called <dfn>instruction modifiers</dfn>.</p>
<blockquote><p>Many other assemblers decorate operands with special directives <code>byte, word, dword, qword,
short, strict, near, far, ptr</code> to achieve specific encoding, for instance
<code>add word ptr [StringOfBytes + 4], 0x20</code> or <code>jmp short SomeLabel</code>.
Instead of those directives, &euro;ASM uses either mnemonic suffix, or instruction modifiers.</p>
<p>Consecuently AVX instruction modifiers <code>MASK=, ZEROING=, SAE=, ROUND=, BCST=</code> are used in &euro;ASM instead of
inconsistent and poorly documented decorators, such as  <code>{k} {z} {ru-sae} {4to16} {uint16} {cdab}</code>
proposed by <a class="EXTL" href="links.htm#IntelAVX512">[IntelAVX512]</a> and
<a class="EXTL" href="links.htm#IntelMVEX">[IntelMVEX]</a>.</blockquote>
<p>A modifier typical value is an enumerated token such as <code>BYTE, WORD, DWORD</code> etc.
The majority of enumerated modifier values may be abbreviated to their first letter.
Both names and values of the instruction modifiers are case insensitive.</p>
<p>Some modifiers are boolean type, their value may be <code>TRUE, YES, ON, ENABLE, ENABLED</code>
if true, and <code>FALSE, NO, OFF, DISABLE, DISABLED</code> otherwise.
Boolean modifier may also be an expression which evaluates to zero (false) or nonzero (true),
see <a href="#BooleansExt">boolean extended values</a>.</p>
<p>When the requested modifier cannot be satisfied, &euro;ASM raises a warning and ignores it.</p>
<p>Modifiers actually used for encoding can be displayed by switching ON the EUROASM option DISPLAYENC=.
In this case &euro;ASM accompanies each machine instruction with a D1080 diagnostic message that explicitly
documents which modifiers were used for encoding:</p>
<samp>|                          | EUROASM DISPLAYENC=ON
|00000000:694D10C8000000   | IMUL ECX,[EBP+16],200
|# D1080 Emitted size=7,DATA=DWORD,DISP=BYTE,SCALE=SMART,IMM=DWORD.
|00000007:                 |
|00000007:62F1ED2CF44D02&lt;5 | VPMULUDQ YMM1,YMM2,[EBP+40h],MASK=K4
|# D1080 Emitted size=7,PREFIX=EVEX,MASK=K4,ZEROING=OFF,DATA=YWORD,BCST=OFF,OPER=2,DISP=BYTE,SCALE=SMART.</samp>
<h5 id="CODEeq"><a href="#InstructionModifiers">&uarr; CODE=</a></h5>
<p>As a heritage from the evolution of older processors, some machine instructions
have more than one encoding. For instance the instruction <code>POP rAX</code>
may be encoded either as <kbd>0x58</kbd> or as <kbd>0x8FC0</kbd>, keeping the same
functionality. Modifier CODE= selects which encoding should &euro;ASM use.</p>
<p>Operation-code modifier may be <dfn>SHORT</dfn> or <dfn>LONG</dfn>
alias <dfn>S</dfn> or <dfn>L</dfn>. Default behaviour is the one which selects shorter encoding, usually <code>CODE=SHORT</code>.</p>
<p>When an instruction has two possible encodings with the same size,
CODE=SHORT selects the variant with numerically lower opcode.</p>
<samp>|00000000:43           | INC EBX
|00000001:43           | INC EBX,CODE=SHORT ; Intel 8080 legacy encoding, not available in 64-bit mode.
|00000002:FFC3         | INC EBX,CODE=LONG
|00000004:             |
|00000004:50           | PUSH EAX
|00000005:50           | PUSH EAX,CODE=SHORT ; Intel 8080 legacy encoding, not available in 64-bit mode.
|00000006:FFF0         | PUSH EAX,CODE=LONG
|00000008:             |
|00000008:87CA         | XCHG ECX,EDX
|0000000A:87D1         | XCHG ECX,EDX,CODE=LONG ; Modifier swaps operands in commutative operations XCHG, TEST.
|0000000C:87D1         | XCHG EDX,ECX
|0000000E:87CA         | XCHG EDX,ECX,CODE=LONG
|00000010:             |
|00000010:C3           | RET
|00000011:C3           | RET CODE=LONG
|00000012:C20000       | RET CODE=SHORT ; Numerically lower opcode 0xC2 requested, which requires imm16.
|00000015:             |
|00000015:83C07F       | ADD EAX,127
|00000018:83C07F       | ADD EAX,127,CODE=LONG
|0000001B:057F000000   | ADD EAX,127,CODE=SHORT ; Shorter opcode 0x05 requested, which cannot sign-extend imm8.</samp>
<blockquote>In some cases explicit request for numerically lower opcode with <code>CODE=SHORT</code>
may lead to a longer encoding, see the example <code>ADD r32,imm8</code> above.</blockquote>

<h5 id="DATAeq"><a href="#InstructionModifiers">&uarr; DATA=</a></h5>
<p>This modifier controls <dfn>operation-size</dfn>, i. e. the width of data that the instruction
operates on. It may be one of <dfn>BYTE, WORD, DWORD, QWORD, TBYTE, OWORD, YWORD, ZWORD</dfn>
alias <dfn>B, W, D, Q, T, O, Y, Z</dfn>. The default is not specified.</p>
<p>Modifier DATA= has the same function as <a href="#InstructionSuffixes">
instruction suffix</a>, they are only two differences:</p>
<ul><li>Instruction mnemonic suffix may be used only with
a <a href='#Suffixable'>limited set</a> of general-purpose instructions,
while DATA= modifier may be applied to many other machine instructions, including FPU, MMX, SIMD.</li>
<li>Instruction modifier is not a strict order but only a weak hint.
When the actual data width cannot comply with DATA=, the modifier is ignored
and &euro;ASM emits a warning. If the data width cannot comply with instruction suffix,
&euro;ASM treats this as an error.</li></ul>
<p>There are two other ways how the operand width is controlled.
If one of operands is a <em>register</em>, its width prevails and this cannot be
overriden with suffix or modifier. When the operand width is not determined
with the register, suffix nor modifier, &euro;ASM looks at the TYPE# attribute
of the target operand.</p>
<p>Priority of operand-size specifications:</p>
<ol><li>Width of register operand</li>
<li>Mnemonics suffix</li>
<li>Modifier DATA=</li>
<li>Memory operand type</li></ol>
<p>See the following examples:</p>
<samp>|00000000:00000000           |MemoryVariable  DB 0,0,0,0
|00000004:0107               | ADD [EDI],EAX                     ; Operand width is set by the register (32 bits).
|00000006:830701             | ADDD [EDI],1                      ; Operand width is set by the suffix (32 bits).
|00000009:66830701           | ADD [EDI],1,DATA=W                ; Operand width is set by the modifier (16 bits).
|0000000D:800701             | ADDB [EDI],1,DATA=W               ; Operand width is set by the suffix (8 bits). Warning:modifier ignored.
|## W2401 Modifier "DATA=WORD" could not be obeyed in this instruction.
|00000010:660107             | ADDB [EDI],AX                     ; Operand width is set by the register (16 bits). Error:suffix ignored.
|### E6740 Impracticable operand-size requested with mnemonic suffix.
|00000013:8387[00000000]01   | ADDD [EDI+MemoryVariable],1       ; Operand width is set by the suffix (32 bits).
|0000001A:668387[00000000]01 | ADD [EDI+MemoryVariable],1,DATA=W ; Operand width is set by the modifier (16 bits).
|00000022:8087[00000000]01   | ADD [EDI+MemoryVariable],1        ; Operand width is set by TYPE# MemoryVariable = 'B' (8 bits).
|00000029:800701             | ADD [EDI],1                       ; Error:Operand width is not specified.
|### E6730 Operand size could not be determined, please use DATA= modifier.
</samp>

<h5 id="IMMeq"><a href="#InstructionModifiers">&uarr; IMM=</a></h5>
<p>Some instructions allow to encode a small immediate value as one byte, although they operate with full words.
The byte value is sign-extended by CPU at run-time.</p>
<p>Modifier <code>IMM=</code> may have value <dfn>BYTE, WORD, DWORD, QWORD</dfn> alias <dfn>B, W, D, Q</dfn>
and it specifies how should the immediate operand be encoded in the instruction.</p>
<samp>|00000000:83D001        | ADC EAX,1
|00000003:83D001        | ADC EAX,1,IMM=BYTE
|00000006:81D001000000  | ADC EAX,1,IMM=DWORD</samp>

<h5 id="DISPeq"><a href="#InstructionModifiers">&uarr; DISP=</a></h5>
<p>Displacement address portion in some instructions may be encoded into
one byte when its value is in the range -128..+127. The byte value is sign-extended by the CPU at run-time.
Values outside this range are encoded in full size, i. e. as WORD, or DWORD, according to the
segment width (possibly inverted with ATOGGLE prefix).
This is the default behaviour of &euro;ASM.
Modifier <code>DISP=</code> can have the same enumerated values as IMM= modifier
(<dfn>BYTE, WORD, DWORD, QWORD</dfn> alias <dfn>B, W, D, Q</dfn>)
and it controls whether the displacement is encoded with full size or as a byte.</p>
<samp>|00000000:2945FC        | SUB [EBP-4],EAX
|00000003:2945FC        | SUB [EBP-4],EAX,DISP=BYTE
|00000006:2985FCFFFFFF  | SUB [EBP-4],EAX,DISP=DWORD</samp>

<h5 id="SCALEeq"><a href="#InstructionModifiers">&uarr; SCALE=</a></h5>
<p><dfn>Scaling</dfn> means multiplication of the contents of the index register
with 0, 1, 2, 4 or 8 at run-time.
The <code>SCALE=</code> modifier can be either <dfn>SMART</dfn> or <dfn>VERBATIM</dfn>
(or shortly <dfn>S, V</dfn>). Default is <code>SCALE=SMART</code>. <br/>In <b>verbatim</b> mode
no optimisation is performed with index and base registers and
the scaling is encoded in <a class="EXT" href="../easource/ii.htm#IiModRM">SIB byte</a> even when the scale factor is 1 or 0.
Encoding of instruction with <code>SCALE=VERBATIM</code> uses SIB byte, if possible.
<br/>In <b>smart</b> mode (default) &euro;ASM tries
to rearrange registers and not emit SIB byte unless absolutely necessary.
<br/>Here are the &quot;smart&quot; optimisation rules
(<code>IR</code> is indexregister, <code>BR</code> is baseregister, <code>disp</code> is displacement):</p>
<ul><li><code>[0*IR+BR+disp] <del>&gt;</del> [BR+disp]</code>
<br/>Pseudoscaling by factor zero is omitted completely.</li>
<li><code>[1*IR+BR+disp] <del>&gt;</del> [IR+BR+disp]</code>
<br/>Scaling by factor one is treated as no scaling.</li>
<li><code>[2*IR+disp] <del>&gt;</del> [BR+IR+disp]</code>
<br/>Scaling by factor two with no base is treated as base+index with no scaling.</li></ul>
<samp>|00000000:A011000000     | MOV AL,[0x11]                      ; Special encoding without ModR/M.
|00000005:A011000000     | MOV AL,[0*ESI+0x11]                ; Special encoding without ModR/M.
|0000000A:8A042511000000 | MOV AL,[0*ESI+0x11],SCALE=VERBATIM ; ModR/M with SIB. ESI is not used.
|00000011:               |
|00000011:8A4611         | MOV AL,[ESI+0x11]                  ; ModR/M without SIB. ESI is base.
|00000014:8A4611         | MOV AL,[ESI+0x11],SCALE=SMART      ; ModR/M without SIB. ESI is base.
|00000017:8A442611       | MOV AL,[ESI+0x11],SCALE=VERBATIM   ; ModR/M with SIB, ESI is base.
|0000001B:8A4611         | MOV AL,[1*ESI+0x11]                ; ModR/M without SIB. ESI is base.
|0000001E:8A4611         | MOV AL,[1*ESI+0x11],SCALE=SMART    ; ModR/M without SIB. ESI is base.
|00000021:8A043511000000 | MOV AL,[1*ESI+0x11],SCALE=VERBATIM ; ModR/M with SIB, ESI is index.
|00000028:               |
|00000028:8A443611       | MOV AL,[ESI+ESI+0x11]              ; ModR/M with SIB. ESI is base and index.
|0000002C:8A443611       | MOV AL,[2*ESI+0x11]                ; ModR/M with SIB. ESI is base and index.
|00000030:8A047511000000 | MOV AL,[2*ESI+0x11],SCALE=VERBATIM ; ModR/M with SIB. ESI is scaled index.
|00000037:               |
|00000037:8A442D11       | MOV AL,[EBP+EBP+0x11]              ; ModR/M with SIB, EBP is base and index.
|0000003B:8A442D11       | MOV AL,[2*EBP+0x11]                ; ModR/M with SIB, EBP is base and index.
|0000003F:8A046D11000000 | MOV AL,[2*EBP+0x11],SCALE=VERBATIM ; ModR/M with SIB, EBP is scaled index.</samp>
<blockquote>Notice that an optimisation with SCALE=SMART may change the register role (base|index)
and consequently the default segment register (SS|DS) used for addressing.
This is usually not an issue in flat memory model, otherwise use SCALE=VERBATIM.</blockquote>
<p>When the instruction encoding is displayed with <code>EUROASM DisplayEnc=Yes</code>,
modifier SCALE=VERBATIM tells that SIB was actually emitted in this encoding,
otherwise SCALE=SMART signalizes no SIB byte.</p>


<h5 id="DISTeq"><a href="#InstructionModifiers">&uarr; DIST=</a></h5>
<p>This modifier specifies the <a href="#Distance">distance</a> of a target
in <em>control-transfer </em> instructions.
It can be one of <dfn>FAR, NEAR, SHORT</dfn> alias <dfn>F, N, S</dfn>.</p>
<p><code>DIST=FAR</code> is used when the target is in a different segment
and both rIP and CS registers need to be changed.</p>
<p>By default in intrasegment transfers &euro;ASM automatically selects between SHORT and NEAR distance
depending on the magnitude of the offsets difference.</p>
<p>Modifier DIST= has the same function as <a href="#InstructionSuffixes">
instruction suffix</a>, they are only two differences:</p>
<ul><li>A mnemonic suffix may be used only with
<code>JMP, CALL, RET</code>
while DIST= modifier can also be applied to control-transfer instructions
<code>LOOPcc, Jcc, JrCXZ</code>.</li>
<li>When the target distance cannot comply with DIST=, the modifier is ignored
and &euro;ASM emits a warning. If the distance cannot comply with instruction suffix,
&euro;ASM treats this as an error.</li></ul>
<p>Modifier <code>DIST=NEAR</code> or <code>DIST=FAR</code> can be also applied
to <code>PROC, PROC1</code> pseudoinstructions.
As a consequence of making a FAR procedure is that CALLs and JMPs to that procedure will be
by default FAR, and that any RET inside this procedure will default to <code>DIST=FAR</code>, too.</p>
<samp>|[CODE1]              |[CODE1] SEGMENT
|0000:EB2A            |  JMP CloseLabel:              ; Encoded DIST=SHORT.
|0002:E92701          |  JMP DistantLabel:            ; Encoded DIST=NEAR.
|0005:EA[0000]{0000}  |  JMP FarLabel:                ; Encoded DIST=FAR.
|000A:EB20            |  JMP CloseLabel:,DIST=SHORT   ; Encoded DIST=SHORT.
|000C:E91D01          |  JMP DistantLabel:,DIST=SHORT ; Encoded DIST=NEAR.
|## W2401 Modifier "DIST=SHORT" could not be obeyed in this instruction.
|000F:EA[0000]{0000}  |  JMP FarLabel:,DIST=SHORT     ; Encoded DIST=FAR.
|## W2401 Modifier "DIST=SHORT" could not be obeyed in this instruction.
|0014:E91500          |  JMP CloseLabel:,DIST=NEAR    ; Encoded DIST=NEAR.
|0017:E91201          |  JMP DistantLabel:,DIST=NEAR  ; Encoded DIST=NEAR.
|001A:E9(0000)        |  JMP FarLabel:,DIST=NEAR      ; Encoded DIST=NEAR.
|001D:EA[2C00]{0000}  |  JMP CloseLabel:,DIST=FAR     ; Encoded DIST=FAR.
|0022:EA[2C01]{0000}  |  JMP DistantLabel:,DIST=FAR   ; Encoded DIST=FAR.
|0027:EA[0000]{0000}  |  JMP FarLabel:,DIST=FAR       ; Encoded DIST=FAR.
|002C:                |CloseLabel:
|002C:90909090909090~~|  DB 256 * B 0x90 ; Some stuff to stall off the DistantLabel.
|012C:                |DistantLabel:
|[CODE2]              |[CODE2] SEGMENT
|0000:                |FarLabel:</samp>

<h5 id="ADDReq"><a href="#InstructionModifiers">&uarr; ADDR=</a></h5>
<p>This modifier will choose the <em>reference frame</em> of memory addressing in 64-bit mode.
Allowed values are <dfn>ABS, REL</dfn> alias <dfn>A, R</dfn>.
A number encoded in the instruction code with <b>absolute</b> addressing is related
to the <b>start of segment</b>, which is always 0 at assembly time.
<br/>In a <b>relative</b> adressing frame it is related to the position of the next instruction,
i. e. to the contents of <b>register RIP</b>.
<br/>In legacy modes (16-bit, 32-bit) the reference frame is hardwired as <code>ADDR=REL</code> in control-transfer
instructions (direct JMP, CALL, LOOP, Jcc), and as <code>ADDR=ABS</code> in all other instructions.</p>
<p>RIP-relative addressing is shorter by one byte and it does not require relocation, which saves space in an object file
and avoids patching of the code at load-time. That is why <code>ADDR=REL</code> is preferred by <b>default</b>
in 64-bit mode.
<br/>Explicit selection between absolute and RIP-relative addressing is relevant only
in 64-bit mode when the absolute address would require relocation at link-time.
This happens when the memory variable is specified as a displacement of an address symbol
(not a plain number), and no index or base register is involved in addressing.</p>
<samp>|00000000:00000000         | MemDword DD 0
|00000004:                 |
|00000004:0305F6FFFFFF     |  ADD EAX,[MemDword]          ; Encoded with relative addressing.
|0000000A:0305F0FFFFFF     |  ADD EAX,[MemDword],ADDR=REL ; Encoded with relative addressing.
|00000010:030425[00000000] |  ADD EAX,[MemDword],ADDR=ABS ; Encoded with absolute addressing.
|00000017:                 |
|00000017:034540           |  ADD EAX,[RBP+0x40]          ; Encoded with absolute addressing.
|0000001A:034540           |  ADD EAX,[RBP+0x40],ADDR=ABS ; Encoded with absolute addressing.
|0000001D:034540           |  ADD EAX,[RBP+0x40],ADDR=REL ; Encoded with absolute addressing.
|## W2401 Modifier "ADDR=REL" could not be obeyed in this instruction.</samp>

<h5 id="PREFIXeq"><a href="#InstructionModifiers">&uarr; PREFIX=</a></h5>
<p>All following modifiers apply only to instructions which use <em>Advanced Vector eXtensions</em> (AVX) encoding.
Possible value of prefix is <dfn>XOP, VEX, VEX2, VEX3, MVEX, EVEX</dfn> (shortcuts are not available).</p>
<p>Most AVX-encodable instructions have their mnemonics prefixed with <kbd>V~</kbd>.
Some instructions are defined with only one kind of AVX prefix, they don't need explicit modifier.
When an instruction can be alternatively encoded with different AVX prefixes, &euro;ASM will by default choose the shortest one.</p>
<p>Prefix VEX exists in two variants: VEX2 and VEX3. The longer encoding (VEX3) is automatically selected when the instruction
uses indexregister or baseregister R8..R15 or when it uses opcode from map 0F38 or 0F3A.</p>
<p>Prefix EVEX or MVEX will be selected instead of VEX when the instruction uses register XMM16..XMM31, YMM16..YMM31, ZMM0..ZMM31, K0..K7,
or modifier EH=, SAE=, ROUND=, MASK=, ZEROING=, OPER=.</p>
<p>Instructions encodable with both EVEX and MVEX default to <code>PREFIX=EVEX</code>.
Software written for Intel<sup>®</sup> Xeon Phi<sup>™</sup> CPU needs to explicitly request <code>PREFIX=MVEX</code> in each such amphibious instruction.
In this case it is useful to disable EVEX <code>EUROASM EVEX=DISABLED</code> and thus be warned if some MVEX instruction encodes as EVEX by omission.
Explicit specification of modifier <code>EH=</code> (which is available with MVEX only)
will select MVEX too, and explicit <code>PREFIX=MVEX</code> is not necessary in this case.</p>
<table><caption>CPU features required by using AVX prefix</caption><tr><th>Prefix</th><th>Required EUROASM options</th></tr>
<tr><td>XOP</td><td>SIMD=AVX, AMD=ENABLED, XOP=ENABLED</td></tr>
<tr><td>VEX</td><td>SIMD=AVX</td></tr>
<tr><td>MVEX</td><td>SIMD=AVX512, MVEX=ENABLED</td></tr>
<tr><td>EVEX</td><td>SIMD=AVX512, EVEX=ENABLED</td></tr>
</table>
<samp>|00000000:8FE868CCCB04   | VPCOMB XMM1,XMM2,XMM3,4 ; VPCOMB is defined with XOP only.
|00000006:62F1FA082917   | VMOVNRAPD [RDI],ZMM2    ; VMOVNRAPD is defined with MVEX only.
|0000000C:C5E958CB       | VADDPD XMM1,XMM2,XMM3   ; VADDPD is defined with VEX,MVEX,EVEX.
|00000010:C5E958CB       | VADDPD XMM1,XMM2,XMM3,PREFIX=VEX
|00000014:C5E958CB       | VADDPD XMM1,XMM2,XMM3,PREFIX=VEX2
|00000018:C4E16958CB     | VADDPD XMM1,XMM2,XMM3,PREFIX=VEX3
|0000001D:62F1ED0858CB   | VADDPD XMM1,XMM2,XMM3,PREFIX=EVEX
|00000023:62F1ED4858CB   | VADDPD ZMM1,ZMM2,ZMM3,PREFIX=EVEX
|00000029:62F1E90858CB   | VADDPD ZMM1,ZMM2,ZMM3,PREFIX=MVEX</samp>

<h5 id="MASKeq"><a href="#InstructionModifiers">&uarr; MASK=</a></h5>
<p>Modifier <code>MASK=</code> (as well as <code>ZEROING=, EH=, SAE=, ROUND=, BCST=, OPER=</code>)
is applicable only with <em>Enhanced Advanced Vector eXtensions</em> (EVEX or MVEX).
MASK specifies which <em>opcode mask register</em> is used to control which elements (floating-point or integer numbers)
should be written to the destination SIMD register. Only those elements which have the corresponding bits in mask-register set,
are written. Other elements are either zeroed (if modifier <code>ZEROING=ON</code>) or left unchanged (<code>ZEROING=OFF</code>).</p>
<p>Possible value of MASK= is <dfn>K0, K1, K2, K2, K3, K4, K5, K6, K7</dfn> or an expression which evaluates to a number <dfn>0..7</dfn>.
Default is <code>MASK=0</code>. Opmask register K0 is special, it is treated as if it had all bits set, thus no masking is applied in this case.</p>

<h5 id="ZEROINGeq"><a href="#InstructionModifiers">&uarr; ZEROING=</a></h5>
<p>Modifier <code>ZEROING=</code> is boolean, it controls whether elements masked-off by the contents of opmask register
should be <dfn>set to zero</dfn> or left unchanged, which is called <dfn>merging</dfn>. It has no meaning when <code>MASK=K0</code> or
when mask is not specified at all. Default is <code>ZEROING=OFF</code> (merging). Modifier is applicable only
with EVEX encoding.</p>
<samp>|00000000:C5E958CB       | VADDPD XMM1,XMM2,XMM3        ; VADDPD is defined with VEX,MVEX,EVEX.
|00000004:62F1ED0C58CB   | VADDPD XMM1,XMM2,XMM3,MASK=4 ; Using MASK= will force EVEX encoding.
|0000000A:62F1ED0C58CB   | VADDPD XMM1,XMM2,XMM3,MASK=K4,ZEROING=NO
|00000010:62F1ED8C58CB   | VADDPD XMM1,XMM2,XMM3,MASK=K4,ZEROING=YES</samp>

<h5 id="EHeq"><a href="#InstructionModifiers">&uarr; EH=</a></h5>
<p>Boolean modifier <code>EH=</code> <dfn>(Eviction Hint)</dfn> is applicable with the MVEX-encoded instructions only.
<code>EH=1</code> informs CPU that the data is non-temporal and it is unlikely to be reused soon
so it has no effect to store them in CPU cache. This concerns register-to-memory instructions only.</p>
<p>Value of EH is also consulted in register-to-register instructions where it will select between swizzle operations
and static rounding.</p>

<h5 id="SAEeq"><a href="#InstructionModifiers">&uarr; SAE=</a></h5>
<p>If boolean modifier <code>SAE=</code> <dfn>(Suppress All Exceptions)</dfn> is switched on,
the instruction  will not raise any kind of floating-point exception flags,
for instance when it operated with not-a-number value.
Instruction with <code>SAE=ON</code> behaves as if all the MXCSR mask bits were set.</p>
<p>In EVEX-encoding SAE is by default enabled whenever static rounding is used, this behaviour cannot be switched off.</p>

<h5 id="ROUNDeq"><a href="#InstructionModifiers">&uarr; ROUND=</a></h5>
<p>Modifier <code>ROUND=</code> specifies <dfn>static rounding mode</dfn>, it is applicable on EVEX and MVEX instructions
with <em>rounding semantic</em>, for instance for conversion from double to single-precision FP numbers.
It has four possible enumerated values: <dfn>NEAR, UP, DOWN, ZERO</dfn> alias <dfn>N, U, D, Z</dfn>.</p>
<p>Static rounding is available only in ZMM register-to-register operations (not if one of the operands is in memory
or when XMM and YMM registers are used).
Default is no rounding, in this case general rounding mode controlled by RM bits in MXCSR applies.</p>

<h5 id="BCSTeq"><a href="#InstructionModifiers">&uarr; BCST=</a></h5>
<p>Boolean modifier <code>BCST=</code> can be used to enable <dfn>data broadcasting</dfn> in operations which
load data from memory. When <code>BCST=ENABLED</code>, the memory source operand specifies only one element
and its contents will be broadcast (copied) to all positions of the destination register.</p>
<p>Default is <code>BCST=OFF</code>. Broadcasting cannot be used with register-to-register operations.</p>
<samp>|00000000:62F16C48590E | VMULPS ZMM1,ZMM2,[RSI]           ; Multiply 16 DWORD FP numbers in ZMM2 with 16 DWORD FP numbers at [RSI], store 16 products to ZMM1.
|00000006:62F16C58590E | VMULPS ZMM1,ZMM2,[RSI],BCST=ON   ; Multiply 16 DWORD FP numbers in ZMM2 with the same DWORD FP number at [RSI], store 16 products to ZMM1.
|0000000C:62F16C4859CB | VMULPS ZMM1,ZMM2,ZMM3            ; Multiply 16 DWORD FP numbers in ZMM2 with 16 DWORD FP numbers in ZMM3, store 16 products to ZMM1.
|00000012:62F16C7859CB | VMULPS ZMM1,ZMM2,ZMM3,ROUND=ZERO ; Ditto, truncate each product toward zero.</samp>

<h5 id="OPEReq"><a href="#InstructionModifiers">&uarr; OPER=</a></h5>
<p>Instruction modifier <code>OPER=</code> encodes kind of <dfn>operation</dfn> performed with the source operand at run-time.
Affected operations are <dfn>broadcasting, rounding, conversion, swizzling</dfn>.
Possible value is a numeric expression which evaluates to <dfn>0..7</dfn>.</p>
<p>Value of the operation will be encoded in bits 6, 5, 4 of 32-bit prefix EVEX or MVEX.
These bits are named <b>S<sub>2</sub>, S<sub>1</sub>, S<sub>0</sub></b> in MVEX specification
<a class="EXTL" href="links.htm#IntelMVEX">[IntelMVEX]</a>, and <b>L', L, b</b> in EVEX specification
<a class="EXTL" href="links.htm#IntelAVX512">[IntelAVX512]</a>.
The same bits are also affected by the modifiers <code>BCST=, ROUND=, SAE=</code> and by SIMD register width, but direct
OPER= specification has higher priority when a conflict occurs.</p>
<p>Modifier OPER= is the only way how to request special conversion or swizzle (shuffle) operation for MVEX-encoded
instruction available on Intel<sup>®</sup> Xeon Phi<sup>™</sup> CPU. Not all operation values from the table below are available with all MVEX instructions,
documentation in <a class="EXTL" href="links.htm#IntelMVEX">[IntelMVEX]</a> should always be consulted prior to using <code>OPER=</code>.</p>

<table><caption>MVEX-encoded operations</caption>
<tr><th>OPER=</th><th>register-to-register, EH=0</th><th>register-to-register, EH=1</th><th>memory-to-register</th><th>register-to-memory</th></tr>
<tr><th>0</th><td>no swizzle {dcba}</td><td>ROUND=NEAR,SAE=NO</td><td>no operation</td><td>no conversion</td></tr>
<tr><th>1</th><td>swap (inner) pairs {cdab}</td><td>ROUND=DOWN,SAE=NO</td><td>bcst 1 element {1to16} or {1to8}</td><td>not available</td></tr>
<tr><th>2</th><td>swap with two-away {badc}</td><td>ROUND=UP,SAE=NO</td><td>bcst 4 elements {4to16} or {4to8}</td><td>not available </td></tr>
<tr><th>3</th><td>cross-product swizzle {dacb}</td><td>ROUND=ZERO,SAE=NO</td><td>convert from {float16}</td><td>convert to {float16}</td></tr>
<tr><th>4</th><td>bcst <b>a</b> element across 4 {aaaa}</td><td>ROUND=NEAR,SAE=YES</td><td>convert from {uint8}</td><td>convert to {uint8}</td></tr>
<tr><th>5</th><td>bcst <b>b</b> element across 4 {bbbb}</td><td>ROUND=DOWN,SAE=YES</td><td>convert from {sint8}</td><td>convert to {sint8}</td></tr>
<tr><th>6</th><td>bcst <b>c</b> element across 4 {cccc}</td><td>ROUND=UP,SAE=YES</td><td>convert from {uint16}</td><td>convert to {uint16}</td></tr>
<tr><th>7</th><td>bcst <b>d</b> element across 4 {dddd}</td><td>ROUND=ZERO,SAE=YES</td><td>convert from {sint16}</td><td>convert to {sint16}</td></tr>
</table>

<table><caption>EVEX-encoded operations</caption>
<tr><th>OPER=</th><th>register-to-register</th><th>memory-to-register</th></tr>
<tr><th>0</th><td>DATA=OWORD,SAE=NO</td><td>DATA=OWORD,BCST=OFF</td></tr>
<tr><th>1</th><td>DATA=ZWORD,SAE=YES,ROUND=NEAR</td><td>DATA=OWORD,BCST=ON</td></tr>
<tr><th>2</th><td>DATA=YWORD,SAE=NO</td><td>DATA=YWORD,BCST=OFF</td></tr>
<tr><th>3</th><td>DATA=ZWORD,SAE=YES,ROUND=DOWN</td><td>DATA=YWORD,BCST=ON</td></tr>
<tr><th>4</th><td>DATA=ZWORD,SAE=NO</td><td>DATA=ZWORD,BCST=OFF</td></tr>
<tr><th>5</th><td>DATA=ZWORD,SAE=YES,ROUND=UP</td><td>DATA=ZWORD,BCST=ON</td></tr>
<tr><th>6</th><td>reserved</td><td>reserved</td></tr>
<tr><th>7</th><td>DATA=ZWORD,SAE=YES,ROUND=ZERO</td><td>reserved</td></tr>
</table>
<samp>|00000000:62F16908DB4D01&lt;6 | VPANDD ZMM1,ZMM2,[RBP+40h],PREFIX=MVEX,OPER=0 ; No broadcast           {16to16}.
|00000007:62F16918DB4D10&lt;2 | VPANDD ZMM1,ZMM2,[RBP+40h],PREFIX=MVEX,OPER=1 ; Broadcast one element   {1to16}.
|0000000E:62F16928DB4D04&lt;4 | VPANDD ZMM1,ZMM2,[RBP+40h],PREFIX=MVEX,OPER=2 ; Broadcast four elements {4to16}.
|00000015:62F16948DB4D04&lt;4 | VPANDD ZMM1,ZMM2,[RBP+40h],PREFIX=MVEX,OPER=4 ; Convert from {uint8}.
|0000001C:62F16958DB4D04&lt;4 | VPANDD ZMM1,ZMM2,[RBP+40h],PREFIX=MVEX,OPER=5 ; Convert from {sint8}.
|00000023:62F16968DB4D02&lt;5 | VPANDD ZMM1,ZMM2,[RBP+40h],PREFIX=MVEX,OPER=6 ; Convert from {uint16}.
|0000002A:62F16978DB4D02&lt;5 | VPANDD ZMM1,ZMM2,[RBP+40h],PREFIX=MVEX,OPER=7 ; Convert from {sint16}.
|00000031:                 |
|00000031:62F1F9085A4D01&lt;6 | VCVTPD2PS ZMM1,[RBP+40h],PREFIX=MVEX,OPER=0 ; No broadcast            {8to8}.
|00000038:62F1F9185A4D08&lt;3 | VCVTPD2PS ZMM1,[RBP+40h],PREFIX=MVEX,OPER=1 ; Broadcast one element   {1to8}.
|0000003F:62F1F9285A4D02&lt;5 | VCVTPD2PS ZMM1,[RBP+40h],PREFIX=MVEX,OPER=2 ; Broadcast four elements {4to8}.
|00000046:                 |
|00000046:62F1F9085ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=0,OPER=0 ; No swizzle            {dcba}.
|0000004C:62F1F9185ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=0,OPER=1 ; Swap (inner) pairs    {cdab}.
|00000052:62F1F9285ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=0,OPER=2 ; Swap with two-away    {badc}.
|00000058:62F1F9385ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=0,OPER=3 ; Cross-product swizzle {dacb}.
|0000005E:62F1F9485ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=0,OPER=4 ; Broadcast <b>a</b> element to 4 {aaaa}.
|00000064:62F1F9585ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=0,OPER=5 ; Broadcast <b>b</b> element to 4 {bbbb}.
|0000006A:62F1F9685ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=0,OPER=6 ; Broadcast <b>c</b> element to 4 {cccc}.
|00000070:62F1F9785ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=0,OPER=7 ; Broadcast <b>d</b> element to 4 {dddd}.
|00000076:                 |
|00000076:62F1F9885ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=1,OPER=0 ; ROUND=NEAR,SAE=OFF {rn}.
|0000007C:62F1F9985ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=1,OPER=1 ; ROUND=DOWN,SAE=OFF {rd}.
|00000082:62F1F9A85ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=1,OPER=2 ; ROUND=UP,  SAE=OFF {ru}.
|00000088:62F1F9B85ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=1,OPER=3 ; ROUND=ZERO,SAE=OFF (rz).
|0000008E:62F1F9C85ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=1,OPER=4 ; ROUND=NEAR,SAE=ON {rn-sae}.
|00000094:62F1F9D85ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=1,OPER=5 ; ROUND=DOWN,SAE=ON {rd-sae}.
|0000009A:62F1F9E85ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=1,OPER=6 ; ROUND=UP,  SAE=ON {ru-sae}.
|000000A0:62F1F9F85ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,EH=1,OPER=7 ; ROUND=ZERO,SAE=ON {rz-sae}.
|000000A6:62F1F9F85ACA     | VCVTPD2PS ZMM1,ZMM2,PREFIX=MVEX,ROUND=ZERO,SAE=ON
|000000AC:62F1F9F85ACA     | VCVTPD2PS ZMM1,ZMM2,EH=1,ROUND=ZERO,SAE=ON</samp>

<h5 id="ALIGNeq"><a href="#InstructionModifiers">&uarr; ALIGN=</a></h5>
<p>Alignment request may be applied to any machine instruction, and to pseudoinstructions
<a href="#D">D</a>, <a href="#PROC">PROC</a>, <a href="#PROC1">PROC1</a>, <a href="#STRUC">STRUC</a>.
See the <a href="#Alignment">alignment</a> paragraph for accepted values. This instruction modifier has the same effect
as if explicit pseudoinstruction <a href="#ALIGN">ALIGN</a> was placed above the statement.</p>

<h5 id="NESTINGCHECKeq"><a href="#InstructionModifiers">&uarr; NESTINGCHECK=</a></h5>
<p>This is a pseudoinstruction modifier, it can be applied only to pseudoinstructions
<a href="#PROC">PROC</a>, <a href="#PROC">ENDPROC</a>, <a href="#PROC1">PROC1</a>, <a href="#PROC1">ENDPROC1</a>.
Its value is boolean, default is <code>NESTINGCHECK=ON</code>. Switching the nesting control off
will suppress error message on block mismatch.
This enables to establish bounds between macros which enhance some block pseudoinstructions.
See the definitions of macros <a class="EXT" href="../maclib/stdcal32.htm#Procedure">Procedure</a> and
<a class="EXT" href="../maclib/stdcal32.htm#EndProcedure">EndProcedure</a> as an example.</p>

<h4 id="InstructionEnhancements"><a href="#MachineInstructions">&uarr; Instruction enhancements</a></h4>
<h5><a href="#InsEnhFPU">FPU instruction default registers &darr;</a></h5>
<h5><a href="#InsEnhStrings">String instructions operands &darr;</a></h5>
<h5><a href="#InsEnhXLAT">XLAT with nondefault [segment:base] &darr;</a></h5>
<h5><a href="#InsEnhLOOP">LOOP with nondefault counter &darr;</a></h5>
<h5><a href="#InsEnhLOOPNear">Near and far LOOP and JrCXZ &darr;</a></h5>
<h5><a href="#InsEnhJccNear">Near and far Jcc &darr;</a></h5>
<h5><a href="#InsEnhMultipleOperands">PUSH, POP, INC, DEC multiple operands &darr;</a></h5>
<h5><a href="#InsEnhAA">AAD, AAM operand &darr;</a></h5>
<h5><a href="#InsEnhTEST">TEST a register by itself &darr;</a></h5>
<h5><a href="#InsEnhShiftAndRotate">Shift and rotate 2nd operand &darr;</a></h5>
<h5><a href="#InsEnhNOP">No-operation &darr;</a></h5>
<h5><a href="#InsEnhPINSR">PINSR register source &darr;</a></h5>
<h5><a href="#InsEnhBLEND">BLENDVPD, BLENDVPS, PBLENDVB 3rd operand &darr;</a></h5>
<h5><a href="#InsEnhMASKMOV">MASKMOVQ, MASKMOVDQU 1st operand &darr;</a></h5>
<h5><a href="#InsEnhVER">VERR, VERQ, LAR, LSL &darr;</a></h5>

<p>Some instructions in IA-64 work with registers fixed by design.
&euro;ASM accepts voluntary explicit specification of such registers which serves as a documentation for human reader
and sometimes it may be exploited as address-size definition and|or segment override.</p>

<h5 id="InsEnhFPU"><a href="#InstructionEnhancements">&uarr; FPU instruction default registers</a></h5>
<p>Unary FPU instructions with implicit destination ST0 may explicitly name
this register as the first operand, or it may be omitted.
In many other FPU instructions the default destination is ST0 and the default source is ST1, in which case
one or both operands may be omitted. See also handlers of instructions
<a class="EXT" href="../easource/iif.htm#IifFNOP">FNOP</a>,
<a class="EXT" href="../easource/iif.htm#IifFCMOVB">FCMOVB</a>,
<a class="EXT" href="../easource/iif.htm#IifFADD">FADD</a>,
<a class="EXT" href="../easource/iif.htm#IifFIADD">FIADD</a>,
<a class="EXT" href="../easource/iif.htm#IifFADDP">FADDP</a>,
<a class="EXT" href="../easource/iif.htm#IifFXCH">FXCH</a>,
<a class="EXT" href="../easource/iif.htm#IifFCOM">FCOM</a>.</p>

<samp>|00000000:000000000000F03F   |Mem  DQ 1.0
|00000008:                   |
|00000008:DAC1               | FCMOVB          ; ST0 = ST1 if Below.
|0000000A:DAC1               | FCMOVB ST0,ST1  ; ST0 = ST1 if Below.
|0000000C:                   |
|0000000C:DAC7               | FCMOVB ST0,ST7  ; ST0 = ST7 if Below.
|0000000E:DAC7               | FCMOVB ST7      ; ST0 = ST7 if Below.
|00000010:                   |
|00000010:D8C1               | FADD            ; ST0 += ST1.
|00000012:D8C1               | FADD ST0,ST1    ; ST0 += ST1.
|00000014:                   |
|00000014:DC05[00000000]     | FADD ST0,[Mem]  ; ST0 += [Mem].
|0000001A:DC05[00000000]     | FADD [Mem]      ; ST0 += [Mem].
|00000020:                   |
|00000020:DCC7               | FADD ST7,ST0    ; ST7 += ST0.
|00000022:DCC7               | FADD ST7        ; ST7 += ST0.
|00000024:                   |
|00000024:D9E9               | FLDL2T          ; ST0 = log<sub>2</sub>10.
|00000026:D9E9               | FLDL2T ST0      ; ST0 = log<sub>2</sub>10.</samp>

<h5 id="InsEnhStrings"><a href="#InstructionEnhancements">&uarr; String instructions operands</a></h5>
<p>String instructions are implicitly addressing the source as memory <code>[DS:rSI]</code>
or port <code>DX</code>, and the destination as memory <code>[ES:rDI]</code> or port <code>DX</code>.
Beside the non-operand version &euro;ASM accepts operand(s) explicitly representing source and destination,
with possible segment-override and address-size change.</p>
<samp>|00000000:AC       | LODSB
|00000001:AC       | LODSB [DS:ESI] ; Default segment is DS, address-size is 32.
|00000002:2EAC     | LODSB [CS:ESI] ; Segment override.
|00000004:67AC     | LODSB [SI]     ; Address-size changed.
|00000006:         |
|00000006:AA       | STOSB
|00000007:AA       | STOSB [EDI]
|00000008:         |
|00000008:AE       | SCASB
|00000009:AE       | SCASB [EDI]
|0000000A:         |
|0000000A:A5       | MOVSD
|0000000B:A5       | MOVSD [EDI],[ESI]
|0000000C:2667A5   | MOVSD [DI],[ES:SI] ; Address-size and source segment changed.
|0000000F:         |
|0000000F:666D     | INSW
|00000011:666D     | INSW  [ES:EDI],DX
|00000013:         |
|00000013:6E       | OUTSB
|00000014:6E       | OUTSB DX,[DS:ESI]
|00000015:2E6E     | OUTSB DX,[CS:ESI] ; Source segment changed.</samp>



<h5 id="InsEnhXLAT"><a href="#InstructionEnhancements">&uarr; XLAT with nondefault [segment:base]</a></h5>
<p>Default translation table is implicitly addressed with <code>[DS:rBX]</code>.
&euro;ASM accepts optional memory operand which can specify nondefault segment override
and nondefault rBX width.</p>

<h5 id="InsEnhLOOP"><a href="#InstructionEnhancements">&uarr; LOOP with nondefault counter</a></h5>
<p>LOOP count register can be specified as the optional second operand.</p>

<samp>|00000000:D7       | XLAT
|00000001:D7       | XLATB          ; XLAT and XLATB are identical.
|00000002:D7       | XLATB [DS:EBX] ; Segment DS is the default, no override is necessary.
|00000003:26D7     | XLATB [ES:EBX] ; Segment override.
|00000005:67D7     | XLATB [BX]     ; Address-size changed from 32 to 16 bits.
|00000007:         |
|00000007:E2F6     | LOOP $-8
|00000009:E2F6     | LOOP $-8,ECX ; Default counter in 32-bit mode is ECX.
|0000000B:67E2F5   | LOOP $-8,CX  ; Counter register (its address-size) changed to 16 bits.</samp>

<h5 id="InsEnhLOOPNear"><a href="#InstructionEnhancements">&uarr; Near and far LOOP and JrCXZ</a></h5>
<p>Looping is not limited to a short-range distance in &euro;ASM.
When the destination of LOOP, LOOPcc, JCXZ, JECXZ, JRCXZ is far or near (out of byte range),
&euro;ASM will assemble three instructions instead:</p>
<code class="PRE">LOOP $+2+2              ; Loop to the proxy-jump instead of the original destination.
JMPS $+JMPSsize+JMPsize ; Skip the proxy-jump when the loop has finished (rCX is zero).
JMP target              ; Near or far unconditional proxy-jump to the original destination.</code>
<samp>|[CODE1]                            |[CODE1] SEGMENT
|00000000:E366                      | JECXZ CloseLabel:
|00000002:E364                      | JECXZ CloseLabel:,DIST=SHORT
|00000004:E302EB05E95B000000        | JECXZ CloseLabel:,DIST=NEAR
|0000000D:E302EB07EA[68000000]{0000}| JECXZ CloseLabel:,DIST=FAR
|00000018:                          |
|00000018:E302EB05E947010000        | JECXZ DistantLabel:
|00000021:E302EB05E93E010000        | JECXZ DistantLabel:,DIST=SHORT
|## W2401 Modifier "DIST=SHORT" could not be obeyed in this instruction.
|0000002A:E302EB05E935010000        | JECXZ DistantLabel:,DIST=NEAR
|00000033:E302EB07EA[68010000]{0000}| JECXZ DistantLabel:,DIST=FAR
|0000003E:                          |
|0000003E:E302EB07EA[00000000]{0000}| JECXZ FarLabel:
|00000049:E302EB07EA(00000000){0000}| JECXZ FarLabel:,DIST=SHORT
|## W2401 Modifier "DIST=SHORT" could not be obeyed in this instruction.
|00000054:E302EB05E9(00000000)      | JECXZ FarLabel:,DIST=NEAR
|0000005D:E302EB07EA[00000000]{0000}| JECXZ FarLabel:,DIST=FAR
|00000068:                          |CloseLabel:
|00000068:909090909090909090909090~~|  DB 256 * B 0x90 ; Some stuff to stall off the DistantLabel.
|00000168:                          |DistantLabel:
|[CODE2]                            |[CODE2] SEGMENT
|00000000:                          |FarLabel:</samp>

<h5 id="InsEnhJccNear"><a href="#InstructionEnhancements">&uarr; Near and far Jcc</a></h5>
<p>A conditional jump to the distance exceeding the byte limit -128..127 was introduced with 386 CPU.
When the program is intended to run on older processors as well, near and far conditional jump
<code>Jcc target</code> will be assembled by &euro;ASM as two instructions:</p>
<code class="PRE">J!cc $+J!ccsize+JMPsize ; Skip the proxy-jump if inverted condition is true.
JMP target     ; Near or far unconditional proxy-jump to the original destination.</code>
<p>Near proxy-jump instead of standard 386 near conditional jump is assembled when
these three conditions are met:</p><ol>
<li>Distance to the target is out of byte range,</li>
<li>Segment width is 16,</li>
<li>EUROASM option CPU= is 286 or lower.</li></ol>
<samp>|[CODE1]                |[CODE1] SEGMENT WIDTH=16
|                       | EUROASM CPU=386
|0000:7419              | JE CloseLabel:   ; Standard short conditional jump.
|0002:0F841501          | JE DistantLabel: ; Standard near conditional jump, available on CPU=386 and newer.
|0006:7505EA[0000]{0000}| JE FarLabel:     ; Far unconditional proxy-jump skipped by inverted-condition J!cc.
|                       | EUROASM CPU=086  ; The following instructions should run on old PC/XT machine, too.
|000D:740C              | JE CloseLabel:   ; Standard short conditional jump.
|000F:7503E90701        | JE DistantLabel: ; Near unconditional proxy-jump skipped by the inverted-condition J!cc.
|0014:7505EA[0000]{0000}| JE FarLabel:     ;  Far unconditional proxy-jump skipped by the inverted-condition J!cc.
|001B:                  |CloseLabel:
|001B:9090909090909090~~|  DB 256 * B 0x90 ; Some stuff to stall off the DistantLabel.
|011B:                  |DistantLabel:
|[CODE2]                |[CODE2] SEGMENT
|0000:                  |FarLabel:</samp>

<h5 id="InsEnhMultipleOperands"><a href="#InstructionEnhancements">&uarr; PUSH, POP, INC, DEC multiple operands</a></h5>
<p>In many assemblers instructions PUSH, POP, INC, DEC may have just one operand.
&euro;ASM does not limit the number of operands, they are performed one by one in the specified order.
If an instruction modifier or suffix is used, it applies to all operands.
<samp>|00000000:57FF370FA06A04   | PUSH EDI,[EDI],FS,4
|00000007:590FA18F0658     | POP  ECX,FS,[ESI],EAX
|0000000D:40FF07           | INC  EAX,[EDI],DATA=DWORD
|00000010:48664AFEC9       | DEC  EAX,DX,CL</samp>


<h5 id="InsEnhAA"><a href="#InstructionEnhancements">&uarr; AAD, AAM operand</a></h5>
<p>Instructions <a class="EXT" href="../easource/iig.htm#IigAAD">AAD</a>
and <a class="EXT" href="../easource/iig.htm#IigAAM">AAM</a> use radix 10 by default
for adjusting AL before division or after multiplication of binary decimals.
In &euro;ASM they accept optional 8-bit immediate operand, for instance <code>AAD 16</code>.
<samp>|00000000:D40A  | AAM
|00000002:D40A  | AAM 10
|00000004:D410  | AAM 16
|00000006:D50A  | AAD
|00000008:D50A  | AAD 10
|0000000A:D510  | AAD 16</samp>


<h5 id="InsEnhTEST"><a href="#InstructionEnhancements">&uarr; TEST a register by itself</a></h5>
<p>When both operands in TEST instruction specify the same register, the second operand
may be omitted.</p>

<h5 id="InsEnhShiftAndRotate"><a href="#InstructionEnhancements">&uarr; Shift and Rotate 2nd operand</a></h5>
<p>When the number of bits to rotate or shift in instructions
RCL, ROL, SAL, SHL, RCR, ROR, SAR, SHR is equal to 1, the second operand may be omitted.</p>


<samp>|00000000:85D2     | TEST EDX,EDX
|00000002:85D2     | TEST EDX     ; Operand2 of TEST is by default identical with Operand1.
|00000004:         |
|00000004:D1D0     | RCL EAX,1
|00000006:D1D0     | RCL EAX      ; Omitted rotate or shift count defaults to 1.
|00000008:D165F8   | SHL [EBP-8],1,DATA=DWORD
|0000000B:D165F8   | SHL [EBP-8],DATA=DWORD</samp>


<h5 id="InsEnhNOP"><a href="#InstructionEnhancements">&uarr; No-operation</a></h5>
<p>Instruction which does nothing (no-operation) except for taking some time and incrementing
instruction-pointer register, is implemented in all x86 processors as one-byte NOP,
actually <code>XCHG rAX,rAX</code> (opcode 0x90). With Pentium II (<code>CPU=686</code>) Intel proposed
dedicated multibyte no-operation instructions with opcodes 0x18..0x1F prefixed with 0x0F.
Multibyte NOP is more suitable for alignment purposes than series of one-byte NOPs,
as it's fetched and executed at once. On older CPU this real NOP must be emulated
with legacy instructions, e.g. <code>XCHG reg,reg</code> or <code>LEA reg,[reg]</code>.</p>
<p><a class="EXTL" href="../eadoc/links.htm#Sandpile">[Sandpile]</a> and <a class="EXTL" href="../eadoc/links.htm#NasmInsns">[NasmInsns]</a>
define real-NOP mnemonic as an undocumented instructions <code>HINT_NOP0, HINT_NOP1, HINT_NOP2..63</code>.
with one memory operand of the desired length.
Instead of clutterring the instruction list with 64 new mnemonics, &euro;ASM implements
just one mnemonic <code>HINT_NOP</code> (suffixable as <code>HINT_NOPW, HINT_NOPD, HINT_NOPQ</code>)
with ordinal number defined in the first immediate operand, and memory specification
moved aside to the 2nd operand.</p>

<samp>|00000000:0F18D9             | HINT_NOP  03q,ECX
|00000003:660F18E1           | HINT_NOP  04q,CX
|00000007:66670F182C         | HINT_NOPW 05q,[SI]
|0000000C:66670F187400       | HINT_NOPW 06q,[SI],DISP=BYTE
|00000012:0F18BE00000000     | HINT_NOPD 07q,[ESI],DISP=DWORD
|00000019:0F19043500000000   | HINT_NOPD 10q,[1*ESI],DISP=DWORD,SCALE=VERBATIM
|00000021:                   |
|00000021:90                 | NOP1
|00000022:6690               | NOP2
|00000024:0F1F00             | NOP3
|00000027:0F1F4000           | NOP4
|0000002B:0F1F442000         | NOP5
|00000030:660F1F442000       | NOP6
|00000036:0F1F8000000000     | NOP7
|0000003D:0F1F842000000000   | NOP8
|00000045:660F1F842000000000 | NOP9</samp>
<p>Beside that, &euro;ASM implements operandless instructions <code>NOP1, NOP2, NOP3, NOP4, NOP5, NOP6, NOP7, NOP8, NOP9</code>
which occupy the specified number of bytes, respecting the current CPU mode and level:</p>

<table class="SMALL" id="TableNOP"><caption>No-operation encoding</caption>
<tr><th>Mnemonic</th><th>Operation code (hexa)</th><th>Equivalent instruction in &euro;ASM syntax</th></tr>
<tr><th colspan="3">16-bit mode, CPU=086</th></tr>
<tr><td>NOP1</td><td>90</td><td>XCHG AX,AX</td></tr>
<tr><td>NOP2</td><td>87C9</td><td>XCHG CX,CX</td></tr>
<tr><td>NOP3</td><td>9087C9</td><td>XCHG AX,AX ; XCHG CX,CX</td></tr>
<tr><td>NOP4</td><td>87C987D2</td><td>XCHG CX,CX ; XCHG DX,DX</td></tr>
<tr><td>NOP5</td><td>9087C987D2</td><td>XCHG AX,AX ; XCHG CX,CX ; XCHG DX,DX</td></tr>
<tr><td>NOP6</td><td>87C987D287DB</td><td>XCHG CX,CX ; XCHG DX,DX ; XCHG BX,BX</td></tr>
<tr><td>NOP7</td><td>9087C987D287DB</td><td>XCHG AX,AX ; XCHG CX,CX ; XCHG DX,DX ; XCHG BX,BX</td></tr>
<tr><td>NOP8</td><td>87C987D287DB87E4</td><td>XCHG CX,CX ; XCHG DX,DX ; XCHG BX,BX ; XCHG SP,SP</td></tr>
<tr><td>NOP9</td><td>9087C987D287DB87E4</td><td>XCHG AX,AX ; XCHG CX,CX ; XCHG DX,DX ; XCHG BX,BX ; XCHG SP,SP</td></tr>
<tr><th colspan="3">16-bit mode, CPU=686</th></tr>
<tr><td>NOP1</td><td>90</td><td>NOP DATA=WORD</td></tr>
<tr><td>NOP2</td><td>6690</td><td>OTOGGLE NOP</td></tr>
<tr><td>NOP3</td><td>666790</td><td>OTOGGLE ATOGGLE NOP</td></tr>
<tr><td>NOP4</td><td>670F1F00</td><td>NOP [EAX],DATA=WORD</td></tr>
<tr><td>NOP5</td><td>670F1F4000</td><td>NOP [EAX],DATA=WORD,DISP=BYTE</td></tr>
<tr><td>NOP6</td><td>670F1F442000</td><td>NOP [EAX+0*EAX],DATA=WORD,SCALE=VERBATIM,DISP=BYTE</td></tr>
<tr><td>NOP7</td><td>66670F1F442000</td><td>NOP [EAX+0*EAX],DATA=DWORD,SCALE=VERBATIM,DISP=BYTE</td></tr>
<tr><td>NOP8</td><td>670F1F8000000000</td><td>NOP [EAX],DATA=WORD,DISP=DWORD</td></tr>
<tr><td>NOP9</td><td>670F1F842000000000</td><td>NOP [EAX+0*EAX],DATA=WORD,SCALE=VERBATIM,DISP=DWORD</td></tr>
<tr><th colspan="3">32-bit mode, CPU=386</th></tr>
<tr><td>NOP1</td><td>90</td><td>XCHG EAX,EAX,DATA=DWORD</td></tr>
<tr><td>NOP2</td><td>6690</td><td>XCHG AX,AX,DATA=WORD</td></tr>
<tr><td>NOP3</td><td>8D4000</td><td>LEA EAX,[EAX],DATA=DWORD</td></tr>
<tr><td>NOP4</td><td>8D442000</td><td>LEA EAX,[EAX+0*EAX],DATA=DWORD,SCALE=VERBATIM,DISP=BYTE</td></tr>
<tr><td>NOP5</td><td>3E8D442000</td><td>LEA EAX,[DS:EAX+0*EAX],DATA=DWORD,SCALE=VERBATIM,DISP=BYTE</td></tr>
<tr><td>NOP6</td><td>8D8000000000</td><td>LEA EAX,[EAX],DATA=DWORD,DISP=DWORD</td></tr>
<tr><td>NOP7</td><td>8D842000000000</td><td>LEA EAX,[EAX+0*EAX],DATA=DWORD,SCALE=VERBATIM,DISP=DWORD</td></tr>
<tr><td>NOP8</td><td>3E8D842000000000</td><td>LEA EAX,[DS:EAX+0*EAX],DATA=DWORD,SCALE=VERBATIM,DISP=DWORD</td></tr>
<tr><td>NOP9</td><td>663E8D842000000000</td><td>LEA AX,[DS:EAX+0*EAX],DATA=WORD,SCALE=VERBATIM,DISP=DWORD</td></tr>
<tr><th colspan="3">32-bit mode, CPU=686</th></tr>
<tr><td>NOP1</td><td>90</td><td>NOP DATA=DWORD</td></tr>
<tr><td>NOP2</td><td>6690</td><td>NOP DATA=WORD</td></tr>
<tr><td>NOP3</td><td>0F1F00</td><td>NOP [EAX],DATA=DWORD</td></tr>
<tr><td>NOP4</td><td>0F1F4000</td><td>NOP [EAX],DATA=DWORD,DISP=BYTE</td></tr>
<tr><td>NOP5</td><td>0F1F442000</td><td>NOP [EAX+0*EAX],DATA=DWORD,SCALE=VERBATIM,DISP=BYTE</td></tr>
<tr><td>NOP6</td><td>660F1F442000</td><td>NOP [EAX+0*EAX],DATA=WORD,SCALE=VERBATIM,DISP=BYTE</td></tr>
<tr><td>NOP7</td><td>0F1F8000000000</td><td>NOP [EAX],DATA=DWORD,DISP=DWORD</td></tr>
<tr><td>NOP8</td><td>0F1F842000000000</td><td>NOP [EAX+0*EAX],DATA=DWORD,SCALE=VERBATIM,DISP=DWORD</td></tr>
<tr><td>NOP9</td><td>660F1F842000000000</td><td>NOP [EAX+0*EAX],DATA=WORD,SCALE=VERBATIM,DISP=DWORD</td></tr>
<tr><th colspan="3">64-bit mode, CPU=X64</th></tr>
<tr><td>NOP1</td><td>90</td><td>NOP DATA=DWORD</td></tr>
<tr><td>NOP2</td><td>6690</td><td>NOP DATA=WORD</td></tr>
<tr><td>NOP3</td><td>0F1F00</td><td>NOP [RAX],DATA=DWORD</td></tr>
<tr><td>NOP4</td><td>0F1F4000</td><td>NOP [RAX],DATA=DWORD,DISP=BYTE</td></tr>
<tr><td>NOP5</td><td>0F1F442000</td><td>NOP [RAX+0*RAX],DATA=DWORD,SCALE=VERBATIM,DISP=BYTE</td></tr>
<tr><td>NOP6</td><td>660F1F442000</td><td>NOP [RAX+0*RAX],DATA=WORD,SCALE=VERBATIM,DISP=BYTE</td></tr>
<tr><td>NOP7</td><td>0F1F8000000000</td><td>NOP [RAX],DATA=DWORD,DISP=DWORD</td></tr>
<tr><td>NOP8</td><td>0F1F842000000000</td><td>NOP [RAX+0*RAX],DATA=DWORD,SCALE=VERBATIM,DISP=DWORD</td></tr>
<tr><td>NOP9</td><td>660F1F842000000000</td><td>NOP [RAX+0*RAX],DATA=WORD,SCALE=VERBATIM,DISP=DWORD</td></tr>
<tr><th>Mnemonic</th><th>Operation code (hexa)</th><th>Equivalent instruction in &euro;ASM syntax</th></tr>
</table> <br class="CLEAR"/>


<h5 id="InsEnhPINSR"><a href="#InstructionEnhancements">&uarr; PINSR register source</a></h5>
<p>Instructions PINSRB, PINSRW, PINSRD (insert Byte/Word/Dword into the destination register XMM)
accept as source register (operand 2) not only GPR with the corresponding width,
but any wider register. Only lowest byte|word|dword from this register is used.</p>

<samp>|00000000:660F3A20C902   | PINSRB XMM1,CL,2
|00000006:660F3A20C902   | PINSRB XMM1,CX,2
|0000000C:660F3A20C902   | PINSRB XMM1,ECX,2
|00000012:               |
|00000012:660FC4C902     | PINSRW XMM1,CX,2
|00000017:660FC4C902     | PINSRW XMM1,ECX,2</samp>

<h5 id="InsEnhBLEND"><a href="#InstructionEnhancements">&uarr; BLENDVPS, BLENDVPD, PBLENDVB 3rd operand</a></h5>
<p>Instruction for variable blending uses fixed implied register XMM0 as a mask register.
&euro;ASM allows explicit specification of XMM0 as the third operand.</p>

<samp>|00000000:660F3815CA     | BLENDVPD XMM1,XMM2
|00000005:660F3815CA     | BLENDVPD XMM1,XMM2,XMM0
|0000000A:               |
|0000000A:660F3814CA     | BLENDVPS XMM1,XMM2
|0000000F:660F3814CA     | BLENDVPS XMM1,XMM2,XMM0
|00000014:               |
|00000014:660F3810CA     | PBLENDVB XMM1,XMM2
|00000019:660F3810CA     | PBLENDVB XMM1,XMM2,XMM0</samp>

<h5 id="InsEnhMASKMOV"><a href="#InstructionEnhancements">&uarr; MASKMOVQ, MASKMOVDQU 1st operand</a></h5>
<p>Maskable copy to memory uses [DS:rDI] as the fixed destination. &euro;ASM allows explicit specification
of the destination memory as the optional first operand.</p>
<samp>|00000000:0FF7CA         | MASKMOVQ MM1,MM2
|00000003:0FF7CA         | MASKMOVQ [DS:EDI],MM1,MM2 ; Default destination is [DS:EDI].
|00000006:260FF7CA       | MASKMOVQ [ES:EDI],MM1,MM2 ; Segment override.
|0000000A:               |
|0000000A:660FF7CA       | MASKMOVDQU XMM1,XMM2
|0000000E:660FF7CA       | MASKMOVDQU [DS:EDI],XMM1,XMM2 ; Default destination is [DS:EDI].
|00000012:26660FF7CA     | MASKMOVDQU [ES:EDI],XMM1,XMM2 ; Segment override.</samp>


<h5 id="InsEnhVER"><a href="#InstructionEnhancements">&uarr; VERR, VERW, LAR, LSL </a></h5>
<p>Segment descriptor in system instruction VERR, VERW (operand 1) and LAR, LSL (operand 2)
may be specified as 16-bit memory variable or 16, 32 or 64-bit GPR (only lower 16 bits are used).</p>

<samp>|00000000:0F00E6    | VERR SI
|00000003:0F00E6    | VERR ESI
|00000006:          |
|00000006:0F00EE    | VERW SI
|00000009:0F00EE    | VERW ESI
|0000000C:          |
|0000000C:660F02C6  | LAR AX,SI
|00000010:660F02C6  | LAR AX,ESI
|00000014:0F02C6    | LAR EAX,SI
|00000017:0F02C6    | LAR EAX,ESI
|0000001A:          |
|0000001A:660F03C6  | LSL AX,SI
|0000001E:660F03C6  | LSL AX,ESI
|00000022:0F03C6    | LSL EAX,SI
|00000025:0F03C6    | LSL EAX,ESI</samp>


<h4 id="UndocInstructions"><a href="#MachineInstructions">Undocumented instructions &darr;</a></h4>
<p>&euro;ASM supports a few instructions which are not documented in the official specification published by CPU manufacturer.
They may not work with all processor generations and they require explicit feature <code>EUROASM UNDOC=ENABLED</code>.</p>
<p>For more information see instruction handlers
<a class="EXT" href="../easource/iic.htm#IicBB0_RESET">BB0_RESET</a>,
<a class="EXT" href="../easource/iig.htm#IigCMPXCHG486">CMPXCHG486</a>,
<a class="EXT" href="../easource/iif.htm#IifF4X4">F4X4</a>,
<a class="EXT" href="../easource/iif.htm#IifFCOM2">FCOM2</a>,
<a class="EXT" href="../easource/iif.htm#IifFCOMP5">FCOMP5</a>,
<a class="EXT" href="../easource/iif.htm#IifFFREEP">FFREEP</a>,
<a class="EXT" href="../easource/iif.htm#IifFMUL4X4">FMUL4X4</a>,
<a class="EXT" href="../easource/iif.htm#IifFNSETPM">FNSETPM</a>,
<a class="EXT" href="../easource/iif.htm#IifFRSTPM">FRSTPM</a>,
<a class="EXT" href="../easource/iif.htm#IifFSBP1">FSBP1</a>,
<a class="EXT" href="../easource/iif.htm#IifFSBP2">FSBP2</a>,
<a class="EXT" href="../easource/iif.htm#IifFSBP3">FSBP3</a>,
<a class="EXT" href="../easource/iif.htm#IifFSTDW">FSTDW</a>,
<a class="EXT" href="../easource/iif.htm#IifFSTP1">FSTP1</a>,
<a class="EXT" href="../easource/iif.htm#IifFSTP8">FSTP8</a>,
<a class="EXT" href="../easource/iif.htm#IifFSTP9">FSTP9</a>,
<a class="EXT" href="../easource/iif.htm#IifFSTSG">FSTSG</a>,
<a class="EXT" href="../easource/iif.htm#IifFXCH4">FXCH4</a>,
<a class="EXT" href="../easource/iif.htm#IifFXCH7">FXCH7</a>,
<a class="EXT" href="../easource/iis.htm#IisHCF">HCF</a>,
<a class="EXT" href="../easource/iis.htm#IisHINT_NOP">HINT_NOP</a>,
<a class="EXT" href="../easource/iis.htm#IisIBTS">IBTS</a>,
<a class="EXT" href="../easource/iig.htm#IigICEBP">ICEBP</a>,
<a class="EXT" href="../easource/iig.htm#IigINT1">INT1</a>,
<a class="EXT" href="../easource/iis.htm#IisJMPE">JMPE</a>,
<a class="EXT" href="../easource/iis.htm#IisLOADALL">LOADALL</a>,
<a class="EXT" href="../easource/iis.htm#IisLOADALL286">LOADALL286</a>,
<a class="EXT" href="../easource/iis.htm#IisPREFETCHWT1">PREFETCHWT1</a>,
<a class="EXT" href="../easource/iig.htm#IigPSRAQ">PSRAQ</a>,
<a class="EXT" href="../easource/iig.htm#IigSAL2">SAL2</a>,
<a class="EXT" href="../easource/iig.htm#IigSALC">SALC</a>,
<a class="EXT" href="../easource/iig.htm#IigSETALC">SETALC</a>,
<a class="EXT" href="../easource/iic.htm#IicSMINTOLD">SMINTOLD</a>,
<a class="EXT" href="../easource/iig.htm#IigTEST2">TEST2</a>,
<a class="EXT" href="../easource/iis.htm#IisUD0">UD0</a>,
<a class="EXT" href="../easource/iis.htm#IisUD1">UD1</a>,
<a class="EXT" href="../easource/iis.htm#IisUD2A">UD2A</a>,
<a class="EXT" href="../easource/iig.htm#IigUMOV">UMOV</a>,
<a class="EXT" href="../easource/iis.htm#IisXBTS">XBTS</a>,
<a class="EXT" href="../easource/iiy.htm#IiyVLDQQU">VLDQQU</a>.</p>

<h3 id="PseudoInstructions" title="Pseudoinstructions"><a href="#Instructions">&uarr; Pseudoinstructions</a></h3>
<h4><a href="#ALIGN">ALIGN &darr;</a></h4>
<h4><a href="#D">D, DB, DU, DW, DD, DQ, DT, DO, DY, DZ, DI, DS &darr;</a></h4>
<h4><a href="#ENDHEAD">ENDHEAD &darr;</a></h4>
<h4><a href="#ENDP">ENDP &darr;</a></h4>
<h4><a href="#ENDP1">ENDP1 &darr;</a></h4>
<h4><a href="#ENDPROC">ENDPROC &darr;</a></h4>
<h4><a href="#ENDPROC1">ENDPROC1 &darr;</a></h4>
<h4><a href="#ENDPROGRAM">ENDPROGRAM &darr;</a></h4>
<h4><a href="#ENDSTRUC">ENDSTRUC &darr;</a></h4>
<h4><a href="#EQU">EQU &darr;</a></h4>
<h4><a href="#eq">= &darr;</a></h4>
<h4><a href="#EUROASM">EUROASM &darr;</a></h4>
<h4><a href="#EXTERN">EXTERN &darr;</a></h4>
<h4><a href="#EXPORT">EXPORT &darr;</a></h4>
<h4><a href="#GLOBAL">GLOBAL &darr;</a></h4>
<h4><a href="#GROUP">GROUP &darr;</a></h4>
<h4><a href="#HEAD">HEAD &darr;</a></h4>
<h4><a href="#IMPORT">IMPORT&darr;</a></h4>
<h4><a href="#INCLUDE">INCLUDE &darr;</a></h4>
<h4><a href="#INCLUDE1">INCLUDE1 &darr;</a></h4>
<h4><a href="#INCLUDEBIN">INCLUDEBIN &darr;</a></h4>
<h4><a href="#INCLUDEHEAD">INCLUDEHEAD &darr;</a></h4>
<h4><a href="#INCLUDEHEAD1">INCLUDEHEAD1 &darr;</a></h4>
<h4><a href="#LINK">LINK &darr;</a></h4>
<h4><a href="#PROC">PROC &darr;</a></h4>
<h4><a href="#PROC1">PROC1 &darr;</a></h4>
<h4><a href="#PROGRAM">PROGRAM &darr;</a></h4>
<h4><a href="#PUBLIC">PUBLIC &darr;</a></h4>
<h4><a href="#SEGMENT">SEGMENT &darr;</a></h4>
<h4><a href="#STRUC">STRUC &darr;</a></h4>
<h4><a href="#pcCOMMENT">%COMMENT &darr;</a></h4>
<h4><a href="#pcDEBUG">%DEBUG &darr;</a></h4>

<h4><a href="#pcDISPLAY">%DISPLAY &darr;</a></h4>
<h4><a href="#pcDROPMACRO">%DROPMACRO &darr;</a></h4>
<h4><a href="#pcELSE">%ELSE &darr;</a></h4>
<h4><a href="#pcENDCOMMENT">%ENDCOMMENT &darr;</a></h4>
<h4><a href="#pcENDFOR">%ENDFOR &darr;</a></h4>
<h4><a href="#pcENDIF">%ENDIF &darr;</a></h4>
<h4><a href="#pcENDMACRO">%ENDMACRO &darr;</a></h4>
<h4><a href="#pcENDREPEAT">%ENDREPEAT &darr;</a></h4>
<h4><a href="#pcENDWHILE">%ENDWHILE</a></h4>
<h4><a href="#pcERROR">%ERROR &darr;</a></h4>
<h4><a href="#pcEXITFOR">%EXITFOR &darr;</a></h4>
<h4><a href="#pcEXITMACRO">%EXITMACRO &darr;</a></h4>
<h4><a href="#pcEXITREPEAT">%EXITREPEAT &darr;</a></h4>
<h4><a href="#pcEXITWHILE">%EXITWHILE</a></h4>
<h4><a href="#pcFOR">%FOR &darr;</a></h4>
<h4><a href="#pcIF">%IF &darr;</a></h4>
<h4><a href="#pcMACRO">%MACRO &darr;</a></h4>
<h4><a href="#pcPROFILE">%PROFILE &darr;</a></h4>
<h4><a href="#pcREPEAT">%REPEAT &darr;</a></h4>
<h4><a href="#pcSET">%SET &darr;</a></h4>
<h4><a href="#pcSETA">%SETA &darr;</a></h4>
<h4><a href="#pcSETB">%SETB &darr;</a></h4>
<h4><a href="#pcSETC">%SETC &darr;</a></h4>
<h4><a href="#pcSETE">%SETE &darr;</a></h4>
<h4><a href="#pcSETL">%SETL &darr;</a></h4>
<h4><a href="#pcSETS">%SETS &darr;</a></h4>
<h4><a href="#pcSETX">%SETX &darr;</a></h4>
<h4><a href="#pcSET2">%SET2 &darr;</a></h4>
<h4><a href="#pcSHIFT">%SHIFT &darr;</a></h4>
<h4><a href="#pcUNTIL">%UNTIL &darr;</a></h4>
<h4><a href="#pcWHILE">%WHILE</a></h4>
<p><dfn id="Derectives" title="Directives">Pseudoinstructions</dfn> (sometimes also called <dfn>directives</dfn>)
are orders for the assembler which are formally similar to ordinary machine instructions
&mdash; many of them may have label field and operands.
Some pseudoinstructions (ALIGN and D) can even emit data or code.</p>
<h6>Pseudoinstruction names and their keyword operands are case-insensitive.</h6>

<hr/>
<h4 id="EUROASM"><a href="#PseudoInstructions">&uarr; EUROASM</a></h4>
<h5><a href="#AUTOALIGNeq">AUTOALIGN= &darr;</a></h5>
<h5><a href="#AUTOSEGMENTeq">AUTOSEGMENT= &darr;</a></h5>
<h5><a href="#CODEPAGEeq">CODEPAGE= &darr;</a></h5>
<h5><a href="#CPUeq">CPU= &darr;</a></h5>
<h5><a href="#CPUfeatures"><em>CPU features</em> <small>ABM=, AES=, AMD=, AVX=, AVX512=, CET=, CYRIX=, D3NOW=, EVEX=, FMA=, FPU=, LWP=, MMX=, MPX=, MVEX=, PRIV=, PROT=, RTM=, SGX=, SHA=, SPEC=, SVM=, TSX=, UNDOC=, VIA=, VMX=, XOP= &darr;</small></a></h5>
<h5><a href="#DEBUGeq">DEBUG= &darr;</a></h5>
<h5><a href="#DISPLAYENCeq">DISPLAYENC= &darr;</a></h5>
<h5><a href="#DISPLAYSTMeq">DISPLAYSTM= &darr;</a></h5>
<h5><a href="#DUMPALLeq">DUMPALL= &darr;</a></h5>
<h5><a href="#DUMPeq">DUMP= &darr;</a></h5>
<h5><a href="#DUMPWIDTHeq">DUMPWIDTH= &darr;</a></h5>
<h5><a href="#INCLUDEPATHeq">INCLUDEPATH= &darr;</a></h5>
<h5><a href="#LINKPATHeq">LINKPATH= &darr;</a></h5>
<h5><a href="#LISTeq">LIST= &darr;</a></h5>
<h5><a href="#LISTFILEeq">LISTFILE= &darr;</a></h5>
<h5><a href="#LISTINCLUDEeq">LISTINCLUDE= &darr;</a></h5>
<h5><a href="#LISTMACROeq">LISTMACRO= &darr;</a></h5>
<h5><a href="#LISTREPEATeq">LISTREPEAT= &darr;</a></h5>
<h5><a href="#LISTVAReq">LISTVAR= &darr;</a></h5>
<h5><a href="#MAXINCLUSIONSeq">MAXINCLUSIONS= &darr;</a></h5>
<h5><a href="#MAXLINKSeq">MAXLINKS= &darr;</a></h5>
<h5><a href="#NOWARNeq">NOWARN= &darr;</a></h5>
<h5><a href="#PROFILEeq">PROFILE= &darr;</a></h5>
<h5><a href="#RUNPATHeq">RUNPATH= &darr;</a></h5>
<h5><a href="#SIMDeq">SIMD= &darr;</a></h5>
<h5><a href="#UNICODEeq">UNICODE= &darr;</a></h5>
<h5><a href="#WARNeq">WARN= &darr;</a></h5>

<p>With the EUROASM pseudoinstruction the programmer controls various settings of EuroAssembler
- <dfn>EUROASM options</dfn>. Particular options are set with the keyword operands.
The same keywords are used in <code>[EUROASM]</code> section of
<a class="EXT" href="../objlib/euroasm.ini">euroasm.ini</a> configuration file.</p>
<p>Options specified with this pseudoinstruction rewrite default options set in the configuration file.
Names of those options are case-insensitive.</p>
<p>Current value can be retrieved in the form of
<a href="#SystemVariablesEUROASM">EUROASM system %^variables</a>, for instance
<code> InfoMsg DB "This program uses code page %^CODEPAGE.",13,10,0</code></p>
<p>For options which expect a Boolean value it may be provided with enumerated tokens <code>TRUE, YES, ON, ENABLE, ENABLED</code>
or <code>FALSE, NO, OFF, DISABLE, DISABLED</code> (case insensitive) or they may contain
a <a href="#BooleanAlgebra">logical expression</a>.</p>
<p>Beside the keyword options the EUROASM pseudoinstruction also recognizes
ordinal operand(s) which may have one of two enumerated values <dfn>PUSH</dfn> or <dfn>POP</dfn>.
&euro;ASM maintains a special <em>option stack</em> and these two directives
allow to save and retrieve the whole set of EUROASM options to this stack.
This feature is handy in macros which temporarily require some unusual option value.
Blindly setting the option in macro would have had side effect on the statements
following the macro invocation, because EUROASM is
a <a href="#ProgStrucVerSwitch">switching statement</a>.
So it is better to save the current options on its stack at the beginning of macro and
restore them at the end; other statements will not be influenced. Example:</p>
<pre>SomeMacro %MACRO  ; Macro definition.
            EUROASM PUSH, NOWARN=2102 ; Store all options to the option-stack and then supress the warning W2102.
             ; Here go instructions which may emit warning message W2102
             ...
            EUROASM POP ; Restore the option-stack, W2102 is no longer suppressed.
          %ENDMACRO SomeMacro
</pre>

<h5 id="AUTOALIGNeq"><a href="#EUROASM">&uarr; AUTOALIGN=</a></h5>
<p>This is a Boolean option; default is <code>AUTOALIGN=ON</code>. Memory variables
created or reserved with <a href="#D">D</a> pseudoinstruction will be implicitly aligned
according to their <a href="#DataTypes">TYPE#</a>.</p>
<blockquote>Aligned memory-variables can be accessed faster, on the other hand this option
may blow up the size of your program if data definition
of various types are mixed frequently. It's better to manually group data of the same size,
so the alignment stuff is used only once per group.</blockquote>
<h6>Memory variables defined as <a href="#Literals">literals</a> are always autoaligned,
regardless of <code>EUROASM AUTOALIGN=</code> status.</h6>
<p>Structured data variables (defined with <code> DS <em>structure_name</em></code>)
do not autoalign by their largest member.
They are aligned by the segment width (WORD, DWORD or QWORD) if AUTOALIGN=ENABLED.
<h6>Autoalignment does not work inside structure definition.</h6>
<p>Programmers should design their structures with respect
to the natural alignment of structure members. This is especially important in 64-bit mode,
where API requires all data be aligned. On conversion from badly designed 32-bit structures
they need manually inserted stuff-members which complete DWORD member sizes to QWORD alignment
of the following members, and which rounds up the strucure size to a multiple of 8.
See the WinAPI structure <a class="EXT" href="../maclib/winsgui.htm#MSG">MSG</a>
as an example.</p>
<p>Autoalignment does not apply to machine instructions. If we want to have a procedure aligned
to the start of a cache boundery (for better performance), it should be aligned
explicitly, for instamce <code>Rapid PROC ALIGN=OWORD</code>.</p>


<h5 id="AUTOSEGMENTeq"><a href="#EUROASM">&uarr; AUTOSEGMENT=</a></h5>
<p>This is a Boolean option; default is <code>AUTOSEGMENT=ON</code>. The section,
where the current statement emits to, is implicitly changed by &euro;ASM according to the
<a href="#SegmentPURPOSEeq">purpose</a> of the statement.
When more than one section with this purpose is defined in a program,
autosegment will switch to the last defined one.</p>
<p>If the statement is a <strong>machine instruction</strong> or prefix or <a href="#PROC">PROC</a>,
&euro;ASM will switch to the last defined <strong>CODE</strong> section.
<br/>Similary, when the statement <strong>defines or reserves data</strong> (pseudoinstruction D
and its clones, including <a href="#D">DI</a>), the current section is switched
to the last <strong>DATA or BSS</strong> section.</p>
<p>Pseudoinstruction <a href="#ALIGN">ALIGN</a>, <strong>macros and all nonemitting operations</strong>,
such as <a href="#EQU">EQU</a> or a solo label, <strong>do not change</strong> the current section.</p>
<blockquote>If you rely on autosegmentation, avoid a pitfall when the new section
begins with a macro invocation, with an explicit ALIGN or with just a label itself. These statement
will not autoswitch the current section. You may need to insert <code>NOP</code> or <code>PROC</code>
to autoswitch to CODE, <code>DB 0</code> statement to autoswitch to DATA, or
<code>DB</code> to autoswitch to BSS.
<del>Example of such pitfall:
<pre>      EUROASM AUTOSEGMENT=ON
Hello PROGRAM FORMAT=PE, ENTRY=Main:
       INCLUDE winapi.htm; Include some basic code macros.
Title  DB "World!",0     ; <abbr>Correctly autoswitched to [.data].</abbr>
Main:  StdOutput Title   ; <abbr>Macro didn't swich to [.text] as desired.</abbr>
       TerminateProgram
      ENDPROGRAM Hello   ; <abbr>Hello.exe does not work because its entry is in [.data] section.</abbr></pre> </del>
<p>The label Main: incorrectly remained in previous [.data] section.
Remedy is simple:<ul><li>insert a machine instruction <code>Main: NOP</code></li>
<li>or make it a procedure <code>Main: PROC</code></li>
<li>or switch the section manually:<code>[.text]</code> above <code>Main: StdOutput Title</code></li></ul>
<pre>      EUROASM AUTOSEGMENT=ON
Hello PROGRAM FORMAT=PE, ENTRY=Main:
       INCLUDE winapi.htm; Include some basic code macros.
Title  DB "World!",0     ; <abbr>Correctly autoswitched to [.data].</abbr>
Main:  PROC              ; <abbr>Correctly autoswitched to [.text].</abbr>
        StdOutput Title
        TerminateProgram
       ENDPROC Main:
      ENDPROGRAM Hello   ; <abbr>Hello.exe works as expected.</abbr></pre>
</blockquote>
<h6>Each explicit change of current section disables AUTOSEGMENT as a side effect.</h6>
<p>AUTOSEGMENT= is a weak option, it is automatically switched off when
the programmer changes the current section explicitly with <code>[section_name]</code>
in the label field of statement.</p>
<blockquote>If you want to keep AUTOSEGMENT enabled after
manual change of section, you need to explicitly switch it back on with <code>EUROASM AUTOSEGMENT=ON</code>,
or save its state using <code>EUROASM PUSH</code>
and restore them with <code>EUROASM POP</code> afterwards.</blockquote>

<h5 id="CODEPAGEeq"><a href="#EUROASM">&uarr; CODEPAGE=</a></h5>
<p>&euro;ASM can use Unicode strings at run time but the data definitions in the source code are
defined in bytes. Option CODEPAGE= tells &euro;ASM which code page
it should internally use for string conversion in the source text to Unicode at assembly-time.</p>
<p>Codepage may be specified with a direct 16-bit integer value, as specified by
<a class="EXTL" href="../eadoc/links.htm#CodePageMS">[CodePageMS]</a>,
for instance <code>CODEPAGE=1253</code> for Greek aplhabet.</p>
<p>Codepage values can also be specified as an enumerated token, such as
<code>CODEPAGE=CP852, CODEPAGE=WINDOWS-1252, CODEPAGE=ISO-8859-2</code> etc,
see <a class="EXT" href="../easource/dict.htm#DictCodePages">DictCodePages</a>
for the complete list. Names of those specification are case insensitive.</p>
<blockquote>Even though some of those enumerated codepage constants
may look like an arithmetic substraction, they are recognized as verbatim
tokens and not evaluated.</blockquote>
<p>The factory default and recommended value is <code>CODEPAGE=UTF-8</code>.
See also <a href="#ProgStrucCharCode">Character encoding</a> above.</p>

<h5 id="INCLUDEPATHeq"><a href="#EUROASM">&uarr; INCLUDEPATH=</a></h5>
<p>When an included file is specified without a path, &euro;ASM will search for this file
in the directories which are defined in <code>INCLUDEPATH=</code> option. Paths can be separated
with a semicolon <kbd>;</kbd> or comma <kbd>,</kbd> and the whole list should be in double quotes.
Both backward <kbd>\</kbd> and forward slashes <kbd>/</kbd> may be used as folder separator.
The last slash can be omitted. Default is <code>INCLUDEPATH="./,./maclib,../maclib,"</code>.</p>
<blockquote>This syntax doesn't support directory names which begin or end with a space
as a significat part of the name. Nevertheless, such names should be avoided anyway.</blockquote>

<h5 id="LINKPATHeq"><a href="#EUROASM">&uarr; LINKPATH=</a></h5>
<p>When a linked file is specified without a path, &euro;ASM will search for this file
in the directories which are defined in <code>LINKPATH=</code> option. Paths can be separated
with semicolon <kbd>;</kbd> or comma <kbd>,</kbd> and the whole list should be in double quotes.
Both backward <kbd>\</kbd> and forward slashes <kbd>/</kbd> may be used as folder separator.
The last slash can be omitted. Default is <code>LINKPATH="./,./objlib,../objlib,"</code>.</p>

<h5 id="RUNPATHeq"><a href="#EUROASM">&uarr; RUNPATH=</a></h5>
<p>When a dynamic shared object (ELFSO module) is specified without a path, Linux dynamic linker will search for this file
in the directories which are defined in <code>RUNPATH=</code> option. Paths can be separated
with semicolon <kbd>;</kbd> or comma <kbd>,</kbd> and the whole list should be in double quotes.
Both backward <kbd>\</kbd> and forward slashes <kbd>/</kbd> may be used as folder separator.
The last slash can be omitted. Default is <code>RUNPATH="./,./objlib,../objlib,"</code>.</p>

<h5 id="MAXINCLUSIONSeq"><a href="#EUROASM">&uarr; MAXINCLUSIONS=</a></h5>
<p>Parameter MAXINCLUSIONS limits the maximal number of succesfull executions of INCLUDE* statements
in an &euro;ASM source. This prevents the assembler from resource exhausting in the case of
recursive inclusion loop.</p>
<p>Default value is <code>EUROASM MAXINCLUSIONS=64</code>.</p>

<h5 id="MAXLINKSeq"><a href="#EUROASM">&uarr; MAXLINKS=</a></h5>
<p>Parameter MAXLINKS limits the maximal number of files specified by LINK statements
in an &euro;ASM source. This prevents the assembler from resource exhausting in case of
recursive link loop.</p>
<p>Default value is <code>EUROASM MAXLINKS=64</code>.</p>

<h5 id="CPUeq" title="CPU levels"><a href="#EUROASM">&uarr; Processor generation option CPU=</a></h5>
<p>Not all IA-32 machine instructions are available on all types of Central Processing Unit (CPU).
This EUROASM option specifies the minimal type of CPU which the program is intended for.
Possible CPU= values are <br/><dfn>086</dfn> alias <dfn>8086</dfn>,
<br/><dfn>186</dfn>, <br/><dfn>286</dfn>, <br/><dfn>386</dfn>, <br/><dfn>486</dfn>,
<br/><dfn>586</dfn> alias <dfn>PENTIUM</dfn>,
<br/><dfn>686</dfn> alias <dfn>P6</dfn>,
<br/><dfn>X64</dfn>.
<br/>The default is <code>EUROASM CPU=586</code>. 64-bit program should have <code>EUROASM CPU=X64</code> enabled.</p>
<blockquote>EuroAssembler pretends that the later CPU also promotes all instructions
supported by previous CPU versions.</blockquote>

<h5 id="CPUfeatures" title="CPU features"><a href="#EUROASM">&uarr; Processor features</a></h5>
<p>This bunch of EUROASM boolean options tells &euro;ASM which CPU features are required
on the target computer. By default are all options switched OFF, you should explicitly enable
each capability which you intend to program for.</p>
<p><code>ABM=</code> assembly of <em>Advanced Bit Manipulation</em> instructions.</p>
<p><code>AES=</code> assembly of Intel's <em>Advance Encryption Standard</em> (AESNI) instructions.</p>
<p><code>AMD=</code> instructions specific for <em>AMD</em> CPU manufacturer.</p>
<p><code>CET=</code> Control-flow Enforcement Technology instructions.</p>
<p><code>CYRIX=</code> instructions specific for <em>CYRIX</em> CPU manufacturers.</p>
<p><code>D3NOW=</code> assembly of AMD <em>3DNow!</em> instructions.</p>
<p><code>EVEX=</code> assembly of Intel's <em>EVEX-encoded</em> AVX-512 instructions.</p>
<p><code>FMA=</code> assembly of <em>Fused Multiply-Add</em> instructions.</p>
<p><code>FPU=</code> assembly of <em>Floating-Point Unit</em> instructions (math coprocessor).</p>
<p><code>LWP=</code> assembly of AMD's <em>LightWeight Profiling</em> instructions.</p>
<p><code>MMX=</code> assembly of <em>MultiMedia Extensions</em>.</p>
<p><code>MPX=</code> assembly of <em>Memory Protection Extensions</em>.</p>
<p><code>MVEX=</code> assembly of Intel's <em>MVEX-encoded</em> AVX-512 instructions.</p>
<p><code>PRIV=</code> assembly of <em>privileged mode</em> instructions.</p>
<p><code>PROT=</code> assembly of <em>protected mode</em> instructions.</p>
<p><code>SGX=</code> assembly of <em>Software Guard Extensions</em>.</p>
<p><code>SHA=</code> assembly of Intel's <em>Secure Hash Algorithm</em> instructions.</p>
<p><code>SPEC=</code> assembly of other <em>special</em> instructions.</p>
<p><code>SVM=</code> assembly of <em>Shared Virtual Memory</em> instructions.</p>
<p><code>TSX=</code> assembly of Intel's <em>Transactional Synchronization Extensions</em>.</p>
<p><code>UNDOC=</code> assembly of undocumented instructions.</p>
<p><code>VIA=</code> instructions specific for <em>VIA Geode</em> CPU manufacturers.</p>
<p><code>VMX=</code> assembly of <em>Virtual Machine Extensions</em>.</p>
<p><code>XOP=</code> assembly of AMD's <em>XOP-encoded</em> AVX instructions.</p>

<h5 id="SIMDeq"><a href="#EUROASM">&uarr; Streaming SIMD Extension generation option SIMD=</a></h5>
<p>This option defines which <dfn>Single Instruction Multiple Data</dfn> (SIMD) generation is required to assemble the following instructions.
Possible enumerated values are
<br/><dfn>SSE1</dfn> alias <dfn>SSE</dfn> alias boolean <em>true</em>,
<br/><dfn>SSE2</dfn>,
<br/><dfn>SSE3</dfn>,
<br/><dfn>SSSE3</dfn>,
<br/><dfn>SSE4</dfn>,
<br/><dfn>SSE4.1</dfn>,
<br/><dfn>SSE4.2</dfn>,
<br/><dfn>AVX</dfn>,
<br/><dfn>AVX2</dfn>,
<br/><dfn>AVX512</dfn>.
Default value is <code>SIMD=DISABLED</code> (no SIMD instructions are expected).</p>

<blockquote>Options <a href="#CPUeq">CPU generation</a>, <a href="#CPUfeatures">CPU features</a>,
<a href="#SIMDeq">SIMD generation</a>
do not restrain &euro;ASM from assembling instructions for higher CPU but a warning is issued
when the instruction requires some capability currently not enabled with EUROASM.
This should warn you that your program may not run on every PC, or that you may have made
a typo in instruction mnemonics.</blockquote>

<h5 id="DISPLAYSTMeq"><a href="#EUROASM">&uarr; DISPLAYSTM=</a></h5>
<h5 id="DISPLAYENCeq"><a href="#EUROASM">&uarr; DISPLAYENC=</a></h5>
<p>Those boolean options are designed for debugging of assembly process, see also
pseudoinstruction <a href="#pcDISPLAY">%DISPLAY</a>. When enabled, &euro;ASM inserts
a diagnostic message below each assembled statement, which displays how is
the <a href="#Statement">statement</a> parsed into fields,
and what <a href="#InstructionModifiers">modifiers</a> was used for the instruction encoding.
Example:</p><pre>
    EUROASM DISPLAYSTM=ON
.L: MOV EAX,[ESI+16],ALIGN=DWORD
    EUROASM DISPLAYSTM=OFF, DISPLAYENC=ON
    LEA EDX,[ESI+16]
    ADD EAX,EDX</pre>
<p>Listing of the previous example is here:</p>
<samp>|                  |    EUROASM DISPLAYSTM=ON
|00000000:8B4610   |.L: MOV EAX,[ESI+16],ALIGN=DWORD
|# D1010 **** DISPLAYSTM ".L: MOV EAX,[~~ALIGN=DWORD  "
|# D1020 label=".L"
|# D1040 machine operation="MOV"
|# D1050 ordinal operand number=1,value="EAX"
|# D1050 ordinal operand number=2,value="[ESI+16]"
|# D1060 keyword operand,name="ALIGN",value="DWORD"
|                  |    EUROASM DISPLAYSTM=OFF, DISPLAYENC=ON
|# D1010 **** DISPLAYSTM "EUROASM DISPL~~SPLAYENC=ON  "
|# D1040 pseudo operation="EUROASM"
|# D1060 keyword operand,name="DISPLAYSTM",value="OFF"
|# D1060 keyword operand,name="DISPLAYENC",value="ON"
|00000003:8D5610   |    LEA EDX,[ESI+16]
|# D1080 Emitted size=3,DATA=DWORD,DISP=BYTE,SCALE=SMART,ADDR=ABS.
|00000006:01D0     |    ADD EAX,EDX
|# D1080 Emitted size=2,CODE=SHORT,DATA=DWORD.</samp>


<h5 id="DUMPeq"><a href="#EUROASM">&uarr; DUMP=</a></h5>
<h5 id="DUMPWIDTHeq"><a href="#EUROASM">&uarr; DUMPWIDTH=</a></h5>
<h5 id="DUMPALLeq"><a href="#EUROASM">&uarr; DUMPALL=</a></h5>
<p>Options DUMP=, DUMPWIDTH= and DUMPALL= control how the dump column with emitted code
is presented in listing.</p>
<p>The boolean option <code>DUMP=</code> can switch off the dump completely,
the listing copies the input source almost verbatim in this case. Default is <code>DUMP=ON</code>.</p>
<p>DUMPWIDTH= sets the width of dump column in &euro;ASM listing.
This option specifies how many characters of dumped data will fit between the starting
<kbd>|</kbd> and ending <kbd>|</kbd> including those two border characters.
Default value is <code>DUMPWIDTH=27</code> which is enough for 8byte long instruction.</p>
<p>Accepted dump width value is between 16 and 128 characters.</p>
<p>Dump data consists of an offset (4 or 8 hexadecimal characters, depending on section width),
separator <kbd>:</kbd> and 2 hexadecimal digits per each byte
of generated code.</p>

<p>When the generated code is too long to fit into the dump column, the Boolean option <code>DUMPALL=</code> decides
if the rest will be omitted (the omittion is indicated by a tilde <kbd>~</kbd> in place of the last character),
or if additional lines will be inserted to the listing until all generated code is dumped.
Factory default is <code>DUMPALL=OFF</code>.</p>
<p>See also the description of <a href="#ListingFile">listing file</a>.</p>
<blockquote>Be careful when setting DUMPALL=ON with long duplicated data definition,
such as <code>  DB 2048 * B 0</code>, because this may clutter the listing with
many lines of the useless dump.</blockquote>

<h5 id="LISTFILEeq"><a href="#EUROASM">&uarr; LISTFILE=</a></h5>
<p>This option defines the name of the listing file. By default it is <code>LISTFILE="%^SourceName%^SourceExt.lst"</code>,
i. e. it copies the name and extension of the source file and appends <code>.lst</code> to it.
<br/>If not specified otherwise, the listing is always created in the same directory
as the corresponding source file.</p>

<h5 id="LISTeq"><a href="#EUROASM">&uarr; LIST=</a></h5>
<h5 id="LISTINCLUDEeq"><a href="#EUROASM">&uarr; LISTINCLUDE=</a></h5>
<h5 id="LISTMACROeq"><a href="#EUROASM">&uarr; LISTMACRO=</a></h5>
<h5 id="LISTREPEATeq"><a href="#EUROASM">&uarr; LISTREPEAT=</a></h5>
<h5 id="LISTVAReq"><a href="#EUROASM">&uarr; LISTVAR=</a></h5>

<p>LIST* family of options controls what should be copied to the listing file.
The boolean option LIST=OFF will suppress the generation of listing until it is switched on again.
Default is <code>LIST=ON</code>.
<br/>Notice that switching off even a minor part of listing will cause
that the listing file is no longer usable as the source file, because some parts are not
copied by &euro;ASM from original source to the listing.</p>
<p>Contents of the included files is by default omitted from the listing (<code>LISTINCLUDE=OFF</code>).
When this option is ON, the INCLUDE statement will be replaced by the contents of file.</p>
<p>LISTMACRO= controls whether the instructions from macro expansion go to the listing.
Default state is <code>LISTMACRO=OFF</code> and only the invocation of
macroinstruction is presented.</p>
<p>EUROASM option <code>LISTREPEAT=</code> is similar to LISTMACRO= with the difference that it controls listing
of statements expanded in %FOR, %WHILE and %REPEAT blocks.</p>
<p>When a preprocessing %variable is used in the statement and the option <code>LISTVAR=ON</code>,
the statement is duplicated in the form of a machine comment just below the original statement and the expanded
text is shown instead of %variables. Factory default is <code>LISTVAR=OFF</code>.</p>
<p>See also the description of <a href="#ListParameters">listing file</a> above.</p>

<h5 id="UNICODEeq"><a href="#EUROASM">&uarr; UNICODE=</a></h5>
<p>UNICODE= determines the character width. This boolean option specifies if data definition of unspecified string, such as
<code> D "an explicit string"</code> or <code>="a literal string"</code> should be treated as a sequence of bytes
(8-bit characters) or unichars (16-bit characters).</p>
<p>The system variable <code>%^UNICODE</code> is checked in macros or structure definitions
which have different versions for ANSI (8-bit) or WIDE (16-bit) string encoding.
<br/>It is also consulted in macros <a class="EXT" href="../maclib/winapi.htm#WinAPI">WinAPI (32-bit)</a>
and <a class="EXT" href="../maclib/winabi.htm#WinABI">WinABI (64-bit)</a>
to determine which version of Windows API function (ANSI or WIDE) should be invoked.</p>
<blockquote><p>Some string-handling macros and WinAPI functions expect the string size be specified
in <strong>characters</strong> rather than in bytes.
Attribute operation SIZE# returns the size of its operand always in <strong>bytes</strong>.
This can be solved by testing the system variable %^UNICODE:</p>
<pre>aString D "String" ; Symbol aString defines 6 bytes if UNICODE=OFF or 12 bytes if UNICODE=ON.
  %IF %^UNICODE  ; WIDE version of aString.
     MOV ECX, SIZE# aString / 2
  %ELSE          ; ANSI version of aString.
     MOV ECX,SIZE# aString
  %ENDIF         ; ECX is now loaded with the number of <b>characters</b> in aString.</pre>
<p>A trickier but more elegant solution exploits the fact, that %^UNICODE (and all other boolean system %^variables)
expands to either 0 or -1, and that shift left by negative value is calculated as shift right by the negated value.
When %^UNICODE is -1, size in bytes is shifted to the right by 1 bit, which is equivalent to division by two.</p>
<pre>aString D "String" ; Symbol aString defines 6 bytes if UNICODE=OFF or 12 bytes if UNICODE=ON.
  MOV ECX, SIZE# aString << %^UNICODE  ; ECX is now loaded with the number of <b>characters</b> in aString.</pre>
</blockquote>

<h5 id="DEBUGeq"><a href="#EUROASM">&uarr; DEBUG=</a></h5>
<p>This boolean option specifies if a debug version should be assembled.
When <code>EUROASM DEBUG=ENABLED</code>, linker includes symbol table
and|or other debugging information to the output program.
Macros can change their behaviour depending on condition <code> %IF %^DEBUG</code>.
</p><p>The final release of your programs should be assembled with this option turned off.</p>

<h5 id="PROFILEeq"><a href="#EUROASM">&uarr; PROFILE=</a></h5>
<p>This boolean option specifies if profileable version should be assembled.
Profiling is not implemented yet in this version of EuroAssembler.
</p><p>The final release should be assembled with this option turned off.</p>

<h5 id="WARNeq"><a href="#EUROASM">&uarr; WARN=</a></h5>
<h5 id="NOWARNeq"><a href="#EUROASM">&uarr; NOWARN=</a></h5>
<p>Options WARN= and NOWARN= control which informative and warning messages will be issued in the assembly process.
With NOWARN= it is possible to suppress anticipated messages with
identification number below 4000. Suppressed warnings have no effect
on the final errorlevel. User generated warnings (U5000..U5999) and errors with higher
severity cannot be suppressed.</p>
<p>The value of option is either a number, or a range of numbers, which shouldn't exceed 3999.
WARN= and NOWARN= operands may repeat in a statement; they are processed from left to right.
For instance <code>EUROASM NOWARN=0600..0999, WARN=705</code> will supress informative
messages I0600 to I0999 except for the message I0705 which remains enabled.</p>
<p>The default value is <code>WARN=0..3999</code> (all messages are enabled}.</p>

<hr/>
<h4 id="PROGRAM"><a href="#PseudoInstructions">&uarr; PROGRAM </a></h4>
<h4 id="ENDPROGRAM"><a href="#PseudoInstructions">&uarr; ENDPROGRAM</a></h4>
<h5><a href="#DLLCHARACTERISTICSeq">DLLCHARACTERISTICS= &darr;</a></h5>
<h5><a href="#ENTRYeq">ENTRY= &darr;</a></h5>
<h5><a href="#FILEALIGNeq">FILEALIGN= &darr;</a></h5>
<h5><a href="#FORMATeq">FORMAT= &darr;</a></h5>
<h5><a href="#ICONFILEeq">ICONFILE= &darr;</a></h5>
<h5><a href="#IMAGEBASEeq">IMAGEBASE= &darr;</a></h5>
<h5><a href="#LISTLITERALSeq">LISTLITERALS= &darr;</a></h5>
<h5><a href="#LISTGLOBALSeq">LISTGLOBALS= &darr;</a></h5>
<h5><a href="#LISTMAPeq">LISTMAP= &darr;</a></h5>
<h5><a href="#MAJORIMAGEVERSIONeq">MAJORIMAGEVERSION= &darr;</a></h5>
<h5><a href="#MAJORLINKERVERSIONeq">MAJORLINKERVERSION= &darr;</a></h5>
<h5><a href="#MAJOROSVERSIONeq">MAJOROSVERSION= &darr;</a></h5>
<h5><a href="#MAJORSUBSYSTEMVERSIONeq">MAJORSUBSYSTEMVERSION= &darr;</a></h5>
<h5><a href="#MAXEXPANSIONSeq">MAXEXPANSIONS= &darr;</a></h5>
<h5><a href="#MAXPASSESeq">MAXPASSES= &darr;</a></h5>
<h5><a href="#MINORIMAGEVERSIONeq">MINORIMAGEVERSION= &darr;</a></h5>
<h5><a href="#MINORIMAGEVERSIONeq">MINORIMAGEVERSION= &darr;</a></h5>
<h5><a href="#MINORLINKERVERSIONeq">MINORLINKERVERSION= &darr;</a></h5>
<h5><a href="#MINOROSVERSIONeq">MINOROSVERSION= &darr;</a></h5>
<h5><a href="#MINORSUBSYSTEMVERSIONeq">MINORSUBSYSTEMVERSION= &darr;</a></h5>
<h5><a href="#MODELeq">MODEL= &darr;</a></h5>
<h5><a href="#OUTFILEeq">OUTFILE= &darr;</a></h5>
<h5><a href="#SECTIONALIGNeq">SECTIONALIGN= &darr;</a></h5>
<h5><a href="#SIZEOFHEAPCOMMITeq">SIZEOFHEAPCOMMIT= &darr;</a></h5>
<h5><a href="#SIZEOFHEAPRESERVEDeq">SIZEOFHEAPRESERVED= &darr;</a></h5>
<h5><a href="#SIZEOFSTACKCOMMITeq">SIZEOFSTACKCOMMIT= &darr;</a></h5>
<h5><a href="#SIZEOFSTACKRESERVEDeq">SIZEOFSTACKRESERVED= &darr;</a></h5>
<h5><a href="#STUBFILEeq">STUBFILE= &darr;</a></h5>
<h5><a href="#SUBSYSTEMeq">SUBSYSTEM= &darr;</a></h5>
<h5><a href="#TIMESTAMPeq">TIMESTAMP= &darr;</a></h5>
<h5><a href="#WIDTHeq">WIDTH= &darr;</a></h5>
<h5><a href="#WIN32VERSIONVALUEeq">WIN32VERSIONVALUE= &darr;</a></h5>

<p>Pseudoinstructions PROGRAM and ENDPROGRAM specify a block of source code, which creates
standalone output file. In most other assemblers it is the whole source file which creates
the output file, sometimes it is called <em>modul</em> or <em>unit of compilation</em>. For instance, the command
<code>nasm -f win32 HelloWorld.asm -o HelloWorld.obj</code> tells NetWide Assembler to create a COFF output file
<q>HelloWorld.obj</q>.
In &euro;ASM more than one output files could be created with the command
<code>euroasm HelloWorld.asm</code>, provided that there are more PROGRAM / ENDPROGRAM blocks
in <q>HelloWorld.asm</q>.</p>
<p>The label of PROGRAM statement represents the name of output program. Although it does not define a symbol,
its name must follow the rules for symbol names, that is at least one letter followed with letters and digits.
The same identifier may be used as the first and only operand in the corresponding ENDPROGRAM statement.</p>
<p>One source may contain more program blocks and the blocks may nest. Each program block assembles
to a different output file.</p>
<p>Symbols defined in the program are not visible outside the block. When a program needs to call a label
from another program, labels must be marked as extern and public, even when both program may lay
in the same source file or when one program be nested in another.</p>
<p>Preprocessing %variables, macro definitions and Euroasm options, on the other hand, are visible
throughout the source and they can transfer information between programs at assembly time.
See the sample program <a class="EXT" href="../prowin32/locktest.htm">LockTest</a> as an example.</p>

<p>The PROGRAM pseudoinstruction has many important keyword operands which specify properties
of the output file. The same keywords are used in <code>[PROGRAM]</code> division of
<a class="EXT" href="../objlib/euroasm.ini">euroasm.ini</a> configuration file.</p>
<p>The values of all PROGRAM options can be inspected as <a href="#SystemVariablesPROGRAM">system %^variables</a>
at assembly-time. For instance in the message <code>InfoMsg DB "This is a %^WIDTH-bit program.",13,10,0</code>
the system variable <code>%^WIDTH</code> will be replaced with the actual width of the program (16, 32 or 64),
it could be tested with <code>%IF %^Width <> 64</code> etc.</p>
<blockquote>Unlike EUROASM options, which involve only a part of source,
PROGRAM options involve the whole program <em>en bloc</em>.
We cannot have a half of the program in a graphic subsystem, and another half in a console subsystem,
for instance. That is why options <code>LISTMAP=, LISTGLOBALS=, LISTLITERALS=</code>
are properties of pseudoinstruction <a href="#PROGRAM"> PROGRAM</a>, but <code>LISTINCLUDE=, LISTMACRO=, LISTREPEAT=, LISTVAR=</code>
are properties of pseudoinstruction <a href="#EUROASM">EUROASM</a>.
</blockquote>

<h5 id="FORMATeq"><a href="#PROGRAM">&uarr; FORMAT=</a></h5>
<p>Format and file-extension of the output file is determined with this PROGRAM's parameter.
</p>
<table>
<caption>&euro;ASM output file formats</caption>
<tr><th>FORMAT=</th><th>Default<br/>output file<br/>extension</th><th>Default<br/>program<br/>width</th>
<th>Default<br/>memory<br/>model<th>Description</th></tr>
<tr><th>BIN</th><td>.bin</td><td>16-bits</td><td>TINY<td>Binary file</td></tr>
<tr><th>BOOT</th><td>.sec</td><td>16-bits</td><td>TINY<td>Bootable file</td></tr>
<tr><th>COM</th><td>.com</td><td>16-bits</td><td>TINY<td>DOS/CPM executable file</td></tr>
<tr><th>ELF</th><td>.o</td><td>32-bits</td><td>FLAT<td>Linux relocatable object file</td></tr>
<tr><th>ELFX</th><td>.x</td><td>32-bits</td><td>FLAT<td>Linux executable file</td></tr>
<tr><th>ELFSO</th><td>.so</td><td>32-bits</td><td>FLAT<td>Linux dynamic shared object file</td></tr>
<tr><th>OMF</th><td>.obj</td><td>16-bits</td><td>SMALL<td>Object Module Format</td></tr>
<tr><th>LIBOMF</th><td>.lib</td><td>16-bits</td><td>SMALL<td>Object library in OMFormat</td></tr>
<tr><th>MZ</th><td>.exe</td><td>16-bits</td><td>SMALL<td>DOS executable file</td></tr>
<tr><th>COFF</th><td>.obj</td><td>32-bits</td><td>FLAT<td>Common Object File Format</td></tr>
<tr><th>LIBCOF</th><td>.lib</td><td>32-bits</td><td>FLAT<td>Object library in COFFormat</td></tr>
<tr><th>PE</th><td>.exe</td><td>32-bits</td><td>FLAT<td>Windows Portable Executable file</td></tr>
<tr><th>DLL</th><td>.dll</td><td>32-bits</td><td>FLAT<td>Windows Dynamic Linked Library</td></tr>
</table>
<p>See also <a href="#PgmFormats">Program formats</a> for more details.</p>

<h5 id="WIDTHeq"><a href="#PROGRAM">&uarr; WIDTH=</a></h5>
<p>This parameter specifies operating mode of the program:</p>
<ul><li>64-bit long mode (requires 64-bit processor, <code>EUROASM CPU=X64</code> should be set, too)</li>
<li>32-bit compatibility or legacy protected mode</li>
<li>16-bit protected, virtual or real mode</li></ul>
<p>Program width also defines the default width for all its segments.
Its value is a numeric expression which evaluates to <strong>16, 32, 64</strong>, or to <strong>0</strong>.
Empty or zero value (factory default) specifies that program width should be set internally by &euro;ASM
according to its <a href="#FORMATeq">FORMAT=</a>. Nevertheless, when a <a href="#SEGMENT">segment</a>
is defined, it may specify a different width, regardless of the default width of its program.
&euro;ASM doesn't protest against mixing 16-bit and 32-bit segments in one module.</p>

<h5 id="MODELeq"><a href="#PROGRAM">&uarr; MODEL=</a></h5>
<p>Memory model describes sizes and distances of code and data, and the number of code and noncode segments.
The main function of memory model specification is to set the default distance
for segments and procedures defined in the program.</p>
<p>Program property MODEL= is taken into account in procedure pseudoinstructions (PROC, PROC1)
and in control-transfer instructions (JMP, CALL, RET) without explicitly specified distance.
<br/>In monocode models (TINY,SMALL,COMPACT,FLAT) the default transfer distance is NEAR.
<br/>In multicode models (MEDIUM,LARGE,HUGE) the default transfer distance is FAR.
<br/>In monodata models (TINY,SMALL,MEDIUM,FLAT) are all data addressed relatively to the start of the data segment.
<br/>In multidata models (COMPACT,LARGE,HUGE) it is the programmers responsibility
to load the used segment register with paragraph address of the data before they are accessed.</p>

<table>
<caption>Properties implied by memory model</caption>
<tr><th rowspan="2">MODEL=</th><th colspan="3">Default segment properties</th>
<th colspan="3">Link properties</th><th colspan="2">Usual usage</th></tr>
<tr><th>CODE<br/>distance</th><th>DATA<br/>distance</th><th>Segm.<br/>width</th>
<th>Multi-<br/>code</th><th>Multi-<br/>data</th>
<th>Segm.<br/>overlap</th><th>CPU<br/>mode</th><th>Used in<br/>formats</th></tr>
<tr><th>TINY</th><td>NEAR</td><td>NEAR</td><td>16</td><td>no</td><td>no</td><td>yes</td><td>real</td><td>COM</td></tr>
<tr><th>SMALL</th><td>NEAR</td><td>NEAR</td><td>16</td><td>no</td><td>no</td><td>no</td><td>real</td><td>MZ, OMF</td></tr>
<tr><th>MEDIUM</th><td>FAR</td><td>NEAR</td><td>16</td><td>yes</td><td>no</td><td>no</td><td>real</td><td>MZ, OMF</td></tr>
<tr><th>COMPACT</th><td>NEAR</td><td>FAR</td><td>16</td><td>no</td><td>yes</td><td>no</td><td>real</td><td>MZ, OMF</td></tr>
<tr><th>LARGE</th><td>FAR</td><td>FAR</td><td>16</td><td>yes</td><td>yes</td><td>no</td><td>real</td><td>MZ, OMF</td></tr>
<tr><th>HUGE</th><td>FAR</td><td>FAR</td><td>32</td><td>yes</td><td>yes</td><td>no</td><td>real</td><td>MZ, OMF</td></tr>
<tr><th>FLAT</th><td>NEAR</td><td>NEAR</td><td>32,64</td><td>no</td><td>no</td><td>yes</td><td>protected</td><td>ELF, PE, DLL, COFF</td></tr>
</table>


<h5 id="SUBSYSTEMeq"><a href="#PROGRAM">&uarr; SUBSYSTEM=</a></h5>
<p><dfn>Subsystem</dfn> is a numeric identifier in the header of Portable Executable file.
This parameter specifies whether MS-Windows should create a new console
when the PE program starts. The default is <code>SUBSYSTEM=CON</code>.
Set it to <code>SUBSYSTEM=GUI</code> when your PE program
creates graphical windows rather than using the standard text input and output.
Value of subsystem is one of the enumerated tokens from the table below,
or a numeric expression which evaluates to the corresponding number.</p>
<table>
<caption>Subsystems table</caption>
<tr><th>SUBSYSTEM=</th><th>Value</th><th>Remark</th></tr>
<tr><th>0</th><th>0</th><td>Unknown subsystem.</td></tr>
<tr><th>1</th><th>NATIVE</th><td>Subsystem is not used, i.e. device driver.</td></tr>
<tr><th>2</th><th>GUI</th><td>Windows GUI graphical windows.</td></tr>
<tr><th>3</th><th>CON</th><td>Windows console (character subsystem).</td></tr>
<tr><th>5</th><th>OS2</th><td>OS/2 character subsystem.</td></tr>
<tr><th>7</th><th>POSIX</th><td>Posix character subsystem.</td></tr>
<tr><th>8</th><th>WXD</th><td>Windows 95/98 native driver.</td></tr>
<tr><th>9</th><th>WCE</th><td>Windows CE graphical windows.</td></tr>
</table>


<h5 id="ENTRYeq"><a href="#PROGRAM">&uarr; ENTRY=</a></h5>
<p>This parameter specifies an address where execution of the program begins.
Usually this parameter contains a label whose address is set to CS:rIP
when loader transfers execution to the program at run-time.</p>
<p>By default the ENTRY= parameter is empty; in this case &euro;ASM
will set it to 0 if <code>PROGRAM FORMAT=BIN</code> or to 256 if
<code>PROGRAM FORMAT=COM</code>. This parameter should be left empty in linkable
program formats but it must be specified in executable formats, otherwise
&euro;ASM reports error.</p>

<h5 id="MAXPASSESeq" title="Final pass"><a href="#PROGRAM">&uarr; MAXPASSES=</a></h5>
<p>This parameter limits the number of assembly passes through the source
code. It is &euro;ASM who decides how many passes will be necessary,
nonetheless this parameter specifies the upper limit.</p>
<p>EuroAssembler repeats assembly passes until offsets of symbols
do not change between passes (all symbols are fixed). Then it performs
the last, emitting <dfn>final pass</dfn>.</p>

<p id="FixingPass" title="Fixing pass">In very rare circumstances this may lead
to an oscillation of emitted code size due to optimisation of short|near jump encodings.
In this very rare case &euro;ASM would request more and more passes forever, that is why
their number is limited. When the pass number approaches %^MAXPASSES-1,
this (last but one pass) is marked as <dfn>fixing pass</dfn>. Symbol offsets may only grow up
in the fixing pass and the vacant code space is stuffed with NOP bytes.
See the test <a class="EXT" href="../eatests/t7181.htm">t7181</a>
as an example of oscillating code with fixing pass.</p>
<blockquote>Factory default value is MAXPASSES=32.
You may need to increase this option only in extremely large sources
with lots of macros and conditional-assembly constructs.
The maximum ever reached within my programs is 44 passes consumed
in the module <a class="EXT" href="../easource/iiz.htm">iiz.htm</a>.
</blockquote>


<h5 id="MAXEXPANSIONSeq"><a href="#PROGRAM">&uarr; MAXEXPANSIONS=</a></h5>
<p>Parameter MAXEXPANSIONS= limits the number of %FOR, %WHILE, %REPEAT or %MACRO
block expansions. &euro;ASM declares a numeric program property named <kbd>%.</kbd>
and increments its value whenever a preprocessing block
is expanded. When this number exceeds MAXEXPANSIONS value,
&euro;ASM emits error message and prevents further expansions.
<br/>Factory default is MAXEXPANSIONS=65536.
</p>
<blockquote><p>This mechanism protects &euro;ASM from exhausting
memory resources when some incorrectly written preprocessing loop
fails to exit. If your program is really big,
you may need to increase MAXEXPANSIONS value.</p>
<p>The same expansion counter is used to maintain the value
of the special <a href="#ExpansionCounter">automatic %variable</a> <kbd>%.</kbd>.</p>
</blockquote>

<h5 id="OUTFILEeq"><a href="#PROGRAM">&uarr; OUTFILE=</a></h5>
<p><dfn>OUTFILE=</dfn> specifies filename of the output of assembly - executable or linkable object file.
This filename is related to the current shell directory, if not specified otherwise.
Default value is <code>OUTFILE="%^PROGRAM"</code> followed by the <a href="#FORMATeq">extension specified</a> by FORMAT=.
<br/>E. g.: <code>Hello PROGRAM FORMAT=MZ</code> will create output file <code>&quot;Hello.exe&quot;</code>,
if not directed otherwise.</p>
<p><a href="#Suboperations">Suboperation</a> can be applied to the name specified by this option,
for instance <code>OutFile=&quot;MyData.bin&quot[1..256]</code> will assemble the whole
module in memory but only its first 256 bytes will be written to the output file
<q>MyData.bin</q>. See also the sample program <a class="EXT"
href="../probin/boot16.htm">boot16.htm</a> as an example.</p>

<h5 id="STUBFILEeq"><a href="#PROGRAM">&uarr; STUBFILE=</a></h5>
<p><dfn>STUBFILE=</dfn> is only used in COFF-based exectutables - PE and DLL formats.
The <dfn>stub</dfn> is a 16-bit MZ program which gets control
when the output file is launched in a 16-bit disk operating system (DOS).
Usualy its only job is to tell the user, that <em>this program requires
MS-Windows</em>.</p>
<p>When STUBFILE parameter is empty (default), &euro;ASM will use its own
built-in <a class="EXT" href="../easource/coffstub.htm">stub code</a>.
Otherwise it looks for the previously compiled MZ executable.
If the STUBFILE= is specified without a path, &euro;ASM looks for the file
in pathes specified by EUROASM option <code>LINKPATH=</code>.</p>
<blockquote>The user-selected 16-bit stub program may have the same functionality as the main 32-bit Windows application.
Such executable file then works in the same way both in DOS and in MS-Windows.
See the sample project <a class="EXT" href="../prowin32/locktest.htm">LockTest</a> as an example of this technique.
</blockquote>

<h5 id="ICONFILEeq"><a href="#PROGRAM">&uarr; ICONFILE=</a></h5>
<p><dfn>ICONFILE=</dfn> should specify an existing file with an icon which will be
built into the resource segment of PE or DLL output file.
This icon is used to graphically represent the output file
in MS-Windows environment (Desktop, Explorer etc). Icon file is searched for
in the path specified by the EUROASM option <code>LINKPATH=</code>.</p>
<p>Factory-default value is <code>EUROASM ICONFILE=&quot;euroasm.ico&quot;</code>
which represents an icon &nbsp; <img width="16" height="16" align="top" alt="Icon" src="../objlib/euroasm.ico"/> shipped
with EuroAssembler in directory <code>objlib</code>.</p>
<p>Option ICONFILE= applies only when <strong>no resource file is linked</strong>
to the output program,
otherwise it is ignored and the first icon from resources (if any) is used
by Windows Explorer to represent the executable.</p>
<p>When the parameter <code>ICONFILE=</code> is empty, no icon is used
and &euro;ASM does not create resource section at all.</p>

<h5 id="LISTMAPeq"><a href="#PROGRAM">&uarr; LISTMAP=</a></h5>
<h5 id="LISTGLOBALSeq"><a href="#PROGRAM">&uarr; LISTGLOBALS=</a></h5>
<h5 id="LISTLITERALSeq"><a href="#PROGRAM">&uarr; LISTLITERALS=</a></h5>
<p>Those three options control which auxilliary information will be dumped
at the end of the listing file.
See <a class="EXT" href="../eatests/t8302.htm">t8302</a> as an example
of ListMap and ListGlobals format.</p>
<p>When LISTLITERALS=ON, contents of the data and code literal sections
@LT16, @LT8, @LT4, @LT2, @LT1, @RT0 will be dumped too.
See <a class="EXT" href="../eatests/t1711.htm">t1711</a> for an example
of ListLiterals format.</p>

<h5 id="TIMESTAMPeq"><a href="#PROGRAM">&uarr; TIMESTAMP=</a></h5>
<p>Specifies the nominal time which is provided by &euro;ASM system variables
%^DATE, %^TIME and which is embedded in some COFF-based file formats:
<a class="EXT" href="../easource/pfcoff.htm#PFCOFF_FILE_HEADER">
PFCOFF_FILE_HEADER.TimeDateStamp</a>,
<a class="EXT" href="../easource/pflibcof.htm#PFLIBCOF_IMPORT_OBJECT_HEADER">
PFLIBCOF_IMPORT_OBJECT_HEADER.TimeDateStamp</a>,
<a class="EXT" href="../easource/pfrsrc.htm#PFRSRC_RESOURCE_DIRECTORY">
PFRSRC_RESOURCE_DIRECTORY.TimeDateStamp</a>.</p>
<p>Value of this parameter represents the number of seconds elapsed
since midnight, January 1st 1970, UTC. When it is set to -1
or left empty (factory default), it will by assigned
from system timer at the start of assembly session.
<br/>TIMESTAMP= can be used to fake the time when was the target file created.</p>


<h5 id="DLLCHARACTERISTICSeq"><a href="#PROGRAM">&uarr; DLLCHARACTERISTICS=</a></h5>
<h5 id="FILEALIGNeq"><a href="#PROGRAM">&uarr; FILEALIGN=</a></h5>
<h5 id="IMAGEBASEeq"><a href="#PROGRAM">&uarr; IMAGEBASE=</a></h5>
<h5 id="MAJORIMAGEVERSIONeq"><a href="#PROGRAM">&uarr; MAJORIMAGEVERSION=</a></h5>
<h5 id="MAJORLINKERVERSIONeq"><a href="#PROGRAM">&uarr; MAJORLINKERVERSION=</a></h5>
<h5 id="MAJOROSVERSIONeq"><a href="#PROGRAM">&uarr; MAJOROSVERSION=</a></h5>
<h5 id="MAJORSUBSYSTEMVERSIONeq"><a href="#PROGRAM">&uarr; MAJORSUBSYSTEMVERSION= </a></h5>
<h5 id="MINORIMAGEVERSIONeq"><a href="#PROGRAM">&uarr; MINORIMAGEVERSION=</a></h5>
<h5 id="MINORLINKERVERSIONeq"><a href="#PROGRAM">&uarr; MINORLINKERVERSION=</a></h5>
<h5 id="MINOROSVERSIONeq"><a href="#PROGRAM">&uarr; MINOROSVERSION=</a></h5>
<h5 id="MINORSUBSYSTEMVERSIONeq"><a href="#PROGRAM">&uarr; MINORSUBSYSTEMVERSION=</a></h5>
<h5 id="SECTIONALIGNeq"><a href="#PROGRAM">&uarr; SECTIONALIGN= </a></h5>
<h5 id="SIZEOFHEAPCOMMITeq"><a href="#PROGRAM">&uarr; SIZEOFHEAPCOMMIT=</a></h5>
<h5 id="SIZEOFHEAPRESERVEDeq"><a href="#PROGRAM">&uarr; SIZEOFHEAPRESERVED=</a></h5>
<h5 id="SIZEOFSTACKCOMMITeq"><a href="#PROGRAM">&uarr; SIZEOFSTACKCOMMIT=</a></h5>
<h5 id="SIZEOFSTACKRESERVEDeq"><a href="#PROGRAM">&uarr; SIZEOFSTACKRESERVED=</a></h5>
<h5 id="WIN32VERSIONVALUEeq"><a href="#PROGRAM">&uarr; WIN32VERSIONVALUE=</a></h5>
<p>Other PROGRAM parameters are mostly important only in COFF-family of output formats (PE, DLL, COFF)
formats and they form a PE header. See <a class="EXTL" href="links.htm#MS_PECOFF">[MS PECOFF]</a> specification
for detailed description. Do not change them if you don't know what you are doing.</p>

<h4 id="SEGMENT"><a href="#PseudoInstructions">&uarr; SEGMENT</a></h4>
<h5><a href="#SegmentPURPOSEeq">PURPOSE= &darr;</a></h5>
<h5><a href="#SegmentWIDTHeq">WIDTH= &darr;</a></h5>
<h5><a href="#SegmentALIGNeq">ALIGN= &darr;</a></h5>
<h5><a href="#SegmentCOMBINEeq">COMBINE= &darr;</a></h5>
<h5><a href="#SegmentCLASSeq">CLASS= &darr;</a></h5>

<p>Pseudoinstruction <dfn>SEGMENT</dfn> declares a memory segment and specifies its properties.
Each segment definition also simultaneously defines a section with the same name.
Other section of the segment may be declared (or switched to) later,
with an operation-less statement which has the section name in its label field, for example
<br/><code>[Strings] ; Declare section [Strings] in the current segment.</code>.</p>
<p>The name of segment is specified in the label field and it looks like an identifier
in square brackets. Segment properties are assigned with keyword parameters.</p>

<p>&euro;ASM declares automatically a few <strong>default segments</strong> when it starts to assemble
a program. In most cases there is no need to explicitly declare
any other segments. Number and purpose of default segments depends on
<a href="#PgmFormats">program format</a>.
If these segments are not used in the program (no code was emitted into them),
they will be discarded at assembly time and do not appear in the object file.
This happens when programers are not satisfied with default segment names and properties
and they declare new segments of their own choice, usually near the program beginning.</p>

<h5 id="SegmentPURPOSEeq"><a href="#SEGMENT">&uarr; PURPOSE=</a></h5>
<p>Parameter SEGMENT PURPOSE= specifies what kind of information is the segment intended for.
It is important in protected mode (formats ELFX, PE, DLL), where <em>descriptor's access bits</em>
control the rights granted to read, write or execute the contents of segment.</p>
<table><caption>Segment purpose table</caption>
<tr><th>PURPOSE=</th><th>Alias</th><th>Access</th><th>Default name</th><th>Contents</th></tr>
<tr><th>CODE</th><th>TEXT</th><td>read, execute</td><td><code>[.text]|[CODE]</code></td><td>Program code (instructions) <sup>(1)</sup></td></tr>
<tr><th>RODATA</th><th>RDATA</th><td>read</td><td><code>[.rodata]|[RODATA]</code></td><td>Initialized read-only data <sup>(1)</sup></td></tr>
<tr><th>DATA</th><th>IDATA</th><td>read, write</td><td><code>[.data]|[DATA]</code></td><td>Initialized data <sup>(1)</sup></td></tr>
<tr><th>BSS</th><th>UDATA</th><td>read, write</td><td><code>[.bss]|[BSS]</code></td><td>Uninitialized data <sup>(1)</sup></td></tr>
<tr><th>STACK</th><th></th><td>read, write</td><td><code>[STACK]</code></td><td>Machine stack <sup>(1)</sup></td></tr>
<tr><th>LITERALS</th><th>LITERAL</th><td>read  </td><td><small>parasites on other data/code segment</small></td><td>Literal sections <sup>(2)</sup></td></tr>
<tr><th>DRECTVE</th><th></th><td>discarded</td><td><code>[.drectve]</code></td><td>Linker directives <sup>(3)</sup></td></tr>
<tr><th><th></th><td></td><td></td><td></td></tr>
<tr><th>PHDR<th></th><td></td><td></td><td>Program headers (4)</sup></td></tr>
<tr><th>INTERP<th></th><td></td><td></td><td>Dynamic interpreter (4)</sup></td></tr>
<tr><th>SYMBOLS<th></th><td></td><td><code>[.symtab] | [.dynsym]</code></td><td>Program symbols (4)</sup></td></tr>
<tr><th>HASH<th></th><td></td><td><code>[.hash]</code></td><td>Hash of symbol names</sup></td></tr>
<tr><th>STRINGS<th></th><td></td><td><code>[.strtab] | [.dynstr] | [.shstrtab]</code></td><td>Names of symbols|sections (4)</sup></td></tr>
<tr><th>DYNAMIC<th></th><td></td><td><code>[.dynamic]</code></td><td>Dynamic records</sup></td></tr>
<tr><th>RELOC<th></th><td></td><td><code>[.rel(a)*]</code></td><td>Relocations (4)</sup></td></tr>
<tr><th>GOT<th></th><td></td><td><code>[.got]</code></td><td>Global Offset Table</sup></td></tr>
<tr><th>PLT<th></th><td></td><td><code>[.plt]</code></td><td>Procedure Linkage Table</sup></td></tr>
<tr><th><th></th><td></td><td></td><td></td></tr>
<tr><th>EXPORT</th><th></th><td></td><td><code>[.edata]</code></td><td>Dynamic link export <sup>(4)</sup></td></tr>
<tr><th>IMPORT</th><th></th><td></td><td><code>[.idata]</code></td><td>Dynamic link import <sup>(4)</sup></td></tr>
<tr><th>RESOURCE</th><th></th><td></td><td><code>[.rsrc]</code></td><td>Programming resources <sup>(4)</sup></td></tr>
<tr><th>EXCEPTION<th></th><td></td><td><code>[.pdata]</code></td><td>Runtime exceptions <sup>(5)</sup></td></tr>
<tr><th>SECURITY<th></th><td></td><td></td><td>Attribute certificate <sup>(5)</sup></td></tr>
<tr><th>BASERELOC<th></th><td>discarded</td><td><code>[.reloc]</code></td><td>Load-time relocations <sup>(4)</sup></td></tr>
<tr><th>DEBUG<th></th><td></td><td><code>[.debug]</code></td><td>Data for debugger <sup>(5)</sup></td></tr>
<tr><th>COPYRIGHT<th>ARCHITECTURE</th><td></td><td></td><td>Architecture info <sup>(5)</sup></td></tr>
<tr><th>GLOBALPTR<th></th><td></td><td></td><td>RVA of global pointer <sup>(5)</sup></td></tr>
<tr><th>TLS<th></th><td></td><td><code>[.tls]</code></td><td>Thread local storage <sup>(5)</sup></td></tr>
<tr><th>LOAD_CONFIG<th></th><td></td><td></td><td>Load configuration <sup>(5)</sup></td></tr>
<tr><th>BOUND_IMPORT<th></th><td></td><td></td><td>Bound import <sup>(5)</sup></td></tr>
<tr><th>IAT<th></th><td></td><td><code>[.idata]</code><td>Import address table <sup>(4)</sup></td></tr>
<tr><th>DELAY_IMPORT<th></th><td></td><td></td><td>Delayed import descriptor <sup>(5)</sup></td></tr>
<tr><th>CLR<th></th><td></td><td><code>[.cormeta]</code></td><td>CLR metadata <sup>(5)</sup></td></tr>
<tr><th>RESERVED<th></th><td></td><td></td><td>Reserved <sup>(5)</sup></td></tr>
</table>
Remarks:
<br/><sup>(1)</sup> Basic purposes used in all program formats.
<br/><sup>(2)</sup> Programmer may specify which rodata|data|code segment should be used to host literal symbols.
<br/><sup>(3)</sup> Synthetic section used for transfer of dynamic-link information in COFF format.
<br/><sup>(4)</sup> Special sections directly supported by EuroAssembler. They should never be declared explicitly.
<br/><sup>(5)</sup> Special sections, their contents is not supported. Programmer may include such section
in their PE file but the contents must be explicitly specified (with D or INCLUDEBIN),
see the <a href="#FormatPE">program format PE</a>.

<p>Segments with special purpose names <sup>(4),(5)</sup> will be marked in the corresponding position
of DataDirectory table in the optional header of PE or DLL file format.</p>
<p>Although the operand PURPOSE= accepts only enumerated values, they may be combined
using the operator <em>Addition</em>&nbsp;<kbd>+</kbd> or <em>Bitwise&nbsp;OR</em>&nbsp;<kbd>|</kbd>, for&nbsp;instance
<br/><code>[TINY] SEGMENT PURPOSE=CODE|DATA|BSS|STACK</code>
or <br/><code>[.rodata] SEGMENT PURPOSE=DATA+LITERALS</code>.</p>

<p>When this parameter is empty or not specified, &euro;ASM will guess the segment's purpose
by its class or [name], following this rules:</p><ol>
<li>If the name exactly case-insesitively matches any purpose enumerated in the table above, this purpose is assumed.</li>
<li>If the name contains string <code>STACK</code> (case insensitive),
<code>PURPOSE=STACK</code> is assumed.</li>
<li>If the name contains string <code>BSS</code> or <code>UDATA</code> (case insensitive),
<code>PURPOSE=BSS</code> is assumed.</li>
<li>If the name contains string <code>DATA</code> (case insensitive), <code>PURPOSE=DATA</code> is assumed.</li>
<li>If none of the previous rules applies, <code>PURPOSE=CODE</code> is assumed.</li></ol>
<p><code>PURPOSE=LITERALS</code> is used together with CODE and|or DATA and it only suggests
that this segment should be preferably used to host the literal sections.
If no segment is explicitly marked as PURPOSE=LITERAL, &euro;ASM will choose the last data or code segment
defined when some literal symbol was encountered.</p>
<blockquote>Purpose guessing first looks at the <code>SEGMENT CLASS=</code> property,
and only if it's empty, segment name is looked at. This mechanism can be used
with segments defined in OMF object files to propagate their purpose to the linked executable.</blockquote>

<h5 id="SegmentWIDTHeq"><a href="#SEGMENT">&uarr; WIDTH=</a></h5>
<p>Segment width value can be a numeric expression which evaluates to 16, 32 or 64.
By default (if omitted) the width of segment is determined by the <a href="#FORMATeq">program width</a>.</p>

<h5 id="SegmentALIGNeq"><a href="#SEGMENT">&uarr; ALIGN=</a></h5>
<p>This parameter requests alignment of the segment in memory at run-time.
Default alignment is <code>ALIGN=OWORD</code> (16 bytes).</p>
<p>Special ELF and PE segments, such as [.symtab], [.strtab], [.reloc] etc. may have different alignment.
</p>

<h5 id="SegmentCOMBINEeq"><a href="#SEGMENT">&uarr; COMBINE=</a></h5>
<p>This parameter specifies how segments from other program modules
will be combined at link time. This is important only in the MZ program format
(16-bit DOS executables) linked from several object files. Possible values:</p>
<dl>
<dt>PUBLIC</dt>
<dd>All segments with the same name will be linked together.
Total size is the sum of concatenated segments.  This is the default option.</dd>
<dt>PRIVATE</dt>
<dd>Private segments will be not concatenated with other segments,
no matter if they have the same name or not.</dd>
<dt>COMMON</dt>
<dd>All common segments with the same name will be linked to the
same address so they overlay each other. The total segment size
equals to the greatest size of all segments with this name.
Data variables declared in common segment will be shared among
separately assembled modules.</dd>
<dt>STACK</dt>
<dd>The STACK combine method is the same as PUBLIC,
in addition the SS:SP pointer in target EXE file will be set
to the end of such segment at run-time.</dd>
</dl>

<h5 id="SegmentCLASSeq"><a href="#SEGMENT">&uarr; CLASS=</a></h5>
<p>The value of CLASS= in an arbitrary identifier. It may be used by the linker
to guess the segment purpose (CODE|DATA|BSS) in object formats
which do not carry purpose information (OMF).</p>

<h4 id="GROUP"><a href="#PseudoInstructions">&uarr; GROUP</a></h4>
<p>This pseudoinstruction enumerates segments addressed with the same <strong>addressing frame</strong>.
Data in all grouped segments are addressed with the same value of segment register.</p>
<p>Segment groups are applicable in big realmode 16-bit programs.
Only a 16-bit segment can be a member of the group.</p>
<p>Name of the group must be defined in the label field of the pseudoinstruction GROUP.
The names of grouped segments are enumerated in operand fields.
All names are surrounded in braces <kbd>[ ]</kbd>.
Group name may be the same as the name of one of its segment. Example:
<br/><code>[DGROUP] GROUP [DATA],[STRINGS]</code>.
<br/>Grouped segment may be defined before or after the GROUP statement.
This pseudoinstruction has no keyword operands. </p>

<p>In short, the relation between a group and its segments at link time is similar
to the relation between a segment and its sections at assembly time.</p>

<hr/>

<h4 id="PROC"><a href="#PseudoInstructions">&uarr; PROC</a></h4>
<h4 id="ENDPROC"><a href="#PseudoInstructions">&uarr; ENDPROC</a> alias
<a id="ENDP" href="#PseudoInstructions">&uarr; ENDP</a></h4>
<h5><a href="#ProcDISTeq">DIST= &darr;</a></h5>
<h5><a href="#ProcALIGNeq">ALIGN= &darr;</a></h5>
<h5><a href="#ProcNESTINGCHECKeq">NESTINGCHECK= &darr;</a></h5>

<p>The <dfn>PROC</dfn> and <dfn>ENDPROC</dfn> pseudoinstructions declare a namespace procedure block.
In most times it ends with machine instruction RET, so the block can be <em>called</em>
to perform  some function. After the execution it <em>returns</em> back
just behind the CALL instruction.</p>
<p>The mandatory label of <code>PROC</code> declares an assembler symbol
which is the procedure name. The same identifier may be used as the first
and only operand of the corresponding <code>ENDPROC</code> pseudoinstruction.
<br/>Alias ENDP may be used instead of ENDPROC.</p>
<p>Equally the <code>ENDPROC</code> may define its own label, too.
This label doesn't represent a return from the subprogram, it points
to the code which follows PROC..ENDP block. The label of ENDPROC is useful
only when the PROC..ENDP block is used to define the namespace block
rather than a callable subprogram block. Examples:</p>
<pre>SubPgm:PROC ; Define PROC as a <b>call-able subprogram block</b>.
          ; PROC body instructions.
          TEST SomeCondition
          JC .Abort:  ; Go to return below <code>CALL SubPgm:</code> statement.
          TEST OtherCondition
          JC .End:    ; Go to continue below <code>.End: ENDP</code>. <del>Probably not what the programmer wanted</del>.
          ; More body instructions.
.Abort:   RET         ; Return below <code>CALL SubPgm:</code> statement.
.End:  ENDP SubPgm:</pre>
<pre>NameSp:PROC ; Define PROC as a <b>pass-through-able namespace block</b>.
          ; PROC body instructions.
          TEST SomeCondition
          JC .End:  ; Go to continue below <code>.End:  ENDP NameSp:</code> statement.
          ; More body instructions. No RET instruction here.
.End:  ENDP NameSp: ; Continue below this statement.</pre>
<p>Jumping to the <code>ENDPROC</code> label differs from jumping to
macroinstruction <code>EndProcedure</code> defined in
<a class="EXT" href="../maclib/#CallMaclibs">calling convention macrolibraries</a>.
Pseudoinstructions <code>PROC, ENDPROC, PROC1, ENDPROC1</code> do not emit any machine code.</p>

<blockquote><p>What are procedures good for?
We could manage to write an assembly program without PROC..ENDP pseudoinstructions easily but wrapping
the block of code in PROC..ENDPROC block has some advantages:</p>
<ul><li>The code is better structured and easier to understand.</li>
<li>&euro;ASM checks the propper pairing of labels, which is important when procedures
are nested.</li>
<li>It makes obvious where the procedure ends. You don't have to inspect the code to find out
which RET instruction is the last in a procedure when you want to copy'n'paste it to another
program (of course it is a bad programming practise
to have more than one return point in a subroutine but sometimes it is used).</li>
<li>Each PROC block defines its own namespace, preventing naming conflicts
between local labels used in procedures.</li>
</ul></blockquote>

<h5 id="ProcDISTeq"><a href="#PROC">&uarr; DIST=</a></h5>
<p>Pseudoinstructions PROC and PROC1 accept keyword operands DIST= and ALIGN=.
<dfn>DIST=</dfn> sets the distance of the procedure (NEAR or FAR).
When <code>DIST=FAR</code>, all CALL to this proc default to FAR, and all RET within this proc default to FAR
(of course this can be overriden with instruction suffix CALLN/CALLF, RETN/RETF).
The default parameter value depends on the program's <a href="#MODELeq">memory model</a>.</p>
<h5 id="ProcALIGNeq"><a href="#PROC">&uarr; ALIGN=</a></h5>
<p>Procedure alignment is <code>ALIGN=BYTE</code> by default.
For the best usage of instruction cache it sometimes may be useful to complete
frequently called procedures with
<code>PROC ALIGN=OWORD</code>, if code size is not an issue.</p>
<h5 id="ProcNESTINGCHECKeq"><a href="#PROC">&uarr; NESTINGCHECK=</a></h5>
<p>This boolean option allows you to switch off the internal check of PROC..ENDPROC label matching.
This has only exceptional use in macros simulating built-in pseudoinstruction,
which need to hack their block context, such as
<a class="EXT" href="../maclib/stdcal32.htm#Procedure">Procedure</a> and
<a class="EXT" href="../maclib/stdcal32.htm#EndProcedure">EndProcedure</a>.</p>
<p>See also the instruction modifier <a href="#NESTINGCHECKeq">NESTINGCHECK=</a>.</p>
<blockquote>Pseudoinstruction PROC does not accept ordinal parameters.
Parameters can be passed in registers or machine stack and managed individually.
<a class="EXT" href="../maclib/#CallMaclibs">Calling convention macrolibraries</a>
shipped with EuroAssembler define macros <dfn>Procedure</dfn>
and <dfn>EndProcedure</dfn> with similar function as PROC and ENDPROC,
which allow to pass arbitrary number of arguments
as macro parameter when the Procedure is invoked.</blockquote>

<h4 id="PROC1"><a href="#PseudoInstructions">&uarr; PROC1 </a></h4>
<h4 id="ENDPROC1"><a href="#PseudoInstructions">&uarr; ENDPROC1</a> alias
<a id="ENDP1" href="#PseudoInstructions">&uarr; ENDP1</a></h4>
<p>Pseudoinstructions <dfn>PROC1</dfn> and <dfn>ENDPROC1</dfn> are equivalent
to PROC and ENDPROC with two major differences:</p>
<ol><li><p>A procedure declared with PROC1..ENDPROC1 block may occur in the program
more than one time. Repeated declarations of PROC1..ENDPROC1 block with the same label
are ignored, it is only <strong>emitted once</strong>.</p>
<blockquote><p>This predetermines PROC1 for <a href="#EaFnRfSemiinlineMacro">
semiinline macros</a>, which contain both 1)&nbsp;the call of a procedure, and 2)&nbsp;the procedure itself.
When the procedure is defined with PROC1..ENDPROC1, such macro can be invoked many times
but the called procedure will be assembled and emitted only once
(during the first macro expansion).</p></blockquote></li>
<li>A block defined with PROC1..ENDPROC1 is not emitted to the current section.
&euro;ASM will automatically <strong>switch to another code section</strong> instead,
and return to the previous section after ENDPROC1 has been processed.
The section, which &euro;ASM will switch to, has the name <code>[@RT1]</code>
and it is automatically created in the segment with <code>PURPOSE=CODE+LITERAL</code>
or in the lastly defined code segment. In some circumstances &euro;ASM may also use runtime sections
<code>[@RT2]</code>, <code>[@RT3]</code> etc. This happens when the code inside
the PROC1..ENDPROC1 block contains other semiinline macros, so the current
runtime section already is <code>[@RT1]</code> and &euro;ASM must choose another one.
<blockquote><p>Emitting procedures to a different section, than the main program
currently uses, has an advantage that the procedure body needs not to be bypassed
with jump instruction. It also leads to shorter code because jumps over
the semiinline macros need not to jump over the whole procedure body,
which could make them exceed 128 distance easily and that would require
using longer form of jump instructions.</p></blockquote>
</li></ol>
<h4 id="HEAD"><a href="#PseudoInstructions">&uarr; HEAD</a></h4>
<h4 id="ENDHEAD"><a href="#PseudoInstructions">&uarr; ENDHEAD</a></h4>
<p>Pseudoinstructions <dfn>HEAD</dfn> and <dfn>ENDHEAD</dfn> just claim a division of source code.
This division may be included to other source files with <a href="#INCLUDEHEAD">INCLUDEHEAD</a> or
<a href="#INCLUDEHEAD1">INCLUDEHEAD1</a>.
The block usually contains the interface of programming objects (definition
of structures, macros, constants) which needs to be
included in other separately assembled programs.</p>
<p>Label field of pseudoinstruction HEAD may be used as a block identifier
but it does not create a symbol. More than one HEAD..ENDHEAD block can be
specified in a source file. When these blocks are nested, the whole outer (larger)
block will be included.</p>
<blockquote><p>Languages which do not have implemented this mechanism
require to put interface part in separate header files.
With HEAD..ENDHEAD they can be kept together with the implementation body
in one compact file.</p></blockquote>

<h4 id="INCLUDE"><a href="#PseudoInstructions">&uarr; INCLUDE</a></h4>
<p>This pseudoinstruction incorporates file(s) with the name(s) specified as its operand
to the source text. The INCLUDE statement is virtually replaced
with the contents of included file.</p>
<p>Inclusion may be nested, i. e. included files may contain
other INCLUDE statements.</p>
<p>Double quotes may be omitted when the filename contains only alphanumeric characters
(no spaces or punctuation).</p>
<p>The pseudoinstruction INCLUDE can have unlimited number of operands, for example
<code> INCLUDE "Win*.htm", ./MyConstants.asm, C:\MyLib\*.inc</code>.</p>
<p>When the file is specified without a path, it will be searched for in folders specified
with EUROASM option <a href="#INCLUDEPATHeq">INCLUDEPATH=</a>.
If the included filename contains at least one slash, backslash or colon
<kbd> / \ : </kbd>, this means that it has specified its own <strong>path</strong> and the
<code>INCLUDEPATH=</code> is ignored in this case.</p>
<p>The filename may contain <strong>wildcards</strong> <kbd> * ?</kbd>, in this case
&euro;ASM will include all files conforming this mask. The order of inclusion
depends on operating system.</p>
<p>Behaviour of INCLUDE statement is described in the following table:</p>
<table>
<tr><th>Path</th><th>Wildcard</th><th>Example</th>
<th>When the first file is found</th><th>When no file is found</th></tr>
<tr><td>No</td><td>No</td><td><q>file.inc</q></td><td>Done, stops further searching in INCLUDEPATH.</td><td>Error E6914.</td></tr>
<tr><td>Yes</td><td>No</td><td><q>./file.inc</q></td><td>Done.</td><td>Error E6914.</td></tr>
<tr><td>No</td><td>Yes</td><td><q>file*.inc</q></td><td>Continue searching for more files in INCLUDEPATH.</td><td>Nothing is included, no error.</td></tr>
<tr><td>Yes</td><td>Yes</td><td><q>./file*.inc</q></td><td>Continue searching for more files in the given path.</td><td>Nothing is included, no error.</td></tr>
</table>
<p>Only a part of source file can be included when <a href="#Substring">substring</a>
or <a href="#Sublist">sublist</a> operator immediately follows the file name.
Example: <code> INCLUDE &quot;file.inc&quot;{%&amp;-20..%&amp;}</code> will include
the last twenty lines of <q>file.inc</q>
(<a href="#AutomaticVariables">automatic %variable</a> <code>%&amp;</code>
represents the number of lines in the file).
Filename must be in double quotes when the suboperation is used.
If the suboperation is used on wildcarded filename, it will be applied to all files.</p>
















<h4 id="INCLUDE1"><a href="#PseudoInstructions">&uarr; INCLUDE1</a></h4>
<p>The pseudoinstruction <dfn>include once</dfn> behaves exactly like <code>INCLUDE</code> but first it
looks if the same file (with the same size and contents, regardless of their names)
was already included in the program, and skips the file in this case.</p>
<blockquote>Using INCLUDE1 instead of INCLUDE allows to resolve mutual dependencies
of source libraries. When some included library uses macros, structures and constant definitions
from another library, we can do <code>INCLUDE1 another.library</code>
in each such library.</blockquote>

<h4 id="INCLUDEHEAD"><a href="#PseudoInstructions">&uarr; INCLUDEHEAD</a></h4>
<p>The <dfn>INCLUDEHEAD</dfn> variant includes only the contents of <a href="#HEAD">HEAD..ENDHEAD</a>
block(s) of the included file, see the test <a class="EXT" href="../eatests/t2420.htm">t2420</a>.
An error is reported if no such block is found in the file
or if the block is incomplete (missing ENDHEAD). When a suboperation is used with INCLUDEHEAD,
it is applied first to the entire included file and HEAD..ENDHEAD block is searched for
in the subrange only.</p>

<h4 id="INCLUDEHEAD1"><a href="#PseudoInstructions">&uarr; INCLUDEHEAD1</a></h4>
<p>The INCLUDEHEAD1 and INCLUDE1 will ignore the source if the file or any part of it
has already been included in the program using INCLUDE, INCLUDE1, INCLUDEHEAD or
INCLUDEHEAD1.</p>
<blockquote>Library is treated as <em>already-included</em> when it was included
as an entire file with INCLUDE or INCLUDE1, when its interface division was included
with INCLUDEHEAD or INCLUDEHEAD1, or when only a suboperated part of it was included.
</blockquote>

<h4 id="INCLUDEBIN"><a href="#PseudoInstructions">&uarr; INCLUDEBIN</a></h4>
<p>Unlike INCLUDE and INCLUDEHEAD, this pseudoinstruction
does not treat the file contents as a source to assemble,
but the contents is emitted <em>as is</em> at the position specified by the offset pointer <kbd>$</kbd>
of current section.</p>
<blockquote><p>Including binary data should not be misplaced with linking;
it does not update relocatable addresses or external symbols.
For instance the statement
<code>INCLUDEBIN "C:\WINNT\Media\chimes.wav"[0x2C..]</code>
will skip the first 0x2C bytes of WAV header in sound file and load the rest
(raw samples) to the assembled target, as if they were defined with DB statements.
</p><p>See also <a class="EXT" href="../eatests/t2470.htm">t2470</a>.</p>
</blockquote>

<h4 id="LINK"><a href="#PseudoInstructions">&uarr; LINK</a></h4>
<p>Pseudoinstruction <dfn>LINK</dfn> specifies file(s) which should be
linked into the current program.</p>
<p>Each ordinal operand represents a file name, which may have wildcards
and may be specified with or without path. Relative path refers to the current directory.</p>
<p>If the linked file name does not contain path, it will be searched for
in all directories specified with <code>EUROASM LINKPATH=</code> option, respectively.
Unlike included files, suboperations with linked files are not supported.</p>
<blockquote>Linkable files have specific internal structure, which probably would have been damaged
if only suboperated part of the file were subjected to the link process. Therefore only whole object
file or library can be linked.</blockquote>
<p>Position of the LINK statement within the program is not important, the actual
linking will be performed when the final program pass is about to end.
Order in which the files are linked respects the order in which pseudoinstruction LINK
appeared in source. However, if linked files are specified with wildcards, e.g. <code> LINK "modul*.lib"</code>,
their order depends on current filesystem and cannot be reliably predicted. Example:</p>
<pre> LINK Subproc.obj, "..\My modules\W*.obj"</pre>
<p>See <a href="#EaFnLinkStatic">static linking</a> for more info.</p>


<h4 id="PUBLIC"><a href="#PseudoInstructions">&uarr; PUBLIC</a></h4>
<p>Pseudoinstructions <code>GLOBAL, PUBLIC, EXTERN, EXPORT, IMPORT</code> set the
<a href="#Scope">scope</a> property of symbol(s), which is used in <a href="#EaFnLink">linking</a>.</p>
<p>The symbol, whose scope is being declared, may be in the label field or in the operand field
of the statement, or in both. More than one symbol may be declared with one statement.
Symbols in question may be forward or backward referred.</p>
<h6>Explicit scope declaration may appear before or after the symbol is actually defined or referred.</h6>
<p>Example: Explicit scope declaration of four symbols: <code> Sym1 PUBLIC Sym2, Sym3, Sym4</code></p>
<p>Specifying the symbol as PUBLIC just tells &euro;ASM that the symbol,
which was or will be defined somewhere else in the program,
should be referrable from other statically linked programs.
Public declaration does not create the symbol yet,
in fact symbol with that name must be defined somewhere else in the same program.</p>

<h4 id="EXTERN"><a href="#PseudoInstructions">&uarr; EXTERN</a></h4>
<p>Pseudoinstruction <code>EXTERN symbol</code> tells &euro;ASM that the symbol is not defined
in the program, so references to its address must be patched in the code at link time.
It is an error to define symbol which is declared as EXTERN in the same program.
Instead, it is searched for in other modules at link time,
and only the linker may report an error when the external symbol is not found.</p>
<h4 id="GLOBAL"><a href="#PseudoInstructions">&uarr; GLOBAL</a></h4>
<p>Pseudoinstruction GLOBAL can be used to automatize
dealing with PUBLIC and EXTERN scopes. If the symbol is marked
with GLOBAL statement, it behaves either as public or external,
depending whether or not it is defined in the same program.</p>
<blockquote>
As the programmer surely knows whether the declared symbol belongs to the current program or not,
so why is the declaration of PUBLIC and EXTERN scope duplicated by GLOBAL?
Lets have a program PgmA which defines the public symbol SymA and refers external symbol SymB.
Similary PgmB defines SymB and refers SymA:
<pre>
PgmA PROGRAM
      PUBLIC SymA
      EXTERN SymB
      CALL SymB: ; Reference to external symbol.
SymA: RET        ; Definition of public symbol.
     ENDPROGRAM PgmA

PgmB PROGRAM
      PUBLIC SymB
      EXTERN SymA
      CALL SymA: ; Reference to external symbol.
SymB: RET        ; Definition of public symbol.
     ENDPROGRAM PgmB</pre>
If we replace PUBLIC and EXTERN declarations with GLOBAL,
the same declaration statement can be used in all statically linked programs,
either copy&amp;pasted or included from external file, which is easier to maintain:
<pre>
PgmA PROGRAM
      GLOBAL SymA, SymB
      CALL SymB: ; Reference to external symbol.
SymA: RET        ; Definition of public symbol.
     ENDPROGRAM PgmA

PgmB PROGRAM
      GLOBAL SymA, SymB
      CALL SymA: ; Reference to external symbol.
SymB: RET        ; Definition of public symbol.
     ENDPROGRAM PgmB</pre>
Another <em>raison d'être</em> of GLOBAL is backwards compatibility with NASM,
which doesn't know the directive PUBLIC at all.
NASM uses the directive GLOBAL instead whenever &euro;ASM would require PUBLIC.
</blockquote>

<h4 id="IMPORT"><a href="#PseudoInstructions">&uarr; IMPORT</a></h4>
<p>Scopes IMPORT and EXPORT are used in <a href="#EaFnLinkDynamic">dynamic linking</a>,
when our program calls an imported function from DLL.
This pseudoinstruction accepts keyword parameter <code>LIB=</code>
which specifies the library file. The LIB= parameter may be omitted
when the symbols are imported from the default MS-Windows library <q>kernel32.dll</q>.
<br/>Library file name doesn't have to be in quotes when it follows DOS convention 8.3.
The library is always specified without a path. Operating system uses its own rules
(<a class="EXTL" href="../eadoc/links.htm#WinDllSearchOrder">[WinDllSearchOrder]</a>)
concerning directories where are the libraries searched for at bind-time.</p>

<h4 id="EXPORT"><a href="#PseudoInstructions">&uarr; EXPORT</a></h4>
<p>Scope EXPORT is used when we make a dynamic library and it declares symbols
which are expected to be imported by other programs. Similar to the PUBLIC scope,
symbol marked for EXPORT must be defined in the program, sooner or later.</p>
<p>Pseudoinstruction EXPORT accepts two keyword parameters
<code>FWD=</code> and <code>LIB=</code>, which specify that the exported symbol (function name)
is in fact provided by another dynamic library (defined with LIB=) under a different
symbol name (defined with FWD=). Example: <pre>
kernel32 PROGRAM FORMAT=DLL
          EXPORT EnterCriticalSection, LIB="NTDLL.dll", FWD=RtlEnterCriticalSection
          ; Other kernel functions.
         ENDPROGRAM kernel32
</pre>
<p>Library "kernel32.dll" yields API function RtlEnterCriticalSection, which is in fact
provided by the library "NTDLL.dll". In other Windows version it may be provided
by a different library "XPDLL.dll" but programs importing the function
from a <em>proxy library</em> "kernel32.dll" need no update or recompilation.</p>

<h4 id="ALIGN"><a href="#PseudoInstructions">&uarr; ALIGN</a></h4>
<p>This pseudoinstruction is used for explicit <a href="#Alignment">
alignment</a> of current section pointer <kbd>$</kbd>. For instance
<code>ALIGN OWORD</code> in code section will emit several (0..15)
bytes of NOP operation, so that the next statement will be emitted
at octword-aligned address.
ALIGN in data sections uses NUL byte (<kbd>0x00</kbd>)
instead of NOP (<kbd>0x90</kbd>) as a stuff.</p>
<p>The operand can be a type specifier in short or long notation:
<code>B, U, W, D, Q, T, O, Y, Z, BYTE, UNICHAR, WORD, DWORD, QWORD, TBYTE, OWORD, YWORD, ZWORD</code>
or arithmetic expression which evaluates to the power of two:
<code>1, 2, 4, 8, 16, 32, 64, 128, 256, 512</code>.
<br/><code>ALIGN TBYTE</code> aligns to 8.</p>
<p>ALIGN statement may have no label but it can have two operands.
The second operand is used for intentional unalignment, it needs not to be the power of 2
and it must be lower than the first one.
For instance <code>ALIGN OWORD, QWORD</code> alignes <kbd>$</kbd>
to an odd multiple of 8.
<br/><code>ALIGN 8,2</code> requests the current offset be set at
the second byte in qword (counted from zero).
Example of offsets which meet such requirement are 2, 10, 18, 26...</p>

<h4 id="STRUC"><a href="#PseudoInstructions">&uarr; STRUC</a></h4>
<h4 id="ENDSTRUC"><a href="#PseudoInstructions">&uarr; ENDSTRUC</a></h4>
<p>A <dfn>structure</dfn> represents a virtual section of data declarations
which can be used as a mask or a grid-template laid over a piece of memory.
Structure is declared with the STRUC..ENDSTRUC block.  The only statements
which may be used within the block are</p>
<ol><li>Data definitions specified with <a href="#D">D</a>
statement and its clones, either initialized or uninitialized</li>
<li>Explicit alignment statements (pseudoinstruction <a href="#ALIGN">ALIGN</a>)</li>
<li>Pseudoinstructions STRUC and ENDSTRUC (&euro;ASM allows nested definitions of structures)</li>
<li>Line and markup comments</li></ol><samp>
|[.data]                   ::::Section changed.
|00000000:                 |                      ; Example of structure declaration:
|[MyStruc]                 |MyStruc: STRUC
|00000000:................ |.Member1  D Q         ; Uninitialized QWORD member.
|00000008:........         |.Member2  D D         ; Uninitialized DWORD member.
|0000000C:........         |          D D         ; Uninitialized anonymous DWORD member.
|00000010:FF               |.Member3  D B 255     ; Initialized BYTE member.
|00000011:..               |.Member4  D B         ; Uninitialized BYTE member.
|00000012:............     |          ALIGN QWORD ; Increase size# MyStruc to QWORD.
|00000018:                 |        ENDSTRUC MyStruc
|[.data]                   ::::Section changed.
|00000000:                 |
|00000000:                 |
|00000000:18000000         |        DD SIZE# MyStruc    ; MyStruc is 0x18 bytes long.
|00000004:53000000         |        DD TYPE# MyStruc    ; Type of any structure is 'S'.
|00000008:00000000         |        DD SEGMENT# MyStruc ; Segment/section/offset of any struc declaration is a scalar 0.
|0000000C:                 |</samp>
<p>Declaration of a structure does not emit any data to the target file.
Data are emitted or reserved only when the declared structure is actually
used in a data definition (in pseudoinstruction <a href="#D">D or DS</a>).
We say that the structure is <em>instatiated</em>.
<br/>When initialized data is defined in the structure declaration,
it will be used to initialize corresponding members
at the time of structured data definition (with pseudoinstruction D or DS),
unless explicitly redefined.</p>
<p>Named data definitions in the structure must have local names
(starting with <kbd>.</kbd>)
<br/>This alows to:
<ol><li>Use the same name for members of different structures,</li>
<li>Avoid name conflict when more than one object of this structure is defined.</li></ol>
<p>Each member is given its offset relative to the start
of the structure.
The program section, which was current at the time of structure declaration, is irrelevant.
Each structure declaration temporarily creates its own pseudosection with a zero based virtual address 0.</p>
<p>Structure must be given an unique <dfn>structure name</dfn>,
which is defined in the label field of a STRUC statement and,
optionally, in the operand field of the ENDSTRUC statement.</p>
<p>The size of the structure can be obtained with the attribute <code>SIZE#Structure_name</code>.</p>
<p>Pseudoinstruction STRUC accepts the keyword operand ALIGN=, which specifies alignment
of instances of the structure when <code>EUROASM AUTOALIGN=ON</code>.
<br/>If the alignment is not explicitly specified with STRUC declaration, alignment corresponding to
<code>PROGRAM WIDTH=</code> is used as the default (WORD, DWORD or QWORD).</p>
<p>See tests <a class="EXT" href="../eatests/t2500.htm">t2500</a>,
<a class="EXT" href="../eatests/t2501.htm">t25010</a>,
<a class="EXT" href="../eatests/t2504.htm">t2504</a> for more examples of structure declaration.</p>

<h4 id="D"><a href="#PseudoInstructions">&uarr; D, DB, DU, DW, DD, DQ, DT, DO, DY, DZ, DI, DS</a></h4>
<p>Both initialized and uninitialized data are defined and reserved with
pseudoinstruction <dfn>D</dfn>. When a static value is specified, the data are <dfn>defined</dfn>.
When the value is omitted, data are <dfn>reserved</dfn>.
If EUROASM option <code>AUTOSEGMENT=ON</code>, INSTR data definition will switch to <em>code</em> section,
all other data definition will switch to <em>data</em> section
and data reservation will switch to <em>bss</em> (uninitialized data) section.</p>
<samp>|[.data]                   ::::Section changed.
|00000000:                 |; <abbr>Integer numbers definitions:</abbr>
|00000000:01               |  D BYTE 1 ; Define a byte integer with value 1, using long typename specification.
|00000001:00               ....AutoAlignment stuff.
|00000002:0200             |  D W 2    ; Define a word integer with value 2, using short typename specification.
|00000004:03000000         |  D D 3    ; Define a dword integer with value 3.
|00000008:0400000000000000 |  D Q 4    ; Define a qword integer with value 4.
|00000010:                 |; <abbr>Floating-point numbers definitions:</abbr>
|00000010:0000A040         |  D D 5.0  ; Define a single-precision number with value 5.
|00000014:00000000         ....AutoAlignment stuff.
|00000018:0000000000001840 |  D Q 6.0  ; Define a double-precision number with value 6.
|00000020:00000000000000E0~|  D T 7.0  ; Define an extended-precision number with value 7.
|0000002A:                 |  ; <abbr>String definitions:</abbr>
|0000002A:4279746573       |  D B "Bytes"    ; Define a string of bytes.
|0000002F:00               ....AutoAlignment stuff.
|00000030:55006E0069006300~|  D U "Unichars" ; Define a string of unichars.
|00000040:4368617273       |  D   "Chars"    ; Define a string of bytes or unichars (depends on the option UNICODE=).
|00000045:                 |  ; <abbr>Instruction operation code definitions:</abbr>
|[.text]                   ::::Section changed.
|00000000:90               |  D INSTR "NOP"  ; Define NOP opcode, using long typename specification.
|00000001:C3               |  D I "RET"      ; Define RET opcode, using short typename specification.
|00000002:                 |  ; <abbr>String reservations:</abbr>
|[.bss]                    ::::Section changed.
|00000000:................ |  D 8 * B  ; Reserve eight bytes long string.
|00000008:................~|  D 9 * U  ; Reserve nine unichars long string.
|0000001A:                 |  ; <abbr>Number reservations:</abbr>
|0000001A:....             |  D W      ; Reserve one word.
|0000001C:........         |  D D      ; Reserve one dword.
|00000020:................ |  D Q      ; Reserve one qword.
|00000028:................~|  D T      ; Reserve one tenbyte.
|00000032:                 |  ; <abbr>Vector reservations:</abbr>
|00000032:................~....AutoAlignment stuff.
|00000040:................~|  D O      ; Reserve one oword, which can hold two qword or four dword numbers.
|00000050:................~....AutoAlignment stuff.
|00000060:................~|  D Y      ; Reserve one yword, which can hold four qword or eight dword numbers.
|00000080:................~|  D Z      ; Reserve one zword, which can hold eight qword or sixteen dword numbers.
|000000C0:                 |</samp>
<p>See <a class="EXT" href="../eatests/t2482.htm">t2482</a> for more examples.</p>
<p>Each operand of <code>D</code> is a <a href="#DataExpressions">data expression</a>.</p>
<p>Pseudoinstruction mnemonic <code>D</code> may be appended with
suffix <code>B, U, W, D, Q, T, O, Y, Z, I, S</code>. Suffix defines the default datatype,
which is used if it's not explicitly specified in operand.
For instance <code>DD 2,3,4</code> defines three dwords with static values 2, 3 and 4.</p>
<p>Suffix also determines datatype of symbol, which defines the data.
For instance in definition <code>Sym1 DQ B 1, W 2, D 4</code> the suffix specifies that
the datatype of Sym1 is QWORD, although it defines only byte, word and dword data.</p>
<h6>Types of data may mix in the same D statement.</h6>
<p>The default datatype specified with mnemonic suffix can be overridden in operand fields
by an explicit datatype in short or long notation.
Operands without explicit redefinition take the default data type from D-suffix,
for instance <code>DB 27, "$", W 120</code> defines two bytes followed with one word.
Datatypes in the operand may be specified with long names as well,
e.g. <code>DB 27, "$", WORD 120</code>.
<br/>See <a class="EXT" href="../eatests/t2481.htm">t2481</a> for more examples.</p>


<h6>Data from one operand may be duplicated.</h6>
<p>For instance <code>TranslateTable: D 256 * BYTE</code> reserves 256 uninitialized bytes.
<br/>If duplication is not used, it defaults to 1. A negative duplicator is not permitted.
<br/>Duplicator 0 does not define or reserve any data, but still it provides default datatype
of the symbol and, if <code>AUTOALIGN=ON</code>, it aligns the curent offset <kbd>$</kbd>.</p>
<p>If no suffix is used, the default datatype is taken from the first nonempty operand,
e.g. <code>D D 2,3,4</code> defines three dwords with static values 2,3 and 4.
When no default is defined, as in <code>D 2</code>, &euro;ASM reports an error.</p>
<p>The only exception, when the datatype needs not to be explicitly specified, is the definition of a text string,
for instance <code>D "Some text."</code>. In this case the default datatype is <kbd>B</kbd> or <kbd>U</kbd>,
which depends on the current value of EUROASM option <code>UNICODE=</code>.</p>
<h6>No data is defined or reserved when no operand is used.</h6><pre>
L1: D  B 5      ; Define one byte with value 5.    TYPE#L1='B', SIZE#L1=1.
L2: D  2*WORD 3 ; Define two words with value 3.   TYPE#L2='W', SIZE#L2=4.
L3: DW W        ; Reserve one word.                TYPE#L3='W', SIZE#L3=2.
L4: DW 0*D      ; Reserve nothing, align to DWORD. TYPE#L4='W', SIZE#L4=0.
L5: DQ          ; Reserve nothing, align to QWORD. TYPE#L5='Q', SIZE#L5=0.
L6: D           ; Do nothing.                      TYPE#L6='A', SIZE#L6=0.</pre>
<blockquote>Unlike other assemblers, omitted operand doesn't emit any data,
&euro;ASM requests that operand type and|or value be specified,
no matter if the D operation is suffixed or not.
For instance <code>DB</code> reserves one byte in MASM
but it does nothing in &euro;ASM. Use <code>D B</code> or <code>DB B</code> instead.
</blockquote>
<p id="DI">EuroAssembler can define <strong>operation code of machine instruction</strong> as data,
with pseudoinstruction <dfn>DI</dfn>. It is similar to DB or DU but the string contents
is not emitted verbatim, it is assembled first. The quoted text in DI operand(s)
should be a valid <a href="#MachineInstructions">machine instruction</a>,
it may have prefix and operands but not a label.</p>
<p>For instance <code> DI "SEGES:MOVSB"</code> defines bytes 0x26,0xA4.
<br/><code> D 8*I"MOVSD"</code> defines eight bytes 0xA5.
<br/>See <a class="EXT" href="../eatests/t2515.htm">t2515</a> for more DI examples.</p>

<p id="DS">A <strong>structured memory variable</strong> is defined with pseudoinstruction
<code> DS <em>struc_name</em></code> or just <code> D <em>struc_name</em></code>.</p>
<h6>Only one structured object can be defined with one D statement.</h6>
<p>&euro;ASM does not allow multiple ordinal operands when a structured object
is defined, such as <code><del> DS MyStruc1, Mystruc2</del></code>.
Nevertheless, duplication is supported, e. g. <code> DS 4*MyStruc</code>.</p>
<p>Members of the structured object can be overriden statically, using keyword operands.
Keyword name is the local name of defined member, immediately followed with equal sign
<kbd>=</kbd> and with the new value of statically defined member.
<a href="#Namespace">Namespace</a> of operand fields in DS statement is temporarily changed to
the namespace of structure definition.</p>
<p>The instance of MyStruc declared above in a <a href="#STRUC">STRUC</a> example
could be for example defined as <code> MyObject DS MyStruc, .Member2=2, .Member4=4</code>.
This initializes the contens of MyObject.Member2 to dword integer 2, and
the contents of MyObject.Member4 to byte integer 4.
Contents of MyObject.Member3 is already statically defined as byte integer 255,
other members of MyObject remain uninitialized.
<br/>If at least one member is initialized, the object is by default emitted to
<em>data</em> section, uninitialized members are filled with zeroes.
See also test <a  class="EXT" href="../eatests/t2510.htm">t2510</a>.</p>

<h4 id="EQU"><a href="#PseudoInstructions">&uarr; EQU</a></h4>
<h4 id="eq"><a href="#PseudoInstructions">&uarr; =</a></h4>
<p>Pseudoinstruction <dfn>EQU</dfn> (or its alias <dfn>=</dfn>)
defines a symbol, which is presented in the label field.
The statement must have just one operand, which specifies
the address or the numeric value of the symbol.</p>
<p>Instruction <code>Label:EQU $</code> or <code>Label:= $</code>
are equivalent to <code>Label:</code>, i.e. specifying
the statement with label only, which assigns an address to the symbol Label.</p>
<p>Using EQU is the only way how to define
a plain numeric symbol, such as <code>FILE_ATTRIBUTE_ARCHIVE = 00000020h</code>.
</p>
<p>See any <a class="EXT" href="../maclib/">macrolibrary</a> within PROGRAM realm
as an example of EQU symbol definitions, for example
<a class="EXT" href="../maclib/winsfile.htm#Constants">winsfile.htm</a>.</p>

<h4 id="pcCOMMENT"><a href="#PseudoInstructions">&uarr; %COMMENT</a></h4>
<h4 id="pcENDCOMMENT"><a href="#PseudoInstructions">&uarr; %ENDCOMMENT</a></h4>
<p>Those pseudoinstructions define <a href="#BlockComments">block comments</a>,
i.e. range of source code which is ignored by &euro;ASM.
In the label field of %COMMENT there may be an identifier, which gives
the block a name (but it does not create a symbol). The same identifier can be used as the first
operand of %ENDCOMMENT statement. This helps &euro;ASM to check correct
matching of %COMMENT &amp; %ENDCOMMENT, especially when the comment blocks
are nested.</p>

<h4 id="pcDROPMACRO"><a href="#PseudoInstructions">&uarr; %DROPMACRO</a></h4>
<p>%DROPMACRO tells &euro;ASM to forget previously defined macroinstruction.
One %DROPMACRO statement may drop one or more macros specified as operands, e.g.
<br/><code> %DROPMACRO Macro1, Macro2, Macro3</code>.</p>
<p>Alternatively we may drop all macros declared so far with
<code>%DROPMACRO *</code>.
<p>See also <a href="#DroppingMacro">%DROPMACRO example</a> below.</p>

<h4 id="pcIF"><a href="#PseudoInstructions">&uarr; %IF</a></h4>
<h4 id="pcELSE"><a href="#PseudoInstructions">&uarr; %ELSE</a></h4>
<h4 id="pcENDIF"><a href="#PseudoInstructions">&uarr; %ENDIF</a></h4>
<p>Instructions between %IF and %ENDIF is assembled only if the condition
in the first and only %IF operand is evaluated as <em>true</em>.
%IF accepts <a href="#BooleansExt">extended boolean expression</a>
and it also accepts an empty operand, which is always evaluated as <em>false</em>.</p>
<p>Pseudoinstruction %ELSE may occur in the %IF..%ENDIF block.
It reverses the logic of assembly: instructions between %IF and %ELSE
are assembled when the %IF condition is <em>true</em> and instructions
between %ELSE and %ENDIF are assembled when the %IF condition is <em>false</em>.</p>
<p>%IF may have an identifier in the label field which does not create
a symbol but it identifies the block. The same identifier can be used
in the operand field of %ELSE and %ENDIF statements.</p>

<h4 id="pcFOR"><a href="#PseudoInstructions">&uarr; %FOR</a></h4>
<h4 id="pcEXITFOR"><a href="#PseudoInstructions">&uarr; %EXITFOR</a></h4>
<h4 id="pcENDFOR"><a href="#PseudoInstructions">&uarr; %ENDFOR</a></h4>
<p>Pseudoinstructions %FOR and %ENDFOR create block which is
assembled repeatedly for each operand of the %FOR statement.
The label field of %FOR statement must be an identifier.
It does not create a symbol, instead it defines a formal preprocessing
%variable which is accessible in the %FOR..%ENDFOR block only.
The name of this %variable consists of percent sign followed with the identifier.</p>
<p>Operands can be arbitrary elements which we need to operate with: register, number, expression, string.
The formal %variable will be assigned with each %FOR operand respectively, and the block will be emitted
with its value in the formal %variable.
The following example defines %FOR loop with three operands and it emits three memory variables:</p>
<pre>data %FOR "a", 3*B(5), "Long text"
       D %data
     %ENDFOR data
</pre> and it will be expanded to
<samp>|00000000:61                 +       D "a"
|00000001:050505             +       D 3*B(5)
|00000004:4C6F6E672074657874 +       D "Long text"
|0000000D:                   |</samp>

<p>Repeating the identifier in the operand field
of %ENDFOR and %EXITFOR statement is optional and it can be used to check proper
pairing of block instructions.</p>
<p>The operand of %FOR can also be a numeric range,
the block is repeated with each integer value of the range in this case.
Slope of the range can be negative; default step of control %variable
is <kbd>-1</kbd> in this case instead of <kbd>+1</kbd>.</p>
<pre>
i  %FOR  0..5    ; Slope is positive, therefore implicit step = +1.
      DB "A"+%i  ; Define bytes "A","B","C","D","E","F".
   %ENDFOR i
j  %FOR 'z'..'x' ; Slope is negative, therefore implicit step = -1.
      DB %j      ; Define bytes 'z','y','x'.
   %ENDFOR j
</pre>
<p>See also <a class="EXT" href="../eatests/t2640.htm">t2640</a>.</p>
<p>%FOR accepts  keyword integer operand <code>STEP=</code>
which explicitly defines how is the control %variable incremented
when a range is used.
The default value is zero (<code>STEP=0</code>), which is a special case:
the actual effective step is then either <kbd>+1</kbd> or <kbd>-1</kbd>,
depending on the range slope.</p>
<p>Both kind of operands (enumerated and range) can be combined.
When the step is explicitly defined and its sign differs from
the range slope, the %FOR..%ENDFOR body is not assembled.
On the other hand, if STEP= is omitted or set to <kbd>0</kbd>,
ranges with both slopes can be combined in one %FOR statement
and each range-operand will receive its own appropriate step <kbd>+1</kbd> or <kbd>-1</kbd>.
Example:</p>
<pre>
a %FOR 1..3, 6..4, 7
     ; Block is assembled with %a = 1,2,3,6,5,4,7.
   %ENDFOR

b %FOR 0..64, 256, 400..300, 512, STEP=16
     ; Block is assembled with %b = 0,16,32,48,64,256,512.
   %ENDFOR
</pre>
<p>When the formal %FOR variable has identical name with another previously user-defined %variable,
it prevails and the user-defined %variable is not visible inside the %FOR..%ENDFOR block.
See <a class="EXT" href="../eatests/t2641.htm">t2641</a>.</p>
<p>When &euro;ASM encounters <code>%EXITFOR</code> pseudoinstruction,
it breaks the assembly of remaining instructions in %FOR..%ENDFOR block
and continues below the %ENDFOR statement, no matter how many unprocessed %FOR operands
is left.</p>
<pre>
i  %FOR 0..9
     DB %i
     %IF %i>=3
       %EXITFOR i
     %ENDIF
     DB "a" + %i
   %ENDFOR i ; This will define bytes 0,"a",1,"b",2,"c",3
</pre>
<p>In nested %FOR..%ENDFOR blocks the formal variable (%EXITFOR's first and only operand) can be used
for specification which of the nested block should be exited,
see <a class="EXT" href="../eatests/t2642.htm">t2642</a> as an example.</p>


<h4><a id="pcWHILE" href="#PseudoInstructions">&uarr; %WHILE</a></h4>
<h4><a id="pcEXITWHILE" href="#PseudoInstructions">&uarr; %EXITWHILE</a></h4>
<h4><a id="pcENDWHILE" href="#PseudoInstructions">&uarr; %ENDWHILE</a></h4>
<p>The block of statements between %WHILE and %ENDWHILE is being assembled
repeatedly while the condition in the first and only %WHILE operand is <em>true</em>.
If the condition is <em>false</em> at the block entry, it is skipped entirely.</p>
<p>An identifier may be used in the label of %WHILE and in the
operand of %ENDWHILE and %EXITWHILE just for visual binding;
it does not define a symbol.</p>
<p>Unlike <a href="#pcFOR">%FOR</a>, which temporarily declares and maintains its own control %variable,
the %WHILE does not. It is the programer's duty to declare some
control %variable outside the block, and to change it within
%WHILE..%ENDWHILE. Example:</p>
<pre>
%i  %SETA 3        ; Define %variable %i which will control the block expansion.
id1 %WHILE %i
C%i:  DB %i
%i    %SETA %i - 1 ; Alternate the user-defined control %variable.
    %ENDWHILE id1
; Statements assembled with %WHILE..%ENDWHILE block: <kbd>C3: DB 3</kbd>, <kbd>C2: DB 2</kbd>, <kbd>C1: DB 1</kbd>.
</pre>
<p>%EXITWHILE in the block will cause skipping the rest of statements;
&euro;ASM will continue below %ENDWHILE.</p>
<p>See also <a class="EXT" href="../eatests/t2700.htm">t2700</a>,
<a class="EXT" href="../eatests/t2701.htm">t2701</a>,
<a class="EXT" href="../eatests/t2702.htm">t2702</a>.</p>


<h4 id="pcREPEAT"><a href="#PseudoInstructions">&uarr; %REPEAT</a></h4>
<h4 id="pcEXITREPEAT"><a href="#PseudoInstructions">&uarr; %EXITREPEAT</a></h4>
<h4 id="pcENDREPEAT"><a href="#PseudoInstructions">&uarr; %ENDREPEAT</a> alias</h4>
<h4 id="pcUNTIL"><a href="#PseudoInstructions">&uarr; %UNTIL</a></h4>
<p>The conditional assembly block %REPEAT..%ENDREPAT is similar to
%WHILE..%ENDWHILE but the condition is evaluated at the end of block,
and the logic is inverted. %REPEAT takes no label and no operand.
The statements in the block are always assembled at least once.
The control condition is in the operand field of %ENDREPEAT;
if it evaluates to <em>false</em>, &euro;ASM will assemble the block repeatedly.
Alias <code>%UNTIL</code> may be used instead of mnemonic <code>%ENDREPEAT</code>.</p>
<p>Block %REPEAT..%ENDREPEAT can use identifier for nesting check.
Unlike other block statements, position of the block identifier is different:
Block identifier can be specified as the first operand of %REPEAT,
and as the label of %ENDREPEAT (alias %UNTIL).</p>
<pre>
%i  %SETA 3           ; Define %variable %i which will control the block expansion.
    %REPEAT Id1
      C%i: DB %i
      %i %SETA %i - 1 ; Alternate the user-defined control %variable.
Id1 %UNTIL %i = 0
; Statements assembled with %REPEAT..%UNTIL block: <kbd>C3: DB 3</kbd>, <kbd>C2: DB 2</kbd>, <kbd>C1: DB 1</kbd>.
</pre>
<p>%EXITREPEAT in the block will cause skipping the rest of statements;
&euro;ASM will continue below %ENDREPEAT.</p><p>See also
<a class="EXT" href="../eatests/t2750.htm">t2750</a>,
<a class="EXT" href="../eatests/t2751.htm">t2751</a>,
<a class="EXT" href="../eatests/t2752.htm">t2752</a>.</p>


<h4 id="pcSET"><a href="#PseudoInstructions">&uarr; %SET</a></h4>
<p>Pseudoinstruction %SET and other members of its family are
designed to assign a value to <a href="#UserVariables">preprocessing
%variable</a>. This %variable is in the label field of the statement.</p>
<p>%SET assigns the whole list of operands as a verbatim <strong>text</strong>,
including the commas which separate operands from one another. White spaces
between the operation mnemonics (%SET) and the first operand
are omitted. White spaces after the last operand are trimmed off, too.
White spaces are similary trimmed when line-continuation is used.</p>
<pre>%CardList %SET Hearts, Diamonds, Clubs, Spades  ; Comment
</pre>
<p>%CardList now will contain the string
<kbd>Hearts, Diamonds, Clubs, Spades</kbd>
(31 characters including spaces and commas).</p>
<p>See also <a class="EXT" href="../eatests/t2810.htm">t2810</a>.</p>


<h4 id="pcSETA"><a href="#PseudoInstructions">&uarr; %SETA</a></h4>
<p>%SETA accepts <strong>arithmetic</strong> expressions. They will be evaluated
and assigned to the %variable as a signed decimal number.
An error is reported if the %SETA operand is not a valid expression.</p>
<p>When more than one operand is used,
each value is set to the corresponding comma-separated item of the %variable,
which is being assigned. Example:</p>
<pre>%Value %SETA PoolEnd - PoolBegin
%Sizes %SETA 2+3, 4, ,-5*2</pre>
<p>The difference between offsets <kbd>PoolEnd</kbd> and <kbd>PoolBegin</kbd>
in previous example was calculated and assigned to %Value as a decadic number.
<br/>%Sizes now contains the text <kbd>5,4,,-10</kbd> (8 characters).
Individual items of %Sizes can be retrieved with <a href="#Sublist">sublist</a>
operation, such as <code>%Sizes{2}</code>.</p>
<p>See also <a class="EXT" href="../eatests/t2821.htm">t2821</a>.</p>
<blockquote>%SETA is better suitable for modification of control %variable
in preprocessing loop, such as <code>%i %SETA %i+1</code>.
Though text assignment <code>%i %SET %i+1</code> would work here as well,
with %SET is the expression not evaluated immediately and we might
wind&nbsp;up with something like <code>+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1</code>
after 15th expansion.</blockquote>


<h4 id="pcSETB"><a href="#PseudoInstructions">&uarr; %SETB</a></h4>
<p>%SETB is similar to %SETA, it accepts <a href="#BooleansExt">extended</a>
<strong>boolean</strong> expressions and assigns them in the form
of binary digits <kbd>1</kbd> or <kbd>0</kbd>.
<p>See also <a class="EXT" href="../eatests/t2831.htm">t2831</a>.</p>
<p>Unlike with %SETA, the binary digits are not
separated with commas when more than one operand is used in %SETB statement.
Items of assigned variable can be retrieved with <a href="#Substring">
substring</a> operation.
Example:</p>
<pre>
%TooBig %SETB 5 > 4                   ; %TooBig is assigned with one character 1 (true).
%Flags  %SETB %TooBig, 2,,3>2,off,4,, ; %Flags  are assigned  with 110101.
        %IF %Flags[1]                 ; True, equals to 1st member of %Flags, i. e. %TooBig, i. e. 1.
Flags:  DB %Flags[]b                  ; Memory variable contains 00110101b.
</pre>


<h4 id="pcSETC"><a href="#PseudoInstructions">&uarr; %SETC</a></h4>
<p>%SETC accepts expression in its operand, which must evaluate to a plain
number not above 255 and not lower than -128.
The result will be assigned as one <strong>character</strong>
with evaluated ASCII byte value.
Example:</p>
<pre>
%Quote %SETC """" ; One character "quote" (ASCII 33) is assigned.
%Tab   %SETC 9    ; One character "tabelator" (ASCII 9) is assigned.
%NBSP  %SETC -1   ; One character (ASCII 255) is assigned.
</pre>
<p>Similar with %SETB, multiple operands may be defined in %SETC
and the resulting characters are not separated with commas.</p>
<pre>
%Hexadigits %SETC 'A','B','C','D','E','F'
; %Hexadigits now contains six characters ABCDEF
</pre>
<p>See also <a class="EXT" href="../eatests/t2841.htm">t2841</a>.</p>
<blockquote>%SETC allows to assign special characters to preprocessing
%variable, which couldn't be possible to assign as a plain text with %SET
due to &euro;ASM parser syntax rules.
<br/><code>%Space %SETC 32</code> assigns one space.
This could also be achieved with
<br/><code>%QuotedSpace %SET " "</code> and suboperating only
the second of three assigned characters:
<br/><code>%Space %SET %QuotedSpace[2]</code>.</blockquote>

<h4 id="pcSETE"><a href="#PseudoInstructions">&uarr; %SETE</a></h4>
<p>This pseudoinstruction reads <strong>environment</strong> variable from the operating system
at assembly time and assigns its value to the preprocessing variable.
Name of environment variable specified in the operand field(s)
is cited without quotes, percent signs or dollar sign, e.g.</p>
<pre>
%OS %SETE OS
Msg: DB "This program was assembled at %OS system."
</pre>
<p>&euro;ASM reports warning W2520 when the requested variable is empty or not defined.</p>
<p>%SETE allows to retrieve more than one environment %variables,
their values will be assigned as unquoted and comma-separated.
Example: <pre>
%CpuInfo %SETE PROCESSOR_ARCHITECTURE, PROCESSOR_IDENTIFIER, \
               PROCESSOR_LEVEL, PROCESSOR_REVISION</pre>
<blockquote>On my old computer this will assign following text to %CpuInfo:
<br/><code>x86,x86 Family 15 Model 1 Stepping 2, GenuineIntel,15,0102</code>.
Due to comma character inserted by Windows into the value of %PROCESSOR_IDENTIFIER%
it wouldn't be easy to retrieve individual components from such concatenation
with sublist %CpuInfo{4}. So it is usually better to use %SETE for only one environment variable.
</blockquote>

<h4 id="pcSETS"><a href="#PseudoInstructions">&uarr; %SETS</a></h4>
<p>%SETS looks at the %variable in its operand field and
assigns its <strong>size</strong>, i.e. the number of bytes which its value occupies.</p>
<pre>
%SomeVar        %SET  ABC, DEF
%SomeSize       %SETS %SomeVar  ; %SomeSize is now <kbd>8</kbd> (3 letters + comma + space + 3 letters).
%SizeOfSomeSize %SETS %SomeSize ; %SizeOfSomeSize is now <kbd>1</kbd> (one digit).
</pre>
<p>%SETS must have just one operand, which looks like a preprocessing %variable (percent sign followed with an identifier).</p>
<p>See also <a class="EXT" href="../eatests/t2861.htm">t2861</a>.</p>

<h4 id="pcSETL"><a href="#PseudoInstructions">&uarr; %SETL</a></h4>
<p>%SETL is similar to %SETS except that is assigns <strong>length</strong>
of the %variable contents, i.e. the number of comma-separated items in the %variable contents.</p>
<pre>
%SomeVar            %SET  ABC, DEF
%SomeLength         %SETL %SomeVar    ; %SomeLength is now <kbd>2</kbd> (2 comma separated items).
%LengthOfSomeLength %SETL %SomeLength ; %LengthOfSomeLength is now <kbd>1</kbd> (one item).
</pre>
<p>%SETL must have just one operand, which looks like a preprocessing %variable (percent sign followed with an identifier).</p>
<p>See also <a class="EXT" href="../eatests/t2866.htm">t2866</a>.</p>

<h4 id="pcSET2"><a href="#PseudoInstructions">&uarr; %SET2</a></h4>
<p>Consider assembly of the statement <code>%Var1 %SET %Var2</code>.
&euro;ASM first expands the %Var2 and the result of expansion is then
assigned to %Var1. First two tokens of the statement are not
expanded, because <code>%Var1</code> is the target which is just being assigned,
and <code>%SET</code> is reserved name which is never expanded.</p>
<p>%SET2 is similar to %SET except that the operand field
is <strong>expanded 2 times</strong> before being assigned. Each expansion
&quot;swallows&quot; one percent sign.</p>
<pre>
%V1 %SET "A"
%V2 %SET "B"
%V3 %SET "C"
i   %FOR 1..3
      %DataExp %SET2 %%V%i
      DB %DataExp
    %ENDFOR i ; Emit <kbd>DB "A"</kbd>, <kbd>DB "B"</kbd>, <kbd>DB "C"</kbd>.
</pre>
<p>See also <a class="EXT" href="../eatests/t2871.htm">t2871</a>.</p>
<blockquote>Only special macros make use of %SET2, for instance
<a class="EXT" href="../maclib/stdcal32.htm#EndProcedure">EndProcedure</a>
where it is used to expand %variable with not-known-yet dynamically changing name.
</blockquote>

<h4 id="pcSETX"><a href="#PseudoInstructions">&uarr; %SETX</a></h4>
<p>When a pseudoinstruction of SET* family is being assembled,
&euro;ASM does not expand label field and operation field
of statements such as <code>%Label %SET* anything</code>.
This applies to %SET, %SETA, %SETB, %SETC, %SETU, %SETE, %SETS, %SETL,
%SET2 but not to %SETX. In this statement the label field is
<strong>expanded</strong>, too.
After the expansion of label field %SETX works like ordinary %SET, which means that
it requires a valid %variable name in the label field.
For instance <code>%%Var1 %SETX ABC</code>
is equivalent to <code>%Var1 %SET ABC</code>.</p>
<p>Using %SETX we can assign %variables whose names are not explicitly
set at the assembly time and they dynamically change. Example:</p>
<pre>
i %FOR 1..4
     %%M%i %SETX %i  ; Identical with <kbd>%M1 %SET 1</kbd>, <kbd>%M2 %SET 2</kbd> etc.
  %ENDFOR  ; This will assign values 1,2,3,4 to preprocessing %variables %M1,%M2,%M3,%M4.
</pre>
<p>See also <a class="EXT" href="../eatests/t2881.htm">t2881</a>.</p>
<blockquote>Only special macros make use of %SETX, for instance
<a class="EXT" href="../maclib/stdcal32.htm#Procedure">Procedure</a>
where it is used to assign stack-frame addresses to %variables,
whose names are not-known-yet at macro-write time.
</blockquote>


<h4 id="pcMACRO"><a href="#PseudoInstructions">&uarr; %MACRO</a></h4>
<h4 id="pcEXITMACRO"><a href="#PseudoInstructions">&uarr; %EXITMACRO</a></h4>
<h4 id="pcENDMACRO"><a href="#PseudoInstructions">&uarr; %ENDMACRO</a></h4>
<p>Block of statements claimed with pseudoinstructions %MACRO and %ENDMACRO is called
<dfn>macro declaration</dfn>. Identifier in the label field of
%MACRO statement is the <dfn>name of macro</dfn>.
<br/>%MACRO statement itself is called <dfn>macro prototype</dfn>,
as it declares macro name and gives names to macro arguments.
Once declared, macro can be <dfn>expanded</dfn> many times it the
program.</p>
<p>When &euro;ASM reads the macro declaration in source text,
it does not emit any code. Instructions from the macro body
will be emitted only when the macro is actualy expanded
with its <a href="#MacroInstructions">macroinstruction</a>.</p>
<p>%EXITMACRO allows to break the emitting process if
it is encountered, usually when some error condition was detected.</p>
<p>Both %EXITMACRO and %ENDMACRO pseudoinstructions may have the macro name
in the operand field in order to emphasize the block matching.</p>
<p>Example of a macro declaration and a macro expansion:</p>
<pre>
AlignEAX %MACRO       ; Round-up the contents of EAX to a multiple of 4.
           ADD EAX,3
           AND EAX,-4
         %ENDMACRO AlignEAX

         MOV EAX,13
         AlignEAX     ; After macro expansion EAX contains 16.
</pre>
<p>For more information see also the chapter <a href="#MacroInstructions">MacroInstructions</a>.</p>

<h4 id="pcSHIFT"><a href="#PseudoInstructions">&uarr; %SHIFT</a></h4>
<p>Pseudoinstruction %SHIFT is usable in macro block only. It will
decrement the ordinal number of all macro operands by one or by the integer,
which it has in the operand field. %SHIFT may have no label and only
one operand which evaluates to a plain integer number. Default <kbd>1</kbd> is assumed
when the operand is omitted.</p>
<p><code>%SHIFT 0</code> does nothing.
Shifting by negative number will inverse the direction.</p>
<p>Effect of the operation is limited only when macrooperands are accessed
by their ordinal number, such as %1, %2 etc. Accessing operands by formal names
remains unaffected by %SHIFT operation.</p>
<p>Operands, which are left-shifted from ordinal position %1 to position
zero or negative, are not accessible by ordinal number any longer,
but they are not lost forever, as they may be shifted back
by a negative number.</p>
<samp>|              |Sample %MACRO Oper1, Oper2, Oper3
|              |L1: DB %1, %Oper1
|              |    %SHIFT 1
|              |L2: DB %1, %Oper1
|              |    %SHIFT 2
|              |L3: DB %1, %Oper1
|              |    %ENDMACRO Sample
|0000:         |
|0000:         |Sample  0x44, 0x55, 0x66, 0x77
|              +Sample %MACRO Oper1, Oper2, Oper3
|0000:4444     +L1: DB %1, %Oper1
|              +    %SHIFT 1
|0002:5544     +L2: DB %1, %Oper1
|              +    %SHIFT 2
|0004:7744     +L3: DB %1, %Oper1
|              +    %ENDMACRO Sample
|0006:         |</samp>
<p>See also <a class="EXT" href="../eatests/t7221.htm">t7221</a>.</p>


<h4 id="pcERROR"><a href="#PseudoInstructions">&uarr; %ERROR</a></h4>
<p>Pseudoinstruction %ERROR will insert an user-defined error message into the listing file and to the message output.
The message is similar to those emitted by &euro;ASM itself
when it founds some mistake in the source text.
%ERROR is often used in macroinstructions
and it usually warns the programmer that the macro was not used in the intended way.</p>
<p>User defined errors have severity code <kbd>U</kbd> and
severity level 5, which is somewhere between warnings and assembler errors. The programmer may specify
the actual message identifier with optional keyword operand
<code>ID=</code> which can be a plain decimal number between
<kbd>5000</kbd> and <kbd>5999</kbd>.
%ERROR will also accept identifier with value <kbd>0..999</kbd>
and it adds internally <kbd>5000</kbd> in this case. Default value is <kbd>0</kbd>,
so the user defined message has identifier <kbd>U5000</kbd>, if no keyword operand <code>ID=</code>
is used.</p>
<p>The message text does not have to be in quotes. If the message text consists from more than one
ordinal operands, they will be concatenated verbatim, including quotes, if used. Example:</p>
<code>%ERROR Id=5123, Something went wrong. Try again.</code>
<p>See also <a class="EXT" href="../eatests/t2581.htm">t2581</a> for more examples.</p>


<h4 id="pcDISPLAY"><a href="#PseudoInstructions">&uarr; %DISPLAY</a></h4>
<p>Pseudoinstruction %DISPLAY is used for retrieving information
about internal objects created by &euro;ASM during the assembly process.
Each such object is displayed in the form of debug message with severity level
<kbd>1</kbd>. The message is printed both to output console (in each pass)
and to the listing file (in the final pass).
<br/>%DISPLAY is active even in non-emitting source passages, such as false %IF branch or block disabled with %COMMENT.
It is intended to investigate &euro;ASM internals when something is not working as expected.</p>

<p id="DisplayObj">Pseudoinstrucion %DISPLAY accepts arbitrary number of operands &ndash; object categories, which specify
the kind of objects that we want to review. Categories may be provided as ordinal operands or as keyword operands
with value which specifies the <dfn>filter</dfn>. Filter can restrict the amount of displayed lines.
Category names are case insensitive but the filtering value,
if used, is case sensitive. Filter value defines first few characters of those object names, which we want to display.
Filter value may be terminated with asterix <kbd>*</kbd>, but this is not mandatory.
For instance the statement <code>%DISPLAY Macros=Alig</code> will display all macros
whose names begin with &quot;Alig&quot;.</p>

<p>Operands of pseudoinstruction %DISPLAY have rather relaxed syntax.
Object categories (ordinal operand name or keyword name) may be shortened, too. Only this number of characters
is required which is enough to identify the desired category.
For instance <code>%DISPLAY se</code> will display map of all segments and their sections.
<code>%DISPLAY File</code> displays the list of input files (main source and included libraries).
<code>%DISPLAY sym=Num*, sym=En</code> will list only those symbols, whose name begins with <kbd>Num</kbd>
or <kbd>En</kbd>.</p>
<p><code>%DISPLAY UserVar</code>, <code>%DISPLAY UserVar=*</code>and <code>%DISPLAY user=</code> work equally
(empty filter value will match any %variable name).
Nonfilterable categories, such as segments, context stack, automatic macro %variables, will always
display their complete list, any filtering value is ignored.</p>
<p>When specifying user-defined and system %variable names as the filtering value, the leading percent sign <kbd>%</kbd> or <kbd>%^</kbd>
may be omitted, or the percent sign must be doubled (otherwise it would have been expanded to its current contents).
<code>%DISPLAY UserVar=Loc</code> <code>%DISPLAY us=Loc*</code> and <code>%DISPLAY user=%%Loc</code>
are equal in their function: they display the current contents of user-defined preprocessing %variables whose name
begins with <kbd>%Loc</kbd>.</p>

<table><caption>%DISPLAY object categories</caption>
<tr><th>%DISPLAY operand</th><th>Messages</th><th>Filter</th><th>Order</th><th>Displayed objects</th></tr>
<tr><td><b>Al</b>l</td><td>D1100..D1900</td><td>yes</td><td>alphabetical</td>
<td>All objects specified below (shortcut for <b>Fil,Ch,Se,St,Co,Sym,L,Rel,M,V</b>).</td></tr>
<tr><td><b>Fil</b>es</td><td>D1150..D1190</td><td>ignored</td><td>natural</td><td><a href="#SourceFile">Source files</a> included in the program.</td></tr>
<tr><td><b>Ch</b>unks</td><td>D1200..D1240</td><td>ignored</td><td>natural</td><td>Chunks of source code.</td></tr>
<tr><td><b>Se</b>ctions</td><td>D1250..D1290</td><td>ignored</td><td>natural</td><td>Map of groups, segments and sections.</td></tr>
<tr><td><b>Se</b>gments</td><td>D1250..D1290</td><td>ignored</td><td>natural</td><td>Map of groups, segments and sections.</td></tr>
<tr><td><b>G</b>roups</td><td>D1250..D1290</td><td>ignored</td><td>natural</td><td>Map of groups, segments and sections.</td></tr>
<tr><td><b>St</b>ructures</td><td>D1300..D1340</td><td>yes</td><td>alphabetical</td><td><a href="#STRUC">Structures</a> declared in the program.</td></tr>
<tr><td><b>Co</b>ntext</td><td>D1350..D1390</td><td>ignored</td><td>stacked</td><td>Context stack of <a href="#ProgStrucVerBlock">block</a> statements</td></tr>
<tr><td><b>Sym</b>bols</td><td>D1400..D1450</td><td>yes</td><td>alphabetical</td>
<td>All explicitly defined symbols (shortcut for <b>Fix,Unf,Unr,Ref</b>).</td></tr>
<tr><td>&nbsp; <b>Unf</b>ixedSymbols</td><td>D1410..D1450</td><td>yes</td><td>alphabetical</td><td>Symbols whose properties are not stable yet.</td></tr>
<tr><td>&nbsp; <b>Fix</b>edSymbols</td><td>D1420..D1450</td><td>yes</td><td>alphabetical</td><td>Symbols whose properties are already fixed.</td></tr>
<tr><td>&nbsp; <b>Unr</b>eferencedSymbols</td><td>D1430..D1450</td><td>yes</td><td>alphabetical</td><td>Symbols which were not used yet.</td></tr>
<tr><td>&nbsp; <b>Ref</b>erencedSymbols</td><td>D1440..D1450</td><td>yes</td><td>alphabetical</td><td>Symbols which were mentioned at least once, or used in a structure.</td></tr>
<tr><td><b>L</b>iteralSymbols</td><td>D1500..D1540</td><td>ignored</td><td>alphabetical</td><td>All <a href="#Literals">literal</a> symbols declared in the program.</td></tr>
<tr><td><b>Rel</b>ocations</td><td>D1550..D1590</td><td>ignored</td><td>natural</td><td>Relocation records.</td></tr>
<tr><td><b>M</b>acros</td><td>D1600..D1690</td><td>yes</td><td>alphabetical</td><td><a href="#MacroInstructions">Macroinstructions</a> declared at this moment.</td></tr>
<tr><td><b>V</b>ariables</td><td>D1700..D1790</td><td>yes</td><td>alphabetical</td>
<td>All preprocessing %variables currently set (shortcut for <b>Au,Fo,Us,Sys</b>).</td></tr>
<tr><td>&nbsp; <b>Au</b>tomaticVariables</td><td>D1710..D1730</td><td>ignored</td><td>fixed</td><td><a href="#AutomaticVariables">Automatic</a> macro %variables.</td></tr>
<tr><td>&nbsp; <b>Fo</b>rmalVariables</td><td>D1740..D1750</td><td>yes</td><td>alphabetical</td><td><a href="#FormalVariables">Formal</a> <em>macro/for</em> %variables.</td></tr>
<tr><td>&nbsp; <b>Us</b>erVariables</td><td>D1760..D1770</td><td>yes</td><td>alphabetical</td><td><a href="#UserVariables">User-defined</a> preprocessing %variables.</td></tr>
<tr><td>&nbsp; <b>Sys</b>temVariables</td><td>D1780..D1790</td><td>yes</td><td>alphabetical</td><td><a href="#SystemVariables">System</a> preprocessing %^variables.</td></tr>
</table>
<p>Displayed message usually contains object name, it's <a href="#Attributes">attributes</a> and other properties.
<p>%DISPLAY operands Groups, Segments, Sections are identical, each of them always
displays the complete tree.
<br/>A line with the group lists all groups's segment names.
<br/>A line with the segment is indented by 2 spaces and displays purpose, width,align, combine, class, src.
<br/>A line with the section is indented by 4 chars and displays address, size, align, ref.</p>

<p>Property <dfn>src=</dfn> specifies whether the file or chunk is </p>
<ul><li>the <b>main</b> source
(specified on command-line),</li>
<li>local <b>config</b>uration file <q>euroasm.ini</q></li>
<li>or  <b>included</b> source file.</li></ul>
<p>Chunk property <dfn>type=</dfn> shows what kind of information is in this chunk of source text:</p>
<ul><li>ordinary <b>source</b>,</li>
<li><b>binary</b> data being included by <a href="#INCLUDEBIN">IncludeBin</a> statement,</li>
<li>the original <b>Include</b> statement (which will be replaced by the file contents),</li>
<li>or <b>resolved</b> Include statement, i.e. includepath and wildcards resolved to a unique filename.</li></ul>

<p>A boolean property <dfn>ref=</dfn> tells whether the symbol, structure or section was used
(referenced at least once in the program). Members of the structure are automatically marked as <em>used</em>
when the structure is defined.
<br/>Similar property <dfn>fix=</dfn> specifies if the offset
of  symbol or section is already fixed, i.e. it is stable between assembly passes.
<br/>Context property <dfn>emit=</dfn> informs whether the block is in normal (emitting) status,
or if it is just bypassed without emitting any code or data.</p>
<p>Context property <dfn>%.=</dfn> shows current value of <a href="#AutomaticVariables">
expansion counter</a> in this block.</p>
<p>Property <dfn>src=</dfn> identifies position in source text where the displayed object
was defined, in standard form <kbd>&quot;FileName&quot;{LineNumber}</kbd>.</p>

<p>Automatic and formal %variables are defined only in %macro or %for expansion,
i. e. when the statement <code>%DISPLAY Auto,Formal</code> is inserted in %MACRO..%ENDMACRO or %FOR..%ENDFOR body
and the macro is then expanded.</p>
<p>See tests <a class="EXT" href="../eatests/t2917.htm">t2901..t2917</a>
for examples of %DISPLAY output.</p>

<blockquote><p>Unlike other instructions, the statement %DISPLAY is alive and kicking even in non-emitting status.
Be cautious to put unfiltered %DISPLAY in repeating
preprocessing loops (%FOR, %WHILE, %REPEAT), as this may substantionally flood the output.</p>
<p>The main purpose of %DISPLAY is to find errors at assembly-time,
when &euro;ASM doesn't work as expected, together with <a href="#EUROASM">EUROASM</a> options
<code>DISPLAYSTM=, DISPLAYENC=</code> and with <a href="#PROGRAM">PROGRAM</a> options
<code>LISTGLOBALS=, LISTLITERALS=, LISTMAP=</code>.
<br/>For investigation of your program at run-time use a <i>debugger</i> or the macro <a class="EXT" href="../maclib/debug.htm#Debug">Debug</a>.
</blockquote>

<h4 id="pcDEBUG"><a href="#PseudoInstructions">&uarr; %DEBUG </a></h4>
<h4 id="pcPROFILE"><a href="#PseudoInstructions">&uarr; %PROFILE</a></h4>
<p>Those pseudoinstruction names are reserved for future extension of EuroAssembler,
they are not implemented yet. See also EUROASM boolean options
<a href="#DEBUGeq">DEBUG=</a> and <a href="#PROFILEeq">PROFILE=</a>.</p>

<hr/>
<h3 id="MacroInstructions"><a href="#Instructions">&uarr; Macroinstructions</a></h3>
<p>Macro is defined by a block of statements (macro <em>body</em>)
encapsulated between pseudoinstructions
<a href="#pcMACRO">%MACRO</a> and <a href="#pcENDMACRO">%ENDMACRO</a>.
The %MACRO statement itself (<dfn id="MacroPrototype" title="Prototype">
macro prototype</dfn>) must have a label,
which can be used later for macro invocation (alias <em>macro expansion</em>).</p>
<h6>Macro must be defined before it is invoked.</h6>
<p>Statement, which has the name of previously declared <a href="#pcMACRO">%MACRO</a>
in its operation field, is called <dfn>macroinstruction</dfn> or simply
<dfn>macro</dfn>. It will be replaced with statements from the block
<code>%MACRO..%ENDMACRO</code>.
Macro can be a fixed static set of instructions, such as</p><pre>
CarriageReturn %MACRO
                 MOV AH,2  ; 3 statements between %MACRO and %ENDMACRO are macro <b>body</b>.
                 MOV DL,13
                 INT 21h
               %ENDMACRO CarriageReturn
</pre>
<p>More useful are macros which can modify the expanded instructions
depending on operands they are invoked with.
When a macro is invoked, it is usually provided with operand values,
which are available in the macro body as formal %variables
or as automatic ordinal %variables <code>%1, %2, %3,...</code>.
Operands in macrodefinition may be given temporary <a href="#FormalVariables">formal</a>
symbolic name; they are accessible in the macro block
by this name prefixed with percent sign <kbd>%</kbd>.
Or they may be referred with their ordinal number prefixed with <kbd>%</kbd>.
Keyword operands are only accessible with the formal key name prefixed with <kbd>%</kbd>.
Example:</p>
<pre>
Copy %MACRO Source, Destination, Size=ECX ; Statement %MACRO is called macro <b>prototype</b>.
       MOV ESI, %Source      ; or MOV ESI, %1
       MOV EDI, %Destination ; or MOV EDI, %2
       MOV ECX, %Size
       REP MOVSB
     %ENDMACRO Copy
</pre>
<p>The previous macro needlessly moves the number of copied bytes (Size)
to register ECX even when it is already there at the time of its invocation.
The expanded instruction <code>MOV ECX,ECX</code> could be spared in this case:</p>
<pre>
Copy %MACRO Source, Destination, Size=ECX
       MOV ESI, %Source      ; Instead of formal %Source we could use <code>MOV ESI, %1</code>
       MOV EDI, %Destination ; Or <code>MOV EDI, %2</code>
       %IF "%Size" !== "ECX"
         MOV ECX, %Size
       %ENDIF
       REP MOVSB
     %ENDMACRO Copy
</pre>
<p>Now when the macro is invoked as <code>Copy From, To, Size=ecx</code>
or as <code>Copy From, To</code>, no superfluous <code>MOV ECX,ECX</code>
is expanded.</p>
<p>If the name of the formal macro %variable happens to collide with some previously
user-defined preprocessing %variable, visibility of the user-defined %variable
is temporarily overriden with the formal %variable, see the test <a class="EXT"
href="../eatests/t7347.htm">t7347</a>.
<br/><a href="#AutomaticVariables">Automatic variables</a>, such as
<kbd>%*, %#, %:, %1, %2,,,</kbd> are not visible outside the macro body.

<h6>All macros in EuroAssembler may have variable number of operands.</h6>
<p>Number of operands specified at macro invocation doesn't need to correspond
with the number of operands specified at macro definition.
If the macro is <strong>invoked with less</strong> ordinal operands than its prototype declares,
&euro;ASM does not treat this as error and silently expands the omitted operands
to nothing.
<br/>When the macro is <strong>invoked with more</strong> operands than its prototype specifies,
those superfluous operands are not accessible in macro expansion by formal names,
but still they may be referred by their automatic ordinal number.
See also pseudoinstruction <a href="#pcSHIFT">%SHIFT</a>.</p>
<p>When a <strong>keyword operand</strong> is omitted in macro invokation,
it retains its value which was specified at macro definition.
Adding a voluntary keyword operand(s) allows to extend functionality of macroinstruction
without destroying the backward compatibility. Consider this simple macro:</p>
<pre>
Write %MACRO TextPtr,TextSize ; Write the text to the standard output.
   MOV DX,%TextPtr
   MOV CX,%TextSize
   MOV BX,1       ; File handle of the standard output.
   MOV AH,40h     ; Write string DS:DX to a device or file.
   INT 21h        ; Invoke the DOS service.
 %ENDMACRO Write</pre>
<p>Later we may want to use the same macro for writing to other devices, too.
Let's extend it with keyword operand <code>Handle=</code> with predefined default value
of standard output:</p>
<pre>
Write %MACRO TextPtr,TextSize,Handle=1 ; Write the text to the standard output or other device.
   MOV DX,%TextPtr
   MOV CX,%TextSize
   MOV BX,%Handle ; Handle of output device or file.
   MOV AH,40h     ; Write string DS:DX to a device or file.
   INT 21h        ; Invoke the DOS service.
 %ENDMACRO Write</pre>
<p>Now it's possible to write to other devices, too, for instance to
the standard line printer: <code> Write Message,80,Handle=4</code>.
The enhanced macro Write is backward compatible.
Even if our old programs include updated macrolibrary with enhanced macro Write,
they don't have to be recompiled.</p>

<p id="DroppingMacro">Similary to <a href="#UserVariables">preprocessing %variables</a>,
<strong>macros may be redefined</strong> many times. However, this is not usual and &euro;ASM will emit
a warning W2512 in this case. Once defined macro can be undefined with
pseudoinstruction <a href="#pcDROPMACRO">%DROPMACRO</a>.</p>
<p>As an example of situation, where dropping of the macro definition may be useful,
is emulation of a machine instruction by the macro with the same name.
<br/>Machine instruction BSWAP, which reverses the byte order in 32-bit register, was not available
on Intel 80386. This could be solved by emulation using three ROR or ROL instructions.
If we detect that our program runs on Pentium, we can drop the macro definition
and &euro;ASM will assemble <code>BSWAP</code> as a native machine instruction.</p>
<samp>|00000000:          |
|                   |BSWAP %MACRO reg32 ; Swap the byte order in register.
|                   |       %IF TYPE# %reg32 <> 'R' || SIZE# %reg32 <> 4
|                   |         %ERROR 'Macro "BSWAP" expects 32-bit GPR as its operand.'
|                   |         %EXITMACRO BSWAP
|                   |       %ENDIF
|                   |%reg16 %SET %reg32[2..3] ; Name of the lower half of reg32 (omit the letter <kbd>E</kbd>).
|                   |       ROL %reg16,8
|                   |       ROL %reg32,16
|                   |       ROL %reg16,8
|                   |      %ENDMACRO BSWAP
|00000000:          |
|00000000:BA78563412|      MOV EDX,0x12345678
|00000005:          |      BSWAP EDX    ; Expected result is EDX=0x78563412.
|                   +BSWAP %MACRO reg32 ; Swap the byte order in register.
|FALSE              +       %IF TYPE# %reg32 <> 'R' || SIZE# %reg32 <> 4
|                   +         %ERROR 'Macro "BSWAP" requires 32-bit GPR as its operand.'
|                   +         %EXITMACRO BSWAP
|                   +       %ENDIF
|4458               +%reg16 %SET %reg32[2..3] ; Name of the lower half of reg32.
|00000005:66C1C208  +       ROL %reg16,8
|00000009:C1C210    +       ROL %reg32,16
|0000000C:66C1C208  +       ROL %reg16,8
|                   +      %ENDMACRO BSWAP
|                   |      ; If CPU is 486 or higher, prefer the machine instruction.
|                   |      %DROPMACRO BSWAP
|00000010:0FCA      |      BSWAP EDX  ; This time swap the byte order with native 486 instruction.
|00000012:          |
</samp>
<p>Advanced EuroAssembler macrolanguage allows to change our programming style.
We can create macroinstructions which mimic the functions of high-level languages
and customize the new &quot;language&quot; for the particular task.
See the macros <code>Ii*</code> in &euro;ASM source file <a class="EXT"
href="../easource/ii.htm">ii.htm</a> as an example of pseudolanguage developed
for intelligible description of conversion from assembly-instruction
to the machine code.</p>
<p>When something doesn't work as expected, it's always possible to look at the expanded
macroinstruction body in the listing and adhere to a plain assembly code.</p>

<hr/>

<h2 id="PgmFormats" title="Formats"><a href="#top">&uarr; Program formats</a></h2>
<h3><a href="#FormatBIN">BIN &darr;</a></h3>
<h3><a href="#FormatBOOT">BOOT &darr;</a></h3>
<h3><a href="#FormatCOM">COM &darr;</a></h3>
<h3><a href="#FormatMZ">MZ &darr;</a></h3>
<h3><a href="#FormatOMF">OMF &darr;</a></h3>
<h3><a href="#FormatLIBOMF">LIBOMF &darr;</a></h3>
<h3><a href="#FormatCOFF">COFF &darr;</a></h3>
<h3><a href="#FormatLIBCOF">LIBCOF &darr;</a></h3>
<h3><a href="#FormatELF">ELF &darr;</a></h3>
<h3><a href="#FormatELFX">ELFX &darr;</a></h3>
<h3><a href="#FormatELFSO">ELFSO &darr;</a></h3>
<h3><a href="#FormatPE">PE &darr;</a></h3>
<h3><a href="#FormatDLL">DLL &darr;</a></h3>
<h3><a href="#FormatRSRC">RSRC &darr;</a></h3>
<h3><a href="#FormatWidth">Width of program formats &darr;</a></h3>

<p>The target of EuroAssembler's endeavour is an output file in one of the formats
selected by <code>PROGRAM FORMAT=</code> option. There are three main categories
of &euro;ASM output files:</p>

<ol><li><strong>linkable file</strong> (also called <em>module</em>
or <em>object file</em>) is designed to be joined with other modules and libraries
into the final executable file or to the object library.
<br/>&euro;ASM supports three main standards of object files:
<strong>ELF, OMF</strong> and <strong>COFF</strong>  . Default object file name extension is <q>.o</q> or <q>.obj</q>.</li>

<li><strong>library</strong> is a collection of modules,
ready to be linked on demand into the final executable file.
There are four kinds of libraries supported by EuroAssembler:
<ul><li>LIBOMF, LIBCOF - <strong>object library</strong> contains statically linkable object modules,</li>
<li>LIBOMF, LIBCOF - <strong>import library</strong> contains references to dynamically linked functions imported from MS-Windows,</li>
<li>LIBOMF, LIBCOF - <strong>mixed library</strong> which is a combination of both, </li>
<li>DLL - <strong>dynamically linked MS-Windows library</strong>,</li>
<li>ELFSO - <strong>dynamic shared objects</strong>, however only statically linkable by &euro;ASM</li>
</ul>
<p>Default filename extension of object or import library is <q>.lib</q>, in case of dynamic library it is <q>.so</q> or <q>.dll</q>.</li>

<li><strong>executable file</strong> (also called <em>image</em>)
can be loaded and launched directly by the shell of the hosting operating system.
<br/>&euro;ASM can produce executables in the formats <strong>ELFX</strong>, <strong>PE</strong>, <strong>MZ</strong>, <strong>COM</strong>,
they have file extension <q>.x</q>, <q>.exe</q> or <q>.com</q>.
It can also create dynamically loaded libraries <strong>DLL</strong>,
very similar to PE format, but they can be executed only indirectly, through invocation of their exported function from another program,
or through a special Windows loader, such as <q>RUNDLL32.exe</q>.
<br/>Program formats <strong>BIN</strong> and <strong>BOOT</strong> are ranked as executable, too.
However, as they lacks any <i>red tape</i> information, binary file needs its own <i>ad hoc</i> loader
to be launched directly, or it must be loaded to a special storage place of the computer, such as
the firmware ROM or the boot sector of disk device.</li></ol>

<h3 id="FormatBIN"><a href="#PgmFormats">&uarr; BIN</a></h3>
<p>Option <code>PROGRAM FORMAT=BIN</code> is chosen as the default when FORMAT= is not explicitly specified.
Default options for BIN format are</p>
<pre>Name: PROGRAM FORMAT=BIN, OUTFILE=%^PROGRAM.bin, MODEL=TINY, WIDTH=16, \
              ENTRY=0, IMAGEBASE=0, SECTIONALIGN=0, FILEALIGN=0</pre>.
<p>&euro;ASM creates the default segment [BIN] with universal purpose:</p>
<pre>[BIN] SEGMENT WIDTH=16,ALIGN=16, \
              PURPOSE=CODE+DATA+BSS+STACK+LITERALS</pre>
<blockquote>These PROGRAM options are irrelevant:
DLLCHARACTERISTICS, ENTRY, ICONFILE, MAJOROSVERSION, MAJORSUBSYSTEMVERSION,
MAJORIMAGEVERSION, MAJORLINKERVERSION,  MINOROSVERSION,
MINORSUBSYSTEMVERSION, MINORIMAGEVERSION, MINORLINKERVERSION,
WIN32VERSIONVALUE,  SIZEOFHEAPCOMMIT, SIZEOFHEAPRESERVE,
SIZEOFSTACKCOMMIT, SIZEOFSTACKRESERVE, STUBFILE, SUBSYSTEM.</blockquote>
<p>Structure of BIN file is straightforward: the binary image is a concatenation
of emitted contents of its segments. Noninitialized (BSS) segments are omitted.</p>
<p>Segment alignment in the image is by default specified by the highest value
of <code>PROGRAM FILEALIGN=0</code>, <code>PROGRAM SECTIONALIGN=0</code> and
<code>SEGMENT ALIGN=16</code>.
Gaps between segments are filled with alignment stuff,
which is 0x90 (NOP) if the neighbouring segments have both <code>SEGMENT PURPOSE=CODE</code>,
otherwise it is 0x00. </p>
<p>Typical applications of binary format are pure data files, conversion tables,
Dos drivers, boot sectors etc., see the sample <a class="EXT" href="../objlib/">BIN projects</a>.</p>

<h3 id="FormatBOOT"><a href="#PgmFormats">&uarr; BOOT</a></h3>
<p>Option <code>PROGRAM FORMAT=BOOT</code> creates a binary format file adapted for booting.
The difference from the BIN format:<ol>
<li>Size of the output file is 512 bytes,</li>
<li>it is loaded at the linear address 07C00h,</li>
<li>size of the code and data is padded to 510 and the last two bytes are 0x55,0xAA,</li>
<li>the default file extension is <q>.sec</q>.</li>
</ol>
<p>Default options for BOOT format are</p>
<pre>Name: PROGRAM FORMAT=BOOT, OUTFILE=%^PROGRAM.sec, MODEL=TINY, WIDTH=16, \
              ENTRY=, IMAGEBASE=0, SECTIONALIGN=0, FILEALIGN=0</pre>.
<blockquote>These PROGRAM options are irrelevant:
DLLCHARACTERISTICS, ENTRY, ICONFILE, MAJOROSVERSION, MAJORSUBSYSTEMVERSION,
MAJORIMAGEVERSION, MAJORLINKERVERSION,  MINOROSVERSION,
MINORSUBSYSTEMVERSION, MINORIMAGEVERSION, MINORLINKERVERSION,
WIN32VERSIONVALUE,  SIZEOFHEAPCOMMIT, SIZEOFHEAPRESERVE,
SIZEOFSTACKCOMMIT, SIZEOFSTACKRESERVE, STUBFILE, SUBSYSTEM.</blockquote>
<p>See the sample projects <a class="EXT" href="../probin/boottest.htm">boottest.htm</a>
and <a class="EXT" href="../probin/boot16.htm">boot16.htm</a>.</p>


<h3 id="FormatCOM"><a href="#PgmFormats">&uarr; COM</a></h3>
<p>Files in COM format are legacy of CP/M operation system, they are
directly executable in DOS and in 32-bit Windows. In other systems only with DOS emulator.</p>
<p>Default options for <code>PROGRAM FORMAT=COM</code> are</p>
<pre>Name: PROGRAM FORMAT=COM,OUTFILE=%^PROGRAM.com,MODEL=TINY,WIDTH=16,IMAGEBASE=0, \
              ENTRY=256,SECTIONALIGN=0,FILEALIGN=0</pre>.
<p>Options <code>ENTRY=0x100</code> and <code>IMAGEBASE=0</code> are fixed
for this format and cannot be changed (they can be omitted from the PROGRAM statement).</p>
<p>&euro;ASM creates default implicit segment [COM] with universal purpose:</p>
<pre>[COM] SEGMENT WIDTH=16,ALIGN=16,PURPOSE=CODE+DATA+BSS+STACK+LITERALS</pre>
<blockquote>These PROGRAM options are irrelevant:
DLLCHARACTERISTICS, ICONFILE, MAJOROSVERSION, MAJORSUBSYSTEMVERSION,
MAJORIMAGEVERSION, MAJORLINKERVERSION,  MINOROSVERSION,
MINORSUBSYSTEMVERSION, MINORIMAGEVERSION, MINORLINKERVERSION,
WIN32VERSIONVALUE,  SIZEOFHEAPCOMMIT, SIZEOFHEAPRESERVE,
SIZEOFSTACKCOMMIT, SIZEOFSTACKRESERVE, STUBFILE, SUBSYSTEM.</blockquote>
<p>Structure of COM file is similar to BIN format, there are no metainformation
stored in the file except for its extension <q>.com</q> which tells OS
to treat it as an executable. OS loader will allocate 64 KB of memory,
load segment registers CS,DS,ES,SS with the paragraph address of that block,
initialize 256 bytes long <a class="EXTL" href="links.htm#PSP">[PSP]</a> structure located at offset 0,
load the entire file contents at offset 256 (0x0100),
set stack pointer to the top of allocated block (usually SP=0xFFFE)
and finally set IP=0x0100.</p>
<p>Size of code+data+stack altogether should not exceed 64 KB in TINY memory model.
Program in COM format can use 32-bit registers, if CPU is 386 or higher.
Also additional memory blocks may be requested from OS at runtime.
Typical application of this obsolete format are fast and short little utilities
and <dfn id="TSR" title="TSR programs">Terminate-and-Stay-Resident</dfn> (TSR) programs which provide services in DOS,
see the sample <a class="EXT" href="../objlib/">project for DOS</a>.</p>
<p id="ShortestCOM">The following COM example is only 1 byte long, yet it is a formally valid
computer program, though it does nothing:</p>
<pre>         EUROASM
Shortest PROGRAM FORMAT=COM
           RET
         ENDPROGRAM Shortest
</pre>
<p>Program in COM format can link other object files or libraries, see the test table
<a class="EXT" href="../eatests/#LinkerCombinations">linker combinations</a>.</p>

<h3 id="FormatMZ"><a href="#PgmFormats">&uarr; MZ</a></h3>
<p>Specifying program format MZ creates a 16-bit or 32-bit realmode executable file,
which can be directly run in DOS and in 32-bit Windows.
Its structure is described in <a class="EXTL" href="../eadoc/links.htm#MZ">[MZ]</a>
and <a class="EXTL" href="../eadoc/links.htm#MZEXE">[MZEXE]</a>.
Dos executable file begins with <dfn id="MZ" title="MZ format signature">MZ signature</dfn> <code>'M','Z'</code>.</p>
<p>Default options for <code>PROGRAM FORMAT=MZ</code> format are:</p>
<pre>PROGRAM FORMAT=MZ, ENTRY=, OUTFILE=%^PROGRAM.exe, MODEL=SMALL, WIDTH=16, IMAGEBASE=0, \
        SECTIONALIGN=0, FILEALIGN=0, SIZEOFSTACKCOMMIT=8K, SIZEOFHEAPCOMMIT=1M</pre>
<p id="MZdefaultSegments">&euro;ASM creates default implicit segments [CODE], [RODATA], [DATA], [BSS], [STACK] in program formats MZ, OMF, LIBOMF.
<p>Parameter <code>PROGRAM SizeOfStackCommit=</code> specifies the default size of the segment [STACK], so we don't have
to explicitly define stack segment when EUROASM option <code>AUTOSEGMENT=</code> is enabled at the ENDPROGRAM statement.</p>
<p>Parameter <code>PROGRAM SizeOfHeapCommit=</code> can be used to limit the requested amount of heap memory preallocated by the loader
(member <a class="EXT" href="../easource/pfmz.htm#PFMZ_DOS_HEADER">.e_maxalloc</a> of DOS file header).</p>
<p>If the memory model is HUGE or FLAT and program width is not explicitly specified, it defaults to
<code>PROGRAM WIDTH=32</code>, otherwise it is 16.</p>
<p><code>ImageBase=0</code> is fixed for this format and cannot be changed.
<br/>Explicit specifications of <code>PROGRAM Entry=</code> is mandatory in MZ format.</p>
<blockquote>These PROGRAM options are irrelevant:
DLLCHARACTERISTICS, ENTRY, ICONFILE, MAJOROSVERSION, MAJORSUBSYSTEMVERSION,
MAJORIMAGEVERSION, MAJORLINKERVERSION,  MINOROSVERSION,
MINORSUBSYSTEMVERSION, MINORIMAGEVERSION, MINORLINKERVERSION,
WIN32VERSIONVALUE, SIZEOFHEAPRESERVE, SIZEOFSTACKRESERVE, STUBFILE, SUBSYSTEM.</blockquote>
<p>As an example of a MZ executable program for DOS see the test <a class="EXT" href="../eatests/t8300.htm">t8300</a>.</p>

<h3 id="FormatOMF"><a href="#PgmFormats">&uarr; OMF</a></h3>
<p>Object Module Format as specified in <a class="EXTL" href="../eadoc/links.htm#OMF">[OMF]</a>
is designed to be linked to 16-bit and 32-bit real-mode programs.
Imports in this format are linkable to the protected-mode executables.</p>
<p>Default segments are the same as in <a href="#MZdefaultSegments">MZ format</a>.</p>
<p>File format OMF is recognized for LINK when it is composed of valid
OMF records and the first record is THEADR or LHEADR.</p>
<p>Default options for this format are:</p>
<pre>Name: PROGRAM FORMAT=OMF,OUTFILE=%^PROGRAM.obj,MODEL=SMALL,WIDTH=16</pre>
<blockquote>These PROGRAM options are irrelevant:
DLLCHARACTERISTICS, FILEALIGN, ICONFILE, IMAGEBASE, MAJOROSVERSION, MAJORSUBSYSTEMVERSION,
MAJORIMAGEVERSION, MAJORLINKERVERSION,  MINOROSVERSION,
MINORSUBSYSTEMVERSION, MINORIMAGEVERSION, MINORLINKERVERSION,
WIN32VERSIONVALUE, SECTIONALIGN, SIZEOFHEAPCOMMIT, SIZEOFHEAPRESERVE,
SIZEOFSTACKCOMMIT, SIZEOFSTACKRESERVE, STUBFILE, SUBSYSTEM.</blockquote>
<p>As an example of a OMF module see the test <a class="EXT" href="../eatests/t8400.htm">t8400</a>.</p>

<h3 id="FormatLIBOMF"><a href="#PgmFormats">&uarr; LIBOMF</a></h3>
<p>OMF library format is described in Apendix2 of the same document as
<a class="EXTL" href="links.htm#OMF">[OMF]</a>.
The hashed dictionary, required by format specification at the end of library, is created on output,
but &euro;ASM linker ignores it. When the library is linked to another program,
its public symbols are searched sequentionally. Page size of LIBOMF libraries created by &euro;ASM is fixed at 16.
</p>
<p>Default segments are the same as in <a href="#MZdefaultSegments">MZ format</a>.</p>
<p>File format LIBOMF is recognized by LINK when it starts with LIBHDR record
with <em>page size</em> 16, 32, 64,..32K, and this record are followed by the valid <a href="#FormatOMF">OMF modules</a>,
which start with THEADR or LHEADR records and which end with MODEND or MODEND32 record each.
Library dictionary at the end of the file is not checked.</p>
<p>Default options for <code>PROGRAM FORMAT=LIBOMF</code> are:</p>
<pre>Name: PROGRAM FORMAT=LIBOMF,OUTFILE=%^PROGRAM.lib</pre>
<p>Other properties are inherited from its library modules.</p>
<blockquote>These PROGRAM options are irrelevant:
DLLCHARACTERISTICS, ENTRY, FILEALIGN, ICONFILE, IMAGEBASE, MAJOROSVERSION, MAJORSUBSYSTEMVERSION,
MAJORIMAGEVERSION, MAJORLINKERVERSION, MODEL, MINOROSVERSION,
MINORSUBSYSTEMVERSION, MINORIMAGEVERSION, MINORLINKERVERSION,
WIN32VERSIONVALUE, SECTIONALIGN, SIZEOFHEAPCOMMIT, SIZEOFHEAPRESERVE,
SIZEOFSTACKCOMMIT, SIZEOFSTACKRESERVE, STUBFILE, SUBSYSTEM, WIDTH.</blockquote>
<p>Modules, which will be stored to the library, should be assembled beforehand to the files
in OMF format. If the program, which creates library,
contains some code, it will be assembled and stored as the first library module.
Modules from other linked libraries, which do not declare any global symbol,
will not be included in the target library at all.
Example of a static OMF library linked from 3 standalone modules:</p>
<pre>MyLib: PROGRAM FORMAT=LIBOMF
        LINK "Module1.obj", "Module2.obj", "Module3.obj"
       ENDPROGRAM MyLib</pre>
<p>Although format OMF was developed for real-mode programs, in can be enhanced
with import declarations represented with OMF records COMENT/IMPDEF,
and the such import library used in Windows programs.</p>
<p>Some librarians (for instance <a class="EXTL" href="links.htm#ALIB">[ALIB]</a>)
create longer alternatives of import library, which adds LEDATA+FIXUPP records with relocatable
machine code of proxy jumps to the imported function.
<br/>&euro;ASM does not create the longer version of import libraries but
both short and long versions are accepted by the linker.
Example of a program creating pure import library in short OMF format:</p><pre>
ImpLib PROGRAM FORMAT=LIBOMF
  IMPORT LIB="kernel32.dll",TerminateProcess,TerminateThread
  IMPORT LIB="user32.dll",CreateCursor,CreateIcon,CreateMenu
 ENDPROGRAM ImpLib
</pre>
<p>As an example of a LIBOMF library see the test <a class="EXT" href="../eatests/t8600.htm">t8600</a>.</p>


<h3 id="FormatCOFF"><a href="#PgmFormats">&uarr; COFF</a></h3>
<p>EuroAssembler implements the object format COFF in Microsoft modification described in
<a class="EXTL" href="links.htm#MS_PECOFF">[MS_PECOFF]</a>. This description is also valid
for &euro;ASM formats LIBCOF, PE, DLL (<dfn>COFF-based formats</dfn>).</p>
<p id="COFFdefaultSegments" title="COFF based">&euro;ASM creates four default
segments (sections) in COFF-based formats:
<br/><code>[.text], [.rodata], [.data], [.bss]</code>.
Machine stack for executables will be established by the loader at run-time.</p>
<p>Default options for <code>PROGRAM FORMAT=COFF</code> are:</p>
<pre>PROGRAM FORMAT=COFF,OUTFILE=%^PROGRAM.obj,MODEL=FLAT,WIDTH=32</pre>
<blockquote>These PROGRAM options are irrelevant:
DLLCHARACTERISTICS, ENTRY, FILEALIGN, ICONFILE, IMAGEBASE, MAJOROSVERSION, MAJORSUBSYSTEMVERSION,
MAJORIMAGEVERSION, MAJORLINKERVERSION, MINOROSVERSION,
MINORSUBSYSTEMVERSION, MINORIMAGEVERSION, MINORLINKERVERSION,
WIN32VERSIONVALUE, SECTIONALIGN, SIZEOFHEAPCOMMIT, SIZEOFHEAPRESERVE,
SIZEOFSTACKCOMMIT, SIZEOFSTACKRESERVE, STUBFILE, SUBSYSTEM.</blockquote>
<p>Generated value in <a class="EXT" href="../easource/pfcoff.htm#PFCOFF_FILE_HEADER">PFCOFF_FILE_HEADER.Machine</a>
for legacy mode COFF is always <code>0x014C</code> (Intel 386) regardless of <code>EUROASM CPU=</code> value.
In 64-bit mode PECOFF is always <code>0x8664</code> (architecture AMD64).
Architecture Itanium (0x0200) is currently not supported.</p>
<p><a class="EXT" href="../easource/pfcoff.htm#PFCOFF_FILE_HEADER">PFCOFF_FILE_HEADER.TimeDateStamp</a>
corresponds with the current system time, unless it is forged by the option <code>EUROASM TIMESTAMP=</code>.</p>
<p>Linked COFF module is recognized by the contents of
<a class="EXT" href="../easource/pfcoff.htm#PFCOFF_FILE_HEADER">PFCOFF_FILE_HEADER.Machine</a>
which should be one of the words with value <code>0x0000, 0x014C, 0x014D, 0x014E, 0x0200, 0x8664</code>.</p>
<p>As an example of a COFF program see the test <a class="EXT" href="../eatests/t8850.htm">t8850</a> (for Windows)
or <a class="EXT" href="../eatests/t9000.htm">t9000</a> (for Linux).

<h3 id="FormatLIBCOF"><a href="#PgmFormats">&uarr; LIBCOF</a></h3>
<p>COFF library format is described in <a class="EXTL" href="links.htm#COFFlib">[COFFlib]</a>.</p>
<p>Default options for <code>PROGRAM FORMAT=LIBCOF</code> are:</p>
<pre>PROGRAM FORMAT=LIBCOF,OUTFILE=%^PROGRAM.lib,MODEL=FLAT,WIDTH=32</pre>
<p>Default segments are the same as in <a href="#COFFdefaultSegments">COFF format</a>.</p>
<blockquote>These PROGRAM options are irrelevant:
DLLCHARACTERISTICS, ENTRY, FILEALIGN, ICONFILE, IMAGEBASE, MAJOROSVERSION, MAJORSUBSYSTEMVERSION,
MAJORIMAGEVERSION, MAJORLINKERVERSION, MINOROSVERSION,
MINORSUBSYSTEMVERSION, MINORIMAGEVERSION, MINORLINKERVERSION,
WIN32VERSIONVALUE, SECTIONALIGN, SIZEOFHEAPCOMMIT, SIZEOFHEAPRESERVE,
SIZEOFSTACKCOMMIT, SIZEOFSTACKRESERVE, STUBFILE, SUBSYSTEM.</blockquote>
<p>COFF library is identified by the signature <code>!&lt;arch&gt;</code> followed with byte <code>0x0A</code>.</p>
<p>You can create the library by linking from other object files.
Modules, which will be stored to the library, should be assembled beforehand to files
in COFF format (or OMF or ELF). If the program, which creates the library,
contains some code (beside the LINK statements), it will be assembled and stored as the first library module.
Modules which do not declare any global symbol, will not be included in the library at all.
Example of COFF library linked from 3 modules:</p>
<pre>MyLib: PROGRAM FORMAT=LIBCOF
         LINK "Module1.obj", "Module2.obj", "Module3.obj"
       ENDPROGRAM MyLib</pre>
<p>&euro;ASM does not create the longer version of import libraries but
both short and long versions are accepted by the linker.
Example of a program  creating import library in short COFF format:</p>
<pre>ImpLib: PROGRAM FORMAT=LIBCOF
         IMPORT LIB="kernel32.dll",TerminateProcess,TerminateThread
         IMPORT LIB="user32.dll",CreateCursor,CreateIcon,CreateMenu
        ENDPROGRAM ImpLib:</pre>
<p>As an example of a LIBCOF library see the test <a class="EXT" href="../eatests/t9150.htm">t9150</a>.</p>

<h3 id="FormatELF"><a href="#PgmFormats">&uarr; ELF</a></h3>
<p>ELF alias <dfn>Executable and Linkable Format</dfn> is the file format used in Linux.
There are three kinds of ELF files: <ul>
<li>Linkable object file, in &euro;ASM created as PROGRAM FORMAT=ELF</li>
<li>Executable file, created as PROGRAM FORMAT=ELFX </li>
<li>Dynamic Shared Object, created as PROGRAM FORMAT=ELFSO</li>
</ul></p>
<p>Default options for <code>PROGRAM FORMAT=ELF</code> are</p>
<pre>Name: PROGRAM FORMAT=ELF, OUTFILE=%^PROGRAM.o, MODEL=FLAT, WIDTH=32, \
      FILEALIGN=16</pre>
<p>ELF is an object (linkable) file with extension <q>.o</q>.
It has the default segments <code>[.text], [.rodata], [.data], [.bss]</code>.
The segments are called <dfn>sections</dfn> in <a class="EXTL" href="links.htm#ELF64">[ELF]</a> documentation.
Beside those regular <em>sections</em> &euro;ASM also creates service sections <code>[.symtab], [.strtab], [.shstrtab], [.rela.text], [.rela.data]</code>.
See <a class="EXT" href="../eatests/t9750.htm">t9750</a> as an example of ELF object.</p>
<blockquote>These PROGRAM options are irrelevant:
DLLCHARACTERISTICS, ENTRY, ICONFILE, IMAGEBASE, MAJOROSVERSION, MAJORSUBSYSTEMVERSION,
MAJORIMAGEVERSION, MAJORLINKERVERSION, MINOROSVERSION,
MINORSUBSYSTEMVERSION, MINORIMAGEVERSION, MINORLINKERVERSION,
WIN32VERSIONVALUE, SECTIONALIGN, SIZEOFHEAPCOMMIT, SIZEOFHEAPRESERVE,
SIZEOFSTACKCOMMIT, SIZEOFSTACKRESERVE, STUBFILE, SUBSYSTEM.</blockquote>

<h3 id="FormatELFX"><a href="#PgmFormats">&uarr; ELFX</a></h3>
<p>This is an executable program for Linux. It has the default file extension <q>.x</q>,
if not prescribed otherwise by PROGRAM OUTFILE=. </p>
<p>The format ELFX creates segment groups <code>[LOAD.HDR], [LOAD.CODE], [LOAD.RODATA], [LOAD.DATA]</code>,
see for instance the test <a class="EXT" href="../eatests/t9850.htm">t9850</a>.
The groups are called <em>program headers</em> in <a class="EXTL" href="links.htm#ELF64">[ELF]</a> documentation
or in Linux tools such as <code>readelf</code>.</p>
<pre>Name: PROGRAM FORMAT=ELFX, OUTFILE=%^PROGRAM.x, MODEL=FLAT, WIDTH=32, \
    ENTRY=, IMAGEBASE=4M, FILEALIGN=16, SECTIONALIGN=4K</pre>
<p>The default extension is <q>.x</q>. Parameter ENTRY= is mandatory, it specifies the entry point of the program.</p>
<blockquote>These PROGRAM options are irrelevant:
DLLCHARACTERISTICS, ICONFILE, MAJOROSVERSION, MAJORSUBSYSTEMVERSION,
MAJORIMAGEVERSION, MAJORLINKERVERSION, MINOROSVERSION,
MINORSUBSYSTEMVERSION, MINORIMAGEVERSION, MINORLINKERVERSION,
WIN32VERSIONVALUE, SIZEOFHEAPCOMMIT, SIZEOFHEAPRESERVE,
SIZEOFSTACKCOMMIT, SIZEOFSTACKRESERVE, STUBFILE, SUBSYSTEM.</blockquote>

<h3 id="FormatELFSO"><a href="#PgmFormats">&uarr; ELFSO</a></h3>
<p>This is an DSO - Dynamic Shared Object for Linux.
EuroAssembler creates DSO with the file extension <q>.so</q> but it does not dynamically link them.
&euro;ASM does not encompass capability of specialized Linux dynamic linker <code>GNU ld</code>.
When a DSO is linked to an ELFX program, it is linked only statically.
</p>
<pre>Name: PROGRAM FORMAT=ELFSO, OUTFILE=%^PROGRAM.so, MODEL=FLAT, WIDTH=32, \
    IMAGEBASE=4M, FILEALIGN=4K, SECTIONALIGN=4K</pre>

<blockquote>These PROGRAM options are irrelevant:
DLLCHARACTERISTICS, ENTRY, ICONFILE, MAJOROSVERSION, MAJORSUBSYSTEMVERSION,
MAJORIMAGEVERSION, MAJORLINKERVERSION, MINOROSVERSION,
MINORSUBSYSTEMVERSION, MINORIMAGEVERSION, MINORLINKERVERSION,
WIN32VERSIONVALUE, SECTIONALIGN, SIZEOFHEAPCOMMIT, SIZEOFHEAPRESERVE,
SIZEOFSTACKCOMMIT, SIZEOFSTACKRESERVE, STUBFILE, SUBSYSTEM.</blockquote>


<h3 id="FormatPE"><a href="#PgmFormats">&uarr; PE</a></h3>
<p>Portable executable file format PE for Windows is described in the document <a class="EXTL" href="links.htm#MS_PECOFF">[MS_PECOFF]</a>.
Default options for <code>PROGRAM FORMAT=PE</code> are</p>
<pre>Name: PROGRAM FORMAT=PE,OUTFILE=%^PROGRAM.exe,MODEL=FLAT,WIDTH=32,IMAGEBASE=4M,FILEALIGN=512,SECTIONALIGN=4K, \
              SUBSYSTEM=CON,ICONFILE="euroasm.ico",MAJORLINKERVERSION=1,MINORLINKERVERSION=0,ENTRY=,          \
              MAJOROSVERSION=4,MINOROSVERSION=0,MAJORIMAGEVERSION=1,MINORIMAGEVERSION=0,                      \
              MAJORSUBSYSTEMVERSION=4,MINORSUBSYSTEMVERSION=0,WIN32VERSIONVALUE=0,DLLCHARACTERISTIC=0x000F,   \
              SIZEOFSTACKRESERVE=1M,SIZEOFSTACKCOMMIT=8K,SIZEOFHEAPRESERVE=4M,SIZOHEAPCOMMIT=1M</pre>
<p>Default segments are the same as in <a href="#COFFdefaultSegments">COFF format</a>.</p>
<p>PE file begins with DOS program (stub) in MZ format, which is executed when the program is not launched in MS-Windows.
At the file address <a class="EXT" href="../easource/pfmz.htm#PFMZ_DOS_HEADER">PFMZ_DOS_HEADER.e_lfanew</a>
it expects the <dfn id="PE" title="PE file signature">PE format signature</dfn> with bytes <code>'P','E',0,0</code>.</p>
<blockquote>Older file format with <dfn id="NE" title="NE format signature">NE (New Executable) signature</dfn>,
used in 16-bit Windows and OS/2, is not supported by &euro;ASM.</blockquote>
<p>COFF file header is followed by <a class="EXT"
href="../easource/pfpe.htm#PFPE_OPTIONAL_HEADER32">PFPE_OPTIONAL_HEADER</a>. Almost all its fields
are configurable with PROGRAM options.
<br/><code>PROGRAM ENTRY=</code> must be explicitly specified in PE format.
<br/>Option <code>PROGRAM STUBFILE=</code> specifies the file name of 16-bit MZ program used when the program runs in DOS.
If it is left empty, &euro;ASM will use its own built-in stub, which reports error message
<em>This program was launched in DOS but it requires Windows.</em> and terminates.
<br/>Factory default option <code>ICONFILE="euroasm.ico"</code> specifies the file name ot the icon
<img src="../objlib/euroasm.ico" width="16" height="16"/>,
which will be built in the resource section of linked PE file.
It visually represents the compiled file in Desktop or in Windows Explorer.</p>
<blockquote>This parameter is ignored if any resource file is explicitly linked into PE
(Explorer will then use the first icon found in the PE resources).
If the ICONFILE= option is explicitly defined as empty, and if no resources are linked,
the resource section [.rsrc] will be omitted from PE file completely.</blockquote>
<p>Optional header is followed with 16 <dfn id="PECOFFdir" title="PECOFF directories">
special directory entries</dfn> which identify sections with special purposes (other than
ordinary segment purposes CODE, DATA, BSS). See the last 16 lines in
<a href="#SegmentPURPOSEeq">Segment purpose table</a>, starting with EXPORT.</p>
<p>EuroAssembler natively supports only few of special PE directories:
<dl><dt>EXPORT</dt><dd>automatically creates section [.edata] with the table of exported symbols,
if they are declared.</dd>
<dt>IMPORT</dt><dd>automatically creates section [.idata] with the table of imported symbols names and ordinals.</dd>
<dt>RESOURCE</dt><dd>is created when a resource file is linked to the executable
or when the program option ICONFILE= specifies an existing icon.</dd>
<dt>BASERELOC</dt><dd>contains table of relocation which must be applied by the loader
when the executable could not be loaded at the preferred VA specified by the program option IMAGEBASE=.</dd>
<dt>IAT</dt><dd>import address table is created in section [.idata], same as the special directory IMPORT.
Concatenation of tables IAT, IMPORT and thunk proxy jumps to the one common section [.idata]
reduces the size of image.</dd>
</dl>
<p>Other special directories are not supported by this EuroAssembler version.
Nevertheless, their segment may be created explicitly, their contents created
manually or by some third-party tool and emitted to the segment with
<a href="#INCLUDEBIN">INCLUDEBIN</a> or directly with <a href="#D">Data definition</a> statements.
If segment parameter PURPOSE= complies with the name in purpose <a href="#SegmentPURPOSEeq">table</a> (case insensitive),
the corresponding directory entry in PE optional header will be created, covering the whole segment contents.
Example:
<pre>[.cormeta] SEGMENT PURPOSE=CLR
 D '&lt;compatibility xmlns=&quot;urn:schemas-microsoft-com:compatibility.v1&quot;&gt;'
 D '  &lt;application&gt;'
 D '     &lt;!-- A list of all Windows versions that this application is designed to work with.&gt;'
 D '   &lt;/application&gt;'
 D ' &lt;/compatibility&gt;'
</pre>
<p>When EUROASM option DEBUG=ENABLED at the ENDPROGRAM pseudoinstruction,
symbol table is appended to the PECOFF image.</p>
<blockquote>Debuggers should be able to retrieve symbol names from the debugged executable
and associate them with disassembled source lines. Unfortunately, none of tools which I tried,
was able to exploit the symbol table from PE.</blockquote>


<h3 id="FormatDLL"><a href="#PgmFormats">&uarr; DLL</a></h3>
<p>File format DLL is almost identical with the format PE, with a few minor differences:
<br/>File header field <a class="EXT" href="../easource/pfcoff.htm#PFCOFF_FILE_HEADER">
PFCOFF_FILE_HEADER.Characteristic</a> if flagged with <code>pfcoffFILE_DLL = 0x2000</code>,
<br/>default file extension and image base are:</p>
<pre>Name: PROGRAM FORMAT=DLL,OUTFILE=%^PROGRAM.dll,IMAGEBASE=256M</pre>
<p>option <code>ENTRY=</code> is optional in DLL.</p>
<p>Default segments are the same as in <a href="#COFFdefaultSegments">COFF format</a>.</p>
<p>Dynamically linkable symbols should be explicitly declared with exported scope.
<br/>Pseudoinstruction <a href="#EXPORT">EXPORT</a> supports dynamic
<dfn id="DllForward" title="DLL forwarding">DLL forwarding</dfn>
of exported function to a different function in other DLL, using the EXPORT key operands
FWD= and LIB=. See the test <a class="EXT" href="../eatests/t9475.htm">t9475</a> as an example.</p>
<p>Format DLL is sometimes used as <dfn id="ResourceDLL" title="Resource DLL">resource library</dfn>
which contains only [.rsrc] section, typically a collection of icons.
This is achieved by linking of compiled resource file, as created by a third party resource compiler.
Example of resource-only DLL, which contains 3 icons, can be found in tests
<a class="EXT" href="../eatests/t9485.htm">t9485</a>
and <a class="EXT" href="../eatests/t9536.htm">t9536</a>.</p>


<h3 id="FormatRSRC"><a href="#PgmFormats">&uarr; RSRC</a></h3>
<p><dfn>Microsoft resources</dfn> is the common name for multimedia data, such as bitmap pictures, icons, cursor shapes, fonts etc.
The resource used in GUI program are described in <dfn>resource script</dfn> as a tree referring individual graphic files.
Typical script is a plain text file with extension <q>.rc</q> and it should be converted by a <dfn>resource compiler</dfn>
into a binary resource file with extension <q>.res</q>, which is linkable by &euro;ASM or other linkers.
Its format is described in <a class="EXTL" href="links.htm#RSRC">[RSRC]</a>.</p>
<p><del><code>MyCompiledResource PROGRAM FORMAT=RSRC</code></del> does not work,
EuroAssembler cannot compile resource scripts. Use third party tool instead, such as
<a class="EXTL" href="links.htm#MS_RC">[MS_RC]</a>, <a class="EXTL" href="links.htm#GoRC">[GoRC]</a>,
 or <a class="EXTL" href="links.htm#ResourceHacker">[ResourceHacker]</a>.</p>
<p>When a resource file is linked to the PE or DLL image created by &euro;ASM, program option <code>ICONFILE=</code>
is ignored. The file is converted by &euro;ASM to an internal PECOFF binary-tree structure in the special section [.rsrc]
and referred with an optional-header directory entry <a href="#SegmentPURPOSEeq">RESOURCE</a>.</p>

<h3 id="FormatWidth"><a href="#PgmFormats">&uarr; Width of program formats</a></h3>
<p>The width of output files linked by EuroAssembler is determined by the program option WIDTH= and it defaults
to 32 in ELF and COFF-based formats. To create a 64-bit program ELF, ELFX, ELFSO, PE, DLL, COFF or LIBCOF, the program width must be
explicitly specified. 64-bit CPU should be enabled, too (EUROASM CPU=X64).

<table><caption>Differences between PE-COFF formats generated by EuroAssembler</caption>
<tr><th>Member</th><th>PROGRAM WIDTH=16</th><th>PROGRAM WIDTH=32</th><th>PROGRAM WIDTH=64</th></tr>
<tr><td><a class="EXT" href="../easource/pfcoff.htm#PFCOFF_FILE_HEADER">PFCOFF_FILE_HEADER.Machine</a></td>
<td>0x014C (Intel 386)</td><td>0x014C (Intel 386)</td><td>0x8664 (AMD64)</tr>
<tr><td><a class="EXT" href="../easource/pfcoff.htm#PFCOFF_FILE_HEADER">PFCOFF_FILE_HEADER.Characteristics:32BIT_MACHINE</a></td>
<td>0 (false)</td><td>0x0100 (true)</td><td>0 (false)</td></tr>
<tr><td><a class="EXT" href="../easource/pfcoff.htm#PFCOFF_FILE_HEADER">PFCOFF_FILE_HEADER.Characteristics:LARGE_ADDRESS_AWARE</a></td>
<td>0 (false)</td><td>0 (false)</td><td>0x0020 (true)</td></tr>
<tr><td><a class="EXT" href="../easource/pfpe.htm#PFPE_OPTIONAL_HEADER32">PFPE_OPTIONAL_HEADER32.Magic</a></td>
<td>0x010B (PE32)</td><td>0x010B (PE32)</td><td>0x020B (PE32+)</td></tr>
<tr><td>SIZE# <a class="EXT" href="../easource/pfpe.htm#PFPE_OPTIONAL_HEADER32">PFPE_OPTIONAL_HEADER32</a></td>
<td>224</td><td>224</td><td>240</td></tr></table>
<hr/>
<h2 id="EaFn"><a href="#top">&uarr; EuroAssembler functions</a></h2>
<h3><a href="#EaFnPreprocessing">Preprocessing &darr;</a></h3>
<h3><a href="#EaFnRefactoring">Refactoring &darr;</a></h3>
<h3><a href="#EaFnAsm">Assembler &darr;</a></h3>
<h3><a href="#EaFnAsmDbg">Assembly debugging &darr;</a></h3>
<h3><a href="#EaFnLink">Linker &darr;</a></h3>
<h3><a href="#EaFnLib">Librarian &darr;</a></h3>
<h3><a href="#EaFnConvert">Object convertor &darr;</a></h3>
<h3><a href="#EaFnMake">Makefile manager &darr;</a></h3>
<h3><a href="#EaFnOptimize">Optimisation &darr;</a></h3>
<h3><a href="#EaFnBegin">Where to begin &darr;</a></h3>
<p>This chapter describes EuroAssembler capabilities.</p>

<h3 id="EaFnPreprocessing" title="Preprocessing"><a href="#EaFn">&uarr; Preprocessing</a></h3>
<p>Many assemblers provide the tools which help programmer with tedious and repetitive work,
they are called <dfn>macroassemblers</dfn>.
Preprocessing (macro) apparatus in EuroAssembler is recognizable by the percent sign <kbd>%</kbd>
prefixed to pseudoinstructions which control generating of repeated
blocks of source code (<a href="#pcREPEAT">%REPEAT</a>, <a href="#pcWHILE">%WHILE</a>,
<a href="#pcFOR">%FOR</a>, <a href="#pcMACRO">%MACRO</a>),
conditional assembly (<a href="#pcIF">%IF</a>, <a href="#pcCOMMENT">%COMMENT</a>),
assembly-time debugging (<a href="#pcDISPLAY">%DISPLAY</a>)
and assignment and expansion of preprocessing %variables (<a href="#pcSET">%SET*</a> family).
</p>
<p>This set of tools manipulates with the source text before it is submitted to the final
assembly processing (to the <dfn>plain assembler</dfn>, which is not aware of preprocessing apparatus at all).</p>
<p>Some compilers perform preprocessing in a special 0-th pass, which takes the input source file
and emits plain assembly source. Preprocessed intermediate file can be manually inspected then.</p>

<p>EuroAssembler utilizes a different approach: instead of <strong>preprocessing the source file</strong>
as whole at once it will preprocess <strong>statement by statement</strong> in each assembly pass.
This allows to manipulate with data which dynamically change and which are not fixed before
&euro;ASM was given the opportunity to pass through the source program at least once, for instance
the distance between labels, size of not-defined-yet structures and segments etc.</p>

<blockquote>When &euro;ASM reads a line of source text, first it searches for percent character
<kbd>%</kbd>. If found, it inspects the immediately following character(s)
and prepares a copy of the source line for the <i>plain assembler</i>, expanded
according to the following rules:
<table>
<tr><th>What follows after <kbd>%</kbd></th><th>Example</th><th>What will replace it</th></tr>
<tr><th><kbd>%</kbd></th><td>%%</td><td>self-escaped single percent sign <code>%</code></td></tr>
<tr><th><kbd>&amp;</kbd></th><td>%&amp;</td><td><a href="#pcam">suboperation size/length</a></td></tr>
<tr><th><kbd>.</kbd></th><td>%.</td><td><a href="#pcpt">expansion counter</a></td></tr>
<tr><th><kbd>:</kbd></th><td>%:</td><td><a href="#pcco">macro label</a></td></tr>
<tr><th><kbd>!</kbd></th><td>%!formal</td><td><a href="#InvertedCondition">inverted condition</a>, e.g. <code>NC</code></td></tr>
<tr><th><kbd>*</kbd></th><td>%*</td><td><a href="#pcas">macro ordinal operand list</a></td></tr>
<tr><th><kbd>#</kbd></th><td>%#</td><td><a href="#pcha">number of macro ordinal operands</a></td></tr>
<tr><th><kbd>=*</kbd></th><td>%=*</td><td><a href="#pceqas">macro keyword operand list</a></td></tr>
<tr><th><kbd>=#</kbd></th><td>%=#</td><td><a href="#pceqha">number of macro keywords</a></td></tr>
<tr><th><kbd>^identifier</kbd></th><td>%^Width</td><td><a href="#SystemVariables">system variable</a> value (digits 16, 32 or 64}</td></tr>
<tr><th>decimal digit(s)</th><td>%12</td><td>12th <a href="#pc1">ordinal macro operand</a> value</td></tr>
<tr><th rowspan="3">letter(s)</th>
<td>%If</td><td><a href="#PseudoInstructions">pseudoinstruction</a> name is left unexpanded <code>%If</code></td></tr>
<tr><td>%Size</td><td>if it is <a href="#FormalVariables">formal operand</a> of %FOR or %MACRO, it will be expanded to its value</td></tr>
<tr><td>%OtherId</td><td>otherwise it is expanded as
<a href="#UserVariables">user-defined</a> preprocessing variable</td></tr>
</table>
For more details about scope of %variable expansion see the source text
<a class="EXT" href="../easource/var.htm#VarExpand">VarExpand</a>.
</blockquote>
<p>The relation between preprocessing and the plain assembly is similar to the relation
between Javascript and the plain HTML text in internet browsers.</p>
<p>Proper function of &euro;ASM preprocessing can be checked in the listing, by enabling
options <code>EUROASM LISTVAR=ENABLE, LISTREPEAT=ENABLE, LISTMACRO=ENABLE</code>.</p>


<h3 id="EaFnRefactoring" title="Refactoring"><a href="#EaFn">&uarr; Refactoring</a></h3>
<h4><a href="#EaFnRfInlineCode">Inline code &darr;</a></h4>
<h4><a href="#EaFnRfBypassedProc">Bypassed PROC &darr;</a></h4>
<h4><a href="#EaFnRfProcOwnSection">PROC in own section &darr;</a></h4>
<h4><a href="#EaFnRfProc1">PROC1 &darr;</a></h4>
<h4><a href="#EaFnRfProcIncluded">PROC in INCLUDE &darr;</a></h4>
<h4><a href="#EaFnRfProcStaticLink">Statically linked PROC &darr;</a></h4>
<h4><a href="#EaFnRfProcDynamicLink">Dynamically linked PROC &darr;</a></h4>
<h4><a href="#EaFnRfInlineMacro">Inline macro &darr;</a></h4>
<h4><a href="#EaFnRfProcMacro">Macro calling PROC &darr;</a></h4>
<h4><a href="#EaFnRfSemiinlineMacro">Semiinline macro &darr;</a></h4>

<p>This chapter demonstrates various methods how we can break up the program functionality
to small subprogrames in EuroAssembler.</p>
<p>Let's suppose that we need a function which calculates the third power of input positive integer
number. The result should fit to 32 bits, otherwise the program will report an overflow and abort.</p>
<p>Assuming 32-bit mode and the input number loaded in register EAX,
the solution uses instruction <a class="EXT" href="../easource/iig.htm#IigMUL">MUL</a>
(unsigned multiplication) two times.</p>

<h4 id="EaFnRfInlineCode"><a href="#EaFnRefactoring">&uarr; Inline code</a></h4>
<p>Straightforward solution <strong>inserts the code directly</strong> to the main program flow.</p>
<pre>    ; EAX contains the input number N.
    MOV ECX,EAX ; Copy the input value N to the register ECX.
    MUL ECX     ; Let EDX:EAX = N*N
    JC Abort:   ; CF=OF=1 when EDX is nonzero (32-bit overflow).
    MUL ECX     ; Let EDX:EAX = N*N*N
    JC Abort:   ; Abort on overflow.
    ; EAX now contains N<sup>3</sup>, continue the main program flow.
</pre>

<h4 id="EaFnRfBypassedProc"><a href="#EaFnRefactoring">&uarr; Bypassed PROC</a></h4>
<p>When such calculation is needed more than once, we should consider
<dfn>refactoring</dfn> the direct code to a subprocedure which could be called
repeatedly. We will insert the procedure named <code>Cube</code> to the program flow
when its function is needed for the first time. Insertion of callable procedure
requires a bypass skip. The procedure should be also accompanied with remarks which document its function.</p>
<pre>       ; EAX contains the input number N.
       CALL Cube:  ; Invoke the function which calculates N<sup>3</sup>.
       JC Abort:   ; Abort on overflow.
       JMP Bypass: ; Skip the function code.
Cube PROC  ; Define a function which calculates 3rd power of N.
; Input:   EAX=integer number N.
; Output:  CF=OF=0, EAX=N<sup>3</sup>, ECX=N, EDX=0.
; Overflow:CF=OF=1, EAX,ECX,EDX undefined.
       MOV ECX,EAX ; Copy the input value N to the register ECX.
       MUL ECX     ; Let EDX:EAX = N*N
       JC .Abort   ; CF=OF=1 when EDX is nonzero (32-bit overflow).
       MUL ECX     ; Let EDX:EAX = N*N*N
.Abort:RET         ; CF=OF=1 when EDX is nonzero (32-bit overflow).
     ENDPROC Cube
Bypass: ; EAX now contains N<sup>3</sup>, continue the main program flow.
</pre>

<h4 id="EaFnRfProcOwnSection"><a href="#EaFnRefactoring">&uarr; PROC in own section</a></h4>
<p>The instruction <code>JMP Bypass:</code> could be spared if the procedure code
would have been defined somewhere else, below the main program flow.
This can be achieved with emitting the procedure to a different code section (for instance <code>[Subproc]</code>).</p>
<pre>       ; EAX contains the input number N.
       CALL Cube:  ; Invoke the function which calculates N<sup>3</sup>.
       JC Abort:   ; Abort on overflow.
%CurrentSect %SET %^Section ; Backup the current section name to a variable.
[Subproc]  ; Switch emitting to a different code section.
Cube PROC  ; Define a function which calculates 3rd power of N.
; Input:   EAX=integer number N.
; Output:  CF=OF=0, EAX=N<sup>3</sup>, ECX=N, EDX=0.
; Overflow:CF=OF=1, EAX,ECX,EDX undefined.
       MOV ECX,EAX ; Copy the input value N to the register ECX.
       MUL ECX     ; Let EDX:EAX = N*N
       JC .Abort   ; CF=OF=1 when EDX is nonzero (32-bit overflow).
       MUL ECX     ; Let EDX:EAX = N*N*N
.Abort:RET         ; CF=OF=1 when EDX is nonzero (32-bit overflow).
     ENDPROC Cube
[%CurrentSect]     ; Return to the original code section.
        ; EAX now contains N<sup>3</sup>, continue the main program flow.
</pre>

<h4 id="EaFnRfProc1"><a href="#EaFnRefactoring">&uarr; PROC1</a></h4>
<p>Rather than manual section switch we could also utilize &euro;ASM
block <code>PROC1..ENDPROC1</code> which will switch to a different
section [@RT1] and return to the original section automatically.</p>
<pre>       ; EAX contains the input number N.
       CALL Cube:  ; Invoke the function which calculates N<sup>3</sup>.
       JC Abort:   ; Abort on overflow.
Cube PROC1 ; Define a function which calculates 3rd power of N in section [@RT1].
; Input:   EAX=integer number N.
; Output:  CF=OF=0, EAX=N<sup>3</sup>, ECX=N, EDX=0.
; Overflow:CF=OF=1, EAX,ECX,EDX undefined.
       MOV ECX,EAX ; Copy the input value N to the register ECX.
       MUL ECX     ; Let EDX:EAX = N*N
       JC .Abort   ; CF=OF=1 when EDX is nonzero (32-bit overflow).
       MUL ECX     ; Let EDX:EAX = N*N*N
.Abort:RET         ; CF=OF=1 when EDX is nonzero (32-bit overflow).
     ENDPROC1 Cube ; End of subprocedure in section [@RT1]. Return to [.text].
     ; EAX now contains N<sup>3</sup>, continue the main program flow.
</pre>

<h4 id="EaFnRfProcIncluded"><a href="#EaFnRefactoring">&uarr; PROC in INCLUDE</a></h4>
<p>Definition of function Cube at the place where it is used is good
for understandability. On the other hand, when there are more such definitions,
they clutter the main program thread. It could be more clearly organized
if those helper functions were put away to a different file,
for instance <q>functions.inc</q>. This file will be
<strong>included</strong> to the main source file at assembly-time.</p><pre>
       INCLUDE "functions.inc" ; File with <code>Cube: PROC</code> source definition.
       ; EAX contains the input number N.
       CALL Cube:  ; Invoke the function which calculates N<sup>3</sup>.
       JC Abort:   ; Abort on overflow.
       ; EAX now contains N<sup>3</sup>, continue the main program flow.
</pre>

<h4 id="EaFnRfProcStaticLink"><a href="#EaFnRefactoring">&uarr; Statically linked PROC</a></h4>
<p>Functions defined in the included file <q>functions.inc</q> can be
wrapped to a block(s) <code>functions PROGRAM</code>..<code>ENDPROGRAM</code>
and assembled separately to an OMF, ELF or COFF object file <q>functions.obj</q>,
eventually to a library. The function name (<code>Cube</code>) must be declared
as GLOBAL or PUBLIC in the object file, and it must be declared as GLOBAL or EXTERN
in the main file.
Instead of explicit GLOBAL declaration it may also be specified with the double colon
(<code>Cube::</code>). The assembled object then will be
<strong>statically linked</strong> to the main program at link-time.</p><pre>
       LINK "functions.obj" ; Object file with assembled code of function Cube.
       ; EAX contains the input number N.
       CALL Cube:: ; Invoke the external function which calculates N<sup>3</sup>.
       JC Abort:   ; Abort on overflow.
       ; EAX now contains N<sup>3</sup>, continue the main program flow.
</pre>

<h4 id="EaFnRfProcDynamicLink"><a href="#EaFnRefactoring">&uarr; Dynamically linked PROC</a></h4>
<p>Functions defined in included file <q>functions.inc</q> can be
wrapped to a block(s) <code>functions PROGRAM</code>..<code>ENDPROGRAM</code>
and assembled separately to a dynamically linked library file <q>functions.dll</q>,
The function name (<code>Cube</code>) must be declared
as EXPORT in the library file, and as IMPORT in the main executable file.
The assembled function in DLL program then will be
<strong>dynamically bound</strong> to the main program at run-time.</p><pre>
       IMPORT Cube, LIB="functions.dll"
       ; EAX contains the input number N.
       CALL Cube:: ; Invoke the DLL function which calculates N<sup>3</sup>.
       JC Abort:   ; Abort on overflow.
       ; EAX now contains N<sup>3</sup>, continue the main program flow.
</pre>

<h4 id="EaFnRfInlineMacro"><a href="#EaFnRefactoring">&uarr; Inline macro</a></h4>
<p>An alternative approach to the repeated <a href="#EaFnRfInlineCode">inline code</a>
is utilizing a macro which will expand itself whenever the functionality is requested.</p>
<p>Statements which define the macro need not be bypassed, because they don't emit any code,
but the macrodefinition must appear before the macro is used. The definition could
be put aside to an included file as well, similary to <a href="#EaFnRfProcIncluded">PROC in INCLUDE</a> method.</p>
<pre>
Cube %MACRO
       MOV ECX,EAX ; Copy the input value N to the register ECX.
       MUL ECX     ; Let EDX:EAX = N*N
       JC Abort%.: ; CF=OF=1 when EDX is nonzero (32-bit overflow).
       MUL ECX     ; Let EDX:EAX = N*N*N
Abort%.:           ; Label name is modified by <code>%.</code> variable, which increments in each macro expansion.
     %ENDMACRO Cube
     ; EAX contains the input number N.
     Cube          ; Expansion of the macro.
     JC Abort:     ; Abort on overflow.
     ; EAX now contains N<sup>3</sup>, continue the main program flow.
</pre>

<h4 id="EaFnRfProcMacro"><a href="#EaFnRefactoring">&uarr; Macro calling PROC</a></h4>
<p>Inline macros are fast but each invocation repeats the whole function code.
Size of program can be reduced if the macro calls the procedure with function code,
which also can be put aside to <q>functions.inc</q>. The function of macro
is then limited to process eventual parameters and to hide the calling convention
(no parameters are actually used in our simple example, thou).</p>
<pre>
     INCLUDE "functions.inc" ; File with Cube: PROC source definition.
Cube %MACRO       ; Definition of the macro Cube.
       CALL Cube: ; Calling the procedure Cube:
     %ENDMACRO Cube
     ; EAX contains the input number N.
     Cube         ; Invoke macro which calls the included PROC.
     JC Abort     ; Abort on overflow.
     ; EAX now contains N<sup>3</sup>, continue the main program flow.
</pre>

<h4 id="EaFnRfSemiinlineMacro"><a href="#EaFnRefactoring">&uarr; Semiinline macro</a></h4>
<p>Disadvantage of previous method is that we have to maintain two blocks of code:
macro definition and procedure definition. &euro;ASM provides procedure block PROC1
which is assembled only once, even if the macro, which contains it, is invoked repeatedly.
Thank to this, the procedure code is emitted only once, when the macro is invoked
for the first time, and if the macro is never invoked, the code is not emitted at all.
Macrolibrary with such <strong>semiinline macros</strong> can be included to any program
and does not increase the final code if the macro is not used (expanded) in the program.</p>
<p>This method is preferred in most macrolibraries <a class="EXT" href="../maclib/">shipped</a> with EuroAssembler.</p>
<pre>
Cube %MACRO          ; Definition of the semiinline macro Cube.
       CALL Cube:    ; Calling the procedure Cube:
 Cube: PROC1         ; The PROC1 block is assembled only once on first macro invocation.
         MOV ECX,EAX ; Copy the input value N to the register ECX.
         MUL ECX     ; Let EDX:EAX = N*N
         JC .Abort:  ; CF=OF=1 when EDX is nonzero (32-bit overflow).
         MUL ECX     ; Let EDX:EAX = N*N*N
  .Abort:RET         ; CF=OF=1 when EDX is nonzero (32-bit overflow).
       ENDPROC1 Cube:
     %ENDMACRO Cube
     ; EAX contains the input number N.
     Cube            ; Invoke of macro which calls the embedded PROC1.
     JC Abort        ; Abort on overflow.
     ; EAX now contains N<sup>3</sup>, continue the main program flow.
</pre>


<h3 id="EaFnAsm" title="Assembler"><a href="#EaFn">&uarr; Assembler</a></h3>
<h4><a href="#EaFnSrc">Source envelope &darr;</a></h4>
<h4><a href="#EaFnChain">Chained programs &darr;</a></h4>
<h4><a href="#EaFnNest">Nested programs &darr;</a></h4>
<p>This chapter gives a closer look how a program block of statements is processed
by EuroAssembler.</p>
<h4 id="EaFnSrc" title="Envelope"><a href="#EaFnAsm">&uarr; Source envelope</a></h4>
<p>Consider a plain text file <q>src.asm</q> submitted to assembler:</p>
<pre>
 DB 'This source "src.asm" has'
 DB ' no PROGRAM statement.',13,10
 DB 'EuroAssembler will use '
 DB 'a fictive envelope instead.'
</pre>
<p>As no <code>PROGRAM..ENDPROGRAM</code> block is defined in this source,
the output format of &euro;ASM object file is configured only by [PROGRAM] section in the configuration file
<q>euroasm.ini</q>, or by built-in default, which is <code>PROGRAM FORMAT=BIN,MODEL=TINY,WIDTH=16</code>.</p>
<p>EuroAssembler formally wraps each source file into the two
fictive <dfn>envelope</dfn> statements PROGRAM and ENDPROGRAM.
Prefixed envelope PROGRAM statement derives its
label (module name) from the source file name, cutting off its extension.
Thus it will assemble the source <q>src.asm</q> to a data file <q>src.bin</q>.
This behaviour is compatible with most other assemblers.</p>
<blockquote><p>If the source file name starts with a digit, for instance <q>123.asm</q>,
such label is not acceptable by &euro;ASM, so the module name will be prefixed with grave <kbd>`</kbd>
and source <q>123.asm</q> is assembled to <q>`123.bin</q>.</p>
<p>Similary, when the label of PROGRAM statement contains <kbd>?</kbd>
or other letters unacceptable by filesystem, such character in the module file name
will be replaced with an underscore <kbd>_</kbd>.
Statement <code>IsNumlockOn? PROGRAM FORMAT=COM</code> will produce program
named <q>IsNumlockOn_.com</q>.</p>
<p>&euro;ASM uses ANSI version of Windows API for dealing with file names,
so I recomend to abstain from using national characters outside the current codepage in
source file names.</p></blockquote>
<p>When the source file is loaded in the memory, &euro;ASM begins to read the source,
starting with the envelope statement <code>PROGRAM</code>. When the corresponding
<code>ENDPROGRAM</code> is found, an <dfn>assembly pass</dfn> is over.
&euro;ASM checks all symbols, which might have been defined in the program,
and looks whether their offset is marked <dfn>fixed</dfn>, i. e. it did not change
between passes. If at least one symbol has its offset not fixed yet,
another assembly pass is needed and &euro;ASM goes back to the <code>PROGRAM</code>
statement. When all symbols are fixed, &euro;ASM starts the <dfn>final assembly pass</dfn>,
in which code+data is generated to the target file and listing is produced.
Each source requires at least two passes to assemble.</p>
<pre>                                                     <abbr>assembly progress &#x2500;&gt;</abbr>
&#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x252C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;<abbr>     &#x2588;</abbr>
&#x2502;envelope &#x2502;src: PROGRAM                      &#x2502;<abbr>      &#x2588;       &#x250C;&#x2588;</abbr>
&#x251C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x253C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;<abbr>       &#x2588;      &#x2502; &#x2588;</abbr>
&#x2502;      {1}&#x2502; DB 'This source "src.asm" has'   &#x2502;<abbr>        &#x2588;     &#x2502;  &#x2588;</abbr>
&#x2502;"src.asm"&#x2502; DB ' no PROGRAM statement.',13,10&#x2502;<abbr>         &#x2588;    &#x2502;   &#x2588;</abbr>
&#x2502;      {3}&#x2502; DB 'EuroAssembler will use '     &#x2502;<abbr>          &#x2588;   &#x2502;    &#x2588;</abbr>
&#x2502;      {4}&#x2502; DB 'a fictive envelope instead.' &#x2502;<abbr>           &#x2588;  &#x2502;     &#x2588;</abbr>
&#x251C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x253C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;<abbr>            &#x2588; &#x2502;      &#x2588;</abbr>
&#x2502;envelope &#x2502; ENDPROGRAM src:                  &#x2502;<abbr>             &#x2588;&#x2518;       &#x2588;&#x2500;&#x2510;</abbr>
&#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2534;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;<abbr>                        &#x2588;</abbr>
                                                   &#x2502;&#x2502;        &#x2502;      &#x2502; &#x2502;
I0010 EuroAssembler started.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;&#x2502;        &#x2502;      &#x2502; &#x2502;
I0180 Assembling source file "src.asm".&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;&#x2502;        &#x2502;      &#x2502; &#x2502;
I0270 Assembling source "src".&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;&#x2502;        &#x2502;      &#x2502; &#x2502;
I0310 Assembling source pass 1.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;        &#x2502;      &#x2502; &#x2502;
I0330 Assembling source pass 2 - final.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;      &#x2502; &#x2502;
I0760 16-bit TINY BIN file "src.bin" created from source, size=99.&#x2500;&#x2500;&#x2518; &#x2502;
I0750 Source "src" (4 lines) assembled in 2 passes with errorlevel 0.&#x2500;&#x2524;
I0860 Listing file "src.asm.lst" created, size=717.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;
I0990 EuroAssembler terminated with errorlevel 0.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;
</pre>
<p>Envelope statements are used regardless if an explicit PROGRAM block
was defined in the source text, or not. Source lines between the start of file and the
explicit PROGRAM statement, as well as lines between the explicit ENDPROGRAM
and the end of source, should not emit any data or code. In this case
the envelope source is empty and does not create target file from the source.</p>
<p>Consider the following source file <q>src.asm</q>.
There is an explicit block <code>Src:PROGRAM..ENDPROGRAM Src:</code> (lines 5..8)
inside the invisible envelope statements <code>src: PROGRAM</code> and <code>ENDPROGRAM src:</code>.
When the internal <code>Src:PROGRAM..ENDPROGRAM Src:</code> block is found in assembly process,
this entire block is skipped until a final pass of outer block is performed. Then &euro;ASM puts
the currently assembled final pass aside, and starts to assemble the inner block
in as many passes as necessary, creating the inner program target file.
After then &euro;ASM returns to finish the final pass of the outer (envelope) program.
</p>
<pre>
    EUROASM ; Common options.
    ; Source file "src.asm"
    ; with PROGRAM defined
explicitly.
Src:PROGRAM FORMAT=BIN
     DB 'Data emitted '
     DB 'by program Src.'
     ENDPROGRAM Src:
</pre>
<p>Notice the bug: the wrap of comment line {3} yields an not-comment line {4}.
Expression <code>explicitly.</code> is treated as a valid label (definition of an address symbol).
This causes the envelope being treated as not empty and target file <q>src.bin</q> is created from it,
nonetheless with zero filesize, as it contains only a zero-sized address symbol.
<br/>Inner program from lines {5..8} creates target file <q>Src.bin</q>
with size 28 bytes, but it is soon overwritten with the envelope zero-sized target <q>src.bin</q>
which happens to have almost identical name (filesystem in Dos|Windows is case-insensitive).
<pre>

&#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x252C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;<abbr>  &#x2588;              assembly progress &#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&gt;</abbr>
&#x2502;envelope &#x2502;src: PROGRAM                      &#x2502;<abbr>   &#x2588;         &#x250C;&#x2588;         &#x250C;&#x2588;</abbr>
&#x251C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x253C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;<abbr>    &#x2588;        &#x2502; &#x2588;        &#x2502; &#x2588;</abbr>
&#x2502;      {1}&#x2502; EUROASM ; Common options.        &#x2502;<abbr>     &#x2588;       &#x2502;  &#x2588;       &#x2502;  &#x2588;</abbr>
&#x2502;      {2}&#x2502;    ; Source file "src.asm"       &#x2502;<abbr>      &#x2588;      &#x2502;   &#x2588;      &#x2502;   &#x2588;</abbr>
&#x2502;      {3}&#x2502;    ; with PROGRAM defined        &#x2502;<abbr>       &#x2588;     &#x2502;    &#x2588;     &#x2502;    &#x2588;</abbr>
&#x2502;      {4}&#x2502;explicitly.                       &#x2502;<abbr>        &#x2588;&#x2510;   &#x2502;     &#x2588;&#x2510;   &#x2502;     &#x2588;</abbr>
&#x2502;"src.asm"&#x2502;Src:PROGRAM FORMAT=BIN            &#x2502;<abbr>         &#x2502;   &#x2502;      &#x2502;   &#x2502;      &#x2588;&#x2500;&#x2588;   &#x250C;&#x2588;</abbr>
&#x2502;      {6}&#x2502;     DB 'Data emitted '           &#x2502;<abbr>         &#x2502;   &#x2502;      &#x2502;   &#x2502;         &#x2588;  &#x2502; &#x2588;</abbr>
&#x2502;      {7}&#x2502;     DB 'by program Src.'         &#x2502;<abbr>         &#x2502;   &#x2502;      &#x2502;   &#x2502;          &#x2588; &#x2502;  &#x2588;</abbr>
&#x2502;      {8}&#x2502;     ENDPROGRAM Src:              &#x2502;<abbr>         &#x2514;&#x2588;  &#x2502;      &#x2514;&#x2588;  &#x2502;           &#x2588;&#x2518;   &#x2588;&#x2510;</abbr>
&#x251C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x253C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;<abbr>           &#x2588; &#x2502;        &#x2588; &#x2502;                 &#x2514;&#x2588;</abbr>
&#x2502;envelope &#x2502; ENDPROGRAM src:                  &#x2502;<abbr>            &#x2588;&#x2518;         &#x2588;&#x2518;                   &#x2588;&#x2510;</abbr>
&#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2534;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;<abbr>                                             &#x2588;</abbr>
                                                &#x2502;&#x2502;          &#x2502;          &#x2502;    &#x2502; &#x2502;&#x2502;    &#x2502;  &#x2502;  &#x2502;&#x2502;
I0010 EuroAssembler started.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;&#x2502;          &#x2502;          &#x2502;    &#x2502; &#x2502;&#x2502;    &#x2502;  &#x2502;  &#x2502;&#x2502;
I0180 Assembling source file "src.asm".&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;&#x2502;          &#x2502;          &#x2502;    &#x2502; &#x2502;&#x2502;    &#x2502;  &#x2502;  &#x2502;&#x2502;
I0270 Assembling source "src".&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;&#x2502;          &#x2502;          &#x2502;    &#x2502; &#x2502;&#x2502;    &#x2502;  &#x2502;  &#x2502;&#x2502;
I0310 Assembling source pass 1.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;          &#x2502;          &#x2502;    &#x2502; &#x2502;&#x2502;    &#x2502;  &#x2502;  &#x2502;&#x2502;
I0310 Assembling source pass 2.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;          &#x2502;    &#x2502; &#x2502;&#x2502;    &#x2502;  &#x2502;  &#x2502;&#x2502;
I0330 Assembling source pass 3 - final.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;    &#x2502; &#x2502;&#x2502;    &#x2502;  &#x2502;  &#x2502;&#x2502;
W2101 Symbol "explicitly." was defined but never used. "src.asm"{4}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518; &#x2502;&#x2502;    &#x2502;  &#x2502;  &#x2502;&#x2502;
I0470 Assembling program "Src". "src.asm"{5}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;&#x2502;    &#x2502;  &#x2502;  &#x2502;&#x2502;
I0510 Assembling program pass 1. "src.asm"{5}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;    &#x2502;  &#x2502;  &#x2502;&#x2502;
I0530 Assembling program pass 2 - final. "src.asm"{5}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;  &#x2502;  &#x2502;&#x2502;
I0660 16-bit TINY BIN file "Src.bin" created, size=28. "src.asm"{8}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;  &#x2502;&#x2502;
I0650 Program "Src" assembled in 2 passes with errorlevel 0. "src.asm"{8}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;  &#x2502;&#x2502;
W3990 Overwriting previously generated output file "Src.bin".&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;&#x2502;
I0760 16-bit TINY BIN file "src.bin" created from source, size=0.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;&#x2502;
I0750 Source "src" (8 lines) assembled in 3 passes with errorlevel 3.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;&#x2502;
I0860 Listing file "src.asm.lst" created, size=1372.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;&#x2502;
I0990 EuroAssembler terminated with errorlevel 3.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;
</pre>

<h4 id="EaFnChain"><a href="#EaFnAsm">&uarr; Chained programs</a></h4>
<p>EuroAssembler allows to define more than one program block in a single source file, and assemble all of them with one command.
Remember that symbols used in different PROGRAM..ENDPROGRAM blocks have private scope,
so they don't see each other, although they are defined in the same source file.
If we want to call a procedure defined in Pgm1 from Pgm2,
the called symbol must be declared global and both assembled modules must be linked together.
</p><pre>
&#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x252C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;<abbr> &#x2588;            assembly progress &#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&gt;</abbr>
&#x2502;envelope &#x2502;src: PROGRAM                      &#x2502;<abbr>  &#x2588;       &#x250C;&#x2588;</abbr>
&#x251C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x253C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;<abbr>   &#x2588;      &#x2502; &#x2588;</abbr>
&#x2502;      {1}&#x2502;     EUROASM ; Common options.    &#x2502;<abbr>    &#x2588;     &#x2502;  &#x2588;</abbr>
&#x2502;      {2}&#x2502;Pgm1:PROGRAM FORMAT=PE,ENTRY=Run1:&#x2502;<abbr>     &#x2588;&#x2510;   &#x2502;   &#x2588;&#x2500;&#x2588;   &#x250C;&#x2588;   &#x250C;&#x2588;</abbr>
&#x2502;      {3}&#x2502;      ; Pgm1 data.                &#x2502;<abbr>      &#x2502;   &#x2502;      &#x2588;  &#x2502; &#x2588;  &#x2502; &#x2588;</abbr>
&#x2502;      {4}&#x2502;Run1: ; Pgm1 code.                &#x2502;<abbr>      &#x2502;   &#x2502;       &#x2588; &#x2502;  &#x2588; &#x2502;  &#x2588;</abbr>
&#x2502;"src.asm"&#x2502;     ENDPROGRAM Pgm1:             &#x2502;<abbr>      &#x2502;   &#x2502;        &#x2588;&#x2518;   &#x2588;&#x2518;   &#x2588;&#x2510;</abbr>
&#x2502;      {6}&#x2502;     ; Pgm2 description.          &#x2502;<abbr>      &#x2502;   &#x2502;                   &#x2588;</abbr>
&#x2502;      {7}&#x2502;Pgm2:PROGRAM FORMAT=PE,ENTRY=Run2:&#x2502;<abbr>      &#x2502;   &#x2502;                   &#x2514;&#x2588;   &#x250C;&#x2588;   &#x250C;&#x2588;</abbr>
&#x2502;      {8}&#x2502;      ; Pgm2 data.                &#x2502;<abbr>      &#x2502;   &#x2502;                     &#x2588;  &#x2502; &#x2588;  &#x2502; &#x2588;</abbr>
&#x2502;      {9}&#x2502;Run2: ; Pgm2 code.                &#x2502;<abbr>      &#x2502;   &#x2502;                      &#x2588; &#x2502;  &#x2588; &#x2502;  &#x2588;</abbr>
&#x2502;     {10}&#x2502;      ENDPROGRAM Pgm2:            &#x2502;<abbr>      &#x2514;&#x2588;  &#x2502;                       &#x2588;&#x2518;   &#x2588;&#x2518;   &#x2588;&#x2510;</abbr>
&#x251C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x253C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;<abbr>        &#x2588; &#x2502;                                  &#x2514;&#x2588;</abbr>
&#x2502;envelope &#x2502; ENDPROGRAM src:                  &#x2502;<abbr>         &#x2588;&#x2518;                                    &#x2588;&#x2510;</abbr>
&#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2534;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;<abbr>                                                &#x2588;</abbr>
                                               &#x2502;&#x2502;        &#x2502;    &#x2502;    &#x2502;    &#x2502;  &#x2502; &#x2502;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0010 EuroAssembler started.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;&#x2502;        &#x2502;    &#x2502;    &#x2502;    &#x2502;  &#x2502; &#x2502;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0180 Assembling source file "src.asm".&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;&#x2502;        &#x2502;    &#x2502;    &#x2502;    &#x2502;  &#x2502; &#x2502;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0270 Assembling source "src".&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;&#x2502;        &#x2502;    &#x2502;    &#x2502;    &#x2502;  &#x2502; &#x2502;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0310 Assembling source pass 1.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;        &#x2502;    &#x2502;    &#x2502;    &#x2502;  &#x2502; &#x2502;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0330 Assembling source pass 2 - final.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;    &#x2502;    &#x2502;    &#x2502;  &#x2502; &#x2502;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0470 Assembling program "Pgm1". "src.asm"{2}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;    &#x2502;    &#x2502;  &#x2502; &#x2502;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0510 Assembling program pass 1. "src.asm"{2}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;    &#x2502;    &#x2502;  &#x2502; &#x2502;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0510 Assembling program pass 2. "src.asm"{2}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;    &#x2502;  &#x2502; &#x2502;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0530 Assembling program pass 3 - final. "src.asm"{2}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;  &#x2502; &#x2502;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0660 32bit FLAT PE file "Pgm1.exe" created, size=14320. "src.asm"{5}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524; &#x2502;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0650 Program "Pgm1" assembled in 3 passes with errorlevel 0. "src.asm"{5}&#x2500;&#x2518; &#x2502;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0470 Assembling program "Pgm2". "src.asm"{7}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0510 Assembling program pass 1. "src.asm"{7}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;    &#x2502;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0510 Assembling program pass 2. "src.asm"{7}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;    &#x2502;   &#x2502; &#x2502;&#x2502;
I0530 Assembling program pass 3 - final. "src.asm"{7}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;   &#x2502; &#x2502;&#x2502;
I0660 32bit FLAT PE file "Pgm2.exe" created, size=14320. "src.asm"{10}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524; &#x2502;&#x2502;
I0650 Program "Pgm2" assembled in 3 passes with errorlevel 0. "src.asm"{10}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518; &#x2502;&#x2502;
I0750 Source "src" (10 lines) assembled in 2 passes with errorlevel 0.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;&#x2502;
I0860 Listing file "src.asm.lst" created, size=1736.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;&#x2502;
I0990 EuroAssembler terminated with errorlevel 0.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;
</pre>
<blockquote><p>Why should we pack multiple modules together with their documentation to a single file rather than
scatter them to a bunch of small files? It's a matter of individual preferences.</p>
<p> One reason could be the transfer of information between modules with preprocessing
%variables. Unlike ordinary symbols, scope of %variables is not limited with PROGRAM..ENDPROGRAM block bounderies.
Suppose that in Pgm2 we need to know the size of data segment from Pgm1.
Let's read the size to %variable with statement <code>%Pgm1DataSize %SETA SIZE# [DATA]</code>
which is placed in Pgm1 just above <code> ENDPROGRAM Pgm1</code>.
In the final pass of Pgm1 is the segment size reliably known, and the variable <code>%Pgm1DataSize</code>
will be visible in the whole source below its definition, so Pgm2 can calculate with it.</p>
<p>Another example where grouping programs is profitable is when the programs are similar or they share
common data, declared with preprocessing %variables. The following example creates
three similar short programs <q>RstLPT1.com</q>, <q>RstLPT2.com</q>, <q>RstLPT3.com</q> in a loop:</p>
<pre>
Nr %FOR 1,2,3     ; Repeat the %FOR..%ENDFOR block three times.
 RstLPT%Nr PROGRAM FORMAT=COM ; Program to reset LinePrinter port.
   MOV DX,%Nr     ; LPT port ordinal number (1,2,3).
   MOV AH,1       ; BIOS function INITIALIZE LPT PORT.
   INT 17h        ; Use BIOS function to reset printer.
   MOV DX,Message ; Put the address of $-terminated string to DS:DX.
   MOV AH,9       ; DOS function WRITE STRING TO STDOUT.
   INT 21h        ; Use DOS function to report success.
   RET            ; Terminate program.
   Message:DB "LPT%Nr was reset.$"
 ENDPROGRAM RstLPT%Nr
%ENDFOR Nr        ; Generate 3 clones of the program.
</pre>
</blockquote>

<h4 id="EaFnNest"><a href="#EaFnAsm">&uarr; Nested programs</a></h4>
<p>Program modules can be nested in one-another. For instance when building amphibious program
executable both in Dos and in Windows we may want to reflect the fact, that the Dos-executable MZ file
is embedded as a stub in Windows-executable PE file, both providing the same functionality.
<br/>See the sample projects <a class="EXT" href="../prowin32/locktest.htm">LockTest</a>
or <a class="EXT" href="../prowin32/euroconv.htm">EuroConvertor</a>
as examples of dual DOS&amp;Windows program.</p>
<p>Again, when the outer program sees inner program block in non-final pass, it is skipped.
In the final pass is the assembly of outer program temporarily suspended, inner program completely assembled,
and then the final pass of outer program continues.</p>
<pre>
&#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x252C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;<abbr> &#x2588;                   assembly progress &#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&gt;</abbr>
&#x2502;envelope &#x2502;src: PROGRAM                      &#x2502;<abbr>  &#x2588;       &#x250C;&#x2588;</abbr>
&#x251C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x253C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;<abbr>   &#x2588;      &#x2502; &#x2588;</abbr>
&#x2502;      {1}&#x2502;      EUROASM ; Common options.   &#x2502;<abbr>    &#x2588;     &#x2502;  &#x2588;</abbr>
&#x2502;      {2}&#x2502;Pgm1: PROGRAM FORMAT=PE,ENTRY=Run:&#x2502;<abbr>     &#x2588;&#x2510;   &#x2502;   &#x2588;&#x2500;&#x2588;       &#x250C;&#x2588;       &#x250C;&#x2588;</abbr>
&#x2502;      {3}&#x2502;Run:   ; Pgm1 data + code.        &#x2502;<abbr>      &#x2502;   &#x2502;      &#x2588;      &#x2502; &#x2588;      &#x2502; &#x2588;</abbr>
&#x2502;      {4}&#x2502; Pgm2: PROGRAM FORMAT=COFF        &#x2502;<abbr>      &#x2502;   &#x2502;       &#x2588;&#x2510;    &#x2502;  &#x2588;&#x2510;    &#x2502;  &#x2588;&#x2500;&#x2588;  &#x250C;&#x2588;</abbr>
&#x2502;"src.asm"&#x2502;        ; Pgm2 data + code.       &#x2502;<abbr>      &#x2502;   &#x2502;        &#x2502;    &#x2502;   &#x2502;    &#x2502;     &#x2588; &#x2502; &#x2588;</abbr>
&#x2502;      {6}&#x2502;       ENDPROGRAM Pgm2:           &#x2502;<abbr>      &#x2502;   &#x2502;        &#x2514;&#x2588;   &#x2502;   &#x2514;&#x2588;   &#x2502;      &#x2588;&#x2518;  &#x2588;&#x2500;&#x2588;</abbr>
&#x2502;      {7}&#x2502;       ; Pgm1 more code.          &#x2502;<abbr>      &#x2502;   &#x2502;          &#x2588;  &#x2502;     &#x2588;  &#x2502;             &#x2588;</abbr>
&#x2502;      {8}&#x2502;       LINK "Pgm2.obj"            &#x2502;<abbr>      &#x2502;   &#x2502;           &#x2588; &#x2502;      &#x2588; &#x2502;              &#x2588;</abbr>
&#x2502;      {9}&#x2502;      ENDPROGRAM Pgm1:            &#x2502;<abbr>      &#x2514;&#x2588;  &#x2502;            &#x2588;&#x2518;       &#x2588;&#x2518;               &#x2588;&#x2500;&#x2588;</abbr>
&#x251C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x253C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;<abbr>        &#x2588; &#x2502;                                         &#x2588;</abbr>
&#x2502;envelope &#x2502; ENDPROGRAM src:                  &#x2502;<abbr>         &#x2588;&#x2518;                                          &#x2588;&#x2500;&#x2510;</abbr>
&#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2534;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;<abbr>                                                       &#x2588;</abbr>
                                               &#x2502;&#x2502;        &#x2502;    &#x2502;        &#x2502;        &#x2502;   &#x2502;   &#x2502; &#x2502;    &#x2502;   &#x2502; &#x2502;
I0010 EuroAssembler started. &#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;&#x2502;        &#x2502;    &#x2502;        &#x2502;        &#x2502;   &#x2502;   &#x2502; &#x2502;    &#x2502;   &#x2502; &#x2502;
I0180 Assembling source file "src.asm".&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;&#x2502;        &#x2502;    &#x2502;        &#x2502;        &#x2502;   &#x2502;   &#x2502; &#x2502;    &#x2502;   &#x2502; &#x2502;
I0270 Assembling source "src".&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;&#x2502;        &#x2502;    &#x2502;        &#x2502;        &#x2502;   &#x2502;   &#x2502; &#x2502;    &#x2502;   &#x2502; &#x2502;
I0310 Assembling source pass 1.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;        &#x2502;    &#x2502;        &#x2502;        &#x2502;   &#x2502;   &#x2502; &#x2502;    &#x2502;   &#x2502; &#x2502;
I0330 Assembling source pass 2 - final.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;    &#x2502;        &#x2502;        &#x2502;   &#x2502;   &#x2502; &#x2502;    &#x2502;   &#x2502; &#x2502;
I0470 Assembling program "Pgm1". "src.asm"{2}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;        &#x2502;        &#x2502;   &#x2502;   &#x2502; &#x2502;    &#x2502;   &#x2502; &#x2502;
I0510 Assembling program pass 1. "src.asm"{2}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;        &#x2502;        &#x2502;   &#x2502;   &#x2502; &#x2502;    &#x2502;   &#x2502; &#x2502;
I0510 Assembling program pass 2. "src.asm"{2}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;        &#x2502;   &#x2502;   &#x2502; &#x2502;    &#x2502;   &#x2502; &#x2502;
I0530 Assembling program pass 3 - final. "src.asm"{2}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;   &#x2502;   &#x2502; &#x2502;    &#x2502;   &#x2502; &#x2502;
I0470 Assembling program "Pgm2". "src.asm"{4}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;   &#x2502; &#x2502;    &#x2502;   &#x2502; &#x2502;
I0510 Assembling program pass 1. "src.asm"{4}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;   &#x2502; &#x2502;    &#x2502;   &#x2502; &#x2502;
I0530 Assembling program pass 2 - final. "src.asm"{4}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518; &#x2502;    &#x2502;   &#x2502; &#x2502;
I0660 32bit FLAT COFF file "Pgm2.obj" created, size=78. "src.asm"{6}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;    &#x2502;   &#x2502; &#x2502;
I0650 Program "Pgm2" assembled in 2 passes with errorlevel 0. "src.asm"{6}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;    &#x2502;   &#x2502; &#x2502;
I0560 Linking COFF module ".\Pgm2.obj". "src.asm"{9}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;   &#x2502; &#x2502;
I0660 32bit FLAT PE file "Pgm1.exe" created, size=14320. "src.asm"{9}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524;   &#x2502; &#x2502;
I0650 Program "Pgm1" assembled in 3 passes with errorlevel 0. "src.asm"{9}&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;   &#x2502; &#x2502;
I0750 Source "src" (9 lines) assembled in 2 passes with errorlevel 0.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2524; &#x2502;
I0860 Listing file "src.asm.lst" created, size=1237.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518; &#x2502;
I0990 EuroAssembler terminated with errorlevel 0.&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;
</pre>

<h3 id="EaFnAsmDbg"><a href="#EaFn">&uarr; Assembly debugging</a></h3>
<p>Some useful features of EuroAssembler can help the programmer to assure that the source is assembled as intended.</p>
<p>Keep on mind that this is <strong>asm-time debugging</strong> which helps to discover
misunderstanding and errors in EuroAssembler itself rather than bugs in the assembled program.</p>
<p><a href="#ListingFile">Dump column</a> of <strong>the listing displays the assembled code</strong> .
Repeated stretchs, which are considered bug-free, are suppressed by default, but they can be displayed on demand
with directives <a href="#ListParameters"><code>
EUROASM LISTINCLUDE=ON, LISTVAR=ON, LISTMACRO=ON, LISTREPEAT=ON</code></a>.</p>
<p><strong>Recognition of fields</strong> in statements can be investigated with option <code>EUROASM DISPLAYSTM=ON</code>,
which inserts comment lines identifying each field.
As this option blows up the listing size significantly, it's better to limit DISPLAYSTM only
to the suspected lines, and then switch the option back to OFF or restore the previous set of options with
<code>EUROASM POP</code>:<pre>
   EUROASM PUSH, DISPLAYSTM=ON ; <abbr>Store all current EUROASM options with PUSH first.</abbr>
   MyMacro Operand1, Operand2  ; <abbr>&quot;MyMacro&quot; was not defined yet as a %MACRO, so it's treated like a label.</abbr>
<span class="inner">D1010 **** DISPLAYSTM "MyMacro Operand1, Operand2"
D1020 label="MyMacro"
D1040 unknown operation="Operand1"
D1050 ordinal operand number=1,value="Operand2"
</span>   EUROASM POP                 ; <abbr>Restore EUROASM options.</abbr>
<span class="inner">D1010 **** DISPLAYSTM "EUROASM POP"
D1040 pseudo operation="EUROASM"
D1050 ordinal operand number=1,value="POP"
</span>                              ; <abbr>Statement fields are no longer displayed.</abbr></pre>

<p>Detailed <strong>machine instructions encoding</strong> can be displayed with option
<code>EUROASM DISPLAYENC=ON</code>, which inserts comment line below machine instruction with the list
of actually used <a href="#InstructionModifiers">modifiers</a>.</p><pre>
   EUROASM PUSH, DISPLAYENC=ON ; <abbr>Store all current EUROASM options with PUSH first.</abbr>
   SHRD [RDI+64],RDX,2
<span class="inner">D1080 Emitted size=6,DATA=QWORD,DISP=BYTE,SCALE=SMART,ADDR=ABS,IMM=BYTE.
</span>   VMOVNTDQA XMM17,[RBP+40h]
<span class="inner">D1080 Emitted size=7,PREFIX=EVEX,DATA=OWORD,OPER=0,DISP=BYTE,SCALE=SMART,ADDR=ABS.
</span>   EUROASM POP         ; <abbr>Restore EUROASM options. Encodings are no longer displayed.</abbr></pre>
<p>All <strong>configuration options</strong>, which can be specified with <a href="#EUROASM">EUROASM</a>
and <a href="#PROGRAM">PROGRAM</a> keyword operands, are retrievable in the form of
<a href="#SystemVariables">system %^variables</a>, thus their current value
can be checked or otherwise exploited:</p>
<pre>
   %IF %^NOWARN[2101]
     %ERROR You shouldn't suppress the warning W2101. Move unused symbols to included file instead.
   %ENDIF</pre>
<p>The most powerful assembly-time debugging tool is the pseudoinstruction
<a href="#pcDISPLAY">%DISPLAY</a>, which <strong>displays internal &euro;ASM objects at assembly-time</strong>
and helps to find out, why &euro;ASM doesn't work as expected.</p>
<p>See tests <a class="EXT" href="../eatests/t2907.htm">t2901..t2917</a>
as examples.</p>

<h3 id="EaFnLink" title="Linker"><a href="#EaFn">&uarr; Linker</a></h3>
<h4><a href="#EaFnLinkStatic">Static linking &darr;</a></h4>
<h4><a href="#EaFnLinkDynamic">Dynamic linking &darr;</a></h4>
<p><dfn>Linking</dfn> in IT terminology is the process when the separately
assembled or compiled modules are joined, interactions between the globally accessible
symbols resolved, their code and data combined and reformated to the target file format.
See <a class="EXTL" href="links.htm#Linkers">[Linkers]</a> for more details.</p>

<p>Unlike many other linkers, EuroAssembler can create not only executable files,
but also linkable formats ELF, COFF and OMF, and their libraries LIBCOF and LIBOMF
(see <a href="#EaFnConvert">Object convertor</a> and the table of supported
<a class="EXT" href="../eatests/index.htm#LinkerCombinations">linker combinations</a>).</p>
<h6>Linking in EuroAssembler takes place when the pseudoinstruction
ENDPROGRAM is processed in the final pass.</h6>
<p>Linking is mediated with pseudoinstruction <a href="#LINK">LINK</a>
which is followed by filenames of input modules.
Input formats acceptable for EuroAssembler linker are of two kinds:
<ol><li><strong>linkable</strong> file formats for static linking are
<strong>ELF, COFF, OMF, LIBCOF, LIBOMF, RSRC</strong>.</li>
<li><strong>importable</strong> file formats for dynamic linking are
<strong>DLL, LIBCOF, LIBOMF</strong>.</li>
</ol>
<table class="SMALLER"><caption>File formats accepted by EuroAssembler statement LINK</caption>
<tr><th>CPU<br/>mode</th><th>Program<br/>width</th><th>Output<br/>executable</th>
<th>Output<br/>linkable</th>
<th>Input<br/>linkable</th><th>Input<br/>importable</th></tr>
<tr><th>Real</th><th>16</th><th>BIN, BOOT, COM, MZ</th><th>OMF, LIBOMF, COFF, LIBCOF</th><td>OMF, LIBOMF, COFF, LIBCOF</td><td>-</td></tr>
<tr><th>Real</th><th>32</th><th>BIN, BOOT, COM, MZ</th><th>OMF, LIBOMF, COFF, LIBCOF</th><td>OMF, LIBOMF, COFF, LIBCOF</td><td>-</td></tr>
<tr><th>Prot</th><th>32</th><th>ELFX, PE, DLL</th><th>ELF, COFF, LIBCOF, OMF, LIBOMF</th><td>ELF, COFF, LIBCOF, RSRC, OMF, LIBOMF</td><td>ELF, COFF, LIBCOF, DLL, OMF, LIBOMF</td></tr>
<tr><th>Prot</th><th>64</th><th>ELFX, PE, DLL</th><th>ELF, COFF, LIBCOF</th><td>ELF, COFF, LIBCOF, RSRC</td><td>ELF, COFF, LIBCOF, DLL, OMF, LIBOMF</td></tr>
</table>
<p>See also the table of tests on <a class="EXT" href="../eatests/#LinkerCombinations">
linker combinations</a>.
<br/>Notice that the object format OMF cannot be linked in 64-bit programs.</p>
<p>The actual format of linked file is recognized by the file contents,
not by the file name extension. Each linked module is loaded and converted to
an &euro;ASM internal format (<a class="EXT" href="../easource/pgm.htm#PGM">PGM</a>) in memory
prior to the actual linking.</p>
<p>Position of pseudoinstruktion LINK within the block PROGRAM..ENDPROGRAM is not important,
names of the linked modules are just collected a the linking is postponed till the end of program.</p>

<h4 id="EaFnLinkStatic"><a href="#EaFnLink">&uarr; Static linking</a></h4>
<p>Code and data from the linked object files in formats ELF, COFF or OMF will be
combined and concatenated with code and data from the base program
(i. e. the one to which it's linked). Base program may be empty, however.
Linker also resolves mutual references
between the public and external symbols from all linked modules.</p>

<p>Unlike other linkers, EuroAssembler does not accept names of linked module
as its command line arguments. A linker script (&euro;ASM source program) must be
prepared beforehand when we want to employ EuroAssembler as a pure linker, for instance
to convert object files created by 3rd-party assembler or compiler to an executable file.
The desired output file name and format will be specified as the PROGRAM arguments:</p>
<pre>MyExeFile PROGRAM FORMAT=PE, WIDTH=32, ListMap=Yes, ListGlobals=Yes
              LINK MyCoff.obj, PascalOmf.obj, Win32.lib
          ENDPROGRAM MyExeFile</pre>
<blockquote>Save the linker script as <q>MyScript.asm</q>, execute
<code>euroasm MyScript.asm</code> and it will produce the Windows program <q>MyExeFile.exe</q>
and listing <q>MyScript.asm.lst</q> with the map of linked sections and global symbols.</blockquote>

<p>Beside standalone object modules the code and data can be also linked
from object libraries in formats LIBCOF and LIBOMF.</p>
<p>When the target base program
is <strong>executable</strong>, &euro;ASM only links those modules from library, which are
at least once referenced by other modules (<dfn>smart linking</dfn>).
This helps to keep size of the linked file small, eliminating the dead (never-to-be-executed) code.</p>
<blockquote>If we nevertheless need to combine the unreferenced library procedures
to our executable program, we would have to explicitly declare their names GLOBAL
in the the base program.</blockquote>
<p>Smart linking does not apply when the target file is <strong>linkable</strong>,
for instance when a LIBCOF library is created from other libraries and standalone object modules.
In this case all modules (referenced or unreferenced)
will be linked to the target file.</p>
<blockquote><p>The good reason why to split big project into smaller, separately assembled modules,
is <b>faster build</b>.</p>
<p>When a project grows and its source is doubled in size, the number of symbols in it
is likely to double, too. Each symbol needs to be compared with an array of other
already declared symbols to avoid duplication. Number of checks, and also the consumed time,
grows almost quadratically with source size.</p>
<p>During the developement process we are usually focused only to one part (module)
of the project, so the remaining unchanged modules do not need to be recompiled again
in each developement cycle (see also <a href="#EaFnMake">Makefile manager</a>).</p></blockquote>
<p><strong>Recapitulation:</strong> If you want to statically link your own function (procedure),
declare it <code>PUBLIC function</code>
(or terminate its definition label with two colons <code>function:: PROC</code>)
and assemble the function to an object or library module.
<br/>Then assemble the main program, declare the linked function <code>EXTERN function</code>
(or terminate the called name with two colons) and
insert pseudoinstruction <code>LINK module.obj</code> into the main program.
The main program then can <code>CALL function::</code>
as if it were assembled in its own body.
<br/>The same applies for functions from 3rd party library.
Again, you must observe its published name, calling convention, number, order and
type of arguments.</p>

<h4 id="EaFnLinkDynamic"><a href="#EaFnLink">&uarr; Dynamic linking</a></h4>
<p>This version of EuroAssembler does not support dynamic linking of Linux dynamic libraries (DSO).
The command <code>LINK DSO.so</code> tries to link the file only statically.
This chapter concerns dynamic linking for MS-Windows only.</p>
<p>The code and data of dynamically linked functions are not copied to the target executable image,
they remain in dynamic library (DLL), which has to be available on the system where our executable runs.
When our program calls a function from DLL, it actually executes a <dfn>thunk</dfn> code
represented by a call of single proxy jump instruction (<dfn>stub</dfn>).
<br/>&euro;ASM generates stubs in a special import section [.idata]
in the form of indirect absolute near jump (JMPN).
Each such proxy jump is 7&nbsp;bytes long (<code>0xFF2425[00000000]</code>)
and it uses pointer into Import Address Table (<dfn>IAT</dfn>) as its indirect DWORD target.
Virtual address in the pointer <code>[00000000]</code> is resolved by the linker,
but the actual 32-bit or 64-bit virtual address of the library function (pointed to by the resolved dword)
will be fixed up later, by the loader at bind time when the application starts.</p>
<p>Loader, implemented in Windows kernel, needs two pieces of information to
dynamically link library functions and to fix up their addresses in IAT:</p>
<p><b>1)</b> The name of the linked <strong>symbol</strong> (function name) or its ordinal number in the table
of exported symbols.</p><blockquote>Calling by ordinals is not supported in &euro;ASM.</blockquote>
<p><b>2)</b> The name of the <strong>library</strong> file which exports the symbol (without path).</p>
<blockquote>Path to the library file will be established by the loader. The order of directories where MS-Windows
searches for the library is explained in
<a class="EXTL" href="links.htm#WinDllSearchOrder">[WinDllSearchOrder]</a>.</blockquote>
<p>Program, which needs to call a symbol (imported function) from the dynamic library, should declare
the symbol as imported. It may be declared GLOBAL as well, either explicitly or implicitly
(<code> CALL ImportedSymbol::</code>), but &euro;ASM will treat such global symbol as EXTERN (statically linked)
and complain that the corresponding public symbol was not found.
<br/>There are several methods how to tell &euro;ASM that the symbol should be dynamically linked:</p>
<ul><li><p>Use explicit <strong>import declaration</strong>, for instance
 <code> IMPORT ImportedSymbol1, ImportedSymbol2, LIB="dynamic.dll"</code>.
Dynamic library should be specified without a path and it may be omitted
when it is the library of core Windows functions <q>kernel32.dll</q>.
</p>
<blockquote>Presence of <q>dynamic.dll</q> in filesystem is not checked at link time,
the program will assemble without errors even when no such file exists on our computer.
However, Windows will complain when it tries to launch the program and cannot find the library
or when ImportedSymbol is not exported by the <q>dynamic.dll</q>.</blockquote>
</li>

<li><p>Link <strong>import library</strong> to the program, for instance
<code> LINK "winapi.lib"</code>
 Such file may be in format LIBOMF or LIBCOF
and it usually contains only declarations of exported symbol names and their library files
(<dfn id="PureImportLib" title="Import library">pure import library</dfn>).
&euro;ASM will match undefined global symbols with those names, and redeclare them as IMPORT.</p>
<blockquote>Some older librarians (e.g. <a class="EXTL" href="../eadoc/links.htm#ALIB">[ALIB]</a>)
produce import libraries in <em>long format</em>, which contains
additional code of thunk jumps. &euro;ASM accepts the long format but this superfluous contents is ignored.
<br/>Some compilers mangle the exported names, decorating them with leading underscores and other info
concerning calling convention and number of operands.
&euro;ASM does not support name mangling, imported functions must be called by the identical name which is exported.
</blockquote>
<p>The file <a class="EXT" href="../prowin32/dll2lib.htm">dll2lib.htm</a> tells how to create an import library from MS-Windows DLLs.</p>
</li>

<li>Link <strong>dynamic library</strong> to find out what it exports.
The library should be specified with the complete path and it must exist at link time, for instance
<pre> %SystemRoot %SETE SystemRoot
 LINK "%SystemRoot\system32\USER32.DLL"</pre>
<p>Linking of a dynamic library does not copy its code and data to our program, it only
detects names of exported functions. This statement is equivalent to declaration
<code> IMPORT *, LIB="USER32.DLL"</code> or to the linking of corresponding
import library <code>LINK "USER32.lib"</code>.</p>
<li>The <strong>loading of library</strong> can be deferred from load-time to run-time,
using Windows API functions <code>LoadLibrary("library.dll"); GetProcAddress(SymbolName);</code>
before the SymbolName is used.
</li></ul>

<p><strong>Recapitulation:</strong> If you want to dynamically link
your own function (procedure) in other programs,
declare it <code>EXPORT function</code> and assemble the function to an DLL format
(<code>mylib PROGRAM FORMAT=DLL</code>). Be sure to distribute <q>mylib.dll</q>
together with your programs.
<br/>Then assemble the main executable program, declaring the linked function
<code>IMPORT function, LIB=mylib.dll</code>.
The main program then can invoke it using <code>CALL function</code>.
<br/>More often you will need to call the functions from 3rd party dynamic library,
which is the case of <a class="EXTL" href="../eadoc/links.htm#WindowsAPI">
MS-Windows API</a>. You might explicitly enumerate each used WinAPI functions
with pseudoinstruction such as <code>IMPORT function1,function2,LIB=user32.dll</code>,
but more comfortable solution is to use import library, which declares
all function names exported by the DLL. Then you won't have to add new
import declarations every time when a new function is used in your program during its developement.
Simply call the new function with double colon and, when its name appeares
in some import library, it will be treated as imported.
You may also want to use the macro
<a class="EXT" href="../maclib/winapi.htm#WinAPI">WinAPI (32-bit)</a> or
<a class="EXT" href="../maclib/winabi.htm#WinABI">WinABI (64-bit)</a>
which takes care of IMPORT declaration and automatic selection
between ANSI and WIDE variant.</p>



<h3 id="EaFnLib" title="Librarian"><a href="#EaFn">&uarr; Librarian</a></h3>
<p>EuroAssembler can create libraries from previously assembled object modules
(files in ELF, OMF or COFF format). When the library program itself contains some code and data,
it will be implicitly linked to the library as the first module.
<pre>
Library PROGRAM FORMAT=LIBOMF  ; or FORMAT=LIBCOF
ObjModule1:: PROC ; One of the object modules can also be defined here.
                  ; Source code of ObjModule1.
             ENDP ObjModule1::
             LINK "ObjModule2.obj", "ObjModule3.obj" ; Other ELF, OMF or COFF object modules.
        ENDPROGRAM Library
</pre>
<p>If the linked modules contain import information, it is copied to the output library, too.
Pure import library contains import declarations only. They may be explicitly declared
as IMPORT, or loaded from dynamic library, or linked from other import libraries.
Following example exploits all three methods:</p><pre>
ImpLibrary PROGRAM FORMAT=LIBOMF ; or FORMAT=LIBCOF
             IMPORT Symbol1, Symbol2, LIB="DynamicLibrary1.dll" ; <b>Explicit declaration</b>.
             LINK "C:\MyDLLs\DynamicLibrary2.dll"               ; <b>Automatic export detection</b> from DLL.
             LINK "OtherImportLibrary.lib"                      ; <b>Reimport from another library</b>.
           ENDPROGRAM ImpLibrary
</pre>

<p>Example of libraries created from three separately assembled modules can be found in &euro;ASM tests:
<br/><a class="EXT" href="../eatests/t8552.htm">t8552</a> (object library LIBOMF for 16-bit Dos),
<br/><a class="EXT" href="../eatests/t9113.htm">t9113</a> (object library LIBCOF for 32-bit Windows),
<br/><a class="EXT" href="../eatests/t9164.htm">t9164</a> (object library LIBCOF for 64-bit Windows),
<br/><a class="EXT" href="../eatests/t8675.htm">t8675</a> (import library LIBOMF for Windows),
<br/><a class="EXT" href="../eatests/t9225.htm">t9225</a> (import library LIBCOF for Windows),
</p>


<h3 id="EaFnConvert" title="Object convertor"><a href="#EaFn">&uarr; Object convertor</a></h3>
<p>EuroAssembler can directly link all main object formats OMF, ELF and COFF,
so the demand for explicit object conversion between them should be rare.
Example:</p><pre>
OMFobject PROGRAM FORMAT=OMF ; Convert COFF object file to the format OMF.
            LINK "COFFobject.obj"
          ENDPROGRAM OMFobject
</pre><pre>
COFFobject PROGRAM FORMAT=COFF; Convert OMF object file to the format COFF.
             LINK "OMFobject.obj"
           ENDPROGRAM COFFobject
</pre><pre>
ELFobject PROGRAM FORMAT=ELF; Convert COFF object file to the format ELF.
             LINK "COFFobject.obj"
           ENDPROGRAM ELFobject
</pre><pre>
COFFobject PROGRAM FORMAT=COFF; Convert ELF object file to the format COFF.
             LINK "ELFobject.o"
           ENDPROGRAM COFFobject
</pre><pre>
OMFlibrary PROGRAM FORMAT=LIBOMF ; Convert COFF object library to the format LIBOMF.
             LINK "COFFlibrary.lib"
           ENDPROGRAM OMFlibrary
</pre><pre>
COFFlibrary PROGRAM FORMAT=LIBCOF ; Convert OMF object library to the format LIBCOF.
              LINK "OMFlibrary.lib"
            ENDPROGRAM COFFlibrary
</pre>

<h3 id="EaFnMake" title="Makefile"><a href="#EaFn">&uarr; Makefile manager</a></h3>
<p>Operator <a href="#FILETIMEha">FILETIME#</a> retrieves the last modification time of a file at assembly-time,
which can be used for detection if the target file needs reassembly or not.
Just compare the filetime of target with filetime of each source, which the target depends on.
If the target file does not exist, its attribute-operator FILETIME# returns 0, which is the same as if it was very old,
so its reassembly will be required anyway.</p>
<pre>       ; Recompile "source.asm" only if "target.exe" doesn't exist or if it is older than its sources.
    %IF FILETIME# "target.exe" &gt; FILETIME# "source.asm" &amp;&amp; FILETIME# "target.exe" &gt; FILETIME# "included2source.inc"
       %ERROR "target.exe" is fresh, no need to assemble again.
    %ELSE
       target PROGRAM FORMAT=PE
               INCLUDE "source.asm"
              ENDPROGRAM target
    %ENDIF
</pre>
<hr/>


<h3 id="EaFnOptimize"><a href="#EaFn">&uarr; Optimisation</a></h3>
<p>Computer programs are often written in assembler because we want them
to be <strong>fast</strong> and <strong>small</strong>. However,
those are not the only criteria how a program can be optimised:</p>
<h4><a href="#OptBySize">By program size &darr;</a></h4>
<h4><a href="#OptBySpeed">By program speed &darr;</a></h4>
<h4><a href="#OptByAssemblySpeed">By assembly speed &darr;</a></h4>
<h4><a href="#OptByWriteability">By source writeability &darr;</a></h4>
<h4><a href="#OptByReadability">By source readability &darr;</a></h4>
<p>See also optimisation <a class="EXTL" href="links.htm#Tutorials">tutorials</a>.</p>
<p>Let's look how EuroAssembler can help with optimisation.</p>

<h4 id="OptBySize"><a href="#EaFnOptimize">&uarr; Optimisation by the program size</a></h4>
<p>&euro;ASM selects by default the shortest possible encoding of machine instruction.
On the other hand, it respects instruction mnemonic chosen by the programmer, which
doesn't always have to be the shortest variant. A couple of rules worth remembering:</p>
<samp>
|0000:B80000     | MOV AX,0
|0003:29C0       | SUB AX,AX ; <abbr>Using SUB or XOR for zeroing is shorter. Side effect: flags are changed.</abbr>
|0005:           |
|0005:89D8       | MOV AX,BX
|0007:93         | XCHG AX,BX ; <abbr>XCHG is shorter than MOV. Collateral damage: 2nd register is changed, too.</abbr>
|0008:           |
|0008:           |Label:
|0008:8D06[0800] | LEA AX,[Label]
|000C:B8[0800]   | MOV AX,Label  ; <abbr>Moving offset to a register is shorter than loading its address by LEA.</abbr>
|000F:           |
|000F:5053       | PUSH AX,BX
|0011:60         | PUSHAW    ; <abbr>Pushing/popping all registers at once is shorter than individual push/pop.</abbr>
|0012:           |
|0012:050100     | ADD AX,1
|0015:40         | INC AX   ; <abbr>Increment/decrement is shorter than add/subtract.</abbr>
|0016:           |
|0016:           |LoopStart:
|0016:49         | DEC CX
|0017:75FD       | JNZ LoopStart:
|0019:E2FB       | LOOP LoopStart: ; LOOP, JCXZ are shorter than separate test+jump.</samp>

<p>Programs which aspire for short-size category should have <code>PROGRAM FORMAT=COM</code> and <code>EUROASM AUTOALIGN=OFF</code>.
They may be terminated by a simple near <code>RET</code> instead of invoking DOS function TERMINATE PROCESS,
because the return address on stack of COM program is initialized to 0 and the final <code>RET</code> transfers execution to DOS terminating
interrupt at the beginning of PSP block (CS:0), which was established by the loader.
<pre>Hello PROGRAM FORMAT=COM
       MOV DX,=B "Hello world!$"
       MOV AH,9
       INT 21h
       RET
      ENDPROGRAM Hello
</pre>
<p>For some more inspiration check
<a class="EXTL" href="links.htm#Golfing_tips">[Golfing_tips]</a>,
<br><a class="EXTW" href="http://www.hugi.scene.org/compo/compoold.htm">
Hugi Size Coding Competition Series</a>,
<br><a class="EXTW" href="http://sebastianmihai.com/asmtris.html">
Graphical Tetris</a> in 1986 bytes by Sebastian Mihai,
<br><a class="EXTW" href="http://mashable.com/2015/01/30/play-it-better-tiny-chess-game/">
BootChess</a> play in 487 bytes by Oliver Poudade.
</p>
<p>Windows executable program created by &euro;ASM will be shorter
when the option <code>PROGRAM ICONFILE=</code> is explicitly specified as empty
and no resource file is linked. In this case the resource section will not
be included in PE file at all. You may also experiment with PE file properties
using program options, such as <code>PROGRAM FILEALIGN=</code> value.</p>

<h4 id="OptBySpeed"><a href="#EaFnOptimize">&uarr; Optimisation by the program speed</a></h4>
<p>Writing fast programs is fully in the hands of programmer, EuroAssembler cannot help much here,
it does no optimisations behind your back as high-level compilers do.
You may want to set <code>EUROASM AUTOALIGN=ON</code> to be sure that all data will be
aligned for the best performace. Total <a href="#InstructionModifiers">control of instruction encoding</a>
in &euro;ASM allows to select a variant with exact code size, which is faster than size-optimised
encoding stuffed by NOPs. &euro;ASM supports
<a href="#InsEnhNOP">optimised no-operations</a> encoding for
fast and easy manual alignment.</p>
<p>There are many tricks how to squeeze every CPU clock: by loop unrolling, parallelization,
avoiding memory access, and last but not least, choosing the fastest algorithm.
Performance also heavily depends on CPU model and generation.
Good guide is <a class="EXTL" href="links.htm#SoftwareOptimisation">[SoftwareOptimisation]</a>
by Agner Fog.</p>
<p>Performance is usually traded off with the program size, for instance many tricks mentioned
<a href="#OptBySize">above</a> lead to slower execution. You may want to optimize only the
critical parts of the code which are executed many times in your program.</p>

<h4 id="OptByAssemblySpeed"><a href="#EaFnOptimize">&uarr; Optimisation by the assembly speed</a></h4>
<p>EuroAssembler is not optimised for speed, nevertheless duration of assembly is usually not an issue.
It mostly depends on the number of passes, which is governed by &euro;ASM itself
and not directly impactable by the programmer.
At least two passes are always required. Number of passes increases when the program contains forward references,
assembly-time loops, macroinstructions.</p>
<p>When &euro;ASM is assembling forward-referenced jumps, at first it anticipates short distance to not-yet-defined target,
and reserves room for only 2&nbsp;byte (short) opcode.
If we know at write time that the forward target will be further than 127 bytes,
it is recommended to explicitly specify <code>DIST=NEAR</code>, which can save one pass at assembly time.
However the pass will be spared only when the distances of <b>all</b> such jumps are specified,
which is usually not worth the effort.</p>
<p>If you are interrested why &euro;ASM performs this many passes, put the statement
<code>%DISPLAY UnfixedSymbols</code> in front of <code>ENDPROGRAM</code>
to find out which symbols do oscillate between assembly passes.</p>
<p>The build time of big projects can be reduced significantly by splitting the code
to smaller, separately assembled modules, which will be finally
<a href="#EaFnLinkStatic">linked</a> together. See also the <a class="EXT"
href="../easource/euroasm.htm">euroasm.htm</a> source itself.</p>

<h4 id="OptByWriteability"><a href="#EaFnOptimize">&uarr; Optimisation by writeability</a></h4>
<p>EuroAssembler introduced some new comfortable features which are not usual among other assemblers:
<ul><li>Filenames to assemble, include or link may be specified only partially, using wildcards, e.g.
<code> INCLUDE "Win*.inc"</code>.</li>
<li>If you are not sure whether a particular file wasn't already included, use <code>INCLUDE1 file</code>
instead of <code>INCLUDE file</code> and &euro;ASM will take care of that.</li>
<li>You may use symbols and structures sooner then they are defined with pseudoinstructions <code>EQU</code>
or <code>STRUC</code>.</li>
<li>You can define and refer data item in one instruction, using literals, e. g.
<code>FLD ST0,[=Q 1.234]</code>.</li>
<li>Target of control-transfer instructions JrCXZ, LOOPcc, Jcc
is not limited to short distances. &euro;ASM encodes
<a href="#InsEnhLOOPNear">near or far proxy-jumps</a> whenever necessary.
This is not much recommendable technique as far as program speed is concerned,
but not having to worry about target distance helps to build program prototypes rapidly.
</li>
<li>Interaction with the operating system, especially in 64-bit mode, is tedious in assembler.
Programmer has to pass parameters via stack or GP registers with respect to the calling convention.
Some assemblers implement special directives (INVOKE, PROTO etc) which encapsulate
OS invokations. EuroAssembler puts off such details to
<a class="EXT" href="../maclib/#ApiMaclibs">macro level</a>. Calling conventions
are not hardwired in <q>euroasm.exe</q> and they can be easily tailored and optimized by modification of API macros.</li>
</ul>

<h4 id="OptByReadability"><a href="#EaFnOptimize">&uarr; Optimisation by readability</a></h4>
<p>Well commented and structured program is easy to read and maintain.
EuroAssembler allows HTML formatting in comments, so the source code can be directly published on web sites
and each part of source can be immediately documented with rich formated remarks, tables, images, hypertext links.</p>
<p>Size and language of identifiers is not limited, so they can be selfdescribing.
If English is not your mother tongue, it is a good idea to prefer labels with
non-English names, such as <code>Drucken</code> rather than <code>Print</code>,
<code>файл</code> rather than <code>file</code> etc.
This helps the reader of your program to distinguish
built-in reserved words from identifiers created by the author.</p>
<p>Elements of EuroAssembler language use decorators which help the human reader
to distinguish the category of decorated identifier:</p><ul>
<li>segment names are always included in square brackets <kbd>[]</kbd>,</li>
<li>labels and other symbols are recognizable by the terminating colon <kbd>:</kbd>,</li>
<li><a href="#FpSpecValues">Special floating-point values</a> are prefixed by the hash sign <kbd>#</kbd>.</li>
<li><a href="#Attributes">attribute operators</a> are postfixed by the hash sign <kbd>#</kbd>.</li>
<li>preprocessing variables and pseudoinstructions are prefixed by the percent sign <kbd>%</kbd>.</li>
</ul>

<h3 id="EaFnBegin"><a href="#EaFn">&uarr; Where to begin</a></h3>
<blockquote>If you have read this manual hitherward and if you want
to try EuroAssembler, <a class="EXTW" href="https://euroassembler.eu/download/">
download</a> the latest version, print a hardcopy of a
<a class="EXT" href="../eadoc/euroasm.png">paper crib</a>,
look at the <a class="EXT" href="../eadoc/tut_eng.htm">tutorial</a>
and look at the <a class="EXT" href="../objlib/">sample projects</a>.
Good luck!</blockquote>

<!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
