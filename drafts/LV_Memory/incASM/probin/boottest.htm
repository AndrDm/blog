<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='&euro;ASM file boottest.htm'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>boottest.htm</title>
</head>
<body class='OBJLIB' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>boottest.htm
</h1>
<p>This program demonstrates how EuroAssembler creates executable programs in the format BOOT.</p>
<p><dfn>Boot sector</dfn> is a 512 bytes long image recorded in the first sector of disk volume.
<!-->When personal computer starts, its BIOS will read boot sector and store its contents
<!-->at address 0x07C00 in memory.</p>
<p>Code in this sector is executed in real CPU mode, no DOS services are available yet.
<!-->Since the binary format cannot contain any metainformation (entry point, relocations etc),
<!-->all absolute addresses in its code must be assembled to fixed values.</p>
<p>BIOS loads the sector at agreed linear address 0x07C00 and then it will set register
<!-->DL to the drive number (DL=0 for floppy drive A:), CS=0x0000 and IP=0x7C00 (some BIOS vendors may prefer CS=0x07C0 and IP=0x0000).
<!-->Other registers are undefined. This transfers control to the first boot-sector instruction at CS:0x7C00.</p>
<blockquote>When loaded on real PC (not on simulator/virtual PC), BIOS may overwrite some bytes near the beginning with disk parameters,
<!-->that's why its safer to reserve 60 bytes for OEM_ID, BPB, DPT.</blockquote>
<p>This <q>boottest.sec</q> doesn't boot anything, it just displays some text as it's used for demonstration only.</p>
<p>EuroAssembler pseudoinstruction <code>PROGRAM FORMAT=BOOT</code> implies properties of the output file:</p><ul>
<li>Image is assembled and linked at fixed offset 0x7C00</li>
<li>Output file size is padded to 512 bytes</li>
<li>The last two bytes will contain signature 0x55,0xAA</li>
<li>Default extension of output file is <q>.sec</q></li>
</ul>
<dl>
<dt>Format</dt><dd>Special binary file for 16bit real CPU mode, executable by BIOS.</dd>
<dt>Platform</dt><dd>Personal Computer with x86 processor</dd>
<dt>Documented</dt><dd><a class="EXTL" href="../eadoc/links.htm#BootSec">[BootSec]</a></dd>
<dt>Manual</dt><dd><a class="EXT" href="../eadoc/#FormatBOOT">BOOT</a></dd>
<dt>See also</dt><dd><a class="EXT" href="binboot.htm">binboot.htm</a></dd>
<dt>Build</dt><dd class="PRE"> euroasm boottest.htm</dd>
<dt>Run</dt><dd>Boot sector cannot be run directly. Use 3rd-party utility which is able to store
<q>boottest.sec</q> to the first disk sector, for instance
<code>dd.exe if=boottest.sec of=\\.\A:</code> (Windows) or <code>dd if=boottest.sec of=/dev/fd0
</code> (Linux) and then boot from the disk A:.</dd>
</dl><pre>
         EUROASM                            ; Use default EuroAssembler options.
boottest PROGRAM Format=BOOT                ; Use default program options for the format BOOT (WIDTH=16,MODEL=TINY).
          JMPS Start:
   times  %FOR 1..60                        ; Reserve 60 bytes of NOP for BIOS.
           NOP
          %ENDFOR times
Start:    CLI                               ; Disable HW interrupts, as the stack is not settled yet.
           SUB AX,AX
           MOV DS,AX                        ; Initialize DS to 0 because boot image is linked at offset 0x7C00.
           MOV SS,AX
           MOV SP,0FFFEh                    ; Position the top of stack just below our bootsector code.
          STI
.Again:   MOV SI,=B "Hello, world!"
          CALL WriteLn.B16:
          MOV SI,=W 0007h                   ; Let DS:SI point to a character 07h (BEL), zero-terminated.
          CALL WriteLn.B16                  ; Use BIOS to ring a bell (to beep).
          MOV SI,=B "Boot sector created by EuroAssembler was loaded and executed succesfully."
          CALL WriteLn.B16:
          MOV SI,=B "Press any key to repeat."
          CALL WriteLn.B16:
          SUB AX,AX                         ; BIOS INT 16h function GET KEYSTROKE.
          INT 16h                           ; Wait for the keystroke.
          JMP .Again:
;;
WriteLn.B16:PROC ; Display a line of ASCIIZ string DS:SI using BIOS. Clobbers AX,BX,SI.
          CLD                               ; Load the string forward.
          MOV AH,0Eh                        ; BIOS INT 10h function TELETYPE OUTPUT.
          MOV BX,0007h                      ; Videopage 0, default colour (white on black).
.NextChar:LODSB                             ; Let AL=[DS:SI], increment SI.
          TEST AL                           ; Test if it's end of the string.
          JZ .LineFeed:                     ; Continue with CR+LF in the end,
          INT 10h                           ;  otherwise display the nonzero character in AL
          JMP .NextChar:                    ;  and continue with the next character.
.LineFeed:MOV AL,0Dh                        ; Carriage Return.
          INT 10h                           ; Return the cursor left.
          MOV AL,0Ah                        ; Line Feed.
          INT 10h                           ; Move the cursor one line down, scroll if necessary.
          RET
          ENDPROC WriteLn.B16
         ENDPROGRAM boottest                ; Program format BOOT will append signature 0x55,0xAA at the end of sector.
</pre>
<!-- TAILMENU -->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
