<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='&euro;ASM file testman.htm'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>testman.htm</title>
</head>
<body class='OBJLIB' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>testman.htm
<br/><a href="#Data">Data</a>
<br/><a href="#EraseTemporaryFiles">EraseTemporaryFiles</a>
<br/><a href="#Header">Header</a>
<br/><a href="#Main">Main</a>
<br/><a href="#RunTest">RunTest</a>
</h1>
<p>Project <dfn>Test manager</dfn> is the source text of a compiled 32-bit Windows executable program
<q>testman.exe</q> used to run EuroAssembler tests.</p>
<p>This utility  is an alternative to the
<a class='EXT' href='../eatests/manager.php'>script version of the Test Manager</a>.</p>
<br class="CLEAR"/>
<dl><dt>Format</dt><dd>PE 32-bit FLAT CON</dd>
<dt>Platform</dt><dd>MS Windows 32-bit and 64-bit.</dd>
<dt>Build</dt><dd>Compile in <q>prowin32</q> subdirectory with command <code>euroasm testman.htm</code>.</dd>
<dt>Output</dt><dd>Built target executable file is <q>..\eatests\testman.exe</q></dd>
<dt>Run</dt><dd>Execute testman.exe in <q>..\eatests\</q> subdirectory with command
<code>testman.exe t1234, t13*</code>, <code>testman *</code> etc.
</dd></dl>

<dl id="Header"><dt><a href="#top">Header</a></dt><dd>
<p>The header defines program format, imported libraries, used temporary files.</p>
<blockquote>As this program only uses core WinAPI functions from <q>kernel32.dll
</q>, no import library is linked.</blockquote>
</dd></dl><pre>
        EUROASM Unicode=off
testman PROGRAM Format=PE, Width=32, Entry=Start:, OutFile="..\eatests\testman.exe"
          INCLUDEHEAD1 wins.htm, winscon.htm, winssec.htm, winsfile.htm, winf32.htm, winapi.htm, \
                       status32.htm, cpuext.htm, cpuext32.htm, stdcal32.htm, string32.htm
          ; <b>Specification of files which might be created during the test</b>.
%TemporaryFilesExtensions %SET .asm, .i.asm, .j.asm, .k.asm, \ explicit sources,
                               .exp.lst, .htm.lst, .asm.lst, \ expected and obtained listing,
                               .exp.msg, .msg,               \ expected and obtained messages,
                               .exp.hex, .hex,               \ expected and obtained hexadecimal dump,
                               .ext                          ; object file expected extension specification.
</pre>
<dl id="Data"><dt><a href="#top">Data</a></dt>
<dd>Statically declared and initialized memory variables are defined in the segment <code>[.data]
</code>, uninitialized memory variables in the segment <code>[.bss]</code>.
</dd></dl><pre>
[.data]
StartupInfo        DS STARTUP_INFO        ; Windows API structures for running the test.
ProcessInformation DS PROCESS_INFORMATION
SecurityAttributes DS SECURITY_ATTRIBUTES
Errorlevel: DD 0    ; 0=all tests passed, 2=some test failed, 4=file access error, 8=syntax error.
ArgCnt:     DD 0    ; Number of remaining testman.exe command-line arguments.
ArgNr:      DD 0    ; Ordinal number of testman.exe argument.
PassedCnt:  DD 0    ; Number of passed tests.
FailedCnt:  DD 0    ; Number of failed tests.
StartTime:  DD 0    ; Milliseconds since Windows boot.
FirstFILE:
test.htm:   DS FILE ; <a class='EXT' href='../maclib/winf32.htm#FILE'>FILE</a> structures for files created during testing.
mask.htm:   DS FILE
tempfile:   DS FILE
euroasm.ini DS FILE
ext %FOR %TemporaryFilesExtensions
test%ext:   DS FILE
    %ENDFOR ext
LastFILE:
HelpText:
 DB 13,10
 DB 'File "testman.exe" is the Windows version of program "testman"',13,10
 DB ' which will check the functionality of EuroAssembler with test files.',13,10
 DB 'Testman should be run in EuroAssembler subdirectory "eatests".',13,10
 DB 'It erases option files "..\easource\euroasm.ini"',13,10
 DB ' and "..\eatests\euroasm.ini" in order to guarantee a stable configuration.',13,10
 DB 'The checked version of EuroAssembler is "..\easource\euroasm.exe" in MS Windows.',13,10
 DB 13,10
 DB 'The program testman will extract temporary files from the test file',13,10
 DB ' and then it will compile and link the extracted source.',13,10
 DB 'Finally it compares obtained listing, messages and object file',13,10
 DB '"%%test.htm.lst", "%%test.msg" and "%%test.bin"',13,10
 DB ' with expected templates stored in the files',13,10
 DB ' "%%test.exp.lst", "%%test.exp.msg" and "%%test.exp.hex".',13,10
 DB 'The output binary file is converted to hexa format before comparison.',13,10
 DB 'The test is claimed as "passed" if listing, messages and object all match.',13,10
 DB 'Temporary files are erased only when the test has succesfully passed.',13,10
 DB 13,10
 DB 'Tests may be specified as file mask(s), for instance',13,10
 DB '  testman.exe t1234.htm t1235.htm t42??.htm"',13,10
 DB 'File extension ".htm" as well as prefix "t" may be omitted, for instance',13,10
 DB ' testman.exe 7???  or  testman.exe * (launch all tests).',13,10
 DB 0
test:        DB "t????",0
mask:        DB "t????.htm",0
command:     DB "..\easource\euroasm.exe ",0 ; The tested version of EuroAssembler.
params:      DB ", TIMESTAMP=0, NOWARN=0010..0170, NOWARN=0980, NOWARN=1160",0
Error:       DB "Internal error 0x"
ErrCode:     DB "???????? accessing file ",0
AllPassed:   DB 'All '
AllTests:    DB '???? tests passed',0
PassedTests: DB '???? tests passed,'
FailedTests: DB '???? tests failed',0
Duration:    DB ' in'
Seconds:     DB '???? seconds.',13,10,0
;;
[.bss]       ; <b>Reserved, not initialized memory.</b>
DumpAddr:    D DWORD
DumpLine:    D  64 * BYTE
CmdLine:     D 128 * BYTE
Ext:         D  12 * BYTE  ; Extension of object file, e.g. ".lib".
Status:      D DWORD       ; Status flags in following encoding:
stFailed     = 1           ; Test failed.
stListing    = 2           ; Listing are different.
stMessages   = 4           ; Messages are different.
stObject     = 8           ; Object dumps are different.
stA          = 16          ; Assembler source &lt;!--A--&gt; is present in test file.
stB          = 32          ; Object dump &lt;!--B--&gt; is present in test file.
</pre>

<dl id="Main"><dt><a href="#top">Main</a></dt>
<dd>This is the program code entry which reads command-line arguments and calls subprocedure
<a href="#RunTest">RunTest</a> for each resolved test file.
</dd></dl><pre>
[.text]
Start::
  WinAPI GetTickCount                            ; Returns miliseconds since Windows was started.
  MOV [StartTime],EAX
  GetArgCount                                    ; A macro from the library <a class="EXT" href="../maclib/winapi.htm#GetArgCount">winapi.htm</a>.
  JNC ArgCountOK:
Help:                                            ; When testman.exe was provided with none or wrong test number.
  StdOutput HelpText
  ORB [Errorlevel],8
  JMP End:
ArgCountOK:
  MOV [ArgCnt],ECX
  JECXZ Help:                                    ; If run without arguments.
  FileAssign euroasm.ini,=B"..\easource\",=B"euroasm.ini"
  FileDelete euroasm.ini                         ; Make sure that no global or local <q>euroasm.ini</q> will interfere.
  FileAssign euroasm.ini,=B"..\eatests\",=B"euroasm.ini"
  FileDelete euroasm.ini
NextArg:                                         ; <b>Parse command-line arguments</b>.
  MOV EAX,[ArgNr]
  INC EAX
  MOV [ArgNr],EAX
  GetArg EAX
  JC Help:
  ; ESI,ECX is now one command-line argument, e.g. "t1234" or "/?".
  LEA EDX,[ESI+ECX]                              ; EDX points to the end of input string.
  CMPB [ESI],'/'
  JE Help:
  CMPB [ESI],'-'
  JE Help:
  MOV EDI,FirstFILE
NextFILE:
  MOV [EDI+FILE.Handle],INVALID_HANDLE_VALUE
  ADD EDI,SIZE# FILE
  CMP EDI,LastFILE
  JB NextFILE:
  MOV EDI,mask:
  MOVD [EDI+1],'????'                            ; Reinitialize the test name mask with wildcards.
  MOV AL,'t'
NextChar:
  CMP EDI,mask: + 5
  JAE Mask3:
  STOSB
SkipChar:
  CMP ESI,EDX
  JNB Mask3:                                     ; If no more characters to parse.
  LODSB
  CMP AL,'?'
  JE NextChar:
  CMP AL,'*'
  JE Mask3:
  CMP AL,'0'
  JB SkipChar:
  CMP AL,'9'
  JA SkipChar:                                   ; Skip nondigit and nonwild characters.
  JMP NextChar:
Mask3:
  FileAssign mask.htm:, mask:
  FileEach mask.htm:, RunTest                    ; Perform <a id="FileEach" href="#RunTest">RunTest</a> with all wildcard-resolved files.
  DEC [ArgCnt]
  JNZ NextArg:                                   ; If provided with more than one argument.
  WinAPI GetTickCount
  SUB EAX,[StartTime]                            ; EAX is now the duration af all tests in miliseconds.
  JC Report1:
  MOV ECX,1000
  SUB EDX,EDX
  DIV ECX
  StoD Seconds, Size=4, Align=right
Report1:
  MOV EAX,[PassedCnt]
  StoD PassedTests, Size=4, Align=right
  StoD AllTests, Size=4, Align=right
  MOV EAX,[FailedCnt]
  StoD FailedTests, Size=4, Align=right
  MOV ESI,PassedTests:
  TEST EAX                                       ; Did any test fail?
  JNZ Report2:
  MOV ESI,AllPassed:
Report2:
  ADD EAX,[PassedCnt]
  CMP EAX,1
  JNA End:                                       ; Skip the report if only one test was performed.
  StdOutput ESI,Duration
End:TerminateProgram [Errorlevel]
</pre>

<dl id="RunTest"><dt><a href="#top">RunTest</a></dt>
<dd>This is a callback procedure which executes one test assigned in the file <q>mask.htm</q> and then compares the test results.
<br/>It continuously reports test name and results on the standard output.</dd>
<dt>Input</dt><dd><b>ESI=</b> is pointer to a zero-terminated, wildcard-resolved test file name, e.g. <q>t1234.htm</q>.</dd>
<dt>Called from</dt><dd><a class="EXT" href="../maclib/winf32.htm#FileEach">FileEach</a> macro invoked at <a href="#FileEach">Main.Mask3:</a>.
</dd></dl><pre>
RunTest PROC
    MOV EDI,test:
    MOV ECX,5
    REP MOVSB
    StdOutput test:, =B" ... "
ext %FOR %TemporaryFilesExtensions
      FileAssign test%ext:, test:, =B"%ext"
    %ENDFOR ext
    CALL EraseTemporaryFiles
    XOR EAX,EAX
    MOV [Status],EAX
    FileAssign  test.htm, test:, =B".htm"
    FileStreamOpen test.htm
    JC .Error:
.NextLine:
    FileStreamReadLn test.htm                    ; Parse test file and write its divisions to temporary files.
    JC .Error:
    JZ .CloseWrittenFiles:                       ; If no more lines.
    MOV ECX,EAX
    StripSpaces ESI,ECX
    CMPB [ESI],'<'                                                                                        ; >
    JE .Marker?:
    MOV EBX,test.exp.lst
    CMP [EBX+FILE.Handle],INVALID_HANDLE_VALUE   ; Is the file already open?
    JNZ .StoreLstLine:
    FileStreamCreate EBX
    JC .Error:
.StoreLstLine:
    FileStreamWriteLn EBX,ESI,ECX    ;
    JC .Error:
    JMP .NextLine:
.Marker?:
    CMPD [ESI],'<!--' ;-->                       ; Is it the marker beginning with <kbd>&lt;!--</kbd> ?
    JNE .NextLine:
    MOV EAX,[ESI+4]
    MOV EDX,EAX
    SHR EDX,8
    CMP EDX,'-->'                                ; Is it the marker ending with <kbd>--&gt;</kbd> ?
    JNE .NextLine:
    ADD ESI,8                                    ; Size of the marker.
    SUB ECX,8
    JB .Error:
    Dispatch AL, 'M','A','I','J','K','E','B'
    JMP .NextLine:                               ; Ignore other markers.
.StoreDivisionLine:
    CMP [EBX+FILE.Handle],INVALID_HANDLE_VALUE   ; It the file already open?
    JNE .StoreLine:
    FileStreamCreate EBX
    JC .Error:
.StoreLine:
    FileStreamWriteLn EBX,ESI,ECX
    JC .Error:
    JMP .NextLine:
.M: MOV EBX,test.exp.msg
    JMP .StoreDivisionLine:
.A: SetSt [Status],stA
    MOV EBX,test.asm
    JMP .StoreDivisionLine:
.I: MOV EBX,test.i.asm
    JMP .StoreDivisionLine:
.J: MOV EBX,test.j.asm
    JMP .StoreDivisionLine:
.K: MOV EBX,test.k.asm
    JMP .StoreDivisionLine:
.E: SetSt [Status],stB
    MOV EBX,test.ext
    JMP .StoreDivisionLine:
.B: SetSt [Status],stB
    MOV EBX,test.exp.hex
    CMP ECX,53
    JBE .B5:
    MOV ECX,53                                   ; Trim off the character column of the dump.
.B5:StripSpaces ESI,ECX
    JMP .StoreDivisionLine:
.CloseWrittenFiles:
    FileClose test.htm, test.asm, test.i.asm, test.j.asm, test.k.asm, test.ext, test.exp.lst, test.exp.msg, test.exp.hex
    JNSt [Status],stB,.ExecTest:                 ; If output object file won't be checked in this test.
    FileLoad test.ext                            ; File exists if the <!--E--> marker specified output extension.
    JNC .ObjExt:
    SetSt [Status],stFailed+stObject
    JMP .ExecTest:
.ObjExt:
    MOV ECX,EAX                                  ; File size.
    StripSpaces ESI,ECX
    MOV AL,'.'
    MOV EDI,Ext:
    CMP [ESI],AL
    JE .StoreExt:
    STOSB
.StoreExt:
    REP MOVSB
    XOR EAX,EAX
    STOSB
    FileDelete test.ext
    FileAssign test.ext, test:, Ext:             ; Reassign with the extension depending on program format.
.ExecTest:                                       ; <b>Execute the test</b>.
    MOV ESI,=B".htm"
    MOV EBX,test.htm.lst
    JNSt [Status],stA,.CmdLine:
    MOV ESI,=B".asm"
    MOV EBX,test.asm.lst
.CmdLine:
    Concat$ CmdLine:, command:, test:, ESI, params:
    MOV ECX,SIZE# SecurityAttributes
    XOR EAX,EAX
    MOV [SecurityAttributes.nLength],ECX
    MOV [SecurityAttributes.lpSecurityDescriptor],EAX
    INC EAX
    MOV [SecurityAttributes.bInheritHandle],EAX
    MOV ESI,test.msg.Name                        ; Filename to capture standard output messages.
    WinAPI CreateFileA,ESI,FILE_APPEND_DATA,FILE_SHARE_WRITE|FILE_SHARE_READ, \
           SecurityAttributes,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,0
    CMP EAX,INVALID_HANDLE_VALUE
    JE .Error:
    MOV [test.msg.Handle],EAX
    MOV ECX,SIZE# StartupInfo
    MOV EDX,STARTF_USESTDHANDLES
    MOV [StartupInfo.cb],ECX
    MOV [StartupInfo.hStdOutput],EAX
    MOV [StartupInfo.dwFlags],EDX
    WinAPI CreateProcess,0,CmdLine:,0,0,1,0,0,0,StartupInfo,ProcessInformation
    TEST EAX
    JZ .Error:
    WinAPI WaitForSingleObject,[ProcessInformation.hProcess],10k ; Until euroasm.exe finishes the test.
    WinAPI CloseHandle,[test.msg.Handle]
    ; <b>Compare listing</b>.
    MOV EBX,test.htm.lst
    JNSt [Status],stA,.LstLoad
    MOV EBX,test.asm.lst
.LstLoad:
    FileLoad EBX                                 ; Obtained listing.
    JC .LstFail:
    FileLoad test.exp.lst                        ; Expected listing.
    JC .LstFail:
    MOV ESI,[EBX+FILE.BufPtr]
    MOV ECX,[EBX+FILE.BufSize]
    MOV EDI,[test.exp.lst.BufPtr]
    CMP ECX,[test.exp.lst.BufSize]
    JNE .LstFail:
    REPE CMPSB
    JE .CmpMsg:
.LstFail:
    SetSt [Status],stFailed + stListing
.CmpMsg:; <b>Compare messages</b>.
    FileLoad test.msg                            ; Obtained messages.
    JC .MsgFail:
    FileLoad test.exp.msg                        ; Expected messages.
    JC .MsgFail:
    MOV ESI,[test.msg.BufPtr]
    MOV ECX,[test.msg.BufSize]
    MOV EDI,[test.exp.msg.BufPtr]
    CMP ECX,[test.exp.msg.BufSize]
    JNE .MsgFail:
    REPE CMPSB
    JE .MsgOK:
.MsgFail:
    SetSt [Status],stFailed + stMessages
.MsgOK:
    JNSt [Status],stB,.ObjOK:
    ; <b>Compare target object executable file</b>.
    ; Convert output file test.ext to hexadecimal dump test.hex.
    FileStreamCreate test.hex
    JC .ObjFail:
    FileLoad test.ext                            ; Obtained target binary output file.
    JC .ObjFail:
    MOV ESI,[test.ext.BufPtr]
    MOV EDX,[test.ext.BufSize]
    ADD EDX,ESI                                  ; End of the dumped data.
    MOV [DumpAddr],-16
.NextDumpLine:                                   ; Prepare one dump row into DumpLine.
    MOV EDI,DumpLine
    MOV EAX,[DumpAddr]
    ADD EAX,16
    MOV [DumpAddr],EAX
    AND EAX,0x0000FFFF
    StoH EDI,Size=4
    MOV AL,':'
    STOSB
    MOV ECX,16                                   ; Prepare max. 16 hex bytes.
.NextDumpByte:
    CMP ESI,EDX
    JNB .WriteDumpLine:
    XOR EAX,EAX
    MOV AL,' '                                   ; Space separation.
    STOSB
    LODSB
    StoH EDI,Size=2                              ; Dump one byte.
    LOOP .NextDumpByte:
.WriteDumpLine:
    SUB EDI,DumpLine                             ; Written line size.
    FileStreamWriteLn test.hex:, DumpLine,EDI
    CMP ESI,EDX
    JB .NextDumpLine:
    FileClose test.hex:
    ; Compare hexadecimal dumps.
    FileLoad test.hex ; Obtained dump.
    JC .ObjFail:
    FileLoad test.exp.hex                        ; Expected dump.
    JC .ObjFail:
    MOV ESI,[test.hex.BufPtr]
    MOV ECX,[test.hex.BufSize]
    MOV EDI,[test.exp.hex.BufPtr]
    CMP ECX,[test.exp.hex.BufSize]
    JNE .ObjFail:
    REPE CMPSB
    JE .ObjOK:
.ObjFail:
    SetSt [Status],stFailed + stObject
.ObjOK:
    MOV EBX,test.htm.lst
    JNSt [Status],stA,.CloseExpFiles:
    MOV EBX,test.asm.lst
.CloseExpFiles:
    FileClose EBX, test.exp.lst, test.msg, test.exp.msg
    JNSt [Status],stB,.Evaluate:
    FileClose test.ext, test.hex, test.exp.hex
.Evaluate:
    JSt [Status],stFailed,.Failed:
    StdOutput ="passed.", Eol=yes
    INCD [PassedCnt]
    CALL EraseTemporaryFiles
    JMP .ObjectOK:
.Error:                                         ; EBX=^FILE
    ORB [Errorlevel],4
    WinAPI GetLastError
    StoH ErrCode,Size=8
    StdOutput Error:
    LEA ESI,[EBX+FILE.Name]
    StdOutput ESI, Eol=yes
    STC                                          ; Break further FileEach wildcard resolving.
    JMP .EndRun:
.Failed:
    StdOutput ="failed:", Eol=yes
    INCD [FailedCnt]
    ORB [Errorlevel],2
    JNSt [Status],stListing,.ListingOK:
    LEA ESI,[EBX+FILE.Name]
    StdOutput ='Obtained listing "', ESI, ='" differs from expected "', \
              test.exp.lst.Name, ='".', Eol=yes
.ListingOK:
    JNSt [Status],stMessages,.MessagesOK:
    StdOutput ='Obtained message "', test.msg.Name, ='"     differs from expected "', \
              test.exp.msg.Name, ='".', Eol=yes
.MessagesOK:
    JNSt [Status],stObject,.ObjectOK:
    StdOutput ='Obtained  output "',test.hex.Name,='"     differs from expected "', \
              test.exp.hex.Name, ='".', Eol=yes
.ObjectOK:
    CLC                                          ; CF=0 to continue FileEach with the next test.
.EndRun:
    RET
  ENDP RunTest
</pre>

<dl id="EraseTemporaryFiles"><dt><a href="#top">EraseTemporaryFiles</a></dt>
<dd>Files with extensions declared in the <a href="#Header">Header</a> are deleted.
<br/>Only the file with extension <q>.htm</q> (test source) survives.</dd>
<dt>Called from</dt><dd><a href="#RunTest">RunTest</a> before the test is performed,
<!---->and after it has passed OK. Temporary files remain when the test failed.
</dd></dl><pre>
EraseTemporaryFiles PROC                         ; Delete all <q>test*.*</q> files except for <q>test.htm</q>.
   FileAssign tempfile, test:, =B"*.*"
   FileEach tempfile, EraseTempfile
   RET
EraseTempfile PROC                               ; Callback from FileEach to erase one FILE EBX whose name is at ESI.
       CMPB [ESI+9],0
       JNE .Erase:
       MOV EAX,[ESI+5]
       OR EAX,0x20202000                         ; Convert the resolved file extension to lower case.
       CMP EAX,".htm"
       JE .Skip:                                 ; Do not delete the test file itself.
.Erase:FileDelete EBX
.Skip: RET                                       ; CF=0 to continue with FileEach.
     ENDPROC EraseTempfile
   ENDPROC EraseTemporaryFiles
</pre><pre>
 ENDPROGRAM testman
</pre>
<!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
