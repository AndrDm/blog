<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='&euro;ASM file skelet64.htm'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>skelet64.htm</title>
</head>
<body class='OBJLIB' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>skelet64.htm
<br/><a href="#Header">Header</a>
<br/><a href="#Resource">Resource</a>
<br/><a href="#WinMain">WinMain</a>
<br/><a href="#WndCreate">WndCreate</a>
<br/><a href="#WndProc">WndProc</a>
</h1>
<p><dfn>Skeleton</dfn> is a sample program for MS Windows
<!---->which uses <em>Graphic User Interface</em> (GUI) and
<em>Windows resources</em> (menu and icon).</p>
<p>It displays a  white window with standard menu on the top
<!---->and simple status bar on the bottom.</p>
<p>Program can be assembled in ANSI or WIDE (UNICODE) version, which is selected by
<code>EUROASM UNICODE=</code> option in the <a href="#Header">Header
</a>. No other intervention in source text is required,
<!---->because all strings are defined with unspecified character width, and all system calls
<!---->are managed by macro WinABI, which automatically selects ANSI or WIDE version.</p>
<br class="CLEAR"/>
<dl>
<dt>Format</dt><dd>PE 64bit FLAT GUI</dd>
<dt>Platform</dt><dd>MS Windows 64bits.</dd>
<dt>Import-library build</dt><dd>If you don't have the import library <q>..\objlib\winapi.lib</q> yet,
<br/>compile in <q>prowin32</q> subdirectory with command
<code>euroasm dll2lib.htm</code>.</dd>
<dt>Resource build</dt><dd>If you have changed <a href="#Resource">resource script source
</a>, generate the script <q>..\objlib\skelet.rc</q> with command
<code>euroasm skelet64.htm</code> in directory <q>..\prowin64\</q>,
<br/>then use 3rd party resource compiler and compile the script <q>..\objlib\skelet.rc</q>
<br/>to the module <q>..\objlib\skelet.res</q> with command
<code>rc.exe skelet.rc</code> in directory <q>..\objlib\</q>.</dd>
<dt>Build</dt><dd>Assemble the project in <q>..\prowin64\</q> directory with command
<code>euroasm skelet64.htm</code>.</dd>
<dt>Run</dt><dd><code>skelet64.exe</code></dd>
</dl>

<dl id="Header"><dt><a href="#top">Header</a></dt><dd>
<p>The header specifies program format, included macrolibraries, linked import library and other modules.</p>
<blockquote><p>Included macrolibraries are available in subdirectory <q>..\maclib\</q>.</p>
<p>If you don't have the linked import library <q>..\objlib\winapi.lib</q>,
<!---->you can create it with sample project
<a class="EXT" href="../prowin32/dll2lib.htm">DLL2LIB</a>.</p>
<p>If you don't have the linked resource module <q>..\objlib\skelet.res</q>,
<!---->you can create it with <code>rc.exe ..\objlib\skelet.rc</code>.</p></blockquote>
<p>The header defines numeric menu identificators <code>%MenuId*
</code> which will be used both in <a href="#Resource">resource script</a> (<code>skelet PROGRAM
</code>) and in the <a href="#WndProc">window procedure</a> of the main <code>skelet64 PROGRAM
</code>. That is why they have the form of preprocessing %variables rather than EQU symbols.
<br/>Menu identificator values are chosen arbitrary,
<!---->they are biased by the constant WM_APP to avoid collision
<!---->with other internal MS Windows message identifiers.
</dd></dl><pre>
             EUROASM UNICODE=Enabled     ; This option selects ANSI or WIDE version.
             EUROASM CPU=X64,SIMD=Yes,DumpWidth=32
             INCLUDE "winsgui.htm"       ; This file defines the constant WM_APP.
%IconResName %SET SkeletIcon
%MenuResName %SET SkeletMenu
%MenuIdExit  %SETA WM_APP + 1
%MenuIdHelp  %SETA WM_APP + 2
%MenuIdAbout %SETA WM_APP + 3
%StatusBarId %SETA WM_APP + 9
;;
skelet64     PROGRAM Format=PE, Subsystem=GUI, Width=64, Entry=WinMain
               INCLUDE winabi.htm, wins.htm, winsgui.htm, fastcall.htm, \
                       cpuext.htm, cpuext64.htm
               LINK winapi.lib, skelet.res
</pre>

<dl id="Resource"><dt><a href="#top">Resource</a></dt><dd>
<p>Resources of this project are defined here in the form of text file
<q>skelet.rc</q> created by an embedded program block named <dfn>skelet</dfn>.</p>
<p>The resource script <q>skelet.rc</q> will be created in subdirectory <q>..\objlib\
</q> and it has to be compiled to <q>..\objlib\skelet.res</q> by an external
<!---->resource compiler (EuroAssembler cannot compile resources).</p>
<p>Resource script may be written in ANSI or UNICODE encoding (OEM or WIDE),
<!---->because Microsoft Resource Compiler <q>rc.exe</q> available in
<a class="EXTL" href="../eadoc/links.htm#WindowsSDK">[WindowsSDK]
</a> &nbsp; treats both variants equally.</p></dd>
<dt>Documented</dt><dd><a class="EXTL" href="../eadoc/links.htm#RC">[RC]</a></dd>
</dl><pre>
skelet PROGRAM Format=BIN, OutFile="..\objlib\skelet.rc"
D ' /* Resource definition for skeleton programs        ',13,10
D '     which are shipped with EuroAssembler. */        ',13,10
D '%IconResName ICON "..\objlib\skelet.ico"             ',13,10
D '%MenuResName MENU                                    ',13,10
D '              BEGIN                                  ',13,10
D '                POPUP "&File"                        ',13,10
D '                BEGIN                                ',13,10
D '                  MENUITEM "E&xit  [Esc]",%MenuIdExit',13,10
D '                END                                  ',13,10
D '                POPUP "&Help"                        ',13,10
D '                BEGIN                                ',13,10
D '                  MENUITEM "&Help  [F1]",%MenuIdHelp ',13,10
D '                  MENUITEM "&About [F2]",%MenuIdAbout',13,10
D '                END                                  ',13,10
D '               END                                   ',13,10
       ENDPROGRAM skelet
</pre>

<dl id="WinMain">
<dt><a href="#top">WinMain</a></dt>
<dd><p>This is the main program entry procedure which represents the target executable
<q>skelet64.exe</q>.</dd>
<dt>Invoked by</dt><dd>MS Windows loader.</dd>
<dt>Invokes</dt><dd><a href="#WndCreate">WndCreate</a></dd>
</dl><pre>
[.data]
InfoText   D "Skeleton of Windows program written in EuroAssembler."
           DU 0 ; This NUL character works both for ANSI and WIDE variants.
HelpText   D "Press [F1] to show this help.",13,10, \
             "Press [F2] to show information about this program.",13,10, \
             "Press [Esc] to quit the program.",0
%IF %^UNICODE
  %Char %SET UNICODE
%ELSE
  %Char %SET ANSI
%ENDIF
AboutText  D "This %Char %^WIDTH[]bit program %^PROGRAM.exe was created",13,10, \
             "by EuroAssembler ver.%^VERSION %^EUROASMOS",13,10, \
             "on %^DATE[7..8].%^DATE[5..6].%^DATE[1..4] %^TIME[1..2]:%^TIME[3..4] UTC.",0
StatusInfo D "Status bar displays information about menu items.",0
[.bss]
Msg        D MSG                  ; Window <a class="EXT" href="../maclib/winsgui.htm#MSG">message</a>.
[.text]
WinMain PROC                      ; Program <b>entry point</b>.
     Clear SEGMENT#[.bss],Size=SIZE#[.bss] ; Make sure to start with zeroed memory of uninitialized reserved data.
     CALL WndCreate               ; Initialize the program window.
.MsgLoop:
     WinABI GetMessage, Msg,0,0,0
     TEST RAX
     JZ .MsgQuit:                 ; ZF signalizes message WM_QUIT - request for program termination.
     WinABI TranslateMessage, Msg ; Remap character keys from national keyboards.
     WinABI DispatchMessage,  Msg ; Let Windows call our <a href="#WndProc">WndProc</a>.
     JMP .MsgLoop:                ; Wait for another message.
.MsgQuit:
     TerminateProgram Errorlevel=[Msg.wParam]
  ENDPROC WinMain
</pre>

<dl id="WndProc">
<dt><a href="#top">WndProc</a>, hWnd, uMsg, wParam, lParam</dt>
<dd>This is a callback procedure which receives and handles messages for the program window.
<!---->Message parameters are by FastCall convention provided in registers RCX, RDX, R8, R9,
<!---->we'll save them to shadow space with macro <a class="EXT" href="../maclib/fastcall.htm#SaveToShadow">SaveToShadow
</a>. Thanks to this their contents will be available by formal names (
<code>[%hWnd], [%uMsg], [%wParam], [%lParam]</code>), too, in the entire WndProc body.</p>
<p>Messages obtained from Windows are dispatched by WndProc to their handlers.
<br/>Unhandled messages are passed to DefWindowProc.</p></dd>
<dt>Handler input</dt><dd><b>RCX=[%hWnd]</b> is the main window handle (the same as static [hWindow] obtained by
<a href="#WndCreate">WndCreate</a>).
<br/><b>RDX=[%uMsg]</b> is message identifier,
<br/><b>R8=[%wParam]</b> is message w-parameter,
<br/><b>R9=[%lParam]</b> is message l-parameter.</dd>
<dt>Handler output</dt><dd><b>RAX=</b>0 if the message was completely processed by the handler.
<!---->Otherwise the message is processed by WinAPI&nbsp;DefWindowProc and RAX outputs its return value.
<br/>Scratch registers RCX,RDX,R8..R11 may be destroyed in the handlers.
<br/>Callee-save registers RBX,RSI,RDI,R12..R15 must be restored, if used in the handlers. This provides macro
<a class="EXT" href="../maclib/fastcall.htm#Uses">Uses</a>.</dd>
<dt>Invoked by</dt><dd>WinAPI DispatchMessage.</dd>
</dl><pre>
[.bss]
PaintStruct  DS PAINTSTRUCT ; Structured variable used in painting.
hDC          D QWORD        ; Handle of device context used in painting.
[.text]
WndProc Procedure hWnd, uMsg, wParam, lParam ; These parameters are provided in RCX,RDX,R8,R9.
    SaveToShadow
    Uses RBX,RSI,RDI ; It's only necessary if some of callee-save registers was used in this fastcalled procedure.
    ; <b>Fork message uMsg=RDX to its handler</b> using macro <a class="EXT" href="../maclib/cpuext.htm#Dispatch">Dispatch</a>:
     Dispatch EDX, WM_CREATE, WM_DESTROY, WM_PAINT, WM_KEYDOWN, WM_COMMAND, WM_MENUSELECT
.Def:WinABI DefWindowProc,[%hWnd],[%uMsg],[%wParam],[%lParam]  ; Pass ignored event to DefWindowProc with unchanged arguments.
     JMP .Ret:  ; Go to EndProcedure with result value RAX as returned from DefWindowProc.
     ; All <b>message handlers</b> terminate with a jump to label .Def: or .Ret0:.
.WM_CREATE: ; The main window is being created.
     WinABI SendMessage,[hStatusBar],SB_SIMPLE,1,0  ; Tell the status bar to be simple.
     WinABI SendMessage,[hWindow],WM_MENUSELECT,0,0 ; Initialize status bar with StatusInfo.
     JMP .Ret0:
.WM_PAINT:  ; Window needs to repaint its contents.
     WinABI BeginPaint,[hWindow],PaintStruct
     MOV [hDC],RAX
     WinABI TextOut,RAX,30,30,InfoText,SIZE# (InfoText) << %^UNICODE ; TextOutW expects text size in characters.>>
                                    ; That's why the size in bytes is right-shifted by 1 when %^UNICODE is -1.
     WinABI EndPaint,[hWindow],PaintStruct
     JMP .Ret0:
.WM_COMMAND:   ; User selected menu item identified by R8=wParam.
     Dispatch R8, %MenuIdExit, %MenuIdHelp, %MenuIdAbout
     JMP .Def: ; Pass unhandled items to WinAPI DefWindowProc.
.WM_KEYDOWN:   ; Non-character hot key R8=wParam was pressed.
     Dispatch R8, VK_ESCAPE, VK_F1, VK_F2
     JMP .Def: ; Pass ignored keys to WinAPI DefWindowProc.
.%MenuIdExit:  ; Menu Exit selected.
.VK_ESCAPE:    ; <kbd>Esc</kbd> pressed.
     WinABI SendMessage,RCX,WM_DESTROY,0,0
     JMP .Ret0:
.%MenuIdHelp:  ; Menu Help selected.
.VK_F1:        ; <kbd>F1</kbd> pressed.
     WinABI MessageBox,RCX,HelpText,WndClassName,MB_ICONINFORMATION
     JMP .Ret0:
.%MenuIdAbout: ; Menu About selected.
.VK_F2:        ; <kbd>F2</kbd> pressed.
     WinABI MessageBox,RCX,AboutText,WndClassName,MB_ICONINFORMATION
     JMP .Ret0:
.WM_MENUSELECT: ; User unrolled a menu item. Show online help in status bar.
MenuStatus PROC ; Namespace MenuStatus is used to avoid collision in %MenuId* labels.
     AND R8,0x0000_FFFF  ; Menu identifier is in the low word of wParam.
     Dispatch R8,%MenuIdExit,%MenuIdHelp,%MenuIdAbout
     MOV R10,StatusInfo ; Use neutral StatusInfo help text for undispatched menu items.
 .ShowStatus:WinABI SendMessage,[hStatusBar],SB_SETTEXT,SB_SIMPLEID,R10
     JMP WndProc.Ret0:
 .%MenuIdExit: MOV R10,="Terminate program."
               JMP .ShowStatus:
 .%MenuIdHelp: MOV R10,="Show help information."
               JMP .ShowStatus:
 .%MenuIdAbout:MOV R10,="Show information about this program."
               JMP .ShowStatus:
 ENDP MenuStatus
.WM_DESTROY: ; Program terminates.
     WinABI PostQuitMessage,0     ; Tell Windows to quit this program with errorlevel 0.
    ; JMP .Ret0:
.Ret0:XOR EAX,EAX
.Ret:EndProcedure WndProc
</pre>

<dl id="WndCreate">
<dt><a href="#top">WndCreate</a></dt>
<dd>Program <q>skelet64.exe</q> uses one graphical window.
<!---->Procedure <dfn>WndCreate</dfn> constructs the window class and window object.</dd>
<dt>Called by</dt><dd><a href="#WinMain">WinMain</a> (private calling convention).</dd>
</dl><pre>
[.data]
WndClassName D "SKELET",0
[.bss]
WndClassEx   DS WNDCLASSEX ; Definition of the window <a class="EXT" href="../maclib/winsgui.htm#WNDCLASSEX">class structure</a>.
hWindow      D QWORD       ; Handle of the window object.
hStatusBar   D QWORD       ; Handle of the status bar.
[.text]
WndCreate PROC
    ; <b>Register class SKELET</b> for the main window.
    MOV [WndClassEx.cbSize],SIZE# WNDCLASSEX
    MOV [WndClassEx.lpszClassName],WndClassName
    MOV [WndClassEx.style],CS_HREDRAW|CS_VREDRAW
    MOV [WndClassEx.lpfnWndProc],WndProc
    WinABI GetModuleHandle,0
    MOV [WndClassEx.hInstance],RAX
    MOV RDX,="%IconResName"           ; Icon name used in resources.
    WinABI LoadIcon,RAX,RDX           ; Load icon handle from resources.
    MOV [WndClassEx.hIcon],RAX
    WinABI LoadCursor,0,IDC_HAND      ; Load cursor handle from stock.
    MOV [WndClassEx.hCursor],RAX
    WinABI GetStockObject,WHITE_BRUSH ; Default window background colour.
    MOV [WndClassEx.hbrBackground],RAX
    MOV [WndClassEx.lpszMenuName], ="%MenuResName" ; Menu name used in resources.
    WinABI RegisterClassEx, WndClassEx
    ; <b>Define the main window</b>.
    WinABI CreateWindowEx, WS_EX_CLIENTEDGE,                        \
           WndClassName, WndClassName, WS_OVERLAPPEDWINDOW,         \
           CW_USEDEFAULT,CW_USEDEFAULT,CW_USEDEFAULT,CW_USEDEFAULT, \
           0, 0, [WndClassEx.hInstance], 0
    MOV [hWindow],RAX
    ; <b>Define status bar</b> as the child of the main window.
    WinABI CreateStatusWindow,WS_CHILD+WS_BORDER+WS_VISIBLE, \
           StatusInfo, [hWindow], %StatusBarId
    MOV [hStatusBar],RAX
    WinABI ShowWindow, [hWindow], SW_SHOWNORMAL
    WinABI UpdateWindow, [hWindow]
    RET
   ENDP WndCreate
</pre>
<pre>
   ENDPROGRAM skelet64
</pre>
<!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
