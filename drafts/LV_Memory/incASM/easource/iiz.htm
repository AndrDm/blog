<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='iiz.htm source file'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>iiz.htm source file</title>
</head>
<body class='EASOURCE' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>iix.htm
<br/><i>Enumerations</i>
<br/><a href="#IizList">IizList</a>
<br/><i>Instruction groups</i>
<br/><a href="#IizGroupVADDPD">IizGroupVADDPD</a>
<br/><a href="#IizGroupVADDPS">IizGroupVADDPS</a>
<br/><a href="#IizGroupVADDSD">IizGroupVADDSD</a>
<br/><a href="#IizGroupVADDSS">IizGroupVADDSS</a>
<br/><a href="#IizGroupVMINPD">IizGroupVMINPD</a>
<br/><a href="#IizGroupVMINPS">IizGroupVMINPS</a>
<br/><a href="#IizGroupVMINSD">IizGroupVMINSD</a>
<br/><a href="#IizGroupVMINSS">IizGroupVMINSS</a>
<br/><i>Instruction handlers</i><br/><span class="ILIST">
<a href="#IizVADDPD">VADDPD</a>
<a href="#IizVADDPS">VADDPS</a>
<a href="#IizVADDSD">VADDSD</a>
<a href="#IizVADDSS">VADDSS</a>
<a href="#IizVADDSUBPD">VADDSUBPD</a>
<a href="#IizVADDSUBPS">VADDSUBPS</a>
<a href="#IizVALIGND">VALIGND</a>
<a href="#IizVALIGNQ">VALIGNQ</a>
<a href="#IizVBLENDMPD">VBLENDMPD</a>
<a href="#IizVBLENDMPS">VBLENDMPS</a>
<a href="#IizVBROADCASTF128">VBROADCASTF128</a>
<a href="#IizVBROADCASTF32X2">VBROADCASTF32X2</a>
<a href="#IizVBROADCASTF32X4">VBROADCASTF32X4</a>
<a href="#IizVBROADCASTF32X8">VBROADCASTF32X8</a>
<a href="#IizVBROADCASTF64X2">VBROADCASTF64X2</a>
<a href="#IizVBROADCASTF64X4">VBROADCASTF64X4</a>
<a href="#IizVBROADCASTI128">VBROADCASTI128</a>
<a href="#IizVBROADCASTI32X2">VBROADCASTI32X2</a>
<a href="#IizVBROADCASTI32X4">VBROADCASTI32X4</a>
<a href="#IizVBROADCASTI32X8">VBROADCASTI32X8</a>
<a href="#IizVBROADCASTI64X2">VBROADCASTI64X2</a>
<a href="#IizVBROADCASTI64X4">VBROADCASTI64X4</a>
<a href="#IizVBROADCASTSD">VBROADCASTSD</a>
<a href="#IizVBROADCASTSS">VBROADCASTSS</a>
<a href="#IizVCMPEQPD">VCMPEQPD</a>
<a href="#IizVCMPEQPS">VCMPEQPS</a>
<a href="#IizVCMPEQSD">VCMPEQSD</a>
<a href="#IizVCMPEQSS">VCMPEQSS</a>
<a href="#IizVCMPEQ_OQPD">VCMPEQ_OQPD</a>
<a href="#IizVCMPEQ_OQPS">VCMPEQ_OQPS</a>
<a href="#IizVCMPEQ_OQSD">VCMPEQ_OQSD</a>
<a href="#IizVCMPEQ_OQSS">VCMPEQ_OQSS</a>
<a href="#IizVCMPEQ_OSPD">VCMPEQ_OSPD</a>
<a href="#IizVCMPEQ_OSPS">VCMPEQ_OSPS</a>
<a href="#IizVCMPEQ_OSSD">VCMPEQ_OSSD</a>
<a href="#IizVCMPEQ_OSSS">VCMPEQ_OSSS</a>
<a href="#IizVCMPEQ_UQPD">VCMPEQ_UQPD</a>
<a href="#IizVCMPEQ_UQPS">VCMPEQ_UQPS</a>
<a href="#IizVCMPEQ_UQSD">VCMPEQ_UQSD</a>
<a href="#IizVCMPEQ_UQSS">VCMPEQ_UQSS</a>
<a href="#IizVCMPEQ_USPD">VCMPEQ_USPD</a>
<a href="#IizVCMPEQ_USPS">VCMPEQ_USPS</a>
<a href="#IizVCMPEQ_USSD">VCMPEQ_USSD</a>
<a href="#IizVCMPEQ_USSS">VCMPEQ_USSS</a>
<a href="#IizVCMPFALSEPD">VCMPFALSEPD</a>
<a href="#IizVCMPFALSEPS">VCMPFALSEPS</a>
<a href="#IizVCMPFALSESD">VCMPFALSESD</a>
<a href="#IizVCMPFALSESS">VCMPFALSESS</a>
<a href="#IizVCMPFALSE_OQPD">VCMPFALSE_OQPD</a>
<a href="#IizVCMPFALSE_OQPS">VCMPFALSE_OQPS</a>
<a href="#IizVCMPFALSE_OQSD">VCMPFALSE_OQSD</a>
<a href="#IizVCMPFALSE_OQSS">VCMPFALSE_OQSS</a>
<a href="#IizVCMPFALSE_OSPD">VCMPFALSE_OSPD</a>
<a href="#IizVCMPFALSE_OSPS">VCMPFALSE_OSPS</a>
<a href="#IizVCMPFALSE_OSSD">VCMPFALSE_OSSD</a>
<a href="#IizVCMPFALSE_OSSS">VCMPFALSE_OSSS</a>
<a href="#IizVCMPGEPD">VCMPGEPD</a>
<a href="#IizVCMPGEPS">VCMPGEPS</a>
<a href="#IizVCMPGESD">VCMPGESD</a>
<a href="#IizVCMPGESS">VCMPGESS</a>
<a href="#IizVCMPGE_OQPD">VCMPGE_OQPD</a>
<a href="#IizVCMPGE_OQPS">VCMPGE_OQPS</a>
<a href="#IizVCMPGE_OQSD">VCMPGE_OQSD</a>
<a href="#IizVCMPGE_OQSS">VCMPGE_OQSS</a>
<a href="#IizVCMPGE_OSPD">VCMPGE_OSPD</a>
<a href="#IizVCMPGE_OSPS">VCMPGE_OSPS</a>
<a href="#IizVCMPGE_OSSD">VCMPGE_OSSD</a>
<a href="#IizVCMPGE_OSSS">VCMPGE_OSSS</a>
<a href="#IizVCMPGTPD">VCMPGTPD</a>
<a href="#IizVCMPGTPS">VCMPGTPS</a>
<a href="#IizVCMPGTSD">VCMPGTSD</a>
<a href="#IizVCMPGTSS">VCMPGTSS</a>
<a href="#IizVCMPGT_OQPD">VCMPGT_OQPD</a>
<a href="#IizVCMPGT_OQPS">VCMPGT_OQPS</a>
<a href="#IizVCMPGT_OQSD">VCMPGT_OQSD</a>
<a href="#IizVCMPGT_OQSS">VCMPGT_OQSS</a>
<a href="#IizVCMPGT_OSPD">VCMPGT_OSPD</a>
<a href="#IizVCMPGT_OSPS">VCMPGT_OSPS</a>
<a href="#IizVCMPGT_OSSD">VCMPGT_OSSD</a>
<a href="#IizVCMPGT_OSSS">VCMPGT_OSSS</a>
<a href="#IizVCMPLEPD">VCMPLEPD</a>
<a href="#IizVCMPLEPS">VCMPLEPS</a>
<a href="#IizVCMPLESD">VCMPLESD</a>
<a href="#IizVCMPLESS">VCMPLESS</a>
<a href="#IizVCMPLE_OQPD">VCMPLE_OQPD</a>
<a href="#IizVCMPLE_OQPS">VCMPLE_OQPS</a>
<a href="#IizVCMPLE_OQSD">VCMPLE_OQSD</a>
<a href="#IizVCMPLE_OQSS">VCMPLE_OQSS</a>
<a href="#IizVCMPLE_OSPD">VCMPLE_OSPD</a>
<a href="#IizVCMPLE_OSPS">VCMPLE_OSPS</a>
<a href="#IizVCMPLE_OSSD">VCMPLE_OSSD</a>
<a href="#IizVCMPLE_OSSS">VCMPLE_OSSS</a>
<a href="#IizVCMPLTPD">VCMPLTPD</a>
<a href="#IizVCMPLTPS">VCMPLTPS</a>
<a href="#IizVCMPLTSD">VCMPLTSD</a>
<a href="#IizVCMPLTSS">VCMPLTSS</a>
<a href="#IizVCMPLT_OQPD">VCMPLT_OQPD</a>
<a href="#IizVCMPLT_OQPS">VCMPLT_OQPS</a>
<a href="#IizVCMPLT_OQSD">VCMPLT_OQSD</a>
<a href="#IizVCMPLT_OQSS">VCMPLT_OQSS</a>
<a href="#IizVCMPLT_OSPD">VCMPLT_OSPD</a>
<a href="#IizVCMPLT_OSPS">VCMPLT_OSPS</a>
<a href="#IizVCMPLT_OSSD">VCMPLT_OSSD</a>
<a href="#IizVCMPLT_OSSS">VCMPLT_OSSS</a>
<a href="#IizVCMPNEQPD">VCMPNEQPD</a>
<a href="#IizVCMPNEQPS">VCMPNEQPS</a>
<a href="#IizVCMPNEQSD">VCMPNEQSD</a>
<a href="#IizVCMPNEQSS">VCMPNEQSS</a>
<a href="#IizVCMPNEQ_OQPD">VCMPNEQ_OQPD</a>
<a href="#IizVCMPNEQ_OQPS">VCMPNEQ_OQPS</a>
<a href="#IizVCMPNEQ_OQSD">VCMPNEQ_OQSD</a>
<a href="#IizVCMPNEQ_OQSS">VCMPNEQ_OQSS</a>
<a href="#IizVCMPNEQ_OSPD">VCMPNEQ_OSPD</a>
<a href="#IizVCMPNEQ_OSPS">VCMPNEQ_OSPS</a>
<a href="#IizVCMPNEQ_OSSD">VCMPNEQ_OSSD</a>
<a href="#IizVCMPNEQ_OSSS">VCMPNEQ_OSSS</a>
<a href="#IizVCMPNEQ_UQPD">VCMPNEQ_UQPD</a>
<a href="#IizVCMPNEQ_UQPS">VCMPNEQ_UQPS</a>
<a href="#IizVCMPNEQ_UQSD">VCMPNEQ_UQSD</a>
<a href="#IizVCMPNEQ_UQSS">VCMPNEQ_UQSS</a>
<a href="#IizVCMPNEQ_USPD">VCMPNEQ_USPD</a>
<a href="#IizVCMPNEQ_USPS">VCMPNEQ_USPS</a>
<a href="#IizVCMPNEQ_USSD">VCMPNEQ_USSD</a>
<a href="#IizVCMPNEQ_USSS">VCMPNEQ_USSS</a>
<a href="#IizVCMPNGEPD">VCMPNGEPD</a>
<a href="#IizVCMPNGEPS">VCMPNGEPS</a>
<a href="#IizVCMPNGESD">VCMPNGESD</a>
<a href="#IizVCMPNGESS">VCMPNGESS</a>
<a href="#IizVCMPNGE_UQPD">VCMPNGE_UQPD</a>
<a href="#IizVCMPNGE_UQPS">VCMPNGE_UQPS</a>
<a href="#IizVCMPNGE_UQSD">VCMPNGE_UQSD</a>
<a href="#IizVCMPNGE_UQSS">VCMPNGE_UQSS</a>
<a href="#IizVCMPNGE_USPD">VCMPNGE_USPD</a>
<a href="#IizVCMPNGE_USPS">VCMPNGE_USPS</a>
<a href="#IizVCMPNGE_USSD">VCMPNGE_USSD</a>
<a href="#IizVCMPNGE_USSS">VCMPNGE_USSS</a>
<a href="#IizVCMPNGTPD">VCMPNGTPD</a>
<a href="#IizVCMPNGTPS">VCMPNGTPS</a>
<a href="#IizVCMPNGTSD">VCMPNGTSD</a>
<a href="#IizVCMPNGTSS">VCMPNGTSS</a>
<a href="#IizVCMPNGT_UQPD">VCMPNGT_UQPD</a>
<a href="#IizVCMPNGT_UQPS">VCMPNGT_UQPS</a>
<a href="#IizVCMPNGT_UQSD">VCMPNGT_UQSD</a>
<a href="#IizVCMPNGT_UQSS">VCMPNGT_UQSS</a>
<a href="#IizVCMPNGT_USPD">VCMPNGT_USPD</a>
<a href="#IizVCMPNGT_USPS">VCMPNGT_USPS</a>
<a href="#IizVCMPNGT_USSD">VCMPNGT_USSD</a>
<a href="#IizVCMPNGT_USSS">VCMPNGT_USSS</a>
<a href="#IizVCMPNLEPD">VCMPNLEPD</a>
<a href="#IizVCMPNLEPS">VCMPNLEPS</a>
<a href="#IizVCMPNLESD">VCMPNLESD</a>
<a href="#IizVCMPNLESS">VCMPNLESS</a>
<a href="#IizVCMPNLE_UQPD">VCMPNLE_UQPD</a>
<a href="#IizVCMPNLE_UQPS">VCMPNLE_UQPS</a>
<a href="#IizVCMPNLE_UQSD">VCMPNLE_UQSD</a>
<a href="#IizVCMPNLE_UQSS">VCMPNLE_UQSS</a>
<a href="#IizVCMPNLE_USPD">VCMPNLE_USPD</a>
<a href="#IizVCMPNLE_USPS">VCMPNLE_USPS</a>
<a href="#IizVCMPNLE_USSD">VCMPNLE_USSD</a>
<a href="#IizVCMPNLE_USSS">VCMPNLE_USSS</a>
<a href="#IizVCMPNLTPD">VCMPNLTPD</a>
<a href="#IizVCMPNLTPS">VCMPNLTPS</a>
<a href="#IizVCMPNLTSD">VCMPNLTSD</a>
<a href="#IizVCMPNLTSS">VCMPNLTSS</a>
<a href="#IizVCMPNLT_UQPD">VCMPNLT_UQPD</a>
<a href="#IizVCMPNLT_UQPS">VCMPNLT_UQPS</a>
<a href="#IizVCMPNLT_UQSD">VCMPNLT_UQSD</a>
<a href="#IizVCMPNLT_UQSS">VCMPNLT_UQSS</a>
<a href="#IizVCMPNLT_USPD">VCMPNLT_USPD</a>
<a href="#IizVCMPNLT_USPS">VCMPNLT_USPS</a>
<a href="#IizVCMPNLT_USSD">VCMPNLT_USSD</a>
<a href="#IizVCMPNLT_USSS">VCMPNLT_USSS</a>
<a href="#IizVCMPORDPD">VCMPORDPD</a>
<a href="#IizVCMPORDPS">VCMPORDPS</a>
<a href="#IizVCMPORDSD">VCMPORDSD</a>
<a href="#IizVCMPORDSS">VCMPORDSS</a>
<a href="#IizVCMPORD_QPD">VCMPORD_QPD</a>
<a href="#IizVCMPORD_QPS">VCMPORD_QPS</a>
<a href="#IizVCMPORD_QSD">VCMPORD_QSD</a>
<a href="#IizVCMPORD_QSS">VCMPORD_QSS</a>
<a href="#IizVCMPORD_SPD">VCMPORD_SPD</a>
<a href="#IizVCMPORD_SPS">VCMPORD_SPS</a>
<a href="#IizVCMPORD_SSD">VCMPORD_SSD</a>
<a href="#IizVCMPORD_SSS">VCMPORD_SSS</a>
<a href="#IizVCMPPS">VCMPPS</a>
<a href="#IizVCMPSD">VCMPSD</a>
<a href="#IizVCMPSS">VCMPPD</a>
<a href="#IizVCMPSS">VCMPSS</a>
<a href="#IizVCMPTRUEPD">VCMPTRUEPD</a>
<a href="#IizVCMPTRUEPS">VCMPTRUEPS</a>
<a href="#IizVCMPTRUESD">VCMPTRUESD</a>
<a href="#IizVCMPTRUESS">VCMPTRUESS</a>
<a href="#IizVCMPTRUE_UQPD">VCMPTRUE_UQPD</a>
<a href="#IizVCMPTRUE_UQPS">VCMPTRUE_UQPS</a>
<a href="#IizVCMPTRUE_UQSD">VCMPTRUE_UQSD</a>
<a href="#IizVCMPTRUE_UQSS">VCMPTRUE_UQSS</a>
<a href="#IizVCMPTRUE_USPD">VCMPTRUE_USPD</a>
<a href="#IizVCMPTRUE_USPS">VCMPTRUE_USPS</a>
<a href="#IizVCMPTRUE_USSD">VCMPTRUE_USSD</a>
<a href="#IizVCMPTRUE_USSS">VCMPTRUE_USSS</a>
<a href="#IizVCMPUNORDPD">VCMPUNORDPD</a>
<a href="#IizVCMPUNORDPS">VCMPUNORDPS</a>
<a href="#IizVCMPUNORDSD">VCMPUNORDSD</a>
<a href="#IizVCMPUNORDSS">VCMPUNORDSS</a>
<a href="#IizVCMPUNORD_QPD">VCMPUNORD_QPD</a>
<a href="#IizVCMPUNORD_QPS">VCMPUNORD_QPS</a>
<a href="#IizVCMPUNORD_QSD">VCMPUNORD_QSD</a>
<a href="#IizVCMPUNORD_QSS">VCMPUNORD_QSS</a>
<a href="#IizVCMPUNORD_SPD">VCMPUNORD_SPD</a>
<a href="#IizVCMPUNORD_SPS">VCMPUNORD_SPS</a>
<a href="#IizVCMPUNORD_SSD">VCMPUNORD_SSD</a>
<a href="#IizVCMPUNORD_SSS">VCMPUNORD_SSS</a>
<a href="#IizVCOMISD">VCOMISD</a>
<a href="#IizVCOMISS">VCOMISS</a>
<a href="#IizVCOMPRESSPD">VCOMPRESSPD</a>
<a href="#IizVCOMPRESSPS">VCOMPRESSPS</a>
<a href="#IizVCVTDQ2PD">VCVTDQ2PD</a>
<a href="#IizVCVTDQ2PS">VCVTDQ2PS</a>
<a href="#IizVCVTPD2DQ">VCVTPD2DQ</a>
<a href="#IizVCVTPD2PS">VCVTPD2PS</a>
<a href="#IizVCVTPD2QQ">VCVTPD2QQ</a>
<a href="#IizVCVTPD2UDQ">VCVTPD2UDQ</a>
<a href="#IizVCVTPD2UQQ">VCVTPD2UQQ</a>
<a href="#IizVCVTPH2PS">VCVTPH2PS</a>
<a href="#IizVCVTPS2DQ">VCVTPS2DQ</a>
<a href="#IizVCVTPS2PD">VCVTPS2PD</a>
<a href="#IizVCVTPS2PH">VCVTPS2PH</a>
<a href="#IizVCVTPS2QQ">VCVTPS2QQ</a>
<a href="#IizVCVTPS2UDQ">VCVTPS2UDQ</a>
<a href="#IizVCVTPS2UQQ">VCVTPS2UQQ</a>
<a href="#IizVCVTQQ2PD">VCVTQQ2PD</a>
<a href="#IizVCVTQQ2PS">VCVTQQ2PS</a>
<a href="#IizVCVTSD2SI">VCVTSD2SI</a>
<a href="#IizVCVTSD2SS">VCVTSD2SS</a>
<a href="#IizVCVTSD2USI">VCVTSD2USI</a>
<a href="#IizVCVTSI2SD">VCVTSI2SD</a>
<a href="#IizVCVTSI2SS">VCVTSI2SS</a>
<a href="#IizVCVTSS2SD">VCVTSS2SD</a>
<a href="#IizVCVTSS2SI">VCVTSS2SI</a>
<a href="#IizVCVTSS2USI">VCVTSS2USI</a>
<a href="#IizVCVTTPD2DQ">VCVTTPD2DQ</a>
<a href="#IizVCVTTPD2QQ">VCVTTPD2QQ</a>
<a href="#IizVCVTTPD2UDQ">VCVTTPD2UDQ</a>
<a href="#IizVCVTTPD2UQQ">VCVTTPD2UQQ</a>
<a href="#IizVCVTTPS2DQ">VCVTTPS2DQ</a>
<a href="#IizVCVTTPS2QQ">VCVTTPS2QQ</a>
<a href="#IizVCVTTPS2UDQ">VCVTTPS2UDQ</a>
<a href="#IizVCVTTPS2UQQ">VCVTTPS2UQQ</a>
<a href="#IizVCVTTSD2SI">VCVTTSD2SI</a>
<a href="#IizVCVTTSD2USI">VCVTTSD2USI</a>
<a href="#IizVCVTTSS2SI">VCVTTSS2SI</a>
<a href="#IizVCVTTSS2USI">VCVTTSS2USI</a>
<a href="#IizVCVTUDQ2PD">VCVTUDQ2PD</a>
<a href="#IizVCVTUDQ2PS">VCVTUDQ2PS</a>
<a href="#IizVCVTUQQ2PD">VCVTUQQ2PD</a>
<a href="#IizVCVTUQQ2PS">VCVTUQQ2PS</a>
<a href="#IizVCVTUSI2SD">VCVTUSI2SD</a>
<a href="#IizVCVTUSI2SS">VCVTUSI2SS</a>
<a href="#IizVDBPSADBW">VDBPSADBW</a>
<a href="#IizVDIVPD">VDIVPD</a>
<a href="#IizVDIVPS">VDIVPS</a>
<a href="#IizVDIVSD">VDIVSD</a>
<a href="#IizVDIVSS">VDIVSS</a>
<a href="#IizVDPPD">VDPPD</a>
<a href="#IizVDPPS">VDPPS</a>
<a href="#IizVEXPANDPD">VEXPANDPD</a>
<a href="#IizVEXPANDPS">VEXPANDPS</a>
<a href="#IizVEXTRACTF128">VEXTRACTF128</a>
<a href="#IizVEXTRACTF32X4">VEXTRACTF32X4</a>
<a href="#IizVEXTRACTF32X8">VEXTRACTF32X8</a>
<a href="#IizVEXTRACTF64X2">VEXTRACTF64X2</a>
<a href="#IizVEXTRACTF64X4">VEXTRACTF64X4</a>
<a href="#IizVEXTRACTI128">VEXTRACTI128</a>
<a href="#IizVEXTRACTI32X4">VEXTRACTI32X4</a>
<a href="#IizVEXTRACTI32X8">VEXTRACTI32X8</a>
<a href="#IizVEXTRACTI64X2">VEXTRACTI64X2</a>
<a href="#IizVEXTRACTI64X4">VEXTRACTI64X4</a>
<a href="#IizVEXTRACTPS">VEXTRACTPS</a>
<a href="#IizVFIXUPIMMPD">VFIXUPIMMPD</a>
<a href="#IizVFIXUPIMMPS">VFIXUPIMMPS</a>
<a href="#IizVFIXUPIMMSD">VFIXUPIMMSD</a>
<a href="#IizVFIXUPIMMSS">VFIXUPIMMSS</a>
<a href="#IizVFMADD233PS">VFMADD233PS</a>
<a href="#IizVFPCLASSPD">VFPCLASSPD</a>
<a href="#IizVFPCLASSPS">VFPCLASSPS</a>
<a href="#IizVFPCLASSSD">VFPCLASSSD</a>
<a href="#IizVFPCLASSSS">VFPCLASSSS</a>
<a href="#IizVGATHERDPD">VGATHERDPD</a>
<a href="#IizVGATHERDPS">VGATHERDPS</a>
<a href="#IizVGATHERPF0DPD">VGATHERPF0DPD</a>
<a href="#IizVGATHERPF0DPS">VGATHERPF0DPS</a>
<a href="#IizVGATHERPF0HINTDPD">VGATHERPF0HINTDPD</a>
<a href="#IizVGATHERPF0HINTDPS">VGATHERPF0HINTDPS</a>
<a href="#IizVGATHERPF0QPD">VGATHERPF0QPD</a>
<a href="#IizVGATHERPF0QPS">VGATHERPF0QPS</a>
<a href="#IizVGATHERPF1DPD">VGATHERPF1DPD</a>
<a href="#IizVGATHERPF1DPS">VGATHERPF1DPS</a>
<a href="#IizVGATHERPF1QPD">VGATHERPF1QPD</a>
<a href="#IizVGATHERPF1QPS">VGATHERPF1QPS</a>
<a href="#IizVGATHERQPD">VGATHERQPD</a>
<a href="#IizVGATHERQPS">VGATHERQPS</a>
<a href="#IizVGETEXPPD">VGETEXPPD</a>
<a href="#IizVGETEXPPS">VGETEXPPS</a>
<a href="#IizVGETEXPSD">VGETEXPSD</a>
<a href="#IizVGETEXPSS">VGETEXPSS</a>
<a href="#IizVGETMANTPD">VGETMANTPD</a>
<a href="#IizVGETMANTPS">VGETMANTPS</a>
<a href="#IizVGETMANTSD">VGETMANTSD</a>
<a href="#IizVGETMANTSS">VGETMANTSS</a>
<a href="#IizVHADDPD">VHADDPD</a>
<a href="#IizVHADDPS">VHADDPS</a>
<a href="#IizVHSUBPD">VHSUBPD</a>
<a href="#IizVHSUBPS">VHSUBPS</a>
<a href="#IizVINSERTF128">VINSERTF128</a>
<a href="#IizVINSERTF32X4">VINSERTF32X4</a>
<a href="#IizVINSERTF32X8">VINSERTF32X8</a>
<a href="#IizVINSERTF64X2">VINSERTF64X2</a>
<a href="#IizVINSERTF64X4">VINSERTF64X4</a>
<a href="#IizVINSERTI128">VINSERTI128</a>
<a href="#IizVINSERTI32X4">VINSERTI32X4</a>
<a href="#IizVINSERTI32X8">VINSERTI32X8</a>
<a href="#IizVINSERTI64X2">VINSERTI64X2</a>
<a href="#IizVINSERTI64X4">VINSERTI64X4</a>
<a href="#IizVINSERTPS">VINSERTPS</a>
<a href="#IizVMAXPD">VMAXPD</a>
<a href="#IizVMAXPS">VMAXPS</a>
<a href="#IizVMAXSD">VMAXSD</a>
<a href="#IizVMAXSS">VMAXSS</a>
<a href="#IizVMINPD">VMINPD</a>
<a href="#IizVMINPS">VMINPS</a>
<a href="#IizVMINSD">VMINSD</a>
<a href="#IizVMINSS">VMINSS</a>
<a href="#IizVMOVAPD">VMOVAPD</a>
<a href="#IizVMOVAPS">VMOVAPS</a>
<a href="#IizVMOVD">VMOVD</a>
<a href="#IizVMOVDDUP">VMOVDDUP</a>
<a href="#IizVMOVDQA">VMOVDQA</a>
<a href="#IizVMOVDQA32">VMOVDQA32</a>
<a href="#IizVMOVDQA64">VMOVDQA64</a>
<a href="#IizVMOVDQU">VMOVDQU</a>
<a href="#IizVMOVDQU16">VMOVDQU16</a>
<a href="#IizVMOVDQU32">VMOVDQU32</a>
<a href="#IizVMOVDQU64">VMOVDQU64</a>
<a href="#IizVMOVDQU8">VMOVDQU8</a>
<a href="#IizVMOVHLPS">VMOVHLPS</a>
<a href="#IizVMOVHPD">VMOVHPD</a>
<a href="#IizVMOVHPS">VMOVHPS</a>
<a href="#IizVMOVLHPS">VMOVLHPS</a>
<a href="#IizVMOVLPD">VMOVLPD</a>
<a href="#IizVMOVLPS">VMOVLPS</a>
<a href="#IizVMOVMSKPD">VMOVMSKPD</a>
<a href="#IizVMOVMSKPS">VMOVMSKPS</a>
<a href="#IizVMOVNRAPD">VMOVNRAPD</a>
<a href="#IizVMOVNRAPS">VMOVNRAPS</a>
<a href="#IizVMOVNRNGOAPD">VMOVNRNGOAPD</a>
<a href="#IizVMOVNRNGOAPS">VMOVNRNGOAPS</a>
<a href="#IizVMOVNTDQ">VMOVNTDQ</a>
<a href="#IizVMOVNTDQA">VMOVNTDQA</a>
<a href="#IizVMOVNTPD">VMOVNTPD</a>
<a href="#IizVMOVNTPS">VMOVNTPS</a>
<a href="#IizVMOVNTQQ">VMOVNTQQ</a>
<a href="#IizVMOVQ">VMOVQ</a>
<a href="#IizVMOVQQA">VMOVQQA</a>
<a href="#IizVMOVQQU">VMOVQQU</a>
<a href="#IizVMOVSD">VMOVSD</a>
<a href="#IizVMOVSHDUP">VMOVSHDUP</a>
<a href="#IizVMOVSLDUP">VMOVSLDUP</a>
<a href="#IizVMOVSS">VMOVSS</a>
<a href="#IizVMOVUPD">VMOVUPD</a>
<a href="#IizVMOVUPS">VMOVUPS</a>
<a href="#IizVMPSADBW">VMPSADBW</a>
<a href="#IizVMULPD">VMULPD</a>
<a href="#IizVMULPS">VMULPS</a>
<a href="#IizVMULSD">VMULSD</a>
<a href="#IizVMULSS">VMULSS</a>
<a href="#IizVPABSB">VPABSB</a>
<a href="#IizVPABSD">VPABSD</a>
<a href="#IizVPABSQ">VPABSQ</a>
<a href="#IizVPABSW">VPABSW</a>
<a href="#IizVPADDB">VPADDB</a>
<a href="#IizVPADDD">VPADDD</a>
<a href="#IizVPADDQ">VPADDQ</a>
<a href="#IizVPADDSB">VPADDSB</a>
<a href="#IizVPADDSW">VPADDSW</a>
<a href="#IizVPADDUSB">VPADDUSB</a>
<a href="#IizVPADDUSW">VPADDUSW</a>
<a href="#IizVPADDW">VPADDW</a>
<a href="#IizVPBLENDMB">VPBLENDMB</a>
<a href="#IizVPBLENDMD">VPBLENDMD</a>
<a href="#IizVPBLENDMQ">VPBLENDMQ</a>
<a href="#IizVPBLENDMW">VPBLENDMW</a>
<a href="#IizVPBROADCASTB">VPBROADCASTB</a>
<a href="#IizVPBROADCASTD">VPBROADCASTD</a>
<a href="#IizVPBROADCASTQ">VPBROADCASTQ</a>
<a href="#IizVPBROADCASTW">VPBROADCASTW</a>
<a href="#IizVPCOMPRESSD">VPCOMPRESSD</a>
<a href="#IizVPCOMPRESSQ">VPCOMPRESSQ</a>
<a href="#IizVPEXPANDD">VPEXPANDD</a>
<a href="#IizVPEXPANDQ">VPEXPANDQ</a>
<a href="#IizVPEXTRB">VPEXTRB</a>
<a href="#IizVPEXTRD">VPEXTRD</a>
<a href="#IizVPEXTRQ">VPEXTRQ</a>
<a href="#IizVPEXTRW">VPEXTRW</a>
<a href="#IizVPGATHERDD">VPGATHERDD</a>
<a href="#IizVPGATHERDQ">VPGATHERDQ</a>
<a href="#IizVPGATHERQD">VPGATHERQD</a>
<a href="#IizVPGATHERQQ">VPGATHERQQ</a>
<a href="#IizVPINSRB">VPINSRB</a>
<a href="#IizVPINSRD">VPINSRD</a>
<a href="#IizVPINSRQ">VPINSRQ</a>
<a href="#IizVPINSRW">VPINSRW</a>
<a href="#IizVPMADDWD">VPMADDWD</a>
<a href="#IizVPMAXSB">VPMAXSB</a>
<a href="#IizVPMAXSD">VPMAXSD</a>
<a href="#IizVPMAXSQ">VPMAXSQ</a>
<a href="#IizVPMAXSW">VPMAXSW</a>
<a href="#IizVPMAXUB">VPMAXUB</a>
<a href="#IizVPMAXUD">VPMAXUD</a>
<a href="#IizVPMAXUQ">VPMAXUQ</a>
<a href="#IizVPMAXUW">VPMAXUW</a>
<a href="#IizVPMINSB">VPMINSB</a>
<a href="#IizVPMINSD">VPMINSD</a>
<a href="#IizVPMINSQ">VPMINSQ</a>
<a href="#IizVPMINSW">VPMINSW</a>
<a href="#IizVPMINUB">VPMINUB</a>
<a href="#IizVPMINUD">VPMINUD</a>
<a href="#IizVPMINUQ">VPMINUQ</a>
<a href="#IizVPMINUW">VPMINUW</a>
<a href="#IizVPMULUDQ">VPMULUDQ</a>
<a href="#IizVPSADBW">VPSADBW</a>
<a href="#IizVPSCATTERDD">VPSCATTERDD</a>
<a href="#IizVPSCATTERDQ">VPSCATTERDQ</a>
<a href="#IizVPSCATTERQD">VPSCATTERQD</a>
<a href="#IizVPSCATTERQQ">VPSCATTERQQ</a>
<a href="#IizVPSHUFB">VPSHUFB</a>
<a href="#IizVPSHUFD">VPSHUFD</a>
<a href="#IizVPSHUFHW">VPSHUFHW</a>
<a href="#IizVPSHUFLW">VPSHUFLW</a>
<a href="#IizVPSLLD">VPSLLD</a>
<a href="#IizVPSLLDQ">VPSLLDQ</a>
<a href="#IizVPSLLQ">VPSLLQ</a>
<a href="#IizVPSLLVD">VPSLLVD</a>
<a href="#IizVPSLLVQ">VPSLLVQ</a>
<a href="#IizVPSLLVW">VPSLLVW</a>
<a href="#IizVPSLLW">VPSLLW</a>
<a href="#IizVPSRAD">VPSRAD</a>
<a href="#IizVPSRAQ">VPSRAQ</a>
<a href="#IizVPSRAVD">VPSRAVD</a>
<a href="#IizVPSRAVQ">VPSRAVQ</a>
<a href="#IizVPSRAVW">VPSRAVW</a>
<a href="#IizVPSRAW">VPSRAW</a>
<a href="#IizVPSRLD">VPSRLD</a>
<a href="#IizVPSRLDQ">VPSRLDQ</a>
<a href="#IizVPSRLQ">VPSRLQ</a>
<a href="#IizVPSRLVD">VPSRLVD</a>
<a href="#IizVPSRLVQ">VPSRLVQ</a>
<a href="#IizVPSRLVW">VPSRLVW</a>
<a href="#IizVPSRLW">VPSRLW</a>
<a href="#IizVPSUBB">VPSUBB</a>
<a href="#IizVPSUBD">VPSUBD</a>
<a href="#IizVPSUBQ">VPSUBQ</a>
<a href="#IizVPSUBSB">VPSUBSB</a>
<a href="#IizVPSUBSW">VPSUBSW</a>
<a href="#IizVPSUBUSB">VPSUBUSB</a>
<a href="#IizVPSUBUSW">VPSUBUSW</a>
<a href="#IizVPSUBW">VPSUBW</a>
<a href="#IizVSCATTERDPD">VSCATTERDPD</a>
<a href="#IizVSCATTERDPS">VSCATTERDPS</a>
<a href="#IizVSCATTERPF0DPD">VSCATTERPF0DPD</a>
<a href="#IizVSCATTERPF0DPS">VSCATTERPF0DPS</a>
<a href="#IizVSCATTERPF0HINTDPD">VSCATTERPF0HINTDPD</a>
<a href="#IizVSCATTERPF0HINTDPS">VSCATTERPF0HINTDPS</a>
<a href="#IizVSCATTERPF0QPD">VSCATTERPF0QPD</a>
<a href="#IizVSCATTERPF0QPS">VSCATTERPF0QPS</a>
<a href="#IizVSCATTERPF1DPD">VSCATTERPF1DPD</a>
<a href="#IizVSCATTERPF1DPS">VSCATTERPF1DPS</a>
<a href="#IizVSCATTERPF1QPD">VSCATTERPF1QPD</a>
<a href="#IizVSCATTERPF1QPS">VSCATTERPF1QPS</a>
<a href="#IizVSCATTERQPD">VSCATTERQPD</a>
<a href="#IizVSCATTERQPS">VSCATTERQPS</a>
<a href="#IizVSHUFF32X4">VSHUFF32X4</a>
<a href="#IizVSHUFF64X2">VSHUFF64X2</a>
<a href="#IizVSHUFI32X4">VSHUFI32X4</a>
<a href="#IizVSHUFI64X2">VSHUFI64X2</a>
<a href="#IizVSHUFPD">VSHUFPD</a>
<a href="#IizVSHUFPS">VSHUFPS</a>
<a href="#IizVSUBPD">VSUBPD</a>
<a href="#IizVSUBPS">VSUBPS</a>
<a href="#IizVSUBSD">VSUBSD</a>
<a href="#IizVSUBSS">VSUBSS</a>
<a href="#IizVUCOMISD">VUCOMISD</a>
<a href="#IizVUCOMISS">VUCOMISS</a>
</span><!--IizAList-->
</h1>
<dl id="IizHandlers"><dt><a href="#top">&uarr; IizHandlers</a> </dt>
<dd> assemble EVEX-encodable AVX-512 machine instructions.</dd>
<dt>See also</dt><dd><a class="EXT" href="ii.htm#IiHandlers">IiHandlers</a>,
<a class="EXTL" href="../eadoc/links.htm#IntelAVX512">[IntelAVX512]</a>.</dd>
</dl>

<table class="SMALL"><caption>Available broadcasting SIMD instructions</caption>
<tr><th>V(P)BROADCAST</th><th>8bit</th>
<th>16bit</th>
<th>32bit</th>
<th>64bit</th>
<th>128bit</th></tr>
<tr><th>int tuple1</th>
<td><sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVPBROADCASTB">VPBROADCASTB</a></td>
<td><sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVPBROADCASTW">VPBROADCASTW</a></td>
<td><sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVPBROADCASTD">VPBROADCASTD</a></td>
<td><sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVPBROADCASTQ">VPBROADCASTQ</a></td>
<td><sup>V</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTI128">VBROADCASTI128</a></td>
</tr>
<tr><th>int tuple2</th><td></td><td></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTI32X2">VBROADCASTI32X2</a></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTI64X2">VBROADCASTI64X2</a></td>
<td></td>
</tr>
<tr><th>int tuple4</th><td></td><td></td>
<td><sup>E,M</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTI32X4">VBROADCASTI32X4</a></td>
<td><sup>E,M</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTI64X4">VBROADCASTI64X4</a></td>
<td></td>
</tr>
<tr><th>int tuple8</th><td></td><td></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTI32X8">VBROADCASTI32X8</a></td>
<td></td><td></td>
</tr>
<tr><th>float tuple1</th><td></td><td></td>
<td><sup>E,M,V</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTSS">VBROADCASTSS</a></td>
<td><sup>E,M,V</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTSD">VBROADCASTSD</a></td>
<td><sup>V</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTF128">VBROADCASTF128</a></td>
<tr><th>float tuple2</th><td></td><td></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTF32X2">VBROADCASTF32X2</a></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTF64X2">VBROADCASTF64X2</a></td>
<td></td>
</tr>
<tr><th>float tuple4</th><td></td><td></td>
<td><sup>E,M</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTF32X4">VBROADCASTF32X4</a></td>
<td><sup>E,M</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTF64X4">VBROADCASTF64X4</a></td>
<td></td>
</tr>
<tr><th>float tuple8</th><td></td><td></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVBROADCASTF32X8">VBROADCASTF32X8</a></td>
<td></td><td></td>
</tr>
</table>

<table class="SMALL"><caption>Available scalar SIMD type conversions</caption>
<tr><th>(<sub>(e)</sub>V<sub>ex</sub>)CVT(T<sub>runc</sub>) S<sub>calar</sub></th>
<th>2SI&nbsp;<sub>int32sig</sub></th><th>2USI&nbsp;<sub>int32uns</sub></th>
<th>2SQ&nbsp;<sub>int64sig</sub></th><th>2USQ&nbsp;<sub>int64uns</sub></th>
<th>2SH&nbsp;<sub>float16</sub></th><th>2SS&nbsp;<sub>float32</sub></th>
<th>2SD&nbsp;<sub>float64</sub></th></tr>
<tr><th>SI&nbsp;<sub>int32sig</sub></th><td>NOP</td><td></td><td></td><td></td><td></td>
<td><a class="EXT" href="../easource/iip.htm#IipCVTSI2SS">CVTSI2SS</a>
<sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTSI2SS">VCVTSI2SS</a></td>
<td><a class="EXT" href="../easource/iip.htm#IipCVTSI2SD">CVTSI2SD</a>
<sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTSI2SD">VCVTSI2SD</a></td></tr>
<tr><th>USI&nbsp;<sub>int32uns</sub></th><td></td><td>NOP</td><td></td><td></td><td></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTUSI2SS">VCVTUSI2SS</a></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTUSI2SD">VCVTUSI2SD</a></td></tr>
<tr><th>SQ&nbsp;<sub>int64sig</sub></th><td></td><td></td><td>NOP</td><td><td></td>
<td></td><td></td></tr>
<tr><th>USQ&nbsp;<sub>int64uns</sub></th><td></td><td></td><td></td><td>NOP</td>
<td></td><td></td><td></td></tr>
<tr><th>SH&nbsp;<sub>float16</sub></th><td></td><td></td><td></td><td></td>
<td>NOP</td><td></td><td></td></tr>
<tr><th>SS&nbsp;<sub>float32</sub></th><td>
<a class="EXT" href="../easource/iip.htm#IipCVTSS2SI">CVTSS2SI</a>
<sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTSS2SI">VCVTSS2SI</a>
<a class="EXT" href="../easource/iip.htm#IipCVTTSS2SI">CVTTSS2SI</a>
<sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTSS2SI">VCVTTSS2SI</a></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTSS2USI">VCVTSS2USI</a>
<sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTTSS2USI">VCVTTSS2USI</a></td>
<td></td><td></td><td></td><td>NOP</td><td>
<a class="EXT" href="../easource/iip.htm#IipCVTSS2SD">CVTSS2SD</a>
<sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTSS2SD">VCVTSS2SD</a></td></tr>
<tr><th>SD&nbsp;<sub>float64</sub></th>
<td><a class="EXT" href="../easource/iip.htm#IipCVTSD2SI">CVTSI2SS</a>
<sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTSD2SI">VCVTSD2SI</a>
<a class="EXT" href="../easource/iip.htm#IipCVTTSD2SI">CVTTSD2SI</a>
<sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTTSD2SI">VCVTTSD2SI</a></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTSD2USI">VCVTSD2USI</a>
<sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTTSD2USI">VCVTTSD2USI</a></td>
<td></td><td></td><td></td><td>
<a class="EXT" href="../easource/iip.htm#IipCVTSD2SS">CVTSD2SS</a>
<sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTSD2SS">VCVTSD2SS</a></td>
<td>NOP</td></tr>
</table>

<table class="SMALL"><caption>Available packed SIMD type conversions</caption>
<tr><th>(<sub>(e)</sub>V<sub>ex</sub>)CVT(T<sub>runc</sub>) P<sub>acked</sub></th>
<th>2PI&nbsp;<sub>int32sig</sub><br/>2DQ&nbsp;<sub>int32sig</sub></th>
<th>2UDQ&nbsp;<sub>int32uns</sub></th><th>2QQ&nbsp;<sub>int64sig</sub></th>
<th>2UQQ&nbsp;<sub>int64uns</sub></th><th>2PH&nbsp;<sub>float16</sub></th>
<th>2PS&nbsp;<sub>float32</sub></th><th>2PD&nbsp;<sub>float64</sub></th></tr>
<tr><th>PI&nbsp;<sub>int32sig</sub><br/>DQ&nbsp;<sub>int32sig</sub></th><td>NOP</td>
<td></td><td></td><td></td><td></td>
<td><a class="EXT" href="../easource/iim.htm#IimCVTPI2PS">CVTPI2PS</a>
<a class="EXT" href="../easource/iip.htm#IipCVTDQ2PS">CVTDQ2PS</a>
<sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTDQ2PS">VCVTDQ2PS</a></td>
<td><a class="EXT" href="../easource/iim.htm#IimCVTPI2PD">CVTPI2PD</a>
<a class="EXT" href="../easource/iip.htm#IipCVTDQ2PD">CVTDQ2PD</a>
<sup>E,M,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTDQ2PD">VCVTDQ2PD</a>
</td></tr>
<tr><th>UDQ&nbsp;<sub>int32uns</sub></th><td></td><td>NOP</td><td></td><td></td><td></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTUDQ2PS">VCVTUDQ2PS</a></td>
<td><sup>E,M</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTUDQ2PD">VCVTUDQ2PD</a></td></tr>
<tr><th>QQ&nbsp;<sub>int64sig</sub></th><td></td><td></td><td>NOP</td><td></td><td></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTQQ2PS">VCVTQQ2PS</a></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTQQ2PD">VCVTQQ2PD</a></td></tr>
<tr><th>UQQ&nbsp;<sub>int64uns</sub></th><td></td><td></td><td></td>
<td>NOP</td><td></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTUQQ2PS">VCVTUQQ2PS</a></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTUQQ2PD">VCVTUQQ2PD</a></td></tr>
<tr><th>PH&nbsp;<sub>float16</sub></th>
<td></td><td></td><td></td><td></td><td>NOP</td>
<td><sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTPH2PS">VCVTPH2PS</a></td>
<td></td></tr>
<tr><th>PS&nbsp;<sub>float32</sub></th>
<td><a class="EXT" href="../easource/iim.htm#IimCVTPS2PI">CVTPS2PI</a>
<a class="EXT" href="../easource/iip.htm#IipCVTPS2DQ">CVTPS2DQ</a>
<sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTPS2DQ">VCVTPS2DQ</a>
<a class="EXT" href="../easource/iim.htm#IimCVTTPS2PI">CVTTPS2PI</a>
<a class="EXT" href="../easource/iip.htm#IipCVTTPS2DQ">CVTTPS2DQ</a>
<sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTTPS2DQ">VCVTTPS2DQ</a></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTPS2UDQ">VCVTPS2UDQ</a>
<sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTTPS2UDQ">VCVTTPS2UDQ</a></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTPS2QQ">VCVTPS2QQ</a>
<sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTTPS2QQ">VCVTTPS2QQ</a></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTPS2UQQ">VCVTPS2UQQ</a>
<sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTTPS2UQQ">VCVTTPS2UQQ</a></td>
<td><sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTPS2PH">VCVTPS2PH</a></td>
<td>NOP</td><td><a class="EXT" href="../easource/iip.htm#IipCVTPS2PD">CVTPS2PD</a>
<sup>E,M,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTPS2PD">VCVTPS2PD</a></td></tr>
<tr><th>PD&nbsp;<sub>float64</sub></th>
<td><a class="EXT" href="../easource/iim.htm#IimCVTPD2PI">CVTPD2PI</a>
<a class="EXT" href="../easource/iip.htm#IipCVTPD2DQ">CVTPD2DQ</a>
<sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTPD2DQ">VCVTPD2DQ</a>
<a class="EXT" href="../easource/iim.htm#IimCVTTPD2PI">CVTTPD2PI</a>
<a class="EXT" href="../easource/iip.htm#IipCVTTPD2DQ">CVTTPD2DQ</a>
<sup>E,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTTPD2DQ">VCVTTPD2DQ</a></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTPD2UDQ">VCVTPD2UDQ</a>
<sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTTPD2UDQ">VCVTTPD2UDQ</a></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTPD2QQ">VCVTPD2QQ</a>
<sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTTPD2QQ">VCVTTPD2QQ</a></td>
<td><sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTPD2UQQ">VCVTPD2UQQ</a>
<sup>E</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTTPD2UQQ">VCVTTPD2UQQ</a></td><td></td>
<td><a class="EXT" href="../easource/iip.htm#IipCVTPD2PS">CVTPD2PS</a>
<sup>E,M,V</sup><a class="EXT" href="../easource/iiz.htm#IizVCVTPD2PS">VCVTPD2PS</a></td>
<td>NOP</td></tr>
</table><br class="CLEAR"/>
<pre>
iiz PROGRAM FORMAT=COFF,MODEL=FLAT,WIDTH=32,MAXPASSES=64
    INCLUDEHEAD euroasm.htm, \  Interface (structures, symbols and macros) of other modules used in this source.
                ea.htm,eaopt.htm,exp.htm,ii.htm,msg.htm,pgm.htm,pgmopt.htm,sss.htm,stm.htm,sym.htm
</pre><pre>
iiz HEAD ; Start of module interface.
</pre>

<dl id="IizList"><dt><a href="#top">&uarr; %IizList</a></dt><dd> enumerates machine instructions
<!---->of this family which &euro;ASM can assemble.
<br/>Each instruction declared in <code>%IizList</code> requires the corresponding
<a href="#IizHandlers">handler</a> in this file.</dd>
<dt>See also</dt><dd><a class="EXT" href="dict.htm#DictLookupIi">DictLookupIi</a></dd></dl><pre>
%IizList %SET \
VADDPD, \
VADDPS, \
VADDSS, \
VADDSD, \
VMULSD, \
VMULSS, \
VMULPS, \
VMULPD, \
VSUBPS, \
VSUBPD, \
VSUBSS, \
VSUBSD, \
VDIVPS, \
VDIVPD, \
VDIVSS, \
VDIVSD, \
VMINPS, \
VMINPD, \
VMAXPD, \
VMINSS, \
VMAXSS, \
VMINSD, \
VMAXSD, \
VMAXPS, \
VCVTPS2PD, \
VCVTPD2PS, \
VCVTSS2SD, \
VCVTSD2SS, \
VCVTDQ2PS, \
VCVTPS2DQ, \
VCVTTPS2DQ, \
VCVTQQ2PS, \
VCVTSI2SS, \
VCVTSI2SD, \
VCVTSS2SI, \
VCVTSD2SI, \
VCVTTSS2SI, \
VCVTTSD2SI, \
VCVTSS2USI, \
VCVTSD2USI, \
VCVTTSS2USI, \
VCVTTSD2USI, \
VCVTUSI2SS, \
VCVTUSI2SD, \
VCVTUDQ2PS, \
VCVTUDQ2PD, \
VCVTTPS2UDQ, \
VCVTTPD2UDQ, \
VCVTTPS2UQQ, \
VCVTTPD2UQQ, \
VCVTPS2UDQ, \
VCVTPD2UDQ, \
VCVTPS2UQQ, \
VCVTTPS2QQ, \
VCVTPS2QQ, \
VCVTTPD2QQ, \
VCVTPD2UQQ, \
VCVTPD2QQ, \
VCVTTPD2DQ, \
VCVTPD2DQ, \
VCVTDQ2PD, \
VCVTQQ2PD, \
VCVTUQQ2PS, \
VCVTUQQ2PD, \
VCVTPH2PS, \
VCVTPS2PH, \
VBROADCASTSS, \
VBROADCASTSD, \
VBROADCASTF128, \
VBROADCASTF32X2, \
VBROADCASTF32X4, \
VBROADCASTF32X8, \
VBROADCASTF64X2, \
VBROADCASTF64X4, \
VBROADCASTI32X4, \
VBROADCASTI64X4, \
VBROADCASTI32X2, \
VBROADCASTI128, \
VBROADCASTI64X2, \
VBROADCASTI32X8, \
VPBROADCASTB, \
VPBROADCASTW, \
VPBROADCASTD, \
VPBROADCASTQ, \
VALIGND, \
VALIGNQ, \
VPBLENDMB, \
VPBLENDMW, \
VPBLENDMD, \
VPBLENDMQ, \
VBLENDMPS, \
VBLENDMPD, \
VCMPSS, \
VCMPSD, \
VCMPPS, \
VCMPPD, \
VCMPEQSS, \
VCMPLTSS, \
VCMPLESS, \
VCMPUNORDSS, \
VCMPNEQSS, \
VCMPNLTSS, \
VCMPNLESS, \
VCMPORDSS, \
VCMPNGESS, \
VCMPNGTSS, \
VCMPFALSESS, \
VCMPGESS, \
VCMPGTSS, \
VCMPTRUESS, \
VCMPEQ_OQSS, \
VCMPLT_OSSS, \
VCMPLE_OSSS, \
VCMPUNORD_QSS, \
VCMPNEQ_UQSS, \
VCMPNLT_USSS, \
VCMPNLE_USSS, \
VCMPORD_QSS, \
VCMPEQ_UQSS, \
VCMPNGE_USSS, \
VCMPNGT_USSS, \
VCMPFALSE_OQSS, \
VCMPNEQ_OQSS, \
VCMPGE_OSSS, \
VCMPGT_OSSS, \
VCMPTRUE_UQSS, \
VCMPEQ_OSSS, \
VCMPLT_OQSS, \
VCMPLE_OQSS, \
VCMPUNORD_SSS, \
VCMPNEQ_USSS, \
VCMPNLT_UQSS, \
VCMPNLE_UQSS, \
VCMPORD_SSS, \
VCMPEQ_USSS, \
VCMPNGE_UQSS, \
VCMPNGT_UQSS, \
VCMPFALSE_OSSS, \
VCMPNEQ_OSSS, \
VCMPGE_OQSS, \
VCMPGT_OQSS, \
VCMPTRUE_USSS, \
VCMPEQSD, \
VCMPLTSD, \
VCMPLESD, \
VCMPUNORDSD, \
VCMPNEQSD, \
VCMPNLTSD, \
VCMPNLESD, \
VCMPORDSD, \
VCMPNGESD, \
VCMPNGTSD, \
VCMPFALSESD, \
VCMPGESD, \
VCMPGTSD, \
VCMPTRUESD, \
VCMPEQ_OQSD, \
VCMPLT_OSSD, \
VCMPLE_OSSD, \
VCMPUNORD_QSD, \
VCMPNEQ_UQSD, \
VCMPNLT_USSD, \
VCMPNLE_USSD, \
VCMPORD_QSD, \
VCMPEQ_UQSD, \
VCMPNGE_USSD, \
VCMPNGT_USSD, \
VCMPFALSE_OQSD, \
VCMPNEQ_OQSD, \
VCMPGE_OSSD, \
VCMPGT_OSSD, \
VCMPTRUE_UQSD, \
VCMPEQ_OSSD, \
VCMPLT_OQSD, \
VCMPLE_OQSD, \
VCMPUNORD_SSD, \
VCMPNEQ_USSD, \
VCMPNLT_UQSD, \
VCMPNLE_UQSD, \
VCMPORD_SSD, \
VCMPEQ_USSD, \
VCMPNGE_UQSD, \
VCMPNGT_UQSD, \
VCMPFALSE_OSSD, \
VCMPNEQ_OSSD, \
VCMPGE_OQSD, \
VCMPGT_OQSD, \
VCMPTRUE_USSD, \
VCMPEQPS, \
VCMPLTPS, \
VCMPLEPS, \
VCMPUNORDPS, \
VCMPNEQPS, \
VCMPNLTPS, \
VCMPNLEPS, \
VCMPORDPS, \
VCMPNGEPS, \
VCMPNGTPS, \
VCMPFALSEPS, \
VCMPGEPS, \
VCMPGTPS, \
VCMPTRUEPS, \
VCMPEQ_OQPS, \
VCMPLT_OSPS, \
VCMPLE_OSPS, \
VCMPUNORD_QPS, \
VCMPNEQ_UQPS, \
VCMPNLT_USPS, \
VCMPNLE_USPS, \
VCMPORD_QPS, \
VCMPEQ_UQPS, \
VCMPNGE_USPS, \
VCMPNGT_USPS, \
VCMPFALSE_OQPS, \
VCMPNEQ_OQPS, \
VCMPGE_OSPS, \
VCMPGT_OSPS, \
VCMPTRUE_UQPS, \
VCMPEQ_OSPS, \
VCMPLT_OQPS, \
VCMPLE_OQPS, \
VCMPUNORD_SPS, \
VCMPNEQ_USPS, \
VCMPNLT_UQPS, \
VCMPNLE_UQPS, \
VCMPORD_SPS, \
VCMPEQ_USPS, \
VCMPNGE_UQPS, \
VCMPNGT_UQPS, \
VCMPFALSE_OSPS, \
VCMPNEQ_OSPS, \
VCMPGE_OQPS, \
VCMPGT_OQPS, \
VCMPTRUE_USPS, \
VCMPEQPD, \
VCMPLTPD, \
VCMPLEPD, \
VCMPUNORDPD, \
VCMPNEQPD, \
VCMPNLTPD, \
VCMPNLEPD, \
VCMPORDPD, \
VCMPNGEPD, \
VCMPNGTPD, \
VCMPFALSEPD, \
VCMPGEPD, \
VCMPGTPD, \
VCMPTRUEPD, \
VCMPEQ_OQPD, \
VCMPLT_OSPD, \
VCMPLE_OSPD, \
VCMPUNORD_QPD, \
VCMPNEQ_UQPD, \
VCMPNLT_USPD, \
VCMPNLE_USPD, \
VCMPORD_QPD, \
VCMPEQ_UQPD, \
VCMPNGE_USPD, \
VCMPNGT_USPD, \
VCMPFALSE_OQPD, \
VCMPNEQ_OQPD, \
VCMPGE_OSPD, \
VCMPGT_OSPD, \
VCMPTRUE_UQPD, \
VCMPEQ_OSPD, \
VCMPLT_OQPD, \
VCMPLE_OQPD, \
VCMPUNORD_SPD, \
VCMPNEQ_USPD, \
VCMPNLT_UQPD, \
VCMPNLE_UQPD, \
VCMPORD_SPD, \
VCMPEQ_USPD, \
VCMPNGE_UQPD, \
VCMPNGT_UQPD, \
VCMPFALSE_OSPD, \
VCMPNEQ_OSPD, \
VCMPGE_OQPD, \
VCMPGT_OQPD, \
VCMPTRUE_USPD, \
VUCOMISS, \
VUCOMISD, \
VCOMISS, \
VCOMISD, \
VCOMPRESSPS, \
VCOMPRESSPD, \
VPCOMPRESSD, \
VPCOMPRESSQ, \
VMPSADBW, \
VDBPSADBW, \
VDPPS, \
VDPPD, \
VEXPANDPS, \
VEXPANDPD, \
VPEXPANDD, \
VPEXPANDQ, \
VEXTRACTF32X4, \
VEXTRACTF32X8, \
VEXTRACTF64X2, \
VEXTRACTF64X4, \
VEXTRACTF128, \
VEXTRACTPS, \
VEXTRACTI32X4, \
VEXTRACTI32X8, \
VEXTRACTI64X2, \
VEXTRACTI64X4, \
VEXTRACTI128, \
VPEXTRB, \
VPEXTRW, \
VPEXTRD, \
VPEXTRQ, \
VINSERTF32X4, \
VINSERTF32X8, \
VINSERTF64X2, \
VINSERTF64X4, \
VINSERTF128, \
VINSERTI32X4, \
VINSERTI32X8, \
VINSERTI64X2, \
VINSERTI64X4, \
VINSERTI128, \
VINSERTPS, \
VPINSRB, \
VPINSRW, \
VPINSRD, \
VPINSRQ, \
VFIXUPIMMSS, \
VFIXUPIMMSD, \
VFIXUPIMMPS, \
VFIXUPIMMPD, \
VFPCLASSSS, \
VFPCLASSSD, \
VFPCLASSPS, \
VFPCLASSPD, \
VPGATHERDD, \
VPGATHERQD, \
VPGATHERQQ, \
VPGATHERDQ, \
VGATHERDPS, \
VGATHERDPD, \
VGATHERQPS, \
VGATHERQPD, \
VGATHERPF0DPS, \
VGATHERPF0HINTDPS, \
VGATHERPF0QPS, \
VGATHERPF0DPD, \
VGATHERPF0HINTDPD, \
VGATHERPF0QPD, \
VGATHERPF1DPS, \
VGATHERPF1QPS, \
VGATHERPF1DPD, \
VGATHERPF1QPD, \
VPSCATTERDD, \
VPSCATTERDQ, \
VPSCATTERQD, \
VPSCATTERQQ, \
VSCATTERDPS, \
VSCATTERDPD, \
VSCATTERQPS, \
VSCATTERQPD, \
VSCATTERPF0DPS, \
VSCATTERPF0HINTDPS, \
VSCATTERPF0QPS, \
VSCATTERPF0DPD, \
VSCATTERPF0HINTDPD, \
VSCATTERPF0QPD, \
VSCATTERPF1DPS, \
VSCATTERPF1QPS, \
VSCATTERPF1DPD, \
VSCATTERPF1QPD, \
VGETEXPSS, \
VGETEXPSD, \
VGETEXPPS, \
VGETEXPPD, \
VGETMANTSS, \
VGETMANTSD, \
VGETMANTPS, \
VGETMANTPD, \
VMOVAPS, \
VMOVAPD, \
VMOVD, \
VMOVQ, \
VMOVSS, \
VMOVSD, \
VMOVUPS, \
VMOVUPD, \
VMOVLPS, \
VMOVHPS, \
VMOVLPD, \
VMOVHPD, \
VMOVLHPS, \
VMOVHLPS, \
VMOVSLDUP, \
VMOVSHDUP, \
VMOVDQA, \
VMOVQQA, \
VMOVDQA32, \
VMOVDQA64, \
VMOVDQU, \
VMOVQQU, \
VMOVDQU8, \
VMOVDQU16, \
VMOVDQU32, \
VMOVDQU64, \
VMOVMSKPS, \
VMOVMSKPD, \
VMOVNTPS, \
VMOVNTPD, \
VMOVNTDQ, \
VMOVNTQQ, \
VMOVNTDQA, \
VMOVDDUP, \
VADDSUBPS, \
VADDSUBPD, \
VPMINUB, \
VPMINUW, \
VPMINUD, \
VPMINUQ, \
VPMINSB, \
VPMINSW, \
VPMINSD, \
VPMINSQ, \
VPMAXSB, \
VPMAXSW, \
VPMAXSD, \
VPMAXSQ, \
VPMAXUB, \
VPMAXUW, \
VPMAXUD, \
VPMAXUQ, \
VPADDB, \
VPADDW, \
VPADDD, \
VPADDQ, \
VPADDSB, \
VPADDSW, \
VPSUBB, \
VPSUBW, \
VPSUBD, \
VPSUBQ, \
VPSUBSB, \
VPSUBSW, \
VPADDUSB, \
VPADDUSW, \
VPSUBUSB, \
VPSUBUSW, \
VHADDPS, \
VHADDPD, \
VHSUBPS, \
VHSUBPD, \
VPSRLW, \
VPSRLD, \
VPSRLQ, \
VPSRLDQ, \
VPSRAW, \
VPSRAD, \
VPSRAQ, \
VPSLLW, \
VPSLLD, \
VPSLLQ, \
VPSLLDQ, \
VPSRLVW, \
VPSRLVD, \
VPSRLVQ, \
VPSRAVW, \
VPSRAVD, \
VPSRAVQ, \
VPSLLVW, \
VPSLLVD, \
VPSLLVQ, \
VPABSB, \
VPABSW, \
VPABSD, \
VPABSQ, \
VPMULUDQ, \
VPMADDWD, \
VPSADBW, \
VSHUFPS, \
VSHUFPD, \
VSHUFF32X4, \
VSHUFF64X2, \
VSHUFI32X4, \
VSHUFI64X2, \
VPSHUFB, \
VPSHUFLW, \
VPSHUFHW, \
VPSHUFD, \
VFMADD233PS, \
VMOVNRAPS, \
VMOVNRAPD, \
VMOVNRNGOAPS, \
VMOVNRNGOAPD, \
<!--IizList-->
;
</pre><pre>
  ENDHEAD iiz ; End of module interface.
</pre>

<dl id="IizGroupVADDPS">
<dt><a href="#IizHandlers">&uarr; <em>IizGroupVADDPS</em></a></dt>
<dd>IizGroupVADDPS is a common handler for VEX/MVEX/EVEX encodable instructions in following formats:</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>xmm1,xmm2,xmm3/m128
</th><td>VEX.NDS.128.0F.WIG opcode /r
</td></tr><tr><th>ymm1, ymm2,ymm3/m256
</th><td>VEX.NDS.256.0F.WIG opcode /r
</td></tr><tr><th>xmm1 {k1}{z}, xmm2,xmm3/m128/m32bcst
</th><td>EVEX.NDS.128.0F.W0 opcode /r
</td></tr><tr><th>ymm1 {k1}{z}, ymm2,ymm3/m256/m32bcst
</th><td>EVEX.NDS.256.0F.W0 opcode /r
</td></tr><tr><th>zmm1 {k1}{z}, zmm2,zmm3/m512/m32bcst {er}
</th><td>EVEX.NDS.512.0F.W0 opcode /r
</td></tr><tr><th>zmm1 {k1}, zmm2,zmm3/m512/m32bcst {er}
</th><td>MVEX.NDS.512.0F.W0 opcode /r
</td></tr></table></dd>
<dt>Input</dt>
<dd><b>AL</b> is opcode byte.
<br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>.
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.</dd>
<dt>Called by</dt>
<dd>&nbsp;</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5212.htm">t5212</a>
</dd>
</dl><pre>
IizGroupVADDPS PROC
    IiAllowModifier MASK,EH
    IiAllowBroadcasting DWORD
    IiEmitOpcode EAX    
    IiDisp8EVEX FV32
    IiAllowRounding
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.mem:
.xmm.xmm.xmm:
    IiEmitPrefix VEX.NDS.128.0F.WIG, EVEX.NDS.128.0F.W0
    RET
.ymm.ymm.mem:
.ymm.ymm.ymm:
    IiEmitPrefix VEX.NDS.256.0F.WIG, EVEX.NDS.256.0F.W0
    RET
.zmm.zmm.mem:
    IiDisp8MVEX Us32
.zmm.zmm.zmm:
    IiEmitPrefix EVEX.NDS.512.0F.W0
    CMP AL,0x5C ; VDIVPS does not have MVEX form.
    JA .90: 
    IiEmitPrefix MVEX.NDS.512.0F.W0
.90:RET
    ENDP IizGroupVADDPS
</pre>

<dl id="IizVADDPS">
<dt><a href='#IizGroupVADDPS'>&uarr; VADDPS</a></dt>
<dd>Add Packed Single-FP Values</dd>
<dt>Category</dt>
<dd>sse1,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wps</dd>
<dt>Opcode</dt>
<dd>0x0F58 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5212.htm">t5212</a>
</dd>
</dl><pre>
IizVADDPS:: PROC
    MOV AL,0x58
    JMP IizGroupVADDPS
  ENDP IizVADDPS::
</pre>

<dl id="IizVMULPS">
<dt><a href='#IizGroupVADDPS'>&uarr; VMULPS</a></dt>
<dd>Multiply Packed Single-FP Values</dd>
<dt>Category</dt>
<dd>sse1,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wps</dd>
<dt>Opcode</dt>
<dd>0x0F59 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5212.htm">t5212</a>
</dd>
</dl><pre>
IizVMULPS:: PROC
    MOV AL,0x59
    JMP IizGroupVADDPS
 ENDP IizVMULPS::
</pre>

<dl id="IizVSUBPS">
<dt><a href='#IizGroupVADDPS'>&uarr; VSUBPS</a></dt>
<dd>Subtract Packed Single-FP Values</dd>
<dt>Category</dt>
<dd>sse1,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wps</dd>
<dt>Opcode</dt>
<dd>0x0F5C /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5212.htm">t5212</a>
</dd>
</dl><pre>
IizVSUBPS:: PROC
    MOV AL,0x5C
    JMP IizGroupVADDPS
 ENDP IizVSUBPS::
</pre>

<dl id="IizVDIVPS">
<dt><a href='#IizGroupVADDPS'>&uarr; VDIVPS</a></dt>
<dd>Divide Packed Single-FP Values</dd>
<dt>Category</dt>
<dd>sse1,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wps</dd>
<dt>Opcode</dt>
<dd>0x0F5E /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5212.htm">t5212</a>
</dd>
</dl><pre>
IizVDIVPS:: PROC
    MOV AL,0x5E
    JMP IizGroupVADDPS
 ENDP IizVDIVPS::
</pre>

<dl id="IizGroupVADDPD">
<dt><a href="#IizHandlers">&uarr; <em>IizGroupVADDPD</em></a></dt>
<dd>IizGroupVADDPD is a common handler for VEX/MVEX/EVEX encodable instructions in following formats:</dd>
<dt>Intel reference</dt>
<dd><table><tr><th>xmm1,xmm2,xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG opcode /r
</td></tr><tr><th>ymm1, ymm2,ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG opcode /r
</td></tr><tr><th>xmm1 {k1}{z}, xmm2,xmm3/m128/m32bcst
</th><td>EVEX.NDS.128.66.0F.W1 opcode /r
</td></tr><tr><th>ymm1 {k1}{z}, ymm2,ymm3/m256/m32bcst
</th><td>EVEX.NDS.256.66.0F.W1 opcode /r
</td></tr><tr><th>zmm1 {k1}{z}, zmm2,zmm3/m512/m32bcst {er}
</th><td>EVEX.NDS.512.66.0F.W1 opcode /r
</td></tr><tr><th>zmm1 {k1}, zmm2,zmm3/m512/m32bcst {er}
</th><td>MVEX.NDS.512.66.0F.W1 opcode /r
</td></tr></table></dd>
<dt>Input</dt>
<dd><b>AL</b> is opcode byte.
<br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>.
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.</dd>
<dt>Called by</dt>
<dd>&nbsp;</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5212.htm">t5212</a>
</dd>
</dl><pre>
IizGroupVADDPD:: PROC
    IiAllowModifier MASK,EH
    IiAllowBroadcasting QWORD
    IiAllowRounding
    IiEmitOpcode EAX
    IiEncoding DATA=QWORD
    IiDisp8EVEX FV64
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.mem:
.xmm.xmm.xmm:
    IiEmitPrefix VEX.NDS.128.66.0F.WIG, EVEX.NDS.128.66.0F.W1
    RET
.ymm.ymm.mem:
.ymm.ymm.ymm:
    IiEmitPrefix VEX.NDS.256.66.0F.WIG, EVEX.NDS.256.66.0F.W1
    RET
.zmm.zmm.mem:    
    IiDisp8MVEX Ub64
.zmm.zmm.zmm:
    IiEmitPrefix EVEX.NDS.512.66.0F.W1
    CMP AL,0x5C ; VDIVPD does not have MVEX form.
    JA .90:
    IiEmitPrefix MVEX.NDS.512.66.0F.W1
.90:RET
   ENDPROC IizGroupVADDPD
</pre>

<dl id="IizVADDPD">
<dt><a href='#IizGroupVADDPD'>&uarr; VADDPD</a></dt>
<dd>Add Packed Double-FP Values</dd>
<dt>Category</dt>
<dd>sse2,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wpd</dd>
<dt>Opcode</dt>
<dd>0x660F58 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5212.htm">t5212</a>
</dd>
</dl><pre>
IizVADDPD:: PROC
    MOV AL,0x58
    JMP IizGroupVADDPD
  ENDP IizVADDPD::
</pre>

<dl id="IizVMULPD">
<dt><a href='#IizGroupVADDPD'>&uarr; VMULPD</a></dt>
<dd>Multiply Packed Double-FP Values</dd>
<dt>Category</dt>
<dd>sse2,pcksclr,arith</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wpd</dd>
<dt>Opcode</dt>
<dd>0x660F59 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5212.htm">t5212</a>
</dd>
</dl><pre>
IizVMULPD:: PROC
    MOV AL,0x59
    JMP IizGroupVADDPD
 ENDP IizVMULPD::
</pre>

<dl id="IizVSUBPD">
<dt><a href='#IizGroupVADDPD'>&uarr; VSUBPD</a></dt>
<dd>Subtract Packed Double-FP Values</dd>
<dt>Category</dt>
<dd>sse2,pcksclr,arith</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wpd</dd>
<dt>Opcode</dt>
<dd>0x660F5C /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5212.htm">t5212</a>
</dd>
</dl><pre>
IizVSUBPD:: PROC
    MOV AL,0x5C
    JMP IizGroupVADDPD
 ENDP IizVSUBPD::
</pre>

<dl id="IizVDIVPD">
<dt><a href='#IizGroupVADDPD'>&uarr; VDIVPD</a></dt>
<dd>Divide Packed Double-FP Values</dd>
<dt>Category</dt>
<dd>sse2,pcksclr,arith</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wpd</dd>
<dt>Opcode</dt>
<dd>0x660F5E /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5212.htm">t5212</a>
</dd>
</dl><pre>
IizVDIVPD:: PROC
    MOV AL,0x5E
    JMP IizGroupVADDPD
 ENDP IizVDIVPD::
</pre>

<dl id="IizGroupVADDSS">
<dt><a href="#IizHandlers">&uarr; <em>IizGroupVADDSS</em></a></dt>
<dd>IizGroupVADDSS is a common handler for VEX/MVEX/EVEX encodable instructions in following formats:</dd>
<dt>Intel reference</dt>
<dd><table><tr><th>xmm1,xmm2,xmm3/m32
</th><td>VEX.NDS.128.F3.0F.WIG opcode /r
</td></tr><tr><th>xmm1 {k1}{z}, xmm2,xmm3/m32{er}
</th><td>EVEX.NDS.LIG.F3.0F.W0 opcode /r
</td></tr></table></dd>
<dt>Input</dt>
<dd><b>AL</b> is opcode byte. 
<br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>.
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.</dd>
<dt>Called by</dt>
<dd>&nbsp;</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5210.htm">t5210</a>
</dd>
</dl><pre>
IizGroupVADDSS:: PROC
    IiAllowModifier MASK
    IiAllowRounding Register=xmm
    IiEmitOpcode EAX
    IiEncoding DATA=DWORD
    IiDisp8EVEX T1S32
    IiEmitPrefix VEX.NDS.128.F3.0F.WIG, EVEX.NDS.LIG.F3.0F.W0
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    RET
   ENDPROC IizGroupVADDSS
</pre>

<dl id="IizVADDSS">
<dt><a href='#IizGroupVADDSS'>&uarr; VADDSS</a></dt>
<dd>Add Scalar Single-FP Values</dd>
<dt>Category</dt>
<dd>sse1,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vss</b>,Wss</dd>
<dt>Opcode</dt>
<dd>0xF30F58 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5210.htm">t5210</a>
</dd>
</dl><pre>
IizVADDSS:: PROC
    MOV AL,0x58
    JMP IizGroupVADDSS
 ENDP IizVADDSS::
</pre>

<dl id="IizVMULSS">
<dt><a href='#IizGroupVADDSS'>&uarr; VMULSS</a></dt>
<dd>Multiply Scalar Single-FP Value</dd>
<dt>Category</dt>
<dd>sse1,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vss</b>,Wss</dd>
<dt>Opcode</dt>
<dd>0xF30F59 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5210.htm">t5210</a>
</dd>
</dl><pre>
IizVMULSS:: PROC
    MOV AL,0x59
    JMP IizGroupVADDSS
 ENDP IizVMULSS::
</pre>

<dl id="IizVSUBSS">
<dt><a href='#IizGroupVADDSS'>&uarr; VSUBSS</a></dt>
<dd>Subtract Scalar Single-FP Values</dd>
<dt>Category</dt>
<dd>sse1,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vss</b>,Wss</dd>
<dt>Opcode</dt>
<dd>0xF30F5C /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5210.htm">t5210</a>
</dd>
</dl><pre>
IizVSUBSS:: PROC
    MOV AL,0x5C
    JMP IizGroupVADDSS
 ENDP IizVSUBSS::
</pre>

<dl id="IizVDIVSS">
<dt><a href='#IizGroupVADDSS'>&uarr; VDIVSS</a></dt>
<dd>Divide Scalar Single-FP Values</dd>
<dt>Category</dt>
<dd>sse1,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vss</b>,Wss</dd>
<dt>Opcode</dt>
<dd>0xF30F5E /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5210.htm">t5210</a>
</dd>
</dl><pre>
IizVDIVSS:: PROC
    MOV AL,0x5E
    JMP IizGroupVADDSS
 ENDP IizVDIVSS::
</pre>

<dl id="IizGroupVADDSD">
<dt><a href="#IizHandlers">&uarr; <em>IizGroupVADDSD</em></a></dt>
<dd>IizGroupVADDSD is a common handler for VEX/MVEX/EVEX encodable instructions in following formats:</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>xmm1,xmm2,xmm3/m64
</th><td>VEX.NDS.128.F2.0F.WIG opcode /r
</td></tr><tr><th>xmm1 {k1}{z}, xmm2,xmm3/m64{er}
</th><td>EVEX.NDS.LIG.F2.0F.W1 opcode /r
</td></tr></table></dd>
<dt>Input</dt>
<dd><b>AL</b> is opcode byte. 
<br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>. 
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.</dd>
<dt>Called by</dt>
<dd>&nbsp;</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5210.htm">t5210</a>
</dd>
</dl><pre>
IizGroupVADDSD:: PROC
    IiAllowModifier MASK
    IiAllowRounding Register=xmm
    IiEmitOpcode EAX
    IiEncoding DATA=QWORD
    IiDisp8EVEX T1S64
    IiEmitPrefix VEX.NDS.128.F2.0F.WIG, EVEX.NDS.LIG.F2.0F.W1
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    RET
   ENDPROC IizGroupVADDSD
</pre>

<dl id="IizVADDSD">
<dt><a href='#IizGroupVADDSD'>&uarr; VADDSD</a></dt>
<dd>Add Scalar Double-FP Values</dd>
<dt>Category</dt>
<dd>sse2,pcksclr,arith</dd>
<dt>Operands</dt>
<dd><b>Vsd</b>,Wsd</dd>
<dt>Opcode</dt>
<dd>0xF20F58 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5210.htm">t5210</a>
</dd>
</dl><pre>
IizVADDSD:: PROC
    MOV AL,0x58
    JMP IizGroupVADDSD
 ENDP IizVADDSD::
</pre>

<dl id="IizVMULSD">
<dt><a href='#IizGroupVADDSD'>&uarr; VMULSD</a></dt>
<dd>Multiply Scalar Double-FP Values</dd>
<dt>Category</dt>
<dd>sse2,pcksclr,arith</dd>
<dt>Operands</dt>
<dd><b>Vsd</b>,Wsd</dd>
<dt>Opcode</dt>
<dd>0xF20F59 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5210.htm">t5210</a>
</dd>
</dl><pre>
IizVMULSD:: PROC
    MOV AL,0x59
    JMP IizGroupVADDSD
 ENDP IizVMULSD::
</pre>

<dl id="IizVSUBSD">
<dt><a href='#IizGroupVADDSD'>&uarr; VSUBSD</a></dt>
<dd>Subtract Scalar Double-FP Values</dd>
<dt>Category</dt>
<dd>sse2,pcksclr,arith</dd>
<dt>Operands</dt>
<dd><b>Vsd</b>,Wsd</dd>
<dt>Opcode</dt>
<dd>0xF20F5C /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5210.htm">t5210</a>
</dd>
</dl><pre>
IizVSUBSD:: PROC
    MOV AL,0x5C
    JMP IizGroupVADDSD
 ENDP IizVSUBSD::
</pre>

<dl id="IizVDIVSD">
<dt><a href='#IizGroupVADDSD'>&uarr; VDIVSD</a></dt>
<dd>Divide Scalar Double-FP Values</dd>
<dt>Category</dt>
<dd>sse2,pcksclr,arith</dd>
<dt>Operands</dt>
<dd><b>Vsd</b>,Wsd</dd>
<dt>Opcode</dt>
<dd>0xF20F5E /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5210.htm">t5210</a>
</dd>
</dl><pre>
IizVDIVSD:: PROC
    MOV AL,0x5E
    JMP IizGroupVADDSD
 ENDP IizVDIVSD::
</pre>

<dl id="IizGroupVMINPS">
<dt><a href="#IizHandlers">&uarr; <em>IizGroupVMINPS</em></a></dt>
<dd>IizGroupVMINPS is a common handler for instructions in following formats:</dd>
<dt>Intel reference</dt>
<dd><table><tr><th>xmm1,xmm2, xmm3/m128
</th><td>VEX.NDS.128.0F.WIG opcode /r
</td></tr><tr><th>ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.0F.WIG opcode /r
</td></tr><tr><th>xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
</th><td>EVEX.NDS.128.0F.W0 opcode /r
</td></tr><tr><th>ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
</th><td>EVEX.NDS.256.0F.W0 opcode /r
</td></tr><tr><th>zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst {sae}
</th><td>EVEX.NDS.512.0F.W0 opcode /r
</td></tr></table></dd>
<dt>Input</dt>
<dd><b>AL</b> is opcode byte. 
<br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>.
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.</dd>
<dt>Called by</dt>
<dd>&nbsp;</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5216.htm">t5216</a>
</dd>
</dl><pre>
IizGroupVMINPS:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiAllowSuppressing 
    IiEmitOpcode EAX
    IiDisp8EVEX FV32
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.mem:
.xmm.xmm.xmm:
    IiEmitPrefix VEX.NDS.128.0F.WIG, EVEX.NDS.128.0F.W0
    RET
.ymm.ymm.mem:
.ymm.ymm.ymm:
    IiEmitPrefix VEX.NDS.256.0F.WIG, EVEX.NDS.256.0F.W0
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:    
    IiEmitPrefix EVEX.NDS.512.0F.W0
    RET
   ENDPROC IizGroupVMINPS
</pre>

<dl id="IizVMINPS">
<dt><a href='#IizGroupVMINPS'>&uarr; VMINPS</a></dt>
<dd>Return Minimum Packed Single-FP Values</dd>
<dt>Category</dt>
<dd>sse1,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wps</dd>
<dt>Opcode</dt>
<dd>0x0F5D /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5216.htm">t5216</a>
</dd>
</dl><pre>
IizVMINPS:: PROC
    MOV AL,0x5D
    JMP IizGroupVMINPS
 ENDP IizVMINPS::
</pre>

<dl id="IizVMAXPS">
<dt><a href='#IizGroupVMINPS'>&uarr; VMAXPS</a></dt>
<dd>Return Maximum Packed Single-FP Values</dd>
<dt>Category</dt>
<dd>sse1,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wps</dd>
<dt>Opcode</dt>
<dd>0x0F5F /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5216.htm">t5216</a>
</dd>
</dl><pre>
IizVMAXPS:: PROC
     MOV AL,0x5F
     JMP IizGroupVMINPS
 ENDP IizVMAXPS::
</pre>

<dl id="IizGroupVMINPD">
<dt><a href="#IizHandlers">&uarr; <em>IizGroupVMINPD</em></a></dt>
<dd>IizGroupVMINPD is a common handler for instructions in following formats:</dd>
<dt>Intel reference</dt>
<dd><table><tr><th>xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG opcode /r
</td></tr><tr><th>ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG opcode /r
</td></tr><tr><th>xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
</th><td>EVEX.NDS.128.66.0F.W1 opcode /r
</td></tr><tr><th>ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
</th><td>EVEX.NDS.256.66.0F.W0 opcode /r
</td></tr><tr><th>zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst {sae}
</th><td>EVEX.NDS.512.66.0F.W0 opcode /r
</td></tr></table></dd>
<dt>Input</dt>
<dd><b>AL</b> is opcode byte. 
<br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>. 
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.</dd>
<dt>Called by</dt>
<dd>&nbsp;</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5216.htm">t5216</a>
</dd>
</dl><pre>
IizGroupVMINPD:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiAllowSuppressing
    IiEmitOpcode EAX
    IiDisp8EVEX FV64
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.mem:
.xmm.xmm.xmm:
    IiEmitPrefix VEX.NDS.128.66.0F.WIG, EVEX.NDS.128.66.0F.W1
    RET
.ymm.ymm.mem:
.ymm.ymm.ymm:
    IiEmitPrefix VEX.NDS.256.66.0F.WIG, EVEX.NDS.256.66.0F.W1
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:    
    IiEmitPrefix EVEX.NDS.512.66.0F.W1
    RET
    ENDPROC IizGroupVMINPD
</pre>

<dl id="IizVMINPD">
<dt><a href='#IizGroupVMINPD'>&uarr; VMINPD</a></dt>
<dd>Return Minimum Packed Double-FP Values</dd>
<dt>Category</dt>
<dd>sse2,pcksclr,arith</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wpd</dd>
<dt>Opcode</dt>
<dd>0x660F5D /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5216.htm">t5216</a>
</dd>
</dl><pre>
IizVMINPD:: PROC
    MOV AL,0x5D
    JMP IizGroupVMINPD
 ENDP IizVMINPD::
</pre>

<dl id="IizVMAXPD">
<dt><a href='#IizGroupVMINPD'>&uarr; VMAXPD</a></dt>
<dd>Return Maximum Packed Double-FP Values</dd>
<dt>Category</dt>
<dd>sse2,pcksclr,arith</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wpd</dd>
<dt>Opcode</dt>
<dd>0x660F5F /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5216.htm">t5216</a>
</dd>
</dl><pre>
IizVMAXPD:: PROC
    MOV AL,0x5F
    JMP IizGroupVMINPD
 ENDP IizVMAXPD::
</pre>

<dl id="IizGroupVMINSS">
<dt><a href="#IizHandlers">&uarr; <em>IizGroupVMINSS</em></a></dt>
<dd>IizGroupVMINSS is a common handler for VEX/MVEX/EVEX encodable instructions in following formats:</dd>
<dt>Intel reference</dt>
<dd><table><tr><th>xmm1,xmm2,xmm3/m32
</th><td>VEX.NDS.128.F3.0F.WIG opcode /r
</td></tr><tr><th>xmm1 {k1}{z}, xmm2,xmm3/m32{sae}
</th><td>EVEX.NDS.LIG.F3.0F.W0 opcode /r
</td></tr></table></dd>
<dt>Input</dt>
<dd><b>AL</b> is opcode byte. 
<br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>. 
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.</dd>
<dt>Called by</dt>
<dd>&nbsp;</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5214.htm">t5214</a>
</dd>
</dl><pre>
IizGroupVMINSS:: PROC
    IiAllowModifier MASK
    IiAllowSuppressing Register=xmm
    IiEncoding DATA=DWORD
    IiEmitOpcode EAX
    IiDisp8EVEX T1S32
    IiOpEn RVM
    IiModRM /r
    IiEmitPrefix VEX.NDS.128.F3.0F.WIG, EVEX.NDS.LIG.F3.0F.W0    
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    RET
    ENDPROC IizGroupVMINSS
</pre>

<dl id="IizVMINSS">
<dt><a href='#IizGroupVMINSS'>&uarr; VMINSS</a></dt>
<dd>Return Minimum Scalar Single-FP Value</dd>
<dt>Category</dt>
<dd>sse1,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vss</b>,Wss</dd>
<dt>Opcode</dt>
<dd>0xF30F5D /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5214.htm">t5214</a>
</dd>
</dl><pre>
IizVMINSS:: PROC
    MOV AL,0x5D
    JMP IizGroupVMINSS
 ENDP IizVMINSS::
</pre>

<dl id="IizVMAXSS">
<dt><a href='#IizGroupVMINSS'>&uarr; VMAXSS</a></dt>
<dd>Return Maximum Scalar Single-FP Value</dd>
<dt>Category</dt>
<dd>sse1,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vss</b>,Wss</dd>
<dt>Opcode</dt>
<dd>0xF30F5F /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5214.htm">t5214</a>
</dd>
</dl><pre>
IizVMAXSS:: PROC
    MOV AL,0x5F
    JMP IizGroupVMINSS
 ENDP IizVMAXSS::
</pre>

<dl id="IizGroupVMINSD">
<dt><a href="#IizHandlers">&uarr; <em>IizGroupVMINSD</em></a></dt>
<dd>IizGroupVMINSD is a common handler for VEX/MVEX/EVEX encodable instructions in following formats:</dd>
<dt>Intel reference</dt>
<dd><table><tr><th>xmm1, xmm2, xmm3/m64
</th><td>VEX.NDS.128.F2.0F.WIG opcode /r
</td></tr><tr><th>xmm1 {k1}{z}, xmm2, xmm3/m64{sae}
</th><td>EVEX.NDS.LIG.F2.0F.W1 opcode /r
</td></tr></table></dd>
<dt>Input</dt>
<dd><b>AL</b> is opcode byte.
 <br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>.
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.</dd>
<dt>Called by</dt>
<dd>&nbsp;</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5214.htm">t5214</a>
</dd>
</dl><pre>
IizGroupVMINSD:: PROC
    IiAllowModifier MASK
    IiAllowSuppressing Register=xmm
    IiEmitOpcode EAX
    IiEncoding DATA=QWORD
    IiDisp8EVEX T1S64
    IiOpEn RVM
    IiModRM /r
    IiEmitPrefix VEX.NDS.128.F2.0F.WIG, EVEX.NDS.LIG.F2.0F.W1
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    RET
    ENDPROC IizGroupVMINSD
</pre>

<dl id="IizVMINSD">
<dt><a href='#IizGroupVMINSD'>&uarr; VMINSD</a></dt>
<dd>Return Minimum Scalar Double-FP Value</dd>
<dt>Category</dt>
<dd>sse2,pcksclr,arith</dd>
<dt>Operands</dt>
<dd><b>Vsd</b>,Wsd</dd>
<dt>Opcode</dt>
<dd>0xF20F5D /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5214.htm">t5214</a>
</dd>
</dl><pre>
IizVMINSD:: PROC
    MOV AL,0x5D
    JMP IizGroupVMINSD
 ENDP IizVMINSD::
</pre>

<dl id="IizVMAXSD">
<dt><a href='#IizGroupVMINSD'>&uarr; VMAXSD</a></dt>
<dd>Return Maximum Scalar Double-FP Value</dd>
<dt>Category</dt>
<dd>sse2,pcksclr,arith</dd>
<dt>Operands</dt>
<dd><b>Vsd</b>,Wsd</dd>
<dt>Opcode</dt>
<dd>0xF20F5F /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5214.htm">t5214</a>
</dd>
</dl><pre>
IizVMAXSD:: PROC
    MOV AL,0x5F
    JMP IizGroupVMINSD
 ENDP IizVMAXSD::
</pre>

<dl id="IizVCVTPS2PD">
<dt><a href='#IizHandlers'>&uarr; VCVTPS2PD</a></dt>
<dd>Convert Packed Single-FP Values to Double-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTPS2PD xmm1, xmm2/m64
</th><td>VEX.128.0F.WIG 5A /r
</td></tr><tr><th>VCVTPS2PD ymm1, xmm2/m128
</th><td>VEX.256.0F.WIG 5A /r
</td></tr><tr><th>VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst
</th><td>EVEX.128.0F.W0 5A /r
</td></tr><tr><th>VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.256.0F.W0 5A /r
</td></tr><tr><th>VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}
</th><td>EVEX.512.0F.W0 5A /r
</td></tr><tr><th>VCVTPS2PD zmm1 {k1}, zmm2/mem
</th><td>MVEX.512.0F.W0 5A /r
</td></tr></table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,conver</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wps</dd>
<dt>Opcode</dt>
<dd>0x0F5A /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5230.htm">t5230</a>
</dd>
</dl><pre>
IizVCVTPS2PD:: PROC
   IiEmitOpcode 0x5A
   IiAllowModifier MASK
   IiAllowBroadcasting DWORD
   IiAllowSuppressing Register=ymm
   IiDisp8EVEX HV32
   IiOpEn RM
   IiModRM /r
   IiDispatchFormat  xmm.xmm, xmm.mem, ymm.xmm, ymm.mem, zmm.ymm, zmm.mem, zmm.zmm
.xmm.mem:
.xmm.xmm:
   IiEmitPrefix VEX.128.0F.WIG, EVEX.128.0F.W0
   RET
.ymm.mem:
.ymm.xmm:
   IiEmitPrefix VEX.256.0F.WIG, EVEX.256.0F.W0
   RET
.zmm.ymm:
   IiEmitPrefix EVEX.512.0F.W0
   RET
.zmm.mem:
   JNSt [EDI+II.MfxExplicit],iiMfxPREFIX_MVEX, .zmm.ymm:
   IiDisp8MVEX Sb32
.zmm.zmm:
   IiEmitPrefix MVEX.512.0F.W0
   RET
  ENDP IizVCVTPS2PD::
</pre>

<dl id="IizVCVTPD2PS">
<dt><a href='#IizHandlers'>&uarr; VCVTPD2PS</a></dt>
<dd>Convert Packed Double-FP Values to Single-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTPD2PS xmm1, xmm2/m128
</th><td>VEX.128.66.0F.WIG 5A /r
</td></tr><tr><th>VCVTPD2PS xmm1, ymm2/m256
</th><td>VEX.256.66.0F.WIG 5A /r
</td></tr><tr><th>VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst
</th><td>EVEX.128.66.0F.W1 5A /r
</td></tr><tr><th>VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst
</th><td>EVEX.256.66.0F.W1 5A /r
</td></tr><tr><th>VCVTPD2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}
</th><td>EVEX.512.66.0F.W1 5A /r
</td></tr><tr><th>VCVTPD2PS zmm1 {k1}, zmm2/m512/mem
</th><td>MVEX.512.66.0F.W1 5A /r
</td></tr></table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,conver</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wpd</dd>
<dt>Opcode</dt>
<dd>0x660F5A /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5228.htm">t5228</a>
</dd>
</dl><pre>
IizVCVTPD2PS:: PROC
    IiAllowModifier DATA,MASK
    IiAllowBroadcasting QWORD
    IiAllowRounding
    IiEmitOpcode 0x5A
    IiDisp8EVEX FV64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, xmm.ymm, ymm.zmm, ymm.mem, zmm.zmm, zmm.mem
.xmm.mem:
    IiDispatchDataSize OWORD=.xmm.xmm:, YWORD=.xmm.ymm:
    IiAbort '6793'  ; Please specify memory operand size with DATA=OWORD or DATA=YWORD.
.xmm.xmm:
    IiEmitPrefix VEX.128.66.0F.WIG, EVEX.128.66.0F.W1
    IiEncoding DATA=QWORD
    RET
.xmm.ymm:
    IiEmitPrefix VEX.256.66.0F.WIG, EVEX.256.66.0F.W1
    IiEncoding DATA=OWORD
    RET
.ymm.zmm:
.ymm.mem:
    IiEmitPrefix EVEX.512.66.0F.W1
    IiEncoding DATA=YWORD
    RET
.zmm.mem:
    IiDisp8MVEX Ub64
.zmm.zmm:
    IiEmitPrefix MVEX.512.66.0F.W1
    IiEncoding DATA=YWORD
    RET
  ENDP IizVCVTPD2PS::
</pre>

<dl id="IizVCVTSS2SD">
<dt><a href='#IizHandlers'>&uarr; VCVTSS2SD</a></dt>
<dd>Convert Scalar Single-FP Value to Scalar Double-FP Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTSS2SD xmm1, xmm2, xmm3/m32
</th><td>VEX.NDS.128.F3.0F.WIG 5A /r
</td></tr><tr><th>VCVTSS2SD xmm1 {k1}{z}, xmm2, xmm3/m32{sae}
</th><td>EVEX.NDS.LIG.F3.0F.W0 5A /r
</td></tr></table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,conver</dd>
<dt>Operands</dt>
<dd><b>Vsd</b>,Wss</dd>
<dt>Opcode</dt>
<dd>0xF30F5A /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5222.htm">t5222</a>
</dd>
</dl><pre>
IizVCVTSS2SD:: PROC
    IiAllowModifier MASK
    IiAllowSuppressing Register=xmm
    IiEmitOpcode 0x5A
    IiEncoding DATA=DWORD
    IiDisp8EVEX T1S32
    IiEmitPrefix VEX.NDS.128.F3.0F.WIG, EVEX.NDS.LIG.F3.0F.W0
    IiOpEn RVM
    IiModRM /r    
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    RET
  ENDP IizVCVTSS2SD::
</pre>

<dl id="IizVCVTSD2SS">
<dt><a href='#IizHandlers'>&uarr; VCVTSD2SS</a></dt>
<dd>Convert Scalar Double-FP Value to Scalar Single-FP Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTSD2SS xmm1,xmm2, xmm3/m64
</th><td>VEX.NDS.128.F2.0F.WIG 5A /r
</td></tr><tr><th>VCVTSD2SS xmm1 {k1}{z}, xmm2, xmm3/m64{er}
</th><td>EVEX.NDS.LIG.F2.0F.W1 5A /r
</td></tr></table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,conver</dd>
<dt>Operands</dt>
<dd><b>Vss</b>,Wsd</dd>
<dt>Opcode</dt>
<dd>0xF20F5A /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5222.htm">t5222</a>
</dd>
</dl><pre>
IizVCVTSD2SS:: PROC
    IiAllowModifier MASK
    IiAllowRounding Register=xmm
    IiEmitOpcode 0x5A
    IiEncoding DATA=QWORD
    IiDisp8EVEX T1S64
    IiEmitPrefix VEX.NDS.128.F2.0F.WIG, EVEX.NDS.LIG.F2.0F.W1
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    RET
  ENDP IizVCVTSD2SS::
</pre>

<dl id="IizVCVTDQ2PS">
<dt><a href='#IizHandlers'>&uarr; VCVTDQ2PS</a></dt>
<dd>Convert Packed DW Integers to Single-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTDQ2PS xmm1, xmm2/m128
</th><td>VEX.128.0F.WIG 5B /r
</td></tr><tr><th>VCVTDQ2PS ymm1, ymm2/m256
</th><td>VEX.256.0F.WIG 5B /r
</td></tr><tr><th>VCVTDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.128.0F.W0 5B /r
</td></tr><tr><th>VCVTDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst
</th><td>EVEX.256.0F.W0 5B /r
</td></tr><tr><th>VCVTDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}
</th><td>EVEX.512.0F.W0 5B /r
</td></tr></table></dd>
<dt>Category</dt>
<dd>sse2,pcksp</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F5B /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5228.htm">t5228</a>
</dd>
</dl><pre>
IizVCVTDQ2PS:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiAllowRounding
    IiEmitOpcode 0x5B
    IiDisp8EVEX FV32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.mem:
.xmm.xmm:
    IiEmitPrefix VEX.128.0F.WIG, EVEX.128.0F.W0
    RET
.ymm.mem:
.ymm.ymm:
    IiEmitPrefix VEX.256.0F.WIG, EVEX.256.0F.W0
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.0F.W0
    RET
  ENDP IizVCVTDQ2PS::
</pre>

<dl id="IizVCVTPS2DQ">
<dt><a href='#IizHandlers'>&uarr; VCVTPS2DQ</a></dt>
<dd>Convert Packed Single-FP Values to DWORD Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTPS2DQ xmm1, xmm2/m128
</th><td>VEX.128.66.0F.WIG 5B /r
</td></tr><tr><th>VCVTPS2DQ ymm1, ymm2/m256
</th><td>VEX.256.66.0F.WIG 5B /r
</td></tr><tr><th>VCVTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.128.66.0F.W0 5B /r
</td></tr><tr><th>VCVTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst
</th><td>EVEX.256.66.0F.W0 5B /r
</td></tr><tr><th>VCVTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}
</th><td>EVEX.512.66.0F.W0 5B /r
</td></tr></table></dd>
<dt>Category</dt>
<dd>sse2,pcksp</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wps</dd>
<dt>Opcode</dt>
<dd>0x660F5B /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5224.htm">t5224</a>
</dd>
</dl><pre>
IizVCVTPS2DQ:: PROC
    IiAllowModifier DATA,MASK
    IiAllowBroadcasting DWORD
    IiAllowRounding
    IiEmitOpcode 0x5B
    IiDisp8EVEX FV32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.mem:
.xmm.xmm:
    IiEmitPrefix VEX.128.66.0F.WIG, EVEX.128.66.0F.W0
    RET
.ymm.mem:
.ymm.ymm:
    IiEmitPrefix VEX.256.66.0F.WIG, EVEX.256.66.0F.W0
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F.W0
    RET
  ENDP IizVCVTPS2DQ::
</pre>

<dl id="IizVCVTTPS2DQ">
<dt><a href='#IizHandlers'>&uarr; VCVTTPS2DQ</a></dt>
<dd>Convert with Trunc. Packed Single-FP Values to DW Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTTPS2DQ xmm1, xmm2/m128
</th><td>VEX.128.F3.0F.WIG 5B /r
</td></tr><tr><th>VCVTTPS2DQ ymm1, ymm2/m256
</th><td>VEX.256.F3.0F.WIG 5B /r
</td></tr><tr><th>VCVTTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.128.F3.0F.W0 5B /r
</td></tr><tr><th>VCVTTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst
</th><td>EVEX.256.F3.0F.W0 5B /r
</td></tr><tr><th>VCVTTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst {sae}
</th><td>EVEX.512.F3.0F.W0 5B /r
</td></tr></table></dd>
<dt>Category</dt>
<dd>sse2,pcksp</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wps</dd>
<dt>Opcode</dt>
<dd>0xF30F5B /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5224.htm">t5224</a>
</dd>
</dl><pre>
IizVCVTTPS2DQ:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiAllowSuppressing
    IiEmitOpcode 0x5B
    IiEncoding DATA=DWORD
    IiDisp8EVEX FV32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.mem:
.xmm.xmm:
    IiEmitPrefix VEX.128.F3.0F.WIG, EVEX.128.F3.0F.W0
    RET
.ymm.mem:
.ymm.ymm:
    IiEmitPrefix VEX.256.F3.0F.WIG, EVEX.256.F3.0F.W0
    RET
.zmm.mem:
.zmm.zmm:    
    IiEmitPrefix EVEX.512.F3.0F.W0
    RET
  ENDP IizVCVTTPS2DQ::
</pre>

<dl id="IizVCVTQQ2PS">
<dt><a href='#IizHandlers'>&uarr; VCVTQQ2PS</a></dt>
<dd>Convert Packed Quadword Integers to Packed Single-Precision Floating-Point values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst
</th><td>EVEX.128.0F.W1 5B /r
</td></tr><tr><th>VCVTQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst
</th><td>EVEX.256.0F.W1 5B /r
</td></tr><tr><th>VCVTQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}
</th><td>EVEX.512.0F.W1 5B /r
</td></tr></table></dd>
<dt>Opcode</dt>
<dd>0x5B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5228.htm">t5228</a>
</dd>
</dl><pre>
IizVCVTQQ2PS:: PROC
    IiAllowModifier DATA,MASK
    IiAllowBroadcasting QWORD
    IiAllowRounding
    IiEncoding DATA=QWORD
    IiEmitOpcode 0x5B
    IiDisp8EVEX FV64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, xmm.ymm, ymm.zmm, ymm.mem
.xmm.mem:
    IiDispatchDataSize OWORD=.xmm.xmm:, YWORD=.xmm.ymm:
    IiAbort '6793'  ; Please specify memory operand size with DATA=OWORD or DATA=YWORD.
.xmm.xmm:
    IiEmitPrefix EVEX.128.0F.W1
    RET
.xmm.ymm:
    IiEmitPrefix EVEX.256.0F.W1
    IiEncoding DATA=OWORD
    RET
.ymm.mem:
.ymm.zmm:
    IiEmitPrefix EVEX.512.0F.W1
    IiEncoding DATA=YWORD
    RET
  ENDP IizVCVTQQ2PS::
</pre>

<dl id="IizVCVTSI2SS">
<dt><a href='#IizHandlers'>&uarr; VCVTSI2SS</a></dt>
<dd>Convert DWORD Integer to Scalar Single-FP Value</dd>
<dt>Intel reference</dt>
<dd><table><tr><th>VCVTSI2SS xmm1, xmm2, r/m32
</th><td>VEX.NDS.128.F3.0F.W0 2A /r
</td></tr><tr><th>VCVTSI2SS xmm1, xmm2, r/m64
</th><td>VEX.NDS.128.F3.0F.W1 2A /r
</td></tr><tr><th>VCVTSI2SS xmm1, xmm2, r/m32{er}
</th><td>EVEX.NDS.LIG.F3.0F.W0 2A /r
</td></tr><tr><th>VCVTSI2SS xmm1, xmm2, r/m64{er}
</th><td>EVEX.NDS.LIG.F3.0F.W1 2A /r
</td></tr></table></dd>
<dt>Category</dt>
<dd>sse1,conver</dd>
<dt>Operands</dt>
<dd><b>Vss</b>,Edqp</dd>
<dt>Opcode</dt>
<dd>0xF30F2A /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5222.htm">t5222</a>
</dd>
</dl><pre>
IizVCVTSI2SS:: PROC
    IiAllowModifier DATA
    IiEmitOpcode 0x2A
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.r32, xmm.xmm.r64, xmm.xmm.mem
.xmm.xmm.r32:
    IiAllowModifier ROUND
 .D:IiEncoding DATA=DWORD
    IiDisp8EVEX T1S32
    IiEmitPrefix VEX.NDS.128.F3.0F.W0, EVEX.NDS.LIG.F3.0F.W0
    RET
.xmm.xmm.r64:
    IiAllowModifier ROUND
 .Q:JNSt [EDI+II.SssStatus],sssWidth64, .D:
    ; W1 in non-64 bit is ignored; the instructions behaves as if the W0 version is used.
    IiEncoding DATA=QWORD
    IiDisp8EVEX T1S64
    IiEmitPrefix VEX.NDS.128.F3.0F.W1, EVEX.NDS.LIG.F3.0F.W1
    RET
.xmm.xmm.mem:
    IiDispatchDataSize DWORD=.D:, QWORD=.Q:
    IiAbort '6792'  ; Please specify memory operand size with DATA=DWORD or DATA=QWORD.
  ENDP IizVCVTSI2SS::
</pre>

<dl id="IizVCVTSI2SD">
<dt><a href='#IizHandlers'>&uarr; VCVTSI2SD</a></dt>
<dd>Convert DW Integer to Scalar Double-FP Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTSI2SD xmm1, xmm2, r/m32
</th><td>VEX.NDS.128.F2.0F.W0 2A /r
</td></tr><tr><th>VCVTSI2SD xmm1, xmm2, r/m64
</th><td>VEX.NDS.128.F2.0F.W1 2A /r
</td></tr><tr><th>VCVTSI2SD xmm1, xmm2, r/m32
</th><td>EVEX.NDS.LIG.F2.0F.W0 2A /r
</td></tr><tr><th>VCVTSI2SD xmm1, xmm2, r/m64{er}
</th><td>EVEX.NDS.LIG.F2.0F.W1 2A /r
</td></tr></table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,conver</dd>
<dt>Operands</dt>
<dd><b>Vsd</b>,Edqp</dd>
<dt>Opcode</dt>
<dd>0xF20F2A /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5222.htm">t5222</a>
</dd>
</dl><pre>
IizVCVTSI2SD:: PROC
    IiAllowModifier DATA
    IiEmitOpcode 0x2A
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.r32, xmm.xmm.r64, xmm.xmm.mem
.xmm.xmm.r32:
    IiAllowModifier ROUND
 .D:IiEncoding DATA=DWORD
    IiDisp8EVEX T1S32
    IiEmitPrefix VEX.NDS.128.F2.0F.W0, EVEX.NDS.LIG.F2.0F.W0
    RET
.xmm.xmm.r64:
    IiAllowModifier ROUND
 .Q:JNSt [EDI+II.SssStatus],sssWidth64, .D:
    ; W1 in non-64 bit is ignored; the instructions behaves as if the W0 version is used.
    IiEncoding DATA=QWORD
    IiDisp8EVEX T1S64
    IiEmitPrefix VEX.NDS.128.F2.0F.W1, EVEX.NDS.LIG.F2.0F.W1
    RET
.xmm.xmm.mem:
    IiDispatchDataSize  DWORD=.D:, QWORD=.Q:
    IiAbort '6792'  ; Please specify memory operand size with DATA=DWORD or DATA=QWORD.
  ENDP IizVCVTSI2SD::
</pre>

<dl id="IizVCVTSS2SI">
<dt><a href='#IizHandlers'>&uarr; VCVTSS2SI</a></dt>
<dd>Convert Scalar Single-FP Value to DWORD Integer</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTSS2SI r32, xmm1/m32
</th><td>VEX.128.F3.0F.W0 2D /r
</td></tr><tr><th>VCVTSS2SI r64, xmm1/m32
</th><td>VEX.128.F3.0F.W1 2D /r
</td></tr><tr><th>VCVTSS2SI r32, xmm1/m32{er}
</th><td>EVEX.LIG.F3.0F.W0 2D /r
</td></tr><tr><th>VCVTSS2SI r64, xmm1/m32{er}
</th><td>EVEX.LIG.F3.0F.W1 2D /r
</td></tr></table></dd>
<dt>Category</dt>
<dd>sse1,conver</dd>
<dt>Operands</dt>
<dd><b>Gdqp</b>,Wss</dd>
<dt>Opcode</dt>
<dd>0xF30F2D /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5220.htm">t5220</a>
</dd>
</dl><pre>
IizVCVTSS2SI:: PROC
    IiAllowRounding Register=xmm
    IiEmitOpcode 0x2D
    IiEncoding DATA=DWORD
    IiDisp8EVEX T1S32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  r32.xmm, r32.mem, r64.xmm, r64.mem
.r32.xmm:
.r32.mem:
    IiEmitPrefix VEX.128.F3.0F.W0, EVEX.LIG.F3.0F.W0
    RET
.r64.xmm:
.r64.mem:
    IiAbortIfNot64
    IiEmitPrefix VEX.128.F3.0F.W1, EVEX.LIG.F3.0F.W1
    RET
  ENDP IizVCVTSS2SI::
</pre>

<dl id="IizVCVTSD2SI">
<dt><a href='#IizHandlers'>&uarr; VCVTSD2SI</a></dt>
<dd>Convert Scalar Double-FP Value to DW Integer</dd>
<dt>Intel reference</dt>
<dd><table><tr><th>VCVTSD2SI r32, xmm1/m64
</th><td>VEX.128.F2.0F.W0 2D /r
</td></tr><tr><th>VCVTSD2SI r64, xmm1/m64
</th><td>VEX.128.F2.0F.W1 2D /r
</td></tr><tr><th>VCVTSD2SI r32, xmm1/m64{er}
</th><td>EVEX.LIG.F2.0F.W0 2D /r
</td></tr><tr><th>VCVTSD2SI r64, xmm1/m64{er}
</th><td>EVEX.LIG.F2.0F.W1 2D /r
</td></tr></table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,conver</dd>
<dt>Operands</dt>
<dd><b>Gdqp</b>,Wsd</dd>
<dt>Opcode</dt>
<dd>0xF20F2D /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5220.htm">t5220</a>
</dd>
</dl><pre>
IizVCVTSD2SI:: PROC
    IiAllowRounding Register=xmm
    IiEmitOpcode 0x2D
    IiEncoding DATA=QWORD
    IiDisp8EVEX T1S64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  r32.xmm, r32.mem, r64.xmm, r64.mem
.r32.xmm:
.r32.mem:
    IiEncoding DATA=DWORD
    IiEmitPrefix VEX.128.F2.0F.W0, EVEX.LIG.F2.0F.W0
    RET
.r64.xmm:
.r64.mem:
    IiAbortIfNot64
    IiEmitPrefix VEX.128.F2.0F.W1, EVEX.LIG.F2.0F.W1
    RET
  ENDP IizVCVTSD2SI::
</pre>

<dl id="IizVCVTTSS2SI">
<dt><a href='#IizHandlers'>&uarr; VCVTTSS2SI</a></dt>
<dd>Convert with Trunc. Scalar Single-FP Value to DW Integer</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTTSS2SI r32, xmm1/m32
</th><td>VEX.128.F3.0F.W0 2C /r
</td></tr><tr><th>VCVTTSS2SI r64, xmm1/m32
</th><td>VEX.128.F3.0F.W1 2C /r
</td></tr><tr><th>VCVTTSS2SI r32, xmm1/m32{sae}
</th><td>EVEX.LIG.F3.0F.W0 2C /r
</td></tr><tr><th>VCVTTSS2SI r64, xmm1/m32{sae}
</th><td>EVEX.LIG.F3.0F.W1 2C /r
</td></tr></table></dd>
<dt>Category</dt>
<dd>sse1,conver</dd>
<dt>Operands</dt>
<dd><b>Gdqp</b>,Wss</dd>
<dt>Opcode</dt>
<dd>0xF30F2C /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5220.htm">t5220</a>
</dd>
</dl><pre>
IizVCVTTSS2SI:: PROC
    IiAllowSuppressing Register=xmm
    IiEmitOpcode 0x2C
    IiEncoding DATA=DWORD
    IiDisp8EVEX T1S32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  r32.xmm, r32.mem, r64.xmm, r64.mem
.r32.xmm:
.r32.mem:
    IiEmitPrefix VEX.128.F3.0F.W0, EVEX.LIG.F3.0F.W0
    RET
.r64.xmm:
.r64.mem:
    IiEncoding DATA=QWORD
    IiAbortIfNot64
    IiEmitPrefix VEX.128.F3.0F.W1, EVEX.LIG.F3.0F.W1
    RET
  ENDP IizVCVTTSS2SI::
</pre>

<dl id="IizVCVTTSD2SI">
<dt><a href='#IizHandlers'>&uarr; VCVTTSD2SI</a></dt>
<dd>Conv. with Trunc. Scalar Double-FP Value to Signed DW Int</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTTSD2SI r32, xmm1/m64
</th><td>VEX.128.F2.0F.W0 2C /r
</td></tr><tr><th>VCVTTSD2SI r64, xmm1/m64
</th><td>VEX.128.F2.0F.W1 2C /r
</td></tr><tr><th>VCVTTSD2SI r32, xmm1/m64{sae}
</th><td>EVEX.LIG.F2.0F.W0 2C /r
</td></tr><tr><th>VCVTTSD2SI r64, xmm1/m64{sae}
</th><td>EVEX.LIG.F2.0F.W1 2C /r
</td></tr></table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,conver</dd>
<dt>Operands</dt>
<dd><b>Gdqp</b>,Wsd</dd>
<dt>Opcode</dt>
<dd>0xF20F2C /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5220.htm">t5220</a>
</dd>
</dl><pre>
IizVCVTTSD2SI:: PROC
    IiAllowSuppressing Register=xmm 
    IiEmitOpcode 0x2C
    IiEncoding DATA=QWORD
    IiDisp8EVEX T1S64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  r32.xmm, r32.mem, r64.xmm, r64.mem
.r32.xmm:
.r32.mem:
    IiEncoding DATA=DWORD
    IiEmitPrefix VEX.128.F2.0F.W0, EVEX.LIG.F2.0F.W0
    RET
.r64.xmm:
.r64.mem:
    IiAbortIfNot64
    IiEmitPrefix VEX.128.F2.0F.W1, EVEX.LIG.F2.0F.W1
    RET
  ENDP IizVCVTTSD2SI::
</pre>

<dl id="IizVCVTSS2USI">
<dt><a href='#IizHandlers'>&uarr; VCVTSS2USI</a></dt>
<dd>Convert Scalar Single-Precision Floating-Point Value to Unsigned Doubleword</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTSS2USI r32, xmm1/m32{er}
</th><td>EVEX.LIG.F3.0F.W0 79 /r
</td></tr><tr><th>VCVTSS2USI r64, xmm1/m32{er}
</th><td>EVEX.LIG.F3.0F.W1 79 /r
</td></tr></table></dd>
<dt>Opcode</dt>
<dd>0x79</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5220.htm">t5220</a>
</dd>
</dl><pre>
IizVCVTSS2USI:: PROC
    IiAllowRounding Register=xmm
    IiEmitOpcode 0x79
    IiEncoding DATA=DWORD
    IiDisp8EVEX T1S32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  r32.xmm, r32.mem, r64.xmm, r64.mem
.r32.xmm:
.r32.mem:
    IiEmitPrefix EVEX.LIG.F3.0F.W0
    RET
.r64.xmm:
.r64.mem:
    IiEncoding DATA=QWORD
    IiAbortIfNot64
    IiEmitPrefix EVEX.LIG.F3.0F.W1
    RET
  ENDP IizVCVTSS2USI::
</pre>

<dl id="IizVCVTSD2USI">
<dt><a href='#IizHandlers'>&uarr; VCVTSD2USI</a></dt>
<dd>Convert Scalar Double-Precision Floating-Point Value to Unsigned Doubleword  Integer</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTSD2USI r32, xmm1/m64{er}
</th><td>EVEX.LIG.F2.0F.W0 79 /r
</td></tr><tr><th>VCVTSD2USI r64, xmm1/m64{er}
</th><td>EVEX.LIG.F2.0F.W1 79 /r
</td></tr></table></dd>
<dt>Opcode</dt>
<dd>0x79</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5220.htm">t5220</a>
</dd>
</dl><pre>
IizVCVTSD2USI:: PROC
    IiAllowRounding Register=xmm
    IiEmitOpcode 0x79
    IiEncoding DATA=QWORD
    IiDisp8EVEX T1S64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  r32.xmm, r32.mem, r64.xmm, r64.mem
.r32.xmm:
.r32.mem:
    IiEncoding DATA=DWORD
    IiEmitPrefix EVEX.LIG.F2.0F.W0
    RET
.r64.xmm:
.r64.mem:
    IiAbortIfNot64
    IiEmitPrefix EVEX.LIG.F2.0F.W1
    RET
  ENDP IizVCVTSD2USI::
</pre>

<dl id="IizVCVTTSS2USI">
<dt><a href='#IizHandlers'>&uarr; VCVTTSS2USI</a></dt>
<dd>Convert with Truncation Scalar Single-Precision Floating-Point Value to  Unsigned Integer</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTTSS2USI r32, xmm1/m32{sae}
</th><td>EVEX.LIG.F3.0F.W0 78 /r
</td></tr><tr><th>VCVTTSS2USI r64, xmm1/m32{sae}
</th><td>EVEX.LIG.F3.0F.W1 78 /r
</td></tr></table></dd>
<dt>Opcode</dt>
<dd>0x78</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5220.htm">t5220</a>
</dd>
</dl><pre>
IizVCVTTSS2USI:: PROC
    IiAllowSuppressing Register=xmm
    IiEmitOpcode 0x78
    IiEncoding DATA=DWORD
    IiDisp8EVEX T1S32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  r32.xmm, r32.mem, r64.xmm, r64.mem
.r32.xmm:
.r32.mem:
    IiEmitPrefix EVEX.LIG.F3.0F.W0
    RET
.r64.xmm:
.r64.mem:
    IiEncoding DATA=QWORD
    IiAbortIfNot64
    IiEmitPrefix EVEX.LIG.F3.0F.W1
    RET
  ENDP IizVCVTTSS2USI::
</pre>

<dl id="IizVCVTTSD2USI">
<dt><a href='#IizHandlers'>&uarr; VCVTTSD2USI</a></dt>
<dd>Convert with Truncation Scalar Double-Precision Floating-Point Value to  Unsigned Integer</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTTSD2USI r32, xmm1/m64{sae}
</th><td>EVEX.LIG.F2.0F.W0 78 /r
</td></tr><tr><th>VCVTTSD2USI r64, xmm1/m64{sae}
</th><td>EVEX.LIG.F2.0F.W1 78 /r
</td></tr></table></dd>
<dt>Opcode</dt>
<dd>0x87</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5220.htm">t5220</a>
</dd>
</dl><pre>
IizVCVTTSD2USI:: PROC
    IiAllowSuppressing Register=xmm
    IiEmitOpcode 0x78
    IiEncoding DATA=QWORD
    IiDisp8EVEX T1S64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  r32.xmm, r32.mem, r64.xmm, r64.mem
.r32.xmm:
.r32.mem:
    IiEncoding DATA=DWORD
    IiEmitPrefix EVEX.LIG.F2.0F.W0
    RET
.r64.xmm:
.r64.mem:
    IiAbortIfNot64
    IiEmitPrefix EVEX.LIG.F2.0F.W1
    RET
  ENDP IizVCVTTSD2USI::
</pre>

<dl id="IizVCVTUSI2SS">
<dt><a href='#IizHandlers'>&uarr; VCVTUSI2SS</a></dt>
<dd>Convert Unsigned Integer to Scalar Single-Precision Floating-Point Value</dd>
<dt>Intel reference</dt>
<dd><table><tr><th>VCVTUSI2SS xmm1, xmm2, r/m32{er}
</th><td>EVEX.NDS.LIG.F3.0F.W0 7B /r
</td></tr><tr><th>VCVTUSI2SS xmm1, xmm2, r/m64{er}
</th><td>EVEX.NDS.LIG.F3.0F.W1 7B /r
</td></tr></table></dd>
<dt>Opcode</dt>
<dd>0x7B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5222.htm">t5222</a>
</dd>
</dl><pre>
IizVCVTUSI2SS:: PROC
    IiEmitOpcode 0x7B
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.r32, xmm.xmm.r64, xmm.xmm.mem
.xmm.xmm.r32:
    IiAllowModifier ROUND
 .D:IiEncoding DATA=DWORD
    IiDisp8EVEX T1S32
    IiEmitPrefix EVEX.NDS.LIG.F3.0F.W0
    RET
.xmm.xmm.r64:
    IiAllowModifier ROUND
 .Q:IiEncoding DATA=QWORD
    IiDisp8EVEX T1S64
    IiEmitPrefix EVEX.NDS.LIG.F3.0F.W1
    RET
.xmm.xmm.mem:
    IiAllowModifier DATA
    IiDispatchDataSize DWORD=.D:, QWORD=.Q:
    IiAbort '6792'  ; Please specify memory operand size with DATA=DWORD or DATA=QWORD.
  ENDP IizVCVTUSI2SS::
</pre>

<dl id="IizVCVTUSI2SD">
<dt><a href='#IizHandlers'>&uarr; VCVTUSI2SD</a></dt>
<dd>Convert Unsigned Integer to Scalar Double-Precision Floating-Point Value</dd>
<dt>Intel reference</dt>
<dd><table><tr><th>VCVTUSI2SD xmm1, xmm2, r/m32
</th><td>EVEX.NDS.LIG.F2.0F.W0 7B /r
</td></tr><tr><th>VCVTUSI2SD xmm1, xmm2, r/m64{er}
</th><td>EVEX.NDS.LIG.F2.0F.W1 7B /r
</td></tr></table></dd>
<dt>Opcode</dt>
<dd>0x7B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5222.htm">t5222</a>
</dd>
</dl><pre>
IizVCVTUSI2SD:: PROC
    IiEmitOpcode 0x7B
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.r32, xmm.xmm.r64, xmm.xmm.mem
.xmm.xmm.r32:
    IiAllowModifier ROUND
 .D:IiEncoding DATA=DWORD
    IiDisp8EVEX T1S32
    IiEmitPrefix EVEX.NDS.LIG.F2.0F.W0
    RET
.xmm.xmm.r64:
    IiAllowModifier ROUND
 .Q:IiEncoding DATA=QWORD
    IiDisp8EVEX T1S64
    IiEmitPrefix EVEX.NDS.LIG.F2.0F.W1
    RET
.xmm.xmm.mem:
    IiAllowModifier DATA
    IiDispatchDataSize DWORD=.D:, QWORD=.Q:
    IiAbort '6792'  ; Please specify memory operand size with DATA=DWORD or DATA=QWORD.
  ENDP IizVCVTUSI2SD::
</pre>

<dl id="IizVCVTUDQ2PS">
<dt><a href='#IizHandlers'>&uarr; VCVTUDQ2PS</a></dt>
<dd>Convert Packed Unsigned Doubleword Integers to Packed Single-Precision  Floating-Point Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTUDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.128.F2.0F.W0 7A /r
</td></tr><tr><th>VCVTUDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst
</th><td>EVEX.256.F2.0F.W0 7A /r
</td></tr><tr><th>VCVTUDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}
</th><td>EVEX.512.F2.0F.W0 7A /r
</td></tr></table></dd>
<dt>Opcode</dt>
<dd>0x7A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5228.htm">t5228</a>
</dd>
</dl><pre>
IizVCVTUDQ2PS:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiAllowRounding
    IiEmitOpcode 0x7A
    IiDisp8EVEX FV32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.mem:
.xmm.xmm:
    IiEmitPrefix EVEX.128.F2.0F.W0
    RET
.ymm.mem:
.ymm.ymm:
    IiEmitPrefix EVEX.256.F2.0F.W0
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.F2.0F.W0
    RET
  ENDP IizVCVTUDQ2PS::
</pre>

<dl id="IizVCVTUDQ2PD">
<dt><a href='#IizHandlers'>&uarr; VCVTUDQ2PD</a></dt>
<dd>Convert Packed Unsigned Doubleword Integers to Packed Double-Precision  Floating-Point Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTUDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst
</th><td>EVEX.128.F3.0F.W0 7A /r 
</td></tr>
<tr><th>VCVTUDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.256.F3.0F.W0 7A /r 
</td></tr>
<tr><th>VCVTUDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst
</th><td>EVEX.512.F3.0F.W0 7A /r 
<tr><th>VCVTUDQ2PD zmm1 {k1}, zmm2/m256/m32bcst
</th><td>MVEX.512.F3.0F.W0 7A /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x7A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5230.htm">t5230</a>
</dd>
</dl><pre>
IizVCVTUDQ2PD:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiEmitOpcode 0x7A
    IiDisp8EVEX HV32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.xmm, ymm.mem, zmm.ymm, zmm.mem, zmm.zmm
.xmm.mem:
.xmm.xmm:
    IiEmitPrefix EVEX.128.F3.0F.W0
    IiEncoding DATA=QWORD
    RET
.ymm.mem:
.ymm.xmm:
    IiEmitPrefix EVEX.256.F3.0F.W0
    IiEncoding DATA=OWORD
    RET
.zmm.ymm:
    IiEmitPrefix EVEX.512.F3.0F.W0
    IiEncoding DATA=YWORD
    RET
.zmm.mem:
    JNSt [EDI+II.MfxExplicit],iiMfxPREFIX_MVEX, .zmm.ymm:
    IiDisp8MVEX Sb32
.zmm.zmm:
    IiEmitPrefix MVEX.512.F3.0F.W0
    IiEncoding DATA=YWORD
    RET
  ENDP IizVCVTUDQ2PD::
</pre>

<dl id="IizVCVTTPS2UDQ">
<dt><a href='#IizHandlers'>&uarr; VCVTTPS2UDQ</a></dt>
<dd>Convert with Truncation Packed Single-Precision Floating-Point Values to  Packed Unsigned Doubleword Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.128.0F.W0 78 /r 
</td></tr>
<tr><th>VCVTTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst
</th><td>EVEX.256.0F.W0 78 /r 
</td></tr>
<tr><th>VCVTTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}
</th><td>EVEX.512.0F.W0 78 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x78</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5224.htm">t5224</a>
</dd>
</dl><pre>
IizVCVTTPS2UDQ:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiAllowSuppressing
    IiEmitOpcode 0x78
    IiDisp8EVEX FV32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.mem:    
.xmm.xmm:
    IiEmitPrefix EVEX.128.0F.W0
    RET
.ymm.mem:
.ymm.ymm:
    IiEmitPrefix EVEX.256.0F.W0
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.0F.W0
    RET
  ENDP IizVCVTTPS2UDQ::
</pre>

<dl id="IizVCVTTPD2UDQ">
<dt><a href='#IizHandlers'>&uarr; VCVTTPD2UDQ</a></dt>
<dd>Convert with Truncation Packed Double-Precision Floating-Point Values to  Packed Unsigned Doubleword Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst
</th><td>EVEX.128.0F.W1 78 /r 
</td></tr>
<tr><th>VCVTTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst
</th><td>EVEX.256.0F.W1 78 02 /r 
</td></tr>
<tr><th>VCVTTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}
</th><td>EVEX.512.0F.W1 78 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x78</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5224.htm">t5224</a>
</dd>
</dl><pre>
IizVCVTTPD2UDQ:: PROC
    IiAllowModifier MASK,DATA
    IiAllowBroadcasting QWORD
    IiAllowSuppressing
    IiEmitOpcode 0x78
    IiDisp8EVEX FV64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, xmm.ymm, ymm.zmm, ymm.mem
.xmm.xmm:
    IiEmitPrefix EVEX.128.0F.W1
    RET
.xmm.ymm:
    IiEmitPrefix EVEX.256.0F.W1
    RET
.ymm.zmm:
.ymm.mem:
    IiEmitPrefix EVEX.512.0F.W1
    RET
.xmm.mem:
    IiDispatchDataSize OWORD=.xmm.xmm:, YWORD=.xmm.ymm:
    IiAbort '6793'  ; Please specify memory operand size with DATA=OWORD or DATA=YWORD.
  ENDP IizVCVTTPD2UDQ::
</pre>

<dl id="IizVCVTTPS2UQQ">
<dt><a href='#IizHandlers'>&uarr; VCVTTPS2UQQ</a></dt>
<dd>Convert with Truncation Packed Single Precision Floating-Point Values to  Packed Unsigned Quadword Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst
</th><td>EVEX.128.66.0F.W0 78 /r 
</td></tr>
<tr><th>VCVTTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.256.66.0F.W0 78 /r 
</td></tr>
<tr><th>VCVTTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}
</th><td>EVEX.512.66.0F.W0 78 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x78</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5226.htm">t5226</a>
</dd>
</dl><pre>
IizVCVTTPS2UQQ:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiAllowSuppressing Register=ymm
    IiEmitOpcode 0x78
    IiDisp8EVEX HV32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.xmm, ymm.mem, zmm.ymm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F.W0
    RET
.ymm.xmm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F.W0
    RET
.zmm.ymm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F.W0
    RET
  ENDP IizVCVTTPS2UQQ::
</pre>

<dl id="IizVCVTTPD2UQQ">
<dt><a href='#IizHandlers'>&uarr; VCVTTPD2UQQ</a></dt>
<dd>Convert with Truncation Packed Double-Precision Floating-Point Values to  Packed Unsigned Quadword Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst 
</th><td>EVEX.128.66.0F.W1 78 /r 
</td></tr>
<tr><th>VCVTTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst
</th><td>EVEX.256.66.0F.W1 78 /r 
</td></tr>
<tr><th>VCVTTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}
</th><td>EVEX.512.66.0F.W1 78 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x78</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5226.htm">t5226</a>
</dd>
</dl><pre>
IizVCVTTPD2UQQ:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiAllowSuppressing
    IiEmitOpcode 0x78
    IiDisp8EVEX FV64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F.W1
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F.W1
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F.W1
    RET
  ENDP IizVCVTTPD2UQQ::
</pre>

<dl id="IizVCVTPS2UDQ">
<dt><a href='#IizHandlers'>&uarr; VCVTPS2UDQ</a></dt>
<dd>Convert Packed Single-Precision Floating-Point Values to Packed Unsigned  Doubleword Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTPS2UDQ xmm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.128.0F.W0 79 /r 
</td></tr>
<tr><th>VCVTPS2UDQ ymm1 {k1}{z}, ymm2/m256/m32bcst
</th><td>EVEX.256.0F.W0 79 /r 
</td></tr>
<tr><th>VCVTPS2UDQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}
</th><td>EVEX.512.0F.W0 79 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x79</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5224.htm">t5224</a>
</dd>
</dl><pre>
IizVCVTPS2UDQ:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiAllowRounding
    IiEmitOpcode 0x79
    IiDisp8EVEX FV32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.0F.W0
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.0F.W0
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.0F.W0
    RET
  ENDP IizVCVTPS2UDQ::
</pre>

<dl id="IizVCVTPD2UDQ">
<dt><a href='#IizHandlers'>&uarr; VCVTPD2UDQ</a></dt>
<dd>Convert Packed Double-Precision Floating-Point Values to Packed Unsigned  Doubleword Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst
</th><td>EVEX.128.0F.W1 79 /r 
</td></tr>
<tr><th>VCVTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst
</th><td>EVEX.256.0F.W1 79 /r 
</td></tr>
<tr><th>VCVTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}
</th><td>EVEX.512.0F.W1 79 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x79</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5224.htm">t5224</a>
</dd>
</dl><pre>
IizVCVTPD2UDQ:: PROC
    IiAllowModifier MASK,DATA
    IiAllowBroadcasting QWORD
    IiAllowRounding
    IiEmitOpcode 0x79
    IiDisp8EVEX FV64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, xmm.ymm, ymm.zmm, ymm.mem
.xmm.xmm:
    IiEmitPrefix EVEX.128.0F.W1
    IiEncoding DATA=QWORD
    RET
.xmm.ymm:
    IiEmitPrefix EVEX.256.0F.W1
    IiEncoding DATA=OWORD
    RET
.ymm.zmm:
.ymm.mem:
    IiEmitPrefix EVEX.512.0F.W1
    IiEncoding DATA=YWORD
    RET
.xmm.mem:
    IiDispatchDataSize OWORD=.xmm.xmm:, YWORD=.xmm.ymm:
    IiAbort '6793'  ; Please specify memory operand size with DATA=OWORD or DATA=YWORD.
  ENDP IizVCVTPD2UDQ::
</pre>

<dl id="IizVCVTPS2UQQ">
<dt><a href='#IizHandlers'>&uarr; VCVTPS2UQQ</a></dt>
<dd>Convert Packed Single Precision Floating-Point Values to Packed Unsigned  Quadword Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTPS2UQQ xmm1 {k1}{z}, xmm2/m64/m32bcst
</th><td>EVEX.128.66.0F.W0 79 /r 
</td></tr>
<tr><th>VCVTPS2UQQ ymm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.256.66.0F.W0 79 /r 
</td></tr>
<tr><th>VCVTPS2UQQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}
</th><td>EVEX.512.66.0F.W0 79 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x79</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5226.htm">t5226</a>
</dd>
</dl><pre>
IizVCVTPS2UQQ:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiAllowRounding Register=ymm
    IiEmitOpcode 0x79
    IiDisp8EVEX HV32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.xmm, ymm.mem, zmm.ymm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F.W0
    IiEncoding DATA=QWORD
    RET
.ymm.xmm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F.W0
    IiEncoding DATA=OWORD
    RET
.zmm.ymm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F.W0
    IiEncoding DATA=YWORD
    RET
  ENDP IizVCVTPS2UQQ::
</pre>

<dl id="IizVCVTTPS2QQ">
<dt><a href='#IizHandlers'>&uarr; VCVTTPS2QQ</a></dt>
<dd>Convert with Truncation Packed Single Precision Floating-Point Values to  Packed Singed Quadword Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst
</th><td>EVEX.128.66.0F.W0 7A /r
</td></tr>
<tr><th>VCVTTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.256.66.0F.W0 7A /r
</td></tr>
<tr><th>VCVTTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}
</th><td>EVEX.512.66.0F.W0 7A /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x7A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5226.htm">t5226</a>
</dd>
</dl><pre>
IizVCVTTPS2QQ:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiAllowSuppressing Register=ymm
    IiEmitOpcode 0x7A
    IiDisp8EVEX HV32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.xmm, ymm.mem, zmm.ymm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F.W0
    IiEncoding DATA=QWORD
    RET
.ymm.xmm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F.W0
    IiEncoding DATA=OWORD
    RET
.zmm.ymm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F.W0
    IiEncoding DATA=YWORD
    RET
  ENDP IizVCVTTPS2QQ::
</pre>

<dl id="IizVCVTPS2QQ">
<dt><a href='#IizHandlers'>&uarr; VCVTPS2QQ</a></dt>
<dd>Convert Packed Single Precision Floating-Point Values to Packed Singed  Quadword Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTPS2QQ xmm1 {k1}{z}, xmm2/m64/m32bcst
</th><td>EVEX.128.66.0F.W0 7B /r 
</td></tr>
<tr><th>VCVTPS2QQ ymm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.256.66.0F.W0 7B /r 
</td></tr>
<tr><th>VCVTPS2QQ zmm1 {k1}{z}, ymm2/m256/m32bcst{er}
</th><td>EVEX.512.66.0F.W0 7B /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x7B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5226.htm">t5226</a>
</dd>
</dl><pre>
IizVCVTPS2QQ:: PROC
  IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiAllowRounding Register=ymm
    IiEmitOpcode 0x7B
    IiDisp8EVEX HV32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.xmm, ymm.mem, zmm.ymm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F.W0
    IiEncoding DATA=QWORD
    RET
.ymm.xmm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F.W0
    IiEncoding DATA=OWORD
    RET
.zmm.ymm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F.W0
    IiEncoding DATA=YWORD
    RET
  ENDP IizVCVTPS2QQ::
</pre>

<dl id="IizVCVTTPD2QQ">
<dt><a href='#IizHandlers'>&uarr; VCVTTPD2QQ</a></dt>
<dd>Convert with Truncation Packed Double-Precision Floating-Point Values to  Packed Quadword Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst
</th><td>EVEX.128.66.0F.W1 7A /r 
</td></tr>
<tr><th>VCVTTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst
</th><td>EVEX.256.66.0F.W1 7A /r 
</td></tr>
<tr><th>VCVTTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}
</th><td>EVEX.512.66.0F.W1 7A /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x7A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5226.htm">t5226</a>
</dd>
</dl><pre>
IizVCVTTPD2QQ:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiAllowSuppressing
    IiEmitOpcode 0x7A
    IiDisp8EVEX FV64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F.W1
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F.W1
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F.W1
    RET
  ENDP IizVCVTTPD2QQ::
</pre>

<dl id="IizVCVTPD2UQQ">
<dt><a href='#IizHandlers'>&uarr; VCVTPD2UQQ</a></dt>
<dd>Convert Packed Double-Precision Floating-Point Values to Packed Unsigned  Quadword Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTPD2UQQ xmm1 {k1}{z}, xmm2/m128/m64bcst 
</th><td>EVEX.128.66.0F.W1 79 /r 
</td></tr>
<tr><th>VCVTPD2UQQ ymm1 {k1}{z}, ymm2/m256/m64bcst 
</th><td>EVEX.256.66.0F.W1 79 /r 
</td></tr>
<tr><th>VCVTPD2UQQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}
</th><td>EVEX.512.66.0F.W1 79 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x79</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5226.htm">t5226</a>
</dd>
</dl><pre>
IizVCVTPD2UQQ:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiAllowRounding
    IiEmitOpcode 0x79
    IiDisp8EVEX FV64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F.W1
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F.W1
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F.W1
    RET
  ENDP IizVCVTPD2UQQ::
</pre>

<dl id="IizVCVTPD2QQ">
<dt><a href='#IizHandlers'>&uarr; VCVTPD2QQ</a></dt>
<dd>Convert Packed Double-Precision Floating-Point Values to Packed Quadword  Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTPD2QQ xmm1 {k1}{z}, xmm2/m128/m64bcst
</th><td>EVEX.128.66.0F.W1 7B /r 
</td></tr>
<tr><th>VCVTPD2QQ ymm1 {k1}{z}, ymm2/m256/m64bcst 
</th><td>EVEX.256.66.0F.W1 7B /r 
</td></tr>
<tr><th>VCVTPD2QQ zmm1 {k1}{z}, zmm2/m512/m64bcst{er}
</th><td>EVEX.512.66.0F.W1 7B /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x7B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5226.htm">t5226</a>
</dd>
</dl><pre>
IizVCVTPD2QQ:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiAllowRounding
    IiEmitOpcode 0x7B
    IiDisp8EVEX FV64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F.W1
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F.W1
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F.W1
    RET
  ENDP IizVCVTPD2QQ::
</pre>

<dl id="IizVCVTTPD2DQ">
<dt><a href='#IizHandlers'>&uarr; VCVTTPD2DQ</a></dt>
<dd>Convert with Trunc. Packed Double-FP Values to DW Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTTPD2DQ xmm1, xmm2/m128
</th><td>VEX.128.66.0F.WIG E6 /r 
</td></tr>
<tr><th>VCVTTPD2DQ xmm1, ymm2/m256
</th><td>VEX.256.66.0F.WIG E6 /r 
</td></tr>
<tr><th>VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst
</th><td>EVEX.128.66.0F.W1 E6 /r 
</td></tr>
<tr><th>VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst
</th><td>EVEX.256.66.0F.W1 E6 /r 
</td></tr>
<tr><th>VCVTTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}
</th><td>EVEX.512.66.0F.W1 E6 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,conver</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wpd</dd>
<dt>Opcode</dt>
<dd>0x660FE6 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5224.htm">t5224</a>
</dd>
</dl><pre>
IizVCVTTPD2DQ:: PROC
    IiAllowModifier MASK,DATA
    IiAllowBroadcasting QWORD
    IiAllowSuppressing
    IiEmitOpcode 0xE6
    IiDisp8EVEX FV64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, xmm.ymm, ymm.zmm, ymm.mem
.xmm.xmm:
    IiEmitPrefix VEX.128.66.0F.WIG, EVEX.128.66.0F.W1
    IiEncoding DATA=QWORD
    RET
.xmm.ymm:
    IiEmitPrefix VEX.256.66.0F.WIG, EVEX.256.66.0F.W1
    IiEncoding DATA=OWORD
    RET
.ymm.zmm:
.ymm.mem:
    IiEmitPrefix EVEX.512.66.0F.W1
    IiEncoding DATA=YWORD
    RET
.xmm.mem:
    IiDispatchDataSize OWORD=.xmm.xmm:, YWORD=.xmm.ymm:
    IiAbort '6793'  ; Please specify memory operand size with DATA=OWORD or DATA=YWORD.
  ENDP IizVCVTTPD2DQ::
</pre>

<dl id="IizVCVTPD2DQ">
<dt><a href='#IizHandlers'>&uarr; VCVTPD2DQ</a></dt>
<dd>Convert Packed Double-FP Values to DW Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTPD2DQ xmm1, xmm2/m128
</th><td>VEX.128.F2.0F.WIG E6 /r 
</td></tr>
<tr><th>VCVTPD2DQ xmm1, ymm2/m256
</th><td>VEX.256.F2.0F.WIG E6 /r 
</td></tr>
<tr><th>VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst
</th><td>EVEX.128.F2.0F.W1 E6 /r 
</td></tr>
<tr><th>VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst
</th><td>EVEX.256.F2.0F.W1 E6 /r 
</td></tr>
<tr><th>VCVTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}
</th><td>EVEX.512.F2.0F.W1 E6 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,conver</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wpd</dd>
<dt>Opcode</dt>
<dd>0xF20FE6 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5224.htm">t5224</a>
</dd>
</dl><pre>
IizVCVTPD2DQ:: PROC
    IiAllowModifier MASK,DATA
    IiAllowBroadcasting QWORD
    IiAllowRounding
    IiEmitOpcode 0xE6
    IiDisp8EVEX FV64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, xmm.ymm, ymm.zmm, ymm.mem
.xmm.xmm:
    IiEmitPrefix VEX.128.F2.66.0F.WIG, EVEX.128.F2.66.0F.W1
    IiEncoding DATA=QWORD
    RET
.xmm.ymm:
    IiEmitPrefix VEX.256.F2.66.0F.WIG, EVEX.256.F2.66.0F.W1
    IiEncoding DATA=OWORD
    RET
.ymm.zmm:
.ymm.mem:
    IiEmitPrefix EVEX.512.F2.66.0F.W1
    IiEncoding DATA=YWORD
    RET
.xmm.mem:
    IiDispatchDataSize OWORD=.xmm.xmm:, YWORD=.xmm.ymm:
    IiAbort '6793'  ; Please specify memory operand size with DATA=OWORD or DATA=YWORD.
  ENDP IizVCVTPD2DQ::
</pre>

<dl id="IizVCVTDQ2PD">
<dt><a href='#IizHandlers'>&uarr; VCVTDQ2PD</a></dt>
<dd>Convert Packed DW Integers to Double-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTDQ2PD xmm1, xmm2/m64
</th><td>VEX.128.F3.0F.WIG E6 /r 
</td></tr>
<tr><th>VCVTDQ2PD ymm1, xmm2/m128
</th><td>VEX.256.F3.0F.WIG E6 /r 
</td></tr>
<tr><th>VCVTDQ2PD xmm1 {k1}{z}, xmm2/m128/m32bcst 
</th><td>EVEX.128.F3.0F.W0 E6 /r 
</td></tr>
<tr><th>VCVTDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst 
</th><td>EVEX.256.F3.0F.W0 E6 /r 
</td></tr>
<tr><th>VCVTDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst
</th><td>EVEX.512.F3.0F.W0 E6 /r
<tr><th>VCVTDQ2PD zmm1 {k1}, zmm2/m256/m32bcst
</th><td>MVEX.512.F3.0F.W0 E6 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,conver</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0xF30FE6 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5230.htm">t5230</a>
</dd>
</dl><pre>
IizVCVTDQ2PD:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiEmitOpcode 0xE6
    IiDisp8EVEX HV32
    IiDisp8MVEX Sb32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.xmm, ymm.mem, zmm.ymm, zmm.mem, zmm.zmm
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.F3.0F.WIG, EVEX.128.F3.0F.W0
    RET
.ymm.xmm:
.ymm.mem:
    IiEmitPrefix VEX.256.F3.0F.WIG, EVEX.256.F3.0F.W0
    RET
.zmm.ymm:
.zmm.mem:
    IiEmitPrefix EVEX.512.F3.0F.W0, MVEX.512.F3.0F.W0
    RET
.zmm.zmm:
    IiEmitPrefix MVEX.512.F3.0F.W0
    RET
  ENDP IizVCVTDQ2PD::
</pre>

<dl id="IizVCVTQQ2PD">
<dt><a href='#IizHandlers'>&uarr; VCVTQQ2PD</a></dt>
<dd>Convert Packed Quadword Integers to Packed Double-Precision Floating-Point  Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst 
</th><td>EVEX.128.F3.0F.W1 E6 /r 
</td></tr>
<tr><th>VCVTQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst 
</th><td>EVEX.256.F3.0F.W1 E6 /r 
</td></tr>
<tr><th>VCVTQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}
</th><td>EVEX.512.F3.0F.W1 E6 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xE6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5230.htm">t5230</a>
</dd>
</dl><pre>
IizVCVTQQ2PD:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiAllowRounding
    IiEmitOpcode 0xE6
    IiDisp8EVEX FV64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.F3.0F.W1
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.F3.0F.W1
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.F3.0F.W1
    RET
  ENDP IizVCVTQQ2PD::
</pre>

<dl id="IizVCVTUQQ2PS">
<dt><a href='#IizHandlers'>&uarr; VCVTUQQ2PS</a></dt>
<dd>Convert Packed Unsigned Quadword Integers to Packed Single-Precision  Floating-Point Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTUQQ2PS xmm1 {k1}{z}, xmm2/m128/m64bcst 
</th><td>EVEX.128.F2.0F.W1 7A /r 
</td></tr>
<tr><th>VCVTUQQ2PS xmm1 {k1}{z}, ymm2/m256/m64bcst 
</th><td>EVEX.256.F2.0F.W1 7A /r 
</td></tr>
<tr><th>VCVTUQQ2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}
</th><td>EVEX.512.F2.0F.W1 7A /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x7A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5228.htm">t5228</a>
</dd>
</dl><pre>
IizVCVTUQQ2PS:: PROC
    IiAllowModifier MASK,DATA
    IiAllowBroadcasting QWORD
    IiAllowRounding
    IiEmitOpcode 0x7A
    IiDisp8EVEX FV64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, xmm.ymm, ymm.zmm, ymm.mem
.xmm.xmm:
    IiEmitPrefix EVEX.128.F2.0F.W1
    RET
.xmm.ymm:
    IiEmitPrefix EVEX.256.F2.0F.W1
    RET
.ymm.mem:
.ymm.zmm:
    IiEmitPrefix EVEX.512.F2.0F.W1
    RET
.xmm.mem:
    IiDispatchDataSize OWORD=.xmm.xmm:, YWORD=.xmm.ymm:
    IiAbort '6793'  ; Please specify memory operand size with DATA=OWORD or DATA=YWORD.
  ENDP IizVCVTUQQ2PS::
</pre>

<dl id="IizVCVTUQQ2PD">
<dt><a href='#IizHandlers'>&uarr; VCVTUQQ2PD</a></dt>
<dd>Convert Packed Unsigned Quadword Integers to Packed Double-Precision  Floating-Point Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTUQQ2PD xmm1 {k1}{z}, xmm2/m128/m64bcst 
</th><td>EVEX.128.F3.0F.W1 7A /r 
</td></tr>
<tr><th>VCVTUQQ2PD ymm1 {k1}{z}, ymm2/m256/m64bcst
</th><td>EVEX.256.F3.0F.W1 7A /r 
</td></tr>
<tr><th>VCVTUQQ2PD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}
</th><td>EVEX.512.F3.0F.W1 7A /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x7A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5230.htm">t5230</a>
</dd>
</dl><pre>
IizVCVTUQQ2PD:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiAllowRounding 
    IiEmitOpcode 0x7A
    IiDisp8EVEX FV64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.F3.0F.W1
    RET
.ymm.mem:
.ymm.ymm:
    IiEmitPrefix EVEX.256.F3.0F.W1
    RET
.zmm.mem:
.zmm.zmm:
    IiEmitPrefix EVEX.512.F3.0F.W1
    RET
  ENDP IizVCVTUQQ2PD::
</pre>

<dl id="IizVCVTPH2PS">
<dt><a href='#IizHandlers'>&uarr; VCVTPH2PS</a></dt>
<dd>Convert 16-bit FP values to Single-Precision FP values</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VCVTPH2PS.html">VCVTPH2PS</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTPH2PS xmm1, xmm2/m64
</th><td>VEX.128.66.0F38.W0 13 /r 
</td></tr>
<tr><th>VCVTPH2PS ymm1, xmm2/m128
</th><td>VEX.256.66.0F38.W0 13 /r 
</td></tr>
<tr><th>VCVTPH2PS xmm1 {k1}{z}, xmm2/m64 
</th><td>EVEX.128.66.0F38.W0 13 /r
</td></tr>
<tr><th>VCVTPH2PS ymm1 {k1}{z}, xmm2/m128
</th><td>EVEX.256.66.0F38.W0 13 /r
</td></tr>
<tr><th>VCVTPH2PS zmm1 {k1}{z}, ymm2/m256 {sae}
</th><td>EVEX.512.66.0F38.W0 13 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x13</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5228.htm">t5228</a>
</dd>
</dl><pre>
IizVCVTPH2PS:: PROC
    IiRequire SPEC
    IiAllowModifier MASK
    IiAllowSuppressing Register=ymm 
    IiEmitOpcode 0x13
    IiEncoding DATA=WORD
    IiDisp8EVEX HVM
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.xmm, ymm.mem, zmm.ymm, zmm.mem
.xmm.mem:
.xmm.xmm:
    IiEmitPrefix VEX.128.66.0F38.W0, EVEX.128.66.0F38.W0
    RET
.ymm.mem:
.ymm.xmm:
    IiEmitPrefix VEX.256.66.0F38.W0, EVEX.256.66.0F38.W0
    RET
.zmm.ymm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W0
    RET
  ENDP IizVCVTPH2PS::
</pre>

<dl id="IizVCVTPS2PH">
<dt><a href='#IizHandlers'>&uarr; VCVTPS2PH</a></dt>
<dd>Convert Single-Precision FP value to 16-bit FP value</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VCVTPS2PH.html">VCVTPS2PH</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCVTPS2PH xmm1/m64, xmm2, imm8
</th><td>VEX.128.66.0F3A.W0 1D /r ib 
</td></tr>
<tr><th>VCVTPS2PH xmm1/m128, ymm2, imm8
</th><td>VEX.256.66.0F3A.W0 1D /r ib 
</td></tr>
<tr><th>VCVTPS2PH xmm1/m64 {k1}{z}, xmm2, imm8
</th><td>EVEX.128.66.0F3A.W0 1D /r ib 
</td></tr>
<tr><th>VCVTPS2PH xmm1/m128 {k1}{z}, ymm2, imm8
</th><td>EVEX.256.66.0F3A.W0 1D /r ib 
</td></tr>
<tr><th>VCVTPS2PH ymm1/m256 {k1}{z}, zmm2{sae}, imm8
</th><td>EVEX.512.66.0F3A.W0 1D /r ib 
</td></tr>
</table></dd>
<dt>Operands</dt>
<dd>0x1D</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5230.htm">t5230</a>
</dd>
</dl><pre>
IizVCVTPS2PH:: PROC
    IiRequire SPEC
    IiAllowModifier MASK,DATA
    IiAllowSuppressing Operand=DH
    IiEmitOpcode 0x1D
    IiEncoding DATA=WORD
    IiDisp8EVEX HVM
    IiEmitImm Operand3, BYTE
    IiOpEn MR
    IiModRM /r
    IiDispatchFormat  xmm.xmm.imm, mem.xmm.imm, xmm.ymm.imm, mem.ymm.imm, ymm.zmm.imm, mem.zmm.imm
.mem.xmm.imm:
.xmm.xmm.imm:
    IiEmitPrefix VEX.128.66.0F3A.W0, EVEX.128.66.0F3A.W0
    RET
.mem.ymm.imm:
.xmm.ymm.imm:
    IiEmitPrefix VEX.256.66.0F3A.W0, EVEX.256.66.0F3A.W0
    RET
.ymm.zmm.imm:
    IiAllowModifier SAE
.mem.zmm.imm:
    IiEmitPrefix EVEX.512.66.0F3A.W0
    RET
  ENDP IizVCVTPS2PH::
</pre>

<dl id="IizVBROADCASTSS">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTSS</a></dt>
<dd>Load with Broadcast Floating-Point Data Scalar float32</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTSS xmm1, m32
</th><td>VEX.128.66.0F38.W0 18 /r 
</td></tr>
<tr><th>VBROADCASTSS ymm1, m32
</th><td>VEX.256.66.0F38.W0 18 /r 
</td></tr>
<tr><th>VBROADCASTSS xmm1 {k1}{z}, xmm2/m32
</th><td>EVEX.128.66.0F38.W0 18 /r 
</td></tr>
<tr><th>VBROADCASTSS ymm1 {k1}{z}, xmm2/m32
</th><td>EVEX.256.66.0F38.W0 18 /r 
</td></tr>
<tr><th>VBROADCASTSS zmm1 {k1}{z}, xmm2/m32
</th><td>EVEX.512.66.0F38.W0 18 /r 
</td></tr>
<tr><th>VBROADCASTSS zmm1 {k1}, m32
</th><td>MVEX.512.66.0F38.W0 18 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x18</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5240.htm">t5240</a>
</dd>
</dl><pre>
IizVBROADCASTSS:: PROC
    IiAllowModifier MASK
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x18
    IiDisp8EVEX T1S32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.mem, ymm.mem, xmm.xmm, ymm.xmm, zmm.xmm, zmm.mem
.xmm.xmm:
    IiEmitPrefix EVEX.128.66.0F38.W0
    RET
.ymm.xmm:
    IiEmitPrefix EVEX.256.66.0F38.W0
    RET
.zmm.xmm:
    IiEmitPrefix EVEX.512.66.0F38.W0
    RET
.xmm.mem:
    IiEmitPrefix VEX.128.66.0F38.W0, EVEX.128.66.0F38.W0
    RET
.ymm.mem:
    IiEmitPrefix VEX.256.66.0F38.W0, EVEX.256.66.0F38.W0
    RET
.zmm.mem:
    IiDisp8MVEX Df32
    IiEmitPrefix EVEX.512.66.0F38.W0, MVEX.512.66.0F38.W0
    RET
  ENDP IizVBROADCASTSS::
</pre>

<dl id="IizVBROADCASTSD">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTSD</a></dt>
<dd>Load with Broadcast Floating-Point Data Scalar float64</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTSD ymm1, m64
</th><td>VEX.256.66.0F38.W0 19 /r 
</td></tr>
<tr><th>VBROADCASTSD ymm1 {k1}{z}, xmm2/m64
</th><td>EVEX.256.66.0F38.W1 19 /r 
</td></tr>
<tr><th>VBROADCASTSD zmm1 {k1}{z}, xmm2/m64
</th><td>EVEX.512.66.0F38.W1 19 /r 
</td></tr>
<tr><th>VBROADCASTSD zmm1 {k1}, mem
</th><td>MVEX.512.66.0F38.W1 19 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x19</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5240.htm">t5240</a>
</dd>
</dl><pre>
IizVBROADCASTSD:: PROC
    IiAllowModifier MASK
    IiEncoding DATA=QWORD
    IiEmitOpcode 0x19
    IiDisp8EVEX T1S64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  ymm.mem, ymm.xmm, zmm.xmm, zmm.mem
.ymm.xmm:
    IiEmitPrefix EVEX.256.66.0F38.W1
    RET
.zmm.xmm:
    IiEmitPrefix EVEX.512.66.0F38.W1
    RET
.ymm.mem:
    IiEmitPrefix VEX.256.66.0F38.W0, EVEX.256.66.0F38.W1
    RET
.zmm.mem:
    IiDisp8MVEX Sn64
    IiEmitPrefix EVEX.512.66.0F38.W1, MVEX.512.66.0F38.W1
    RET
  ENDP IizVBROADCASTSD::
</pre>

<dl id="IizVBROADCASTF128">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTF128</a></dt>
<dd>Load with Broadcast Floating-Point Data Scalar float128</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTF128 ymm1, m128
</th><td>VEX.256.66.0F38.W0 1A /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x1A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5240.htm">t5240</a>
</dd>
</dl><pre>
IizVBROADCASTF128:: PROC
    IiEncoding DATA=OWORD
    IiEmitOpcode 0x1A
    IiOpEn RM
    IiModRM /r
    IiEmitPrefix VEX.256.66.0F38.W0
    IiDispatchFormat  ymm.mem
.ymm.mem:
    RET
  ENDP IizVBROADCASTF128::
</pre>

<dl id="IizVBROADCASTF32X2">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTF32X2</a></dt>
<dd>Load with Broadcast Floating-Point Data two float32</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTF32X2 ymm1 {k1}{z}, xmm2/m64
</th><td>EVEX.256.66.0F38.W0 19 /r 
</td></tr>
<tr><th>VBROADCASTF32X2 zmm1 {k1}{z}, xmm2/m64
</th><td>EVEX.512.66.0F38.W0 19 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x19</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5242.htm">t5242</a>
</dd>
</dl><pre>
IizVBROADCASTF32X2:: PROC
    IiAllowModifier MASK
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x19
    IiDisp8EVEX T1S64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  ymm.xmm, ymm.mem, zmm.xmm, zmm.mem
.ymm.mem:
.ymm.xmm:
    IiEmitPrefix EVEX.256.66.0F38.W0
    RET
.zmm.mem:
.zmm.xmm:
    IiEmitPrefix EVEX.512.66.0F38.W0
    RET
  ENDP IizVBROADCASTF32X2::
</pre>

<dl id="IizVBROADCASTF32X4">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTF32X4</a></dt>
<dd>Load with Broadcast Floating-Point Data four float32</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTF32X4 ymm1 {k1}{z}, m128
</th><td>EVEX.256.66.0F38.W0 1A /r 
</td></tr>
<tr><th>VBROADCASTF32X4 zmm1 {k1}{z}, m128
</th><td>EVEX.512.66.0F38.W0 1A /r 
</td></tr>
<tr><th>VBROADCASTF32X4 zmm1 {k1}, mem
</th><td>MVEX.512.66.0F38.W0 1A /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x1A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5242.htm">t5242</a>
</dd>
</dl><pre>
IizVBROADCASTF32X4:: PROC
    IiAllowModifier MASK
    IiEncoding DATA=DWORD
    IiDisp8EVEX T2F64
    IiDisp8MVEX Sn32
    IiEmitOpcode 0x1A
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  ymm.mem, zmm.mem
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W0
    RET
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W0, MVEX.512.66.0F38.W0
    RET
  ENDP IizVBROADCASTF32X4::
</pre>

<dl id="IizVBROADCASTF32X8">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTF32X8</a></dt>
<dd>Load with Broadcast Floating-Point Data eight float32</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTF32X8 zmm1 {k1}{z}, m256</th><td>EVEX.512.66.0F38.W0 1B /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x1B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5242.htm">t5242</a>
</dd>
</dl><pre>
IizVBROADCASTF32X8:: PROC
    IiAllowModifier MASK
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x1B
    IiDisp8EVEX T4F64
    IiOpEn RM
    IiModRM /r
    IiEmitPrefix EVEX.512.66.0F38.W0
    IiDispatchFormat  zmm.mem
.zmm.mem:
    RET
  ENDP IizVBROADCASTF32X8::
</pre>

<dl id="IizVBROADCASTF64X2">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTF64X2</a></dt>
<dd>Load with Broadcast Floating-Point Data two float64</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTF64X2 ymm1 {k1}{z}, m128
</th><td>EVEX.256.66.0F38.W1 1A /r 
</td></tr>
<tr><th>VBROADCASTF64X2 zmm1 {k1}{z}, m128</th><td>EVEX.512.66.0F38.W1 1A /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x1A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5242.htm">t5242</a>
</dd>
</dl><pre>
IizVBROADCASTF64X2:: PROC
    IiAllowModifier MASK
    IiEncoding DATA=QWORD
    IiEmitOpcode 0x1A
    IiDisp8EVEX T2F64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  ymm.mem, zmm.mem
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W1
    RET
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W1
    RET
  ENDP IizVBROADCASTF64X2::
</pre>

<dl id="IizVBROADCASTF64X4">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTF64X4</a></dt>
<dd>Load with Broadcast Floating-Point Data four float64</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTF64X4 zmm1 {k1}{z}, m256
</th><td>EVEX.512.66.0F38.W1 1B /r 
</td></tr>
<tr><th>VBROADCASTF64X4 zmm1 {k1}, mem</th><td>MVEX.512.66.0F38.W1 1B /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x1B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5242.htm">t5242</a>
</dd>
</dl><pre>
IizVBROADCASTF64X4:: PROC
    IiAllowModifier MASK
    IiEncoding DATA=QWORD
    IiEmitOpcode 0x1B
    IiDisp8EVEX T4F64
    IiDisp8MVEX Si64
    IiOpEn RM
    IiModRM /r
    IiEmitPrefix EVEX.512.66.0F38.W1, MVEX.512.66.0F38.W1
    IiDispatchFormat  zmm.mem
.zmm.mem:
    RET
  ENDP IizVBROADCASTF64X4::
</pre>

<dl id="IizVBROADCASTI32X4">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTI32X4</a></dt>
<dd>Broadcast 4xInt32 Vector</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTI32X4 ymm1 {k1}{z}, m128
</th><td>EVEX.256.66.0F38.W0 5A /r
</td></tr>
<tr><th>VBROADCASTI32X4 zmm1 {k1}{z}, m128
</th><td>EVEX.512.66.0F38.W0 5A /r
</td></tr>
<tr><th>VBROADCASTI32X4 zmm1 {k1}, mem
</th><td>MVEX.512.66.0F38.W0 5A /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x5A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5244.htm">t5244</a>
</dd>
</dl><pre>
IizVBROADCASTI32X4:: PROC
    IiAllowModifier MASK
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x5A
    IiDisp8EVEX T2F64
    IiDisp8MVEX Ui32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  ymm.mem, zmm.mem
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W0
    RET
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W0, MVEX.512.66.0F38.W0
    RET
  ENDP IizVBROADCASTI32X4::
</pre>

<dl id="IizVBROADCASTI64X4">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTI64X4</a></dt>
<dd>Broadcast 4xInt64 Vector</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTI64X4 zmm1 {k1}{z}, mem
</th><td>EVEX.512.66.0F38.W1 5B /r
</td></tr>
<tr><th>VBROADCASTI64X4 zmm1 {k1}, mem
</th><td>MVEX.512.66.0F38.W1 5B /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x5B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5244.htm">t5244</a>
</dd>
</dl><pre>
IizVBROADCASTI64X4:: PROC
    IiAllowModifier MASK     
    IiEncoding DATA=QWORD
    IiEmitOpcode 0x5B
    IiDisp8EVEX T4F64
    IiDisp8MVEX Si64
    IiOpEn RM
    IiModRM /r
    IiEmitPrefix EVEX.512.66.0F38.W1, MVEX.512.66.0F38.W1
    IiDispatchFormat  zmm.mem
.zmm.mem:
    RET
  ENDP IizVBROADCASTI64X4::
</pre>

<dl id="IizVBROADCASTI32X2">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTI32X2</a></dt>
<dd>Load Integer and Broadcast two int32</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTI32X2 xmm1 {k1}{z}, xmm2/m64 
</th><td>EVEX.128.66.0F38.W0 59 /r 
</td></tr>
<tr><th>VBROADCASTI32X2 ymm1 {k1}{z}, xmm2/m64 
</th><td>EVEX.256.66.0F38.W0 59 /r 
</td></tr>
<tr><th>VBROADCASTI32X2 zmm1 {k1}{z}, xmm2/m64</th><td>EVEX.512.66.0F38.W0 59 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x59</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5244.htm">t5244</a>
</dd>
</dl><pre>
IizVBROADCASTI32X2:: PROC
    IiAllowModifier MASK
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x59
    IiDisp8EVEX T1S64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.xmm, ymm.mem, zmm.xmm, zmm.mem
.xmm.mem:
.xmm.xmm:
    IiEmitPrefix EVEX.128.66.0F38.W0
    RET
.ymm.mem:
.ymm.xmm:
    IiEmitPrefix EVEX.256.66.0F38.W0
    RET
.zmm.mem:
.zmm.xmm:
    IiEmitPrefix EVEX.512.66.0F38.W0
    RET
  ENDP IizVBROADCASTI32X2::
</pre>

<dl id="IizVBROADCASTI128">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTI128</a></dt>
<dd>Load Integer and Broadcast int128</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTI128 ymm1, m128
</th><td>VEX.256.66.0F38.W0 5A /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x5A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5246.htm">t5246</a>
</dd>
</dl><pre>
IizVBROADCASTI128:: PROC
    IiEmitOpcode 0x5A
    IiEncoding DATA=OWORD
    IiOpEn RM
    IiModRM /r
    IiEmitPrefix VEX.256.66.0F38.W0
    IiDispatchFormat  ymm.mem
.ymm.mem:
    RET
  ENDP IizVBROADCASTI128::
</pre>

<dl id="IizVBROADCASTI64X2">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTI64X2</a></dt>
<dd>Load Integer and Broadcast two int64</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTI64X2 ymm1 {k1}{z}, m128 
</th><td>EVEX.256.66.0F38.W1 5A /r 
</td></tr>
<tr><th>VBROADCASTI64X2 zmm1 {k1}{z}, m128
</th><td>EVEX.512.66.0F38.W1 5A /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x5A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5244.htm">t5244</a>
</dd>
</dl><pre>
IizVBROADCASTI64X2:: PROC
    IiAllowModifier MASK

    IiEncoding DATA=QWORD
    IiEmitOpcode 0x5A
    IiDisp8EVEX T2F64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  ymm.mem, zmm.mem
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W1
    RET
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W1
    RET
  ENDP IizVBROADCASTI64X2::
</pre>

<dl id="IizVBROADCASTI32X8">
<dt><a href='#IizHandlers'>&uarr; VBROADCASTI32X8</a></dt>
<dd>Load Integer and Broadcast eight int32</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBROADCASTI32X8 zmm1 {k1}{z}, m256
</th><td>EVEX.512.66.0F38.W1 5B /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x5B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5244.htm">t5244</a>
</dd>
</dl><pre>
IizVBROADCASTI32X8:: PROC
    IiAllowModifier MASK
    IiEmitOpcode 0x5B
    IiDisp8EVEX T4F64
    IiEncoding DATA=DWORD
    IiOpEn RM
    IiModRM /r
    IiEmitPrefix EVEX.512.66.0F38.W0    
    IiDispatchFormat  zmm.mem
.zmm.mem:
    RET
  ENDP IizVBROADCASTI32X8::
</pre>

<dl id="IizVPBROADCASTB">
<dt><a href='#IizHandlers'>&uarr; VPBROADCASTB</a></dt>
<dd>Load Integer and Broadcast sixteen int8</dd>
<dt>Intel reference</dt>
<dd><table>

<tr><th>VPBROADCASTB xmm1 {k1}{z}, reg
</th><td>EVEX.128.66.0F38.W0 7A /r
</td></tr>
<tr><th>VPBROADCASTB ymm1 {k1}{z}, reg
</th><td>EVEX.256.66.0F38.W0 7A /r
</td></tr>
<tr><th>VPBROADCASTB zmm1 {k1}{z}, reg
</th><td>EVEX.512.66.0F38.W0 7A /r
</td></tr>
<tr><th>VPBROADCASTB xmm1, xmm2/m8
</th><td>VEX.128.66.0F38.W0 78 /r 
</td></tr>
<tr><th>VPBROADCASTB ymm1, xmm2/m8
</th><td>VEX.256.66.0F38.W0 78 /r 
</td></tr>
<tr><th>VPBROADCASTB xmm1{k1}{z}, xmm2/m8 
</th><td>EVEX.128.66.0F38.W0 78 /r 
</td></tr>
<tr><th>VPBROADCASTB ymm1{k1}{z}, xmm2/m8 
</th><td>EVEX.256.66.0F38.W0 78 /r 
</td></tr>
<tr><th>VPBROADCASTB zmm1{k1}{z}, xmm2/m8
</th><td>EVEX.512.66.0F38.W0 78 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x78 ||0x7A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5246.htm">t5246</a>
</dd>
</dl><pre>
IizVPBROADCASTB:: PROC
     IiAllowModifier MASK
     IiEncoding DATA=BYTE
     MOV AL,0x7A
     Dispatch DL,r8:,r16,r32,r64
     MOV AL,0x78
.r8:
.r16:
.r32:
.r64:IiEmitOpcode EAX
     IiDisp8EVEX T1S8
     IiOpEn RM
     IiModRM /r
     IiDispatchFormat xmm.xmm, xmm.mem, ymm.xmm, ymm.mem, zmm.xmm, zmm.mem, \
     xmm.r8, xmm.r16, xmm.r32, xmm.r64, \
     ymm.r8, ymm.r16, ymm.r32, ymm.r64, \
     zmm.r8, zmm.r16, zmm.r32, zmm.r64
.xmm.mem:
.xmm.xmm:
    IiEmitPrefix VEX.128.66.0F38.W0, EVEX.128.66.0F38.W0
    RET
.ymm.mem:
.ymm.xmm:
    IiEmitPrefix VEX.256.66.0F38.W0, EVEX.256.66.0F38.W0
    RET
.zmm.mem:
.zmm.xmm:
.zmm.r8:
.zmm.r16:
.zmm.r32:
.zmm.r64:
    IiEmitPrefix EVEX.512.66.0F38.W0
    RET
.ymm.r8:
.ymm.r16:
.ymm.r32:
.ymm.r64:
    IiEmitPrefix EVEX.256.66.0F38.W0
    RET
.xmm.r8:
.xmm.r16:
.xmm.r32:
.xmm.r64:
    IiEmitPrefix EVEX.128.66.0F38.W0
    RET
  ENDP IizVPBROADCASTB::
</pre>

<dl id="IizVPBROADCASTW">
<dt><a href='#IizHandlers'>&uarr; VPBROADCASTW</a></dt>
<dd>Load Integer and Broadcast eight int16</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPBROADCASTW xmm1, xmm2/m16
</th><td>VEX.128.66.0F38.W0 79 /r 
</td></tr>
<tr><th>VPBROADCASTW ymm1, xmm2/m16
</th><td>VEX.256.66.0F38.W0 79 /r 
</td></tr>
<tr><th>VPBROADCASTW xmm1{k1}{z}, xmm2/m16 
</th><td>EVEX.128.66.0F38.W0 79 /r 
</td></tr>
<tr><th>VPBROADCASTW ymm1{k1}{z}, xmm2/m16 
</th><td>EVEX.256.66.0F38.W0 79 /r 
</td></tr>
<tr><th>VPBROADCASTW zmm1{k1}{z}, xmm2/m16
</th><td>EVEX.512.66.0F38.W0 79 /r 
</td></tr>
<tr><th>VPBROADCASTW xmm1 {k1}{z}, reg 
</th><td>EVEX.128.66.0F38.W0 7B /r 
</td></tr>
<tr><th>VPBROADCASTW ymm1 {k1}{z}, reg 
</th><td>EVEX.256.66.0F38.W0 7B /r 
</td></tr>
<tr><th>VPBROADCASTW zmm1 {k1}{z}, reg
</th><td>EVEX.512.66.0F38.W0 7B /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x79 || 0x7B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5246.htm">t5246</a>
</dd>
</dl><pre>
IizVPBROADCASTW:: PROC
     IiAllowModifier MASK
     IiEncoding DATA=WORD
     MOV AL,0x7B
     Dispatch DL,r16,r32,r64
     MOV AL,0x79
.r16:
.r32:
.r64:IiEmitOpcode EAX
     IiDisp8EVEX T1S16
     IiOpEn RM
     IiModRM /r
     IiDispatchFormat  xmm.xmm, xmm.mem, ymm.xmm, ymm.mem, zmm.xmm, zmm.mem, \
     xmm.r16, xmm.r32, xmm.r64, \
     ymm.r16, ymm.r32, ymm.r64, \
     zmm.r16, zmm.r32, zmm.r64
.xmm.mem:
.xmm.xmm:
    IiEmitPrefix VEX.128.66.0F38.W0, EVEX.128.66.0F38.W0
    RET
.ymm.mem:
.ymm.xmm:
    IiEmitPrefix VEX.256.66.0F38.W0, EVEX.256.66.0F38.W0
    RET
.zmm.mem:
.zmm.xmm:
.zmm.r16:
.zmm.r32:
.zmm.r64:
    IiEmitPrefix EVEX.512.66.0F38.W0
    RET
.ymm.r16:
.ymm.r32:
.ymm.r64:
    IiEmitPrefix EVEX.256.66.0F38.W0
    RET
.xmm.r16:
.xmm.r32:
.xmm.r64:
    IiEmitPrefix EVEX.128.66.0F38.W0
    RET
  ENDP IizVPBROADCASTW::
</pre>

<dl id="IizVPBROADCASTD">
<dt><a href='#IizHandlers'>&uarr; VPBROADCASTD</a></dt>
<dd>Load Integer and Broadcast int32</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPBROADCASTD xmm1, xmm2/m32
</th><td>VEX.128.66.0F38.W0 58 /r 
</td></tr>
<tr><th>VPBROADCASTD ymm1, xmm2/m32
</th><td>VEX.256.66.0F38.W0 58 /r 
</td></tr>
<tr><th>VPBROADCASTD xmm1 {k1}{z}, xmm2/m32 
</th><td>EVEX.128.66.0F38.W0 58 /r 
</td></tr>
<tr><th>VPBROADCASTD ymm1 {k1}{z}, xmm2/m32 
</th><td>EVEX.256.66.0F38.W0 58 /r 
</td></tr>
<tr><th>VPBROADCASTD zmm1 {k1}{z}, xmm2/m32
</th><td>EVEX.512.66.0F38.W0 58 /r 
</td></tr>
<tr><th>VPBROADCASTD xmm1 {k1}{z}, r32 
</th><td>EVEX.128.66.0F38.W0 7C /r 
</td></tr>
<tr><th>VPBROADCASTD ymm1 {k1}{z}, r32 
</th><td>EVEX.256.66.0F38.W0 7C /r 
</td></tr>
<tr><th>VPBROADCASTD zmm1 {k1}{z}, r32
</th><td>EVEX.512.66.0F38.W0 7C /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x58 || 0x7C</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5246.htm">t5246</a>
</dd>
</dl><pre>
IizVPBROADCASTD:: PROC
    IiAllowModifier MASK
    IiEncoding DATA=DWORD
    MOV AL,0x7C
    Dispatch DL,r32,r64
    MOV AL,0x58
.r32:
.r64:IiEmitOpcode EAX
    IiDisp8EVEX T1S32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.xmm, ymm.mem, zmm.xmm, zmm.mem, \
     xmm.r32, xmm.r64, ymm.r32, ymm.r64, zmm.r32, zmm.r64:
.xmm.mem:
.xmm.xmm:
    IiEmitPrefix VEX.128.66.0F38.W0, EVEX.128.66.0F38.W0
    RET
.ymm.mem:
.ymm.xmm:
    IiEmitPrefix VEX.256.66.0F38.W0, EVEX.256.66.0F38.W0
    RET
.zmm.mem:
.zmm.xmm:
.zmm.r32:
.zmm.r64:
    IiEmitPrefix EVEX.512.66.0F38.W0
    RET
.ymm.r32:
.ymm.r64:
    IiEmitPrefix EVEX.256.66.0F38.W0
    RET
.xmm.r32:
.xmm.r64:
    IiEmitPrefix EVEX.128.66.0F38.W0
    RET
  ENDP IizVPBROADCASTD::
</pre>

<dl id="IizVPBROADCASTQ">
<dt><a href='#IizHandlers'>&uarr; VPBROADCASTQ</a></dt>
<dd>Load Integer and Broadcast int64</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPBROADCASTQ xmm1, xmm2/m64
</th><td>VEX.128.66.0F38.W0 59 /r 
</td></tr>
<tr><th>VPBROADCASTQ ymm1, xmm2/m64
</th><td>VEX.256.66.0F38.W0 59 /r
</td></tr>
<tr><th>VPBROADCASTQ xmm1 {k1}{z}, xmm2/m64
</th><td>EVEX.128.66.0F38.W1 59 /r
</td></tr>
<tr><th>VPBROADCASTQ ymm1 {k1}{z}, xmm2/m64
</th><td>EVEX.256.66.0F38.W1 59 /r
</td></tr>
<tr><th>VPBROADCASTQ zmm1 {k1}{z}, xmm2/m64
</th><td>EVEX.512.66.0F38.W1 59 /r
</td></tr>
<tr><th>VPBROADCASTQ xmm1 {k1}{z}, r64 
</th><td>EVEX.128.66.0F38.W1 7C /r 
</td></tr>
<tr><th>VPBROADCASTQ ymm1 {k1}{z}, r64 
</th><td>EVEX.256.66.0F38.W1 7C /r 
</td></tr>
<tr><th>VPBROADCASTQ zmm1 {k1}{z}, r64
</th><td>EVEX.512.66.0F38.W1 7C /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x59||0x7C</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5246.htm">t5246</a>
</dd>
</dl><pre>
IizVPBROADCASTQ:: PROC
     IiAllowModifier MASK
     IiEncoding DATA=QWORD
     MOV AL,0x7C
     Dispatch DL,r64
     MOV AL,0x59
.r64:IiEmitOpcode EAX
     IiDisp8EVEX T1S64
     IiOpEn RM
     IiModRM /r
     IiDispatchFormat  xmm.xmm, xmm.mem, ymm.xmm, ymm.mem, zmm.xmm, zmm.mem, \
                       xmm.r64, ymm.r64, zmm.r64
.xmm.mem:
.xmm.xmm:
    IiEmitPrefix VEX.128.66.0F38.W0, EVEX.128.66.0F38.W1
    RET
.ymm.mem:
.ymm.xmm:
    IiEmitPrefix VEX.256.66.0F38.W0, EVEX.256.66.0F38.W1
    RET
.zmm.mem:
.zmm.xmm:
.zmm.r64:
    IiEmitPrefix EVEX.512.66.0F38.W1
    RET
.ymm.r64:
    IiEmitPrefix EVEX.256.66.0F38.W1
    RET
.xmm.r64:
    IiEmitPrefix EVEX.128.66.0F38.W1
    RET
  ENDP IizVPBROADCASTQ::
</pre>

<dl id="IizVALIGND">
<dt><a href='#IizHandlers'>&uarr; VALIGND</a></dt>
<dd>Align Doubleword Vectors</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VALIGND xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8
</th><td>EVEX.NDS.128.66.0F3A.W0 03 /r ib 
</td></tr>
<tr><th>VALIGND ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8
</th><td>EVEX.NDS.256.66.0F3A.W0 03 /r ib 
</td></tr>
<tr><th>VALIGND zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst, imm8
</th><td>EVEX.NDS.512.66.0F3A.W0 03 /r ib 
</td></tr>
<tr><th>VALIGND zmm1 {k1}{z}, zmm2, zmm3/m512/mem, imm8
</th><td>MVEX.NDS.512.66.0F3A.W0 03 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x03</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5250.htm">t5250</a>
</dd>
</dl><pre>
IizVALIGND:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD, Operand=DH
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x03
    IiDisp8EVEX FV32
    IiDisp8MVEX Si64
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm, ymm.ymm.ymm.imm, ymm.ymm.mem.imm, zmm.zmm.zmm.imm, zmm.zmm.mem.imm
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    IiEmitPrefix EVEX.NDS.128.66.0F3A.W0
    RET
.ymm.ymm.ymm.imm:
.ymm.ymm.mem.imm:
    IiEmitPrefix EVEX.NDS.256.66.0F3A.W0
    RET
.zmm.zmm.zmm.imm:
.zmm.zmm.mem.imm:
    IiEmitPrefix EVEX.NDS.512.66.0F3A.W0, MVEX.NDS.512.66.0F3A.W0
    RET
  ENDP IizVALIGND::
</pre>

<dl id="IizVALIGNQ">
<dt><a href='#IizHandlers'>&uarr; VALIGNQ</a></dt>
<dd>Align Quadword Vectors</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VALIGNQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8
</th><td>EVEX.NDS.128.66.0F3A.W1 03 /r ib 
</td></tr>
<tr><th>VALIGNQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8
</th><td>EVEX.NDS.256.66.0F3A.W1 03 /r ib 
</td></tr>
<tr><th>VALIGNQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst, imm8
</th><td>EVEX.NDS.512.66.0F3A.W1 03 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x03</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5250.htm">t5250</a>
</dd>
</dl><pre>
IizVALIGNQ:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD, Operand=DH
    IiEncoding DATA=QWORD
    IiEmitOpcode 0x03
    IiDisp8EVEX FV64
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm, ymm.ymm.ymm.imm, \
                      ymm.ymm.mem.imm, zmm.zmm.zmm.imm, zmm.zmm.mem.imm
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    IiEmitPrefix EVEX.NDS.128.66.0F3A.W1
    RET
.ymm.ymm.ymm.imm:
.ymm.ymm.mem.imm:
    IiEmitPrefix EVEX.NDS.256.66.0F3A.W1
    RET
.zmm.zmm.zmm.imm:
.zmm.zmm.mem.imm:
    IiEmitPrefix EVEX.NDS.512.66.0F3A.W1
    RET
  ENDP IizVALIGNQ::
</pre>

<dl id="IizVPBLENDMB">
<dt><a href='#IizHandlers'>&uarr; VPBLENDMB</a></dt>
<dd>Blend Byte Vectors Using an Opmask Control</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPBLENDMB xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F38.W0 66 /r 
</td></tr>
<tr><th>VPBLENDMB ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F38.W0 66 /r 
</td></tr>
<tr><th>VPBLENDMB zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F38.W0 66 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x66</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5252.htm">t5252</a>
</dd>
</dl><pre>
IizVPBLENDMB:: PROC
    IiAllowModifier MASK
    IiEncoding DATA=BYTE
    IiEmitOpcode 0x66
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FVM
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix EVEX.NDS.128.66.0F38.W0
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix EVEX.NDS.256.66.0F38.W0
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38.W0
    RET
  ENDP IizVPBLENDMB::
</pre>

<dl id="IizVPBLENDMW">
<dt><a href='#IizHandlers'>&uarr; VPBLENDMW</a></dt>
<dd>Blend Word Vectors Using an Opmask Control</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPBLENDMW xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F38.W1 66 /r 
</td></tr>
<tr><th>VPBLENDMW ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F38.W1 66 /r 
</td></tr>
<tr><th>VPBLENDMW zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F38.W1 66 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x66</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5252.htm">t5252</a>
</dd>
</dl><pre>
IizVPBLENDMW:: PROC
    IiAllowModifier MASK
    IiEncoding DATA=WORD
    IiEmitOpcode 0x66
    IiDisp8EVEX FVM
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix EVEX.NDS.128.66.0F38.W1
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix EVEX.NDS.256.66.0F38.W1
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38.W1
    RET
  ENDP IizVPBLENDMW::
</pre>

<dl id="IizVPBLENDMD">
<dt><a href='#IizHandlers'>&uarr; VPBLENDMD</a></dt>
<dd>Blend Int32 Vectors Using an OpMask Control</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPBLENDMD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
</th><td>EVEX.NDS.128.66.0F38.W0 64 /r  
</td></tr>
<tr><th>VPBLENDMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
</th><td>EVEX.NDS.256.66.0F38.W0 64 /r  
</td></tr>
<tr><th>VPBLENDMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
</th><td>EVEX.NDS.512.66.0F38.W0 64 /r  
</td></tr>
<tr><th>VPBLENDMD zmm1 {k1}, zmm2, zmm3/mem
</th><td>MVEX.NDS.512.66.0F38.W0 64 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x64</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5252.htm">t5252</a>
</dd>
</dl><pre>
IizVPBLENDMD:: PROC
    IiAllowModifier MASK,EH
    IiAllowBroadcasting DWORD
    IiEmitOpcode 0x64
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FV32
    IiDisp8MVEX Si32
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix EVEX.NDS.128.66.0F38.W0
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix EVEX.NDS.256.66.0F38.W0
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38.W0, MVEX.NDS.512.66.0F38.W0
    RET
  ENDP IizVPBLENDMD::
</pre>

<dl id="IizVPBLENDMQ">
<dt><a href='#IizHandlers'>&uarr; VPBLENDMQ</a></dt>
<dd>Blend Int64 Vectors Using an OpMask Control</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPBLENDMQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
</th><td>EVEX.NDS.128.66.0F38.W1 64 /r
</td></tr>
<tr><th>VPBLENDMQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
</th><td>EVEX.NDS.256.66.0F38.W1 64 /r 
</td></tr>
<tr><th>VPBLENDMQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
</th><td>EVEX.NDS.512.66.0F38.W1 64 /r 
</td></tr>
<tr><th>VPBLENDMQ zmm1 {k1}, zmm2, zmm3/mem
</th><td>MVEX.NDS.512.66.0F38.W1 64 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x64</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5252.htm">t5252</a>
</dd>
</dl><pre>
IizVPBLENDMQ:: PROC
    IiAllowModifier MASK,EH
    IiAllowBroadcasting QWORD
    IiEmitOpcode 0x64
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FV64
    IiDisp8MVEX Ub64
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix EVEX.NDS.128.66.0F38.W1
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix EVEX.NDS.256.66.0F38.W1
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38.W1, MVEX.NDS.512.66.0F38.W1
    RET
  ENDP IizVPBLENDMQ::
</pre>

<dl id="IizVBLENDMPS">
<dt><a href='#IizHandlers'>&uarr; VBLENDMPS</a></dt>
<dd>Blend Float32 Vectors using the Instruction Mask</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBLENDMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
</th><td>EVEX.NDS.128.66.0F38.W0 65 /r 
</td></tr>
<tr><th>VBLENDMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
</th><td>EVEX.NDS.256.66.0F38.W0 65 /r 
</td></tr>
<tr><th>VBLENDMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
</th><td>EVEX.NDS.512.66.0F38.W0 65 /r 
</td></tr>
<tr><th>VBLENDMPS zmm1 {k1}, zmm2, zmm3/mem
</th><td>MVEX.NDS.512.66.0F38.W0 65 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x65</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5254.htm">t5254</a>
</dd>
</dl><pre>
IizVBLENDMPS:: PROC
    IiAllowModifier MASK,EH
    IiAllowBroadcasting DWORD
    IiEmitOpcode 0x65
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FV32
    IiDisp8MVEX Us32
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix EVEX.NDS.128.66.0F38.W0
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix EVEX.NDS.256.66.0F38.W0
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38.W0, MVEX.NDS.512.66.0F38.W0
    RET
  ENDP IizVBLENDMPS::
</pre>

<dl id="IizVBLENDMPD">
<dt><a href='#IizHandlers'>&uarr; VBLENDMPD</a></dt>
<dd>Blend Float64 Vectors Using the Instruction Mask</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VBLENDMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
</th><td>EVEX.NDS.128.66.0F38.W1 65 /r 
</td></tr>
<tr><th>VBLENDMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
</th><td>EVEX.NDS.256.66.0F38.W1 65 /r 
</td></tr>
<tr><th>VBLENDMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
</th><td>EVEX.NDS.512.66.0F38.W1 65 /r 
</td></tr>
<tr><th>VBLENDMPD zmm1 {k1}, zmm2, zmm3/mem
</th><td>MVEX.NDS.512.66.0F38.W1 65 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x65</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5254.htm">t5254</a>
</dd>
</dl><pre>
IizVBLENDMPD:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiEmitOpcode 0x65
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FV64
    IiDisp8MVEX Ub64
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix EVEX.NDS.128.66.0F38.W1
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix EVEX.NDS.256.66.0F38.W1
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38.W1, MVEX.NDS.512.66.0F38.W1
    RET
  ENDP IizVBLENDMPD::
</pre>

<dl id="IizVCMPSS">
<dt><a href='#IizHandlers'>&uarr; VCMPSS</a></dt>
<dd>Compare Scalar Single-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCMPSS xmm1, xmm2, xmm3/m32, imm8
</th><td>VEX.NDS.128.F3.0F.WIG C2 /r ib 
</td></tr>
<tr><th>VCMPSS k1 {k2}, xmm2, xmm3/m32{sae}, imm8
</th><td>EVEX.NDS.LIG.F3.0F.W0 C2 /r ib 
</td></tr>
</table></dd>
<dt>Operands</dt>
<dd>xmm/krg,xmm,xmm/mem,imm</dd>
<dt>Opcode</dt>
<dd>0xC2 /r ib</dd>
<dt>See also</dt>
<dd><a href="#IizVCMPSD">VCMPSD</a>
<a href="#IizVCMPPS">VCMPPS</a>
<a href="#IizVCMPPD">VCMPPD</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5260.htm">t5260</a>
</dd>
</dl><pre>
IizVCMPSS:: PROC
    IiAllowModifier MASK
    IiEmitOpcode 0xC2
    IiDisp8EVEX T1S32
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE, Max=31
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm, krg.xmm.xmm.imm, krg.xmm.mem.imm
.cc: ; This entry is called with format xmm/krg,xmm,xmm/mem (no immediate).
    IiImmCreate CL
    JMP IizVCMPSS: ; Continue as if the condition were specified by imm value. 
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    IiEmitPrefix VEX.NDS.128.F3.0F.WIG
    RET
.krg.xmm.xmm.imm:
    IiAllowModifier SAE
.krg.xmm.mem.imm:
    IiEmitPrefix EVEX.NDS.LIG.F3.0F.W0
    RET
  ENDP IizVCMPSS::
</pre>

<dl id="IizVCMPEQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPEQSS</a></dt>
<dd>Compare Scalar Single-FP values Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x00</dd>
</dl><pre>
IizVCMPEQSS:: PROC
    MOV CL,0x00
    JMP IizVCMPSS.cc:
 ENDP IizVCMPEQSS::
</pre>

<dl id="IizVCMPLTSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPLTSS</a></dt>
<dd>Compare Scalar Single-FP values Less Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x01</dd>
</dl><pre>
IizVCMPLTSS:: PROC
    MOV CL,0x01
    JMP IizVCMPSS.cc:
 ENDP IizVCMPLTSS::
</pre>

<dl id="IizVCMPLESS">
<dt><a href="#IizVCMPSS">&uarr; VCMPLESS</a></dt>
<dd>Compare Scalar Single-FP values Less than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x02</dd>
</dl><pre>
IizVCMPLESS:: PROC
    MOV CL,0x02
    JMP IizVCMPSS.cc:
 ENDP IizVCMPLESS::
</pre>

<dl id="IizVCMPUNORDSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPUNORDSS</a></dt>
<dd>Compare Scalar Single-FP values Unordered</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x03</dd>
</dl><pre>
IizVCMPUNORDSS:: PROC
    MOV CL,0x03
    JMP IizVCMPSS.cc:
 ENDP IizVCMPUNORDSS::
</pre>

<dl id="IizVCMPNEQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNEQSS</a></dt>
<dd>Compare Scalar Single-FP values Not Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x04</dd>
</dl><pre>
IizVCMPNEQSS:: PROC
    MOV CL,0x04
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNEQSS::
</pre>

<dl id="IizVCMPNLTSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNLTSS</a></dt>
<dd>Compare Scalar Single-FP values Not Less Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x05</dd>
</dl><pre>
IizVCMPNLTSS:: PROC
    MOV CL,0x05
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNLTSS::
</pre>

<dl id="IizVCMPNLESS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNLESS</a></dt>
<dd>Compare Scalar Single-FP values Not Less than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x06</dd>
</dl><pre>
IizVCMPNLESS:: PROC
    MOV CL,0x06
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNLESS::
</pre>

<dl id="IizVCMPORDSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPORDSS</a></dt>
<dd>Compare Scalar Single-FP values Ordered</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x07</dd>
</dl><pre>
IizVCMPORDSS:: PROC
    MOV CL,0x07
    JMP IizVCMPSS.cc:
 ENDP IizVCMPORDSS::
</pre>

<dl id="IizVCMPNGESS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNGESS</a></dt>
<dd>Compare Scalar Single-FP values Not Greater than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x09</dd>
</dl><pre>
IizVCMPNGESS:: PROC
    MOV CL,0x09
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNGESS::
</pre>

<dl id="IizVCMPNGTSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNGTSS</a></dt>
<dd>Compare Scalar Single-FP values Not Greater Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0A</dd>
</dl><pre>
IizVCMPNGTSS:: PROC
    MOV CL,0x0A
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNGTSS::
</pre>

<dl id="IizVCMPFALSESS">
<dt><a href="#IizVCMPSS">&uarr; VCMPFALSESS</a></dt>
<dd>Compare Scalar Single-FP values False</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0B</dd>
</dl><pre>
IizVCMPFALSESS:: PROC
    MOV CL,0x0B
    JMP IizVCMPSS.cc:
 ENDP IizVCMPFALSESS::
</pre>

<dl id="IizVCMPGESS">
<dt><a href="#IizVCMPSS">&uarr; VCMPGESS</a></dt>
<dd>Compare Scalar Single-FP values Greater than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0D</dd>
</dl><pre>
IizVCMPGESS:: PROC
    MOV CL,0x0D
    JMP IizVCMPSS.cc:
 ENDP IizVCMPGESS::
</pre>

<dl id="IizVCMPGTSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPGTSS</a></dt>
<dd>Compare Scalar Single-FP values Greater Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0E</dd>
</dl><pre>
IizVCMPGTSS:: PROC
    MOV CL,0x0E
    JMP IizVCMPSS.cc:
 ENDP IizVCMPGTSS::
</pre>

<dl id="IizVCMPTRUESS">
<dt><a href="#IizVCMPSS">&uarr; VCMPTRUESS</a></dt>
<dd>Compare Scalar Single-FP values True</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0F</dd>
</dl><pre>
IizVCMPTRUESS:: PROC
    MOV CL,0x0F
    JMP IizVCMPSS.cc:
 ENDP IizVCMPTRUESS::
</pre>

<dl id="IizVCMPEQ_OQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPEQ_OQSS</a></dt>
<dd>Compare Scalar Single-FP values Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x00</dd>
</dl><pre>
IizVCMPEQ_OQSS:: PROC
    MOV CL,0x00
    JMP IizVCMPSS.cc:
 ENDP IizVCMPEQ_OQSS::
</pre>

<dl id="IizVCMPLT_OSSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPLT_OSSS</a></dt>
<dd>Compare Scalar Single-FP values Less Than, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x01</dd>
</dl><pre>
IizVCMPLT_OSSS:: PROC
    MOV CL,0x01
    JMP IizVCMPSS.cc:
 ENDP IizVCMPLT_OSSS::
</pre>

<dl id="IizVCMPLE_OSSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPLE_OSSS</a></dt>
<dd>Compare Scalar Single-FP values Less than or Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x02</dd>
</dl><pre>
IizVCMPLE_OSSS:: PROC
    MOV CL,0x02
    JMP IizVCMPSS.cc:
 ENDP IizVCMPLE_OSSS::
</pre>

<dl id="IizVCMPUNORD_QSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPUNORD_QSS</a></dt>
<dd>Compare Scalar Single-FP values Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x03</dd>
</dl><pre>
IizVCMPUNORD_QSS:: PROC
    MOV CL,0x03
    JMP IizVCMPSS.cc:
 ENDP IizVCMPUNORD_QSS::
</pre>

<dl id="IizVCMPNEQ_UQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNEQ_UQSS</a></dt>
<dd>Compare Scalar Single-FP values Not Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x04</dd>
</dl><pre>
IizVCMPNEQ_UQSS:: PROC
    MOV CL,0x04
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNEQ_UQSS::
</pre>

<dl id="IizVCMPNLT_USSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNLT_USSS</a></dt>
<dd>Compare Scalar Single-FP values Not Less Than, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x05</dd>
</dl><pre>
IizVCMPNLT_USSS:: PROC
    MOV CL,0x05
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNLT_USSS::
</pre>

<dl id="IizVCMPNLE_USSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNLE_USSS</a></dt>
<dd>Compare Scalar Single-FP values Not Less than or Equal,Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x06</dd>
</dl><pre>
IizVCMPNLE_USSS:: PROC
    MOV CL,0x06
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNLE_USSS::
</pre>

<dl id="IizVCMPORD_QSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPORD_QSS</a></dt>
<dd>Compare Scalar Single-FP values Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x07</dd>
</dl><pre>
IizVCMPORD_QSS:: PROC
    MOV CL,0x07
    JMP IizVCMPSS.cc:
 ENDP IizVCMPORD_QSS::
</pre>

<dl id="IizVCMPEQ_UQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPEQ_UQSS</a></dt>
<dd>Compare Scalar Single-FP values Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x08</dd>
</dl><pre>
IizVCMPEQ_UQSS:: PROC
    MOV CL,0x08
    JMP IizVCMPSS.cc:
 ENDP IizVCMPEQ_UQSS::
</pre>

<dl id="IizVCMPNGE_USSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNGE_USSS</a></dt>
<dd>Compare Scalar Single-FP values Not Greater than or Equal, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x09</dd>
</dl><pre>
IizVCMPNGE_USSS:: PROC
    MOV CL,0x09
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNGE_USSS::
</pre>

<dl id="IizVCMPNGT_USSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNGT_USSS</a></dt>
<dd>Compare Scalar Single-FP values Not Greater Than, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0A</dd>
</dl><pre>
IizVCMPNGT_USSS:: PROC
    MOV CL,0x0A
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNGT_USSS::
</pre>

<dl id="IizVCMPFALSE_OQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPFALSE_OQSS</a></dt>
<dd>Compare Scalar Single-FP values False, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0B</dd>
</dl><pre>
IizVCMPFALSE_OQSS:: PROC
    MOV CL,0x0B
    JMP IizVCMPSS.cc:
 ENDP IizVCMPFALSE_OQSS::
</pre>

<dl id="IizVCMPNEQ_OQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNEQ_OQSS</a></dt>
<dd>Compare Scalar Single-FP values Not Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0C</dd>
</dl><pre>
IizVCMPNEQ_OQSS:: PROC
    MOV CL,0x0C
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNEQ_OQSS::
</pre>

<dl id="IizVCMPGE_OSSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPGE_OSSS</a></dt>
<dd>Compare Scalar Single-FP values Greater than or Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0D</dd>
</dl><pre>
IizVCMPGE_OSSS:: PROC
    MOV CL,0x0D
    JMP IizVCMPSS.cc:
 ENDP IizVCMPGE_OSSS::
</pre>

<dl id="IizVCMPGT_OSSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPGT_OSSS</a></dt>
<dd>Compare Scalar Single-FP values Greater Than, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0E</dd>
</dl><pre>
IizVCMPGT_OSSS:: PROC
    MOV CL,0x0E
    JMP IizVCMPSS.cc:
 ENDP IizVCMPGT_OSSS::
</pre>

<dl id="IizVCMPTRUE_UQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPTRUE_UQSS</a></dt>
<dd>Compare Scalar Single-FP values True, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0F</dd>
</dl><pre>
IizVCMPTRUE_UQSS:: PROC
    MOV CL,0x0F
    JMP IizVCMPSS.cc:
 ENDP IizVCMPTRUE_UQSS::
</pre>

<dl id="IizVCMPEQ_OSSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPEQ_OSSS</a></dt>
<dd>Compare Scalar Single-FP values Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x10</dd>
</dl><pre>
IizVCMPEQ_OSSS:: PROC
    MOV CL,0x10
    JMP IizVCMPSS.cc:
 ENDP IizVCMPEQ_OSSS::
</pre>

<dl id="IizVCMPLT_OQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPLT_OQSS</a></dt>
<dd>Compare Scalar Single-FP values Less Than, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x11</dd>
</dl><pre>
IizVCMPLT_OQSS:: PROC
    MOV CL,0x11
    JMP IizVCMPSS.cc:
 ENDP IizVCMPLT_OQSS::
</pre>

<dl id="IizVCMPLE_OQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPLE_OQSS</a></dt>
<dd>Compare Scalar Single-FP values Less than or Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x12</dd>
</dl><pre>
IizVCMPLE_OQSS:: PROC
    MOV CL,0x12
    JMP IizVCMPSS.cc:
 ENDP IizVCMPLE_OQSS::
</pre>

<dl id="IizVCMPUNORD_SSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPUNORD_SSS</a></dt>
<dd>Compare Scalar Single-FP values Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x13</dd>
</dl><pre>
IizVCMPUNORD_SSS:: PROC
    MOV CL,0x13
    JMP IizVCMPSS.cc:
 ENDP IizVCMPUNORD_SSS::
</pre>

<dl id="IizVCMPNEQ_USSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNEQ_USSS</a></dt>
<dd>Compare Scalar Single-FP values Not Equal, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x14</dd>
</dl><pre>
IizVCMPNEQ_USSS:: PROC
    MOV CL,0x14
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNEQ_USSS::
</pre>

<dl id="IizVCMPNLT_UQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNLT_UQSS</a></dt>
<dd>Compare Scalar Single-FP values Not Less Than, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x15</dd>
</dl><pre>
IizVCMPNLT_UQSS:: PROC
    MOV CL,0x15
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNLT_UQSS::
</pre>

<dl id="IizVCMPNLE_UQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNLE_UQSS</a></dt>
<dd>Compare Scalar Single-FP values Not Less than or Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x16</dd>
</dl><pre>
IizVCMPNLE_UQSS:: PROC
    MOV CL,0x16
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNLE_UQSS::
</pre>

<dl id="IizVCMPORD_SSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPORD_SSS</a></dt>
<dd>Compare Scalar Single-FP values Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x17</dd>
</dl><pre>
IizVCMPORD_SSS:: PROC
    MOV CL,0x17
    JMP IizVCMPSS.cc:
 ENDP IizVCMPORD_SSS::
</pre>

<dl id="IizVCMPEQ_USSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPEQ_USSS</a></dt>
<dd>Compare Scalar Single-FP values Equal, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x18</dd>
</dl><pre>
IizVCMPEQ_USSS:: PROC
    MOV CL,0x18
    JMP IizVCMPSS.cc:
 ENDP IizVCMPEQ_USSS::
</pre>

<dl id="IizVCMPNGE_UQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNGE_UQSS</a></dt>
<dd>Compare Scalar Single-FP values Not Greater than or Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x19</dd>
</dl><pre>
IizVCMPNGE_UQSS:: PROC
    MOV CL,0x19
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNGE_UQSS::
</pre>

<dl id="IizVCMPNGT_UQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNGT_UQSS</a></dt>
<dd>Compare Scalar Single-FP values Not Greater Than, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1A</dd>
</dl><pre>
IizVCMPNGT_UQSS:: PROC
    MOV CL,0x1A
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNGT_UQSS::
</pre>

<dl id="IizVCMPFALSE_OSSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPFALSE_OSSS</a></dt>
<dd>Compare Scalar Single-FP values False, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1B</dd>
</dl><pre>
IizVCMPFALSE_OSSS:: PROC
    MOV CL,0x1B
    JMP IizVCMPSS.cc:
 ENDP IizVCMPFALSE_OSSS::
</pre>

<dl id="IizVCMPNEQ_OSSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPNEQ_OSSS</a></dt>
<dd>Compare Scalar Single-FP values Not Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1C</dd>
</dl><pre>
IizVCMPNEQ_OSSS:: PROC
    MOV CL,0x1C
    JMP IizVCMPSS.cc:
 ENDP IizVCMPNEQ_OSSS::
</pre>

<dl id="IizVCMPGE_OQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPGE_OQSS</a></dt>
<dd>Compare Scalar Single-FP values Greater than or Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1D</dd>
</dl><pre>
IizVCMPGE_OQSS:: PROC
    MOV CL,0x1D
    JMP IizVCMPSS.cc:
 ENDP IizVCMPGE_OQSS::
</pre>

<dl id="IizVCMPGT_OQSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPGT_OQSS</a></dt>
<dd>Compare Scalar Single-FP values Greater Than, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1E</dd>
</dl><pre>
IizVCMPGT_OQSS:: PROC
    MOV CL,0x1E
    JMP IizVCMPSS.cc:
 ENDP IizVCMPGT_OQSS::
</pre>

<dl id="IizVCMPTRUE_USSS">
<dt><a href="#IizVCMPSS">&uarr; VCMPTRUE_USSS</a></dt>
<dd>Compare Scalar Single-FP values True, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1F</dd>
</dl><pre>
IizVCMPTRUE_USSS:: PROC
    MOV CL,0x1F
    JMP IizVCMPSS.cc:
 ENDP IizVCMPTRUE_USSS::
</pre>

<dl id="IizVCMPSD">
<dt><a href='#IizHandlers'>&uarr; VCMPSD</a></dt>
<dd>Compare Scalar Double-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCMPSD xmm1, xmm2, xmm3/m64, imm8
</th><td>VEX.NDS.128.F2.0F.WIG C2 /r ib 
</td></tr>
<tr><th>VCMPSD k1 {k2}, xmm2, xmm3/m64{sae}, imm8
</th><td>EVEX.NDS.LIG.F2.0F.W1 C2 /r ib
</td></tr>
</table></dd>
<dt>Operands</dt>
<dd>xmm/krg,xmm,xmm/mem,imm</dd>
<dt>Opcode</dt>
<dd>0xC2 /r ib</dd>
<dt>See also</dt>
<dd><a href="#IizVCMPSS">VCMPSS</a>
<a href="#IizVCMPPS">VCMPPS</a>
<a href="#IizVCMPPD">VCMPPD</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5262.htm">t5262</a>
</dd>
</dl><pre>
IizVCMPSD:: PROC
    IiAllowModifier MASK
    IiAllowSuppressing Operand=DH, Register=xmm
    IiEmitOpcode 0xC2
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE, Max=31
    IiDisp8EVEX T1S64
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm, krg.xmm.xmm.imm, krg.xmm.mem.imm
.cc: ; This entry is called with format xmm/krg,xmm,xmm/mem (no immediate).
    IiImmCreate CL
    JMP IizVCMPSD: ; Continue as if the condition were specified by imm value. 
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    IiEmitPrefix VEX.NDS.128.F2.0F.WIG
    RET
.krg.xmm.xmm.imm:
.krg.xmm.mem.imm:
    IiEmitPrefix EVEX.NDS.LIG.F2.0F.W1
    RET
  ENDP IizVCMPSD::
</pre>

<dl id="IizVCMPEQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPEQSD</a></dt>
<dd>Compare Scalar Double-FP values Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x00</dd>
</dl><pre>
IizVCMPEQSD:: PROC
    MOV CL,0x00
    JMP IizVCMPSD.cc:
 ENDP IizVCMPEQSD::
</pre>

<dl id="IizVCMPLTSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPLTSD</a></dt>
<dd>Compare Scalar Double-FP values Less Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x01</dd>
</dl><pre>
IizVCMPLTSD:: PROC
    MOV CL,0x01
    JMP IizVCMPSD.cc:
 ENDP IizVCMPLTSD::
</pre>

<dl id="IizVCMPLESD">
<dt><a href="#IizVCMPSD">&uarr; VCMPLESD</a></dt>
<dd>Compare Scalar Double-FP values Less than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x02</dd>
</dl><pre>
IizVCMPLESD:: PROC
    MOV CL,0x02
    JMP IizVCMPSD.cc:
 ENDP IizVCMPLESD::
</pre>

<dl id="IizVCMPUNORDSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPUNORDSD</a></dt>
<dd>Compare Scalar Double-FP values Unordered</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x03</dd>
</dl><pre>
IizVCMPUNORDSD:: PROC
    MOV CL,0x03
    JMP IizVCMPSD.cc:
 ENDP IizVCMPUNORDSD::
</pre>

<dl id="IizVCMPNEQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNEQSD</a></dt>
<dd>Compare Scalar Double-FP values Not Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x04</dd>
</dl><pre>
IizVCMPNEQSD:: PROC
    MOV CL,0x04
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNEQSD::
</pre>

<dl id="IizVCMPNLTSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNLTSD</a></dt>
<dd>Compare Scalar Double-FP values Not Less Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x05</dd>
</dl><pre>
IizVCMPNLTSD:: PROC
    MOV CL,0x05
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNLTSD::
</pre>

<dl id="IizVCMPNLESD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNLESD</a></dt>
<dd>Compare Scalar Double-FP values Not Less than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x06</dd>
</dl><pre>
IizVCMPNLESD:: PROC
    MOV CL,0x06
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNLESD::
</pre>

<dl id="IizVCMPORDSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPORDSD</a></dt>
<dd>Compare Scalar Double-FP values Ordered</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x07</dd>
</dl><pre>
IizVCMPORDSD:: PROC
    MOV CL,0x07
    JMP IizVCMPSD.cc:
 ENDP IizVCMPORDSD::
</pre>

<dl id="IizVCMPNGESD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNGESD</a></dt>
<dd>Compare Scalar Double-FP values Not Greater than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x09</dd>
</dl><pre>
IizVCMPNGESD:: PROC
    MOV CL,0x09
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNGESD::
</pre>

<dl id="IizVCMPNGTSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNGTSD</a></dt>
<dd>Compare Scalar Double-FP values Not Greater Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0A</dd>
</dl><pre>
IizVCMPNGTSD:: PROC
    MOV CL,0x0A
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNGTSD::
</pre>

<dl id="IizVCMPFALSESD">
<dt><a href="#IizVCMPSD">&uarr; VCMPFALSESD</a></dt>
<dd>Compare Scalar Double-FP values False</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0B</dd>
</dl><pre>
IizVCMPFALSESD:: PROC
    MOV CL,0x0B
    JMP IizVCMPSD.cc:
 ENDP IizVCMPFALSESD::
</pre>

<dl id="IizVCMPGESD">
<dt><a href="#IizVCMPSD">&uarr; VCMPGESD</a></dt>
<dd>Compare Scalar Double-FP values Greater than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0D</dd>
</dl><pre>
IizVCMPGESD:: PROC
    MOV CL,0x0D
    JMP IizVCMPSD.cc:
 ENDP IizVCMPGESD::
</pre>

<dl id="IizVCMPGTSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPGTSD</a></dt>
<dd>Compare Scalar Double-FP values Greater Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0E</dd>
</dl><pre>
IizVCMPGTSD:: PROC
    MOV CL,0x0E
    JMP IizVCMPSD.cc:
 ENDP IizVCMPGTSD::
</pre>

<dl id="IizVCMPTRUESD">
<dt><a href="#IizVCMPSD">&uarr; VCMPTRUESD</a></dt>
<dd>Compare Scalar Double-FP values True</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0F</dd>
</dl><pre>
IizVCMPTRUESD:: PROC
    MOV CL,0x0F
    JMP IizVCMPSD.cc:
 ENDP IizVCMPTRUESD::
</pre>

<dl id="IizVCMPEQ_OQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPEQ_OQSD</a></dt>
<dd>Compare Scalar Double-FP values Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x00</dd>
</dl><pre>
IizVCMPEQ_OQSD:: PROC
    MOV CL,0x00
    JMP IizVCMPSD.cc:
 ENDP IizVCMPEQ_OQSD::
</pre>

<dl id="IizVCMPLT_OSSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPLT_OSSD</a></dt>
<dd>Compare Scalar Double-FP values Less Than, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x01</dd>
</dl><pre>
IizVCMPLT_OSSD:: PROC
    MOV CL,0x01
    JMP IizVCMPSD.cc:
 ENDP IizVCMPLT_OSSD::
</pre>

<dl id="IizVCMPLE_OSSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPLE_OSSD</a></dt>
<dd>Compare Scalar Double-FP values Less than or Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x02</dd>
</dl><pre>
IizVCMPLE_OSSD:: PROC
    MOV CL,0x02
    JMP IizVCMPSD.cc:
 ENDP IizVCMPLE_OSSD::
</pre>

<dl id="IizVCMPUNORD_QSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPUNORD_QSD</a></dt>
<dd>Compare Scalar Double-FP values Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x03</dd>
</dl><pre>
IizVCMPUNORD_QSD:: PROC
    MOV CL,0x03
    JMP IizVCMPSD.cc:
 ENDP IizVCMPUNORD_QSD::
</pre>

<dl id="IizVCMPNEQ_UQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNEQ_UQSD</a></dt>
<dd>Compare Scalar Double-FP values Not Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x04</dd>
</dl><pre>
IizVCMPNEQ_UQSD:: PROC
    MOV CL,0x04
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNEQ_UQSD::
</pre>

<dl id="IizVCMPNLT_USSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNLT_USSD</a></dt>
<dd>Compare Scalar Double-FP values Not Less Than, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x05</dd>
</dl><pre>
IizVCMPNLT_USSD:: PROC
    MOV CL,0x05
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNLT_USSD::
</pre>

<dl id="IizVCMPNLE_USSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNLE_USSD</a></dt>
<dd>Compare Scalar Double-FP values Not Less than or Equal,Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x06</dd>
</dl><pre>
IizVCMPNLE_USSD:: PROC
    MOV CL,0x06
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNLE_USSD::
</pre>

<dl id="IizVCMPORD_QSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPORD_QSD</a></dt>
<dd>Compare Scalar Double-FP values Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x07</dd>
</dl><pre>
IizVCMPORD_QSD:: PROC
    MOV CL,0x07
    JMP IizVCMPSD.cc:
 ENDP IizVCMPORD_QSD::
</pre>

<dl id="IizVCMPEQ_UQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPEQ_UQSD</a></dt>
<dd>Compare Scalar Double-FP values Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x08</dd>
</dl><pre>
IizVCMPEQ_UQSD:: PROC
    MOV CL,0x08
    JMP IizVCMPSD.cc:
 ENDP IizVCMPEQ_UQSD::
</pre>

<dl id="IizVCMPNGE_USSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNGE_USSD</a></dt>
<dd>Compare Scalar Double-FP values Not Greater than or Equal, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x09</dd>
</dl><pre>
IizVCMPNGE_USSD:: PROC
    MOV CL,0x09
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNGE_USSD::
</pre>

<dl id="IizVCMPNGT_USSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNGT_USSD</a></dt>
<dd>Compare Scalar Double-FP values Not Greater Than, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0A</dd>
</dl><pre>
IizVCMPNGT_USSD:: PROC
    MOV CL,0x0A
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNGT_USSD::
</pre>

<dl id="IizVCMPFALSE_OQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPFALSE_OQSD</a></dt>
<dd>Compare Scalar Double-FP values False, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0B</dd>
</dl><pre>
IizVCMPFALSE_OQSD:: PROC
    MOV CL,0x0B
    JMP IizVCMPSD.cc:
 ENDP IizVCMPFALSE_OQSD::
</pre>

<dl id="IizVCMPNEQ_OQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNEQ_OQSD</a></dt>
<dd>Compare Scalar Double-FP values Not Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0C</dd>
</dl><pre>
IizVCMPNEQ_OQSD:: PROC
    MOV CL,0x0C
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNEQ_OQSD::
</pre>

<dl id="IizVCMPGE_OSSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPGE_OSSD</a></dt>
<dd>Compare Scalar Double-FP values Greater than or Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0D</dd>
</dl><pre>
IizVCMPGE_OSSD:: PROC
    MOV CL,0x0D
    JMP IizVCMPSD.cc:
 ENDP IizVCMPGE_OSSD::
</pre>

<dl id="IizVCMPGT_OSSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPGT_OSSD</a></dt>
<dd>Compare Scalar Double-FP values Greater Than, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0E</dd>
</dl><pre>
IizVCMPGT_OSSD:: PROC
    MOV CL,0x0E
    JMP IizVCMPSD.cc:
 ENDP IizVCMPGT_OSSD::
</pre>

<dl id="IizVCMPTRUE_UQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPTRUE_UQSD</a></dt>
<dd>Compare Scalar Double-FP values True, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0F</dd>
</dl><pre>
IizVCMPTRUE_UQSD:: PROC
    MOV CL,0x0F
    JMP IizVCMPSD.cc:
 ENDP IizVCMPTRUE_UQSD::
</pre>

<dl id="IizVCMPEQ_OSSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPEQ_OSSD</a></dt>
<dd>Compare Scalar Double-FP values Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x10</dd>
</dl><pre>
IizVCMPEQ_OSSD:: PROC
    MOV CL,0x10
    JMP IizVCMPSD.cc:
 ENDP IizVCMPEQ_OSSD::
</pre>

<dl id="IizVCMPLT_OQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPLT_OQSD</a></dt>
<dd>Compare Scalar Double-FP values Less Than, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x11</dd>
</dl><pre>
IizVCMPLT_OQSD:: PROC
    MOV CL,0x11
    JMP IizVCMPSD.cc:
 ENDP IizVCMPLT_OQSD::
</pre>

<dl id="IizVCMPLE_OQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPLE_OQSD</a></dt>
<dd>Compare Scalar Double-FP values Less than or Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x12</dd>
</dl><pre>
IizVCMPLE_OQSD:: PROC
    MOV CL,0x12
    JMP IizVCMPSD.cc:
 ENDP IizVCMPLE_OQSD::
</pre>

<dl id="IizVCMPUNORD_SSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPUNORD_SSD</a></dt>
<dd>Compare Scalar Double-FP values Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x13</dd>
</dl><pre>
IizVCMPUNORD_SSD:: PROC
    MOV CL,0x13
    JMP IizVCMPSD.cc:
 ENDP IizVCMPUNORD_SSD::
</pre>

<dl id="IizVCMPNEQ_USSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNEQ_USSD</a></dt>
<dd>Compare Scalar Double-FP values Not Equal, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x14</dd>
</dl><pre>
IizVCMPNEQ_USSD:: PROC
    MOV CL,0x14
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNEQ_USSD::
</pre>

<dl id="IizVCMPNLT_UQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNLT_UQSD</a></dt>
<dd>Compare Scalar Double-FP values Not Less Than, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x15</dd>
</dl><pre>
IizVCMPNLT_UQSD:: PROC
    MOV CL,0x15
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNLT_UQSD::
</pre>

<dl id="IizVCMPNLE_UQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNLE_UQSD</a></dt>
<dd>Compare Scalar Double-FP values Not Less than or Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x16</dd>
</dl><pre>
IizVCMPNLE_UQSD:: PROC
    MOV CL,0x16
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNLE_UQSD::
</pre>

<dl id="IizVCMPORD_SSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPORD_SSD</a></dt>
<dd>Compare Scalar Double-FP values Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x17</dd>
</dl><pre>
IizVCMPORD_SSD:: PROC
    MOV CL,0x17
    JMP IizVCMPSD.cc:
 ENDP IizVCMPORD_SSD::
</pre>

<dl id="IizVCMPEQ_USSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPEQ_USSD</a></dt>
<dd>Compare Scalar Double-FP values Equal, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x18</dd>
</dl><pre>
IizVCMPEQ_USSD:: PROC
    MOV CL,0x18
    JMP IizVCMPSD.cc:
 ENDP IizVCMPEQ_USSD::
</pre>

<dl id="IizVCMPNGE_UQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNGE_UQSD</a></dt>
<dd>Compare Scalar Double-FP values Not Greater than or Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x19</dd>
</dl><pre>
IizVCMPNGE_UQSD:: PROC
    MOV CL,0x19
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNGE_UQSD::
</pre>

<dl id="IizVCMPNGT_UQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNGT_UQSD</a></dt>
<dd>Compare Scalar Double-FP values Not Greater Than, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1A</dd>
</dl><pre>
IizVCMPNGT_UQSD:: PROC
    MOV CL,0x1A
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNGT_UQSD::
</pre>

<dl id="IizVCMPFALSE_OSSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPFALSE_OSSD</a></dt>
<dd>Compare Scalar Double-FP values False, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1B</dd>
</dl><pre>
IizVCMPFALSE_OSSD:: PROC
    MOV CL,0x1B
    JMP IizVCMPSD.cc:
 ENDP IizVCMPFALSE_OSSD::
</pre>

<dl id="IizVCMPNEQ_OSSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPNEQ_OSSD</a></dt>
<dd>Compare Scalar Double-FP values Not Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1C</dd>
</dl><pre>
IizVCMPNEQ_OSSD:: PROC
    MOV CL,0x1C
    JMP IizVCMPSD.cc:
 ENDP IizVCMPNEQ_OSSD::
</pre>

<dl id="IizVCMPGE_OQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPGE_OQSD</a></dt>
<dd>Compare Scalar Double-FP values Greater than or Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1D</dd>
</dl><pre>
IizVCMPGE_OQSD:: PROC
    MOV CL,0x1D
    JMP IizVCMPSD.cc:
 ENDP IizVCMPGE_OQSD::
</pre>

<dl id="IizVCMPGT_OQSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPGT_OQSD</a></dt>
<dd>Compare Scalar Double-FP values Greater Than, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1E</dd>
</dl><pre>
IizVCMPGT_OQSD:: PROC
    MOV CL,0x1E
    JMP IizVCMPSD.cc:
 ENDP IizVCMPGT_OQSD::
</pre>

<dl id="IizVCMPTRUE_USSD">
<dt><a href="#IizVCMPSD">&uarr; VCMPTRUE_USSD</a></dt>
<dd>Compare Scalar Double-FP values True, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1F</dd>
</dl><pre>
IizVCMPTRUE_USSD:: PROC
    MOV CL,0x1F
    JMP IizVCMPSD.cc:
 ENDP IizVCMPTRUE_USSD::
</pre>

<dl id="IizVCMPPS">
<dt><a href='#IizHandlers'>&uarr; VCMPPS</a></dt>
<dd>Compare Packed Single-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCMPPS xmm1, xmm2, xmm3/m128, imm8
</th><td>VEX.NDS.128.0F.WIG C2 /r ib
</td></tr>
<tr><th>VCMPPS ymm1, ymm2, ymm3/m256, imm8
</th><td>VEX.NDS.256.0F.WIG C2 /r ib
</td></tr>
<tr><th>VCMPPS k1 {k2}, xmm2, xmm3/m128/m32bcst, imm8
</th><td>EVEX.NDS.128.0F.W0 C2 /r ib
</td></tr>
<tr><th>VCMPPS k1 {k2}, ymm2, ymm3/m256/m32bcst, imm8
</th><td>EVEX.NDS.256.0F.W0 C2 /r ib
</td></tr>
<tr><th>VCMPPS k1 {k2}, zmm2, zmm3/m512/m32bcst{sae}, imm8
</th><td>EVEX.NDS.512.0F.W0 C2 /r ib
</td></tr>
<tr><th>VCMPPS k2 {k1}, zmm1, zmm2/mem, imm8
</th><td>MVEX.NDS.512.0F.W0 C2 /r ib
</td></tr></table></dd>
<dt>Opcode</dt>
<dd>0xC2 /r imm8</dd>
<dt>See also</dt>
<dd><a href="#IizVCMPSS">VCMPSS</a>
<a href="#IizVCMPSD">VCMPSD</a>
<a href="#IizVCMPPD">VCMPPD</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5264.htm">t5264</a>
</dd>
</dl><pre>
IizVCMPPS:: PROC
    IiAllowModifier MASK,EH
    IiAllowBroadcasting DWORD, Operand=DH
    IiAllowSuppressing Operand=DH
    IiEmitOpcode 0xC2
    IiDisp8EVEX FV32
    IiDisp8MVEX Us32
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE, Max=31
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm, ymm.ymm.ymm.imm, ymm.ymm.mem.imm,\
    krg.xmm.xmm.imm, krg.xmm.mem.imm, krg.ymm.ymm.imm, krg.ymm.mem.imm, \
    krg.zmm.zmm.imm, krg.zmm.mem.imm
.cc: ; This entry is called with format xmm/krg,xmm,xmm/mem (no immediate).
    IiImmCreate CL
    JMP IizVCMPPS: ; Continue as if the condition were specified by imm value. 
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    IiEmitPrefix VEX.NDS.128.0F.WIG
    RET
.ymm.ymm.ymm.imm:
.ymm.ymm.mem.imm:
    IiEmitPrefix VEX.NDS.256.0F.WIG
    RET
.krg.xmm.mem.imm:
.krg.xmm.xmm.imm:
    IiEmitPrefix EVEX.NDS.128.0F.W0
    RET
.krg.ymm.mem.imm:
.krg.ymm.ymm.imm:
    IiEmitPrefix EVEX.NDS.256.0F.W0
    RET
.krg.zmm.zmm.imm:
.krg.zmm.mem.imm:
    IiEmitPrefix EVEX.NDS.512.0F.W0, MVEX.NDS.512.0F.W0
    RET
  ENDP IizVCMPPS::
</pre>

<dl id="IizVCMPEQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPEQPS</a></dt>
<dd>Compare Packed Single-FP values Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x00</dd>
</dl><pre>
IizVCMPEQPS:: PROC
    MOV CL,0x00
    JMP IizVCMPPS.cc:
 ENDP IizVCMPEQPS::
</pre>

<dl id="IizVCMPLTPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPLTPS</a></dt>
<dd>Compare Packed Single-FP values Less Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x01</dd>
</dl><pre>
IizVCMPLTPS:: PROC
    MOV CL,0x01
    JMP IizVCMPPS.cc:
 ENDP IizVCMPLTPS::
</pre>

<dl id="IizVCMPLEPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPLEPS</a></dt>
<dd>Compare Packed Single-FP values Less than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x02</dd>
</dl><pre>
IizVCMPLEPS:: PROC
    MOV CL,0x02
    JMP IizVCMPPS.cc:
 ENDP IizVCMPLEPS::
</pre>

<dl id="IizVCMPUNORDPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPUNORDPS</a></dt>
<dd>Compare Packed Single-FP values Unordered</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x03</dd>
</dl><pre>
IizVCMPUNORDPS:: PROC
    MOV CL,0x03
    JMP IizVCMPPS.cc:
 ENDP IizVCMPUNORDPS::
</pre>

<dl id="IizVCMPNEQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNEQPS</a></dt>
<dd>Compare Packed Single-FP values Not Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x04</dd>
</dl><pre>
IizVCMPNEQPS:: PROC
    MOV CL,0x04
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNEQPS::
</pre>

<dl id="IizVCMPNLTPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNLTPS</a></dt>
<dd>Compare Packed Single-FP values Not Less Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x05</dd>
</dl><pre>
IizVCMPNLTPS:: PROC
    MOV CL,0x05
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNLTPS::
</pre>

<dl id="IizVCMPNLEPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNLEPS</a></dt>
<dd>Compare Packed Single-FP values Not Less than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x06</dd>
</dl><pre>
IizVCMPNLEPS:: PROC
    MOV CL,0x06
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNLEPS::
</pre>

<dl id="IizVCMPORDPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPORDPS</a></dt>
<dd>Compare Packed Single-FP values Ordered</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x07</dd>
</dl><pre>
IizVCMPORDPS:: PROC
    MOV CL,0x07
    JMP IizVCMPPS.cc:
 ENDP IizVCMPORDPS::
</pre>

<dl id="IizVCMPNGEPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNGEPS</a></dt>
<dd>Compare Packed Single-FP values Not Greater than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x09</dd>
</dl><pre>
IizVCMPNGEPS:: PROC
    MOV CL,0x09
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNGEPS::
</pre>

<dl id="IizVCMPNGTPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNGTPS</a></dt>
<dd>Compare Packed Single-FP values Not Greater Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0A</dd>
</dl><pre>
IizVCMPNGTPS:: PROC
    MOV CL,0x0A
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNGTPS::
</pre>

<dl id="IizVCMPFALSEPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPFALSEPS</a></dt>
<dd>Compare Packed Single-FP values False</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0B</dd>
</dl><pre>
IizVCMPFALSEPS:: PROC
    MOV CL,0x0B
    JMP IizVCMPPS.cc:
 ENDP IizVCMPFALSEPS::
</pre>

<dl id="IizVCMPGEPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPGEPS</a></dt>
<dd>Compare Packed Single-FP values Greater than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0D</dd>
</dl><pre>
IizVCMPGEPS:: PROC
    MOV CL,0x0D
    JMP IizVCMPPS.cc:
 ENDP IizVCMPGEPS::
</pre>

<dl id="IizVCMPGTPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPGTPS</a></dt>
<dd>Compare Packed Single-FP values Greater Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0E</dd>
</dl><pre>
IizVCMPGTPS:: PROC
    MOV CL,0x0E
    JMP IizVCMPPS.cc:
 ENDP IizVCMPGTPS::
</pre>

<dl id="IizVCMPTRUEPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPTRUEPS</a></dt>
<dd>Compare Packed Single-FP values True</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0F</dd>
</dl><pre>
IizVCMPTRUEPS:: PROC
    MOV CL,0x0F
    JMP IizVCMPPS.cc:
 ENDP IizVCMPTRUEPS::
</pre>

<dl id="IizVCMPEQ_OQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPEQ_OQPS</a></dt>
<dd>Compare Packed Single-FP values Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x00</dd>
</dl><pre>
IizVCMPEQ_OQPS:: PROC
    MOV CL,0x00
    JMP IizVCMPPS.cc:
 ENDP IizVCMPEQ_OQPS::
</pre>

<dl id="IizVCMPLT_OSPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPLT_OSPS</a></dt>
<dd>Compare Packed Single-FP values Less Than, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x01</dd>
</dl><pre>
IizVCMPLT_OSPS:: PROC
    MOV CL,0x01
    JMP IizVCMPPS.cc:
 ENDP IizVCMPLT_OSPS::
</pre>

<dl id="IizVCMPLE_OSPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPLE_OSPS</a></dt>
<dd>Compare Packed Single-FP values Less than or Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x02</dd>
</dl><pre>
IizVCMPLE_OSPS:: PROC
    MOV CL,0x02
    JMP IizVCMPPS.cc:
 ENDP IizVCMPLE_OSPS::
</pre>

<dl id="IizVCMPUNORD_QPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPUNORD_QPS</a></dt>
<dd>Compare Packed Single-FP values Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x03</dd>
</dl><pre>
IizVCMPUNORD_QPS:: PROC
    MOV CL,0x03
    JMP IizVCMPPS.cc:
 ENDP IizVCMPUNORD_QPS::
</pre>

<dl id="IizVCMPNEQ_UQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNEQ_UQPS</a></dt>
<dd>Compare Packed Single-FP values Not Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x04</dd>
</dl><pre>
IizVCMPNEQ_UQPS:: PROC
    MOV CL,0x04
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNEQ_UQPS::
</pre>

<dl id="IizVCMPNLT_USPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNLT_USPS</a></dt>
<dd>Compare Packed Single-FP values Not Less Than, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x05</dd>
</dl><pre>
IizVCMPNLT_USPS:: PROC
    MOV CL,0x05
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNLT_USPS::
</pre>

<dl id="IizVCMPNLE_USPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNLE_USPS</a></dt>
<dd>Compare Packed Single-FP values Not Less than or Equal,Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x06</dd>
</dl><pre>
IizVCMPNLE_USPS:: PROC
    MOV CL,0x06
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNLE_USPS::
</pre>

<dl id="IizVCMPORD_QPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPORD_QPS</a></dt>
<dd>Compare Packed Single-FP values Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x07</dd>
</dl><pre>
IizVCMPORD_QPS:: PROC
    MOV CL,0x07
    JMP IizVCMPPS.cc:
 ENDP IizVCMPORD_QPS::
</pre>

<dl id="IizVCMPEQ_UQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPEQ_UQPS</a></dt>
<dd>Compare Packed Single-FP values Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x08</dd>
</dl><pre>
IizVCMPEQ_UQPS:: PROC
    MOV CL,0x08
    JMP IizVCMPPS.cc:
 ENDP IizVCMPEQ_UQPS::
</pre>

<dl id="IizVCMPNGE_USPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNGE_USPS</a></dt>
<dd>Compare Packed Single-FP values Not Greater than or Equal, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x09</dd>
</dl><pre>
IizVCMPNGE_USPS:: PROC
    MOV CL,0x09
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNGE_USPS::
</pre>

<dl id="IizVCMPNGT_USPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNGT_USPS</a></dt>
<dd>Compare Packed Single-FP values Not Greater Than, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0A</dd>
</dl><pre>
IizVCMPNGT_USPS:: PROC
    MOV CL,0x0A
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNGT_USPS::
</pre>

<dl id="IizVCMPFALSE_OQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPFALSE_OQPS</a></dt>
<dd>Compare Packed Single-FP values False, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0B</dd>
</dl><pre>
IizVCMPFALSE_OQPS:: PROC
    MOV CL,0x0B
    JMP IizVCMPPS.cc:
 ENDP IizVCMPFALSE_OQPS::
</pre>

<dl id="IizVCMPNEQ_OQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNEQ_OQPS</a></dt>
<dd>Compare Packed Single-FP values Not Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0C</dd>
</dl><pre>
IizVCMPNEQ_OQPS:: PROC
    MOV CL,0x0C
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNEQ_OQPS::
</pre>

<dl id="IizVCMPGE_OSPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPGE_OSPS</a></dt>
<dd>Compare Packed Single-FP values Greater than or Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0D</dd>
</dl><pre>
IizVCMPGE_OSPS:: PROC
    MOV CL,0x0D
    JMP IizVCMPPS.cc:
 ENDP IizVCMPGE_OSPS::
</pre>

<dl id="IizVCMPGT_OSPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPGT_OSPS</a></dt>
<dd>Compare Packed Single-FP values Greater Than, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0E</dd>
</dl><pre>
IizVCMPGT_OSPS:: PROC
    MOV CL,0x0E
    JMP IizVCMPPS.cc:
 ENDP IizVCMPGT_OSPS::
</pre>

<dl id="IizVCMPTRUE_UQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPTRUE_UQPS</a></dt>
<dd>Compare Packed Single-FP values True, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0F</dd>
</dl><pre>
IizVCMPTRUE_UQPS:: PROC
    MOV CL,0x0F
    JMP IizVCMPPS.cc:
 ENDP IizVCMPTRUE_UQPS::
</pre>

<dl id="IizVCMPEQ_OSPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPEQ_OSPS</a></dt>
<dd>Compare Packed Single-FP values Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x10</dd>
</dl><pre>
IizVCMPEQ_OSPS:: PROC
    MOV CL,0x10
    JMP IizVCMPPS.cc:
 ENDP IizVCMPEQ_OSPS::
</pre>

<dl id="IizVCMPLT_OQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPLT_OQPS</a></dt>
<dd>Compare Packed Single-FP values Less Than, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x11</dd>
</dl><pre>
IizVCMPLT_OQPS:: PROC
    MOV CL,0x11
    JMP IizVCMPPS.cc:
 ENDP IizVCMPLT_OQPS::
</pre>

<dl id="IizVCMPLE_OQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPLE_OQPS</a></dt>
<dd>Compare Packed Single-FP values Less than or Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x12</dd>
</dl><pre>
IizVCMPLE_OQPS:: PROC
    MOV CL,0x12
    JMP IizVCMPPS.cc:
 ENDP IizVCMPLE_OQPS::
</pre>

<dl id="IizVCMPUNORD_SPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPUNORD_SPS</a></dt>
<dd>Compare Packed Single-FP values Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x13</dd>
</dl><pre>
IizVCMPUNORD_SPS:: PROC
    MOV CL,0x13
    JMP IizVCMPPS.cc:
 ENDP IizVCMPUNORD_SPS::
</pre>

<dl id="IizVCMPNEQ_USPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNEQ_USPS</a></dt>
<dd>Compare Packed Single-FP values Not Equal, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x14</dd>
</dl><pre>
IizVCMPNEQ_USPS:: PROC
    MOV CL,0x14
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNEQ_USPS::
</pre>

<dl id="IizVCMPNLT_UQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNLT_UQPS</a></dt>
<dd>Compare Packed Single-FP values Not Less Than, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x15</dd>
</dl><pre>
IizVCMPNLT_UQPS:: PROC
    MOV CL,0x15
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNLT_UQPS::
</pre>

<dl id="IizVCMPNLE_UQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNLE_UQPS</a></dt>
<dd>Compare Packed Single-FP values Not Less than or Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x16</dd>
</dl><pre>
IizVCMPNLE_UQPS:: PROC
    MOV CL,0x16
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNLE_UQPS::
</pre>

<dl id="IizVCMPORD_SPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPORD_SPS</a></dt>
<dd>Compare Packed Single-FP values Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x17</dd>
</dl><pre>
IizVCMPORD_SPS:: PROC
    MOV CL,0x17
    JMP IizVCMPPS.cc:
 ENDP IizVCMPORD_SPS::
</pre>

<dl id="IizVCMPEQ_USPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPEQ_USPS</a></dt>
<dd>Compare Packed Single-FP values Equal, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x18</dd>
</dl><pre>
IizVCMPEQ_USPS:: PROC
    MOV CL,0x18
    JMP IizVCMPPS.cc:
 ENDP IizVCMPEQ_USPS::
</pre>

<dl id="IizVCMPNGE_UQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNGE_UQPS</a></dt>
<dd>Compare Packed Single-FP values Not Greater than or Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x19</dd>
</dl><pre>
IizVCMPNGE_UQPS:: PROC
    MOV CL,0x19
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNGE_UQPS::
</pre>

<dl id="IizVCMPNGT_UQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNGT_UQPS</a></dt>
<dd>Compare Packed Single-FP values Not Greater Than, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1A</dd>
</dl><pre>
IizVCMPNGT_UQPS:: PROC
    MOV CL,0x1A
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNGT_UQPS::
</pre>

<dl id="IizVCMPFALSE_OSPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPFALSE_OSPS</a></dt>
<dd>Compare Packed Single-FP values False, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1B</dd>
</dl><pre>
IizVCMPFALSE_OSPS:: PROC
    MOV CL,0x1B
    JMP IizVCMPPS.cc:
 ENDP IizVCMPFALSE_OSPS::
</pre>

<dl id="IizVCMPNEQ_OSPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPNEQ_OSPS</a></dt>
<dd>Compare Packed Single-FP values Not Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1C</dd>
</dl><pre>
IizVCMPNEQ_OSPS:: PROC
    MOV CL,0x1C
    JMP IizVCMPPS.cc:
 ENDP IizVCMPNEQ_OSPS::
</pre>

<dl id="IizVCMPGE_OQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPGE_OQPS</a></dt>
<dd>Compare Packed Single-FP values Greater than or Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1D</dd>
</dl><pre>
IizVCMPGE_OQPS:: PROC
    MOV CL,0x1D
    JMP IizVCMPPS.cc:
 ENDP IizVCMPGE_OQPS::
</pre>

<dl id="IizVCMPGT_OQPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPGT_OQPS</a></dt>
<dd>Compare Packed Single-FP values Greater Than, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1E</dd>
</dl><pre>
IizVCMPGT_OQPS:: PROC
    MOV CL,0x1E
    JMP IizVCMPPS.cc:
 ENDP IizVCMPGT_OQPS::
</pre>

<dl id="IizVCMPTRUE_USPS">
<dt><a href="#IizVCMPPS">&uarr; VCMPTRUE_USPS</a></dt>
<dd>Compare Packed Single-FP values True, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1F</dd>
</dl><pre>
IizVCMPTRUE_USPS:: PROC
    MOV CL,0x1F
    JMP IizVCMPPS.cc:
 ENDP IizVCMPTRUE_USPS::
</pre>

<dl id="IizVCMPPD">
<dt><a href='#IizHandlers'>&uarr; VCMPPD</a></dt>
<dd>Compare Packed Double-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCMPPD xmm1, xmm2, xmm3/m128, imm8
</th><td>VEX.NDS.128.66.0F.WIG C2 /r ib
</td></tr>
<tr><th>VCMPPD ymm1, ymm2, ymm3/m256, imm8
</th><td>VEX.NDS.256.66.0F.WIG C2 /r ib
</td></tr>
<tr><th>VCMPPD k1 {k2}, xmm2, xmm3/m128/m64bcst, imm8
</th><td>EVEX.NDS.128.66.0F.W1 C2 /r ib
</td></tr>
<tr><th>VCMPPD k1 {k2}, ymm2, ymm3/m256/m64bcst, imm8
</th><td>EVEX.NDS.256.66.0F.W1 C2 /r ib
</td></tr>
<tr><th>VCMPPD k1 {k2}, zmm2, zmm3/m512/m64bcst{sae}, imm8
</th><td>EVEX.NDS.512.66.0F.W1 C2 /r ib
</td></tr>
<tr><th>VCMPPD k2 {k1}, zmm1, zmm2/mem, imm8
</th><td>MVEX.NDS.512.66.0F.W1 C2 /r ib
</td></tr></table></dd>
<dt>Opcode</dt>
<dd>0xC2 /r imm8</dd>
<dt>See also</dt>
<dd><a href="#IizVCMPSD">VCMPSS</a> <a href="#IizVCMPSD">VCMPSD</a>
<a href="#IizVCMPPS">VCMPPS</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5266.htm">t5266</a>
</dd>
</dl><pre>
IizVCMPPD:: PROC
    IiAllowModifier MASK,EH
    IiAllowBroadcasting QWORD, Operand=DH
    IiAllowSuppressing Operand=DH
    IiEmitOpcode 0xC2
    IiDisp8EVEX FV64
    IiDisp8MVEX Ub64
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE, Max=31
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm, ymm.ymm.ymm.imm, ymm.ymm.mem.imm,\
    krg.xmm.xmm.imm, krg.xmm.mem.imm, krg.ymm.ymm.imm, krg.ymm.mem.imm, \
    krg.zmm.zmm.imm, krg.zmm.mem.imm
.cc: ; This entry is called with format xmm/krg,xmm,xmm/mem (no immediate).
    IiImmCreate CL
    JMP IizVCMPPD: ; Continue as if the condition were specified by imm value. 
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    IiEmitPrefix VEX.NDS.128.66.0F.WIG
    RET
.ymm.ymm.ymm.imm:
.ymm.ymm.mem.imm:
    IiEmitPrefix VEX.NDS.256.66.0F.WIG
    RET
.krg.xmm.mem.imm:
.krg.xmm.xmm.imm:
    IiEmitPrefix EVEX.NDS.128.66.0F.W1
    RET
.krg.ymm.mem.imm:
.krg.ymm.ymm.imm:
    IiEmitPrefix EVEX.NDS.256.66.0F.W1
    RET
.krg.zmm.zmm.imm:
.krg.zmm.mem.imm:
    IiEmitPrefix EVEX.NDS.512.66.0F.W1, MVEX.NDS.512.66.0F.W1
    RET
  ENDP IizVCMPPD::
</pre>

<dl id="IizVCMPEQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPEQPD</a></dt>
<dd>Compare Packed Double-FP values Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x00</dd>
</dl><pre>
IizVCMPEQPD:: PROC
    MOV CL,0x00
    JMP IizVCMPPD.cc:
 ENDP IizVCMPEQPD::
</pre>

<dl id="IizVCMPLTPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPLTPD</a></dt>
<dd>Compare Packed Double-FP values Less Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x01</dd>
</dl><pre>
IizVCMPLTPD:: PROC
    MOV CL,0x01
    JMP IizVCMPPD.cc:
 ENDP IizVCMPLTPD::
</pre>

<dl id="IizVCMPLEPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPLEPD</a></dt>
<dd>Compare Packed Double-FP values Less than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x02</dd>
</dl><pre>
IizVCMPLEPD:: PROC
    MOV CL,0x02
    JMP IizVCMPPD.cc:
 ENDP IizVCMPLEPD::
</pre>

<dl id="IizVCMPUNORDPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPUNORDPD</a></dt>
<dd>Compare Packed Double-FP values Unordered</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x03</dd>
</dl><pre>
IizVCMPUNORDPD:: PROC
    MOV CL,0x03
    JMP IizVCMPPD.cc:
 ENDP IizVCMPUNORDPD::
</pre>

<dl id="IizVCMPNEQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNEQPD</a></dt>
<dd>Compare Packed Double-FP values Not Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x04</dd>
</dl><pre>
IizVCMPNEQPD:: PROC
    MOV CL,0x04
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNEQPD::
</pre>

<dl id="IizVCMPNLTPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNLTPD</a></dt>
<dd>Compare Packed Double-FP values Not Less Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x05</dd>
</dl><pre>
IizVCMPNLTPD:: PROC
    MOV CL,0x05
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNLTPD::
</pre>

<dl id="IizVCMPNLEPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNLEPD</a></dt>
<dd>Compare Packed Double-FP values Not Less than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x06</dd>
</dl><pre>
IizVCMPNLEPD:: PROC
    MOV CL,0x06
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNLEPD::
</pre>

<dl id="IizVCMPORDPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPORDPD</a></dt>
<dd>Compare Packed Double-FP values Ordered</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x07</dd>
</dl><pre>
IizVCMPORDPD:: PROC
    MOV CL,0x07
    JMP IizVCMPPD.cc:
 ENDP IizVCMPORDPD::
</pre>

<dl id="IizVCMPNGEPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNGEPD</a></dt>
<dd>Compare Packed Double-FP values Not Greater than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x09</dd>
</dl><pre>
IizVCMPNGEPD:: PROC
    MOV CL,0x09
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNGEPD::
</pre>

<dl id="IizVCMPNGTPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNGTPD</a></dt>
<dd>Compare Packed Double-FP values Not Greater Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0A</dd>
</dl><pre>
IizVCMPNGTPD:: PROC
    MOV CL,0x0A
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNGTPD::
</pre>

<dl id="IizVCMPFALSEPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPFALSEPD</a></dt>
<dd>Compare Packed Double-FP values False</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0B</dd>
</dl><pre>
IizVCMPFALSEPD:: PROC
    MOV CL,0x0B
    JMP IizVCMPPD.cc:
 ENDP IizVCMPFALSEPD::
</pre>

<dl id="IizVCMPGEPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPGEPD</a></dt>
<dd>Compare Packed Double-FP values Greater than or Equal</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0D</dd>
</dl><pre>
IizVCMPGEPD:: PROC
    MOV CL,0x0D
    JMP IizVCMPPD.cc:
 ENDP IizVCMPGEPD::
</pre>

<dl id="IizVCMPGTPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPGTPD</a></dt>
<dd>Compare Packed Double-FP values Greater Than</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0E</dd>
</dl><pre>
IizVCMPGTPD:: PROC
    MOV CL,0x0E
    JMP IizVCMPPD.cc:
 ENDP IizVCMPGTPD::
</pre>

<dl id="IizVCMPTRUEPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPTRUEPD</a></dt>
<dd>Compare Packed Double-FP values True</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0F</dd>
</dl><pre>
IizVCMPTRUEPD:: PROC
    MOV CL,0x0F
    JMP IizVCMPPD.cc:
 ENDP IizVCMPTRUEPD::
</pre>

<dl id="IizVCMPEQ_OQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPEQ_OQPD</a></dt>
<dd>Compare Packed Double-FP values Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x00</dd>
</dl><pre>
IizVCMPEQ_OQPD:: PROC
    MOV CL,0x00
    JMP IizVCMPPD.cc:
 ENDP IizVCMPEQ_OQPD::
</pre>

<dl id="IizVCMPLT_OSPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPLT_OSPD</a></dt>
<dd>Compare Packed Double-FP values Less Than, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x01</dd>
</dl><pre>
IizVCMPLT_OSPD:: PROC
    MOV CL,0x01
    JMP IizVCMPPD.cc:
 ENDP IizVCMPLT_OSPD::
</pre>

<dl id="IizVCMPLE_OSPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPLE_OSPD</a></dt>
<dd>Compare Packed Double-FP values Less than or Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x02</dd>
</dl><pre>
IizVCMPLE_OSPD:: PROC
    MOV CL,0x02
    JMP IizVCMPPD.cc:
 ENDP IizVCMPLE_OSPD::
</pre>

<dl id="IizVCMPUNORD_QPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPUNORD_QPD</a></dt>
<dd>Compare Packed Double-FP values Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x03</dd>
</dl><pre>
IizVCMPUNORD_QPD:: PROC
    MOV CL,0x03
    JMP IizVCMPPD.cc:
 ENDP IizVCMPUNORD_QPD::
</pre>

<dl id="IizVCMPNEQ_UQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNEQ_UQPD</a></dt>
<dd>Compare Packed Double-FP values Not Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x04</dd>
</dl><pre>
IizVCMPNEQ_UQPD:: PROC
    MOV CL,0x04
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNEQ_UQPD::
</pre>

<dl id="IizVCMPNLT_USPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNLT_USPD</a></dt>
<dd>Compare Packed Double-FP values Not Less Than, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x05</dd>
</dl><pre>
IizVCMPNLT_USPD:: PROC
    MOV CL,0x05
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNLT_USPD::
</pre>

<dl id="IizVCMPNLE_USPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNLE_USPD</a></dt>
<dd>Compare Packed Double-FP values Not Less than or Equal,Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x06</dd>
</dl><pre>
IizVCMPNLE_USPD:: PROC
    MOV CL,0x06
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNLE_USPD::
</pre>

<dl id="IizVCMPORD_QPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPORD_QPD</a></dt>
<dd>Compare Packed Double-FP values Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x07</dd>
</dl><pre>
IizVCMPORD_QPD:: PROC
    MOV CL,0x07
    JMP IizVCMPPD.cc:
 ENDP IizVCMPORD_QPD::
</pre>

<dl id="IizVCMPEQ_UQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPEQ_UQPD</a></dt>
<dd>Compare Packed Double-FP values Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x08</dd>
</dl><pre>
IizVCMPEQ_UQPD:: PROC
    MOV CL,0x08
    JMP IizVCMPPD.cc:
 ENDP IizVCMPEQ_UQPD::
</pre>

<dl id="IizVCMPNGE_USPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNGE_USPD</a></dt>
<dd>Compare Packed Double-FP values Not Greater than or Equal, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x09</dd>
</dl><pre>
IizVCMPNGE_USPD:: PROC
    MOV CL,0x09
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNGE_USPD::
</pre>

<dl id="IizVCMPNGT_USPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNGT_USPD</a></dt>
<dd>Compare Packed Double-FP values Not Greater Than, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0A</dd>
</dl><pre>
IizVCMPNGT_USPD:: PROC
    MOV CL,0x0A
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNGT_USPD::
</pre>

<dl id="IizVCMPFALSE_OQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPFALSE_OQPD</a></dt>
<dd>Compare Packed Double-FP values False, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0B</dd>
</dl><pre>
IizVCMPFALSE_OQPD:: PROC
    MOV CL,0x0B
    JMP IizVCMPPD.cc:
 ENDP IizVCMPFALSE_OQPD::
</pre>

<dl id="IizVCMPNEQ_OQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNEQ_OQPD</a></dt>
<dd>Compare Packed Double-FP values Not Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0C</dd>
</dl><pre>
IizVCMPNEQ_OQPD:: PROC
    MOV CL,0x0C
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNEQ_OQPD::
</pre>

<dl id="IizVCMPGE_OSPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPGE_OSPD</a></dt>
<dd>Compare Packed Double-FP values Greater than or Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0D</dd>
</dl><pre>
IizVCMPGE_OSPD:: PROC
    MOV CL,0x0D
    JMP IizVCMPPD.cc:
 ENDP IizVCMPGE_OSPD::
</pre>

<dl id="IizVCMPGT_OSPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPGT_OSPD</a></dt>
<dd>Compare Packed Double-FP values Greater Than, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0E</dd>
</dl><pre>
IizVCMPGT_OSPD:: PROC
    MOV CL,0x0E
    JMP IizVCMPPD.cc:
 ENDP IizVCMPGT_OSPD::
</pre>

<dl id="IizVCMPTRUE_UQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPTRUE_UQPD</a></dt>
<dd>Compare Packed Double-FP values True, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x0F</dd>
</dl><pre>
IizVCMPTRUE_UQPD:: PROC
    MOV CL,0x0F
    JMP IizVCMPPD.cc:
 ENDP IizVCMPTRUE_UQPD::
</pre>

<dl id="IizVCMPEQ_OSPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPEQ_OSPD</a></dt>
<dd>Compare Packed Double-FP values Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x10</dd>
</dl><pre>
IizVCMPEQ_OSPD:: PROC
    MOV CL,0x10
    JMP IizVCMPPD.cc:
 ENDP IizVCMPEQ_OSPD::
</pre>

<dl id="IizVCMPLT_OQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPLT_OQPD</a></dt>
<dd>Compare Packed Double-FP values Less Than, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x11</dd>
</dl><pre>
IizVCMPLT_OQPD:: PROC
    MOV CL,0x11
    JMP IizVCMPPD.cc:
 ENDP IizVCMPLT_OQPD::
</pre>

<dl id="IizVCMPLE_OQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPLE_OQPD</a></dt>
<dd>Compare Packed Double-FP values Less than or Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x12</dd>
</dl><pre>
IizVCMPLE_OQPD:: PROC
    MOV CL,0x12
    JMP IizVCMPPD.cc:
 ENDP IizVCMPLE_OQPD::
</pre>

<dl id="IizVCMPUNORD_SPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPUNORD_SPD</a></dt>
<dd>Compare Packed Double-FP values Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x13</dd>
</dl><pre>
IizVCMPUNORD_SPD:: PROC
    MOV CL,0x13
    JMP IizVCMPPD.cc:
 ENDP IizVCMPUNORD_SPD::
</pre>

<dl id="IizVCMPNEQ_USPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNEQ_USPD</a></dt>
<dd>Compare Packed Double-FP values Not Equal, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x14</dd>
</dl><pre>
IizVCMPNEQ_USPD:: PROC
    MOV CL,0x14
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNEQ_USPD::
</pre>

<dl id="IizVCMPNLT_UQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNLT_UQPD</a></dt>
<dd>Compare Packed Double-FP values Not Less Than, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x15</dd>
</dl><pre>
IizVCMPNLT_UQPD:: PROC
    MOV CL,0x15
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNLT_UQPD::
</pre>

<dl id="IizVCMPNLE_UQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNLE_UQPD</a></dt>
<dd>Compare Packed Double-FP values Not Less than or Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x16</dd>
</dl><pre>
IizVCMPNLE_UQPD:: PROC
    MOV CL,0x16
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNLE_UQPD::
</pre>

<dl id="IizVCMPORD_SPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPORD_SPD</a></dt>
<dd>Compare Packed Double-FP values Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x17</dd>
</dl><pre>
IizVCMPORD_SPD:: PROC
    MOV CL,0x17
    JMP IizVCMPPD.cc:
 ENDP IizVCMPORD_SPD::
</pre>

<dl id="IizVCMPEQ_USPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPEQ_USPD</a></dt>
<dd>Compare Packed Double-FP values Equal, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x18</dd>
</dl><pre>
IizVCMPEQ_USPD:: PROC
    MOV CL,0x18
    JMP IizVCMPPD.cc:
 ENDP IizVCMPEQ_USPD::
</pre>

<dl id="IizVCMPNGE_UQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNGE_UQPD</a></dt>
<dd>Compare Packed Double-FP values Not Greater than or Equal, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x19</dd>
</dl><pre>
IizVCMPNGE_UQPD:: PROC
    MOV CL,0x19
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNGE_UQPD::
</pre>

<dl id="IizVCMPNGT_UQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNGT_UQPD</a></dt>
<dd>Compare Packed Double-FP values Not Greater Than, Unordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1A</dd>
</dl><pre>
IizVCMPNGT_UQPD:: PROC
    MOV CL,0x1A
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNGT_UQPD::
</pre>

<dl id="IizVCMPFALSE_OSPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPFALSE_OSPD</a></dt>
<dd>Compare Packed Double-FP values False, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1B</dd>
</dl><pre>
IizVCMPFALSE_OSPD:: PROC
    MOV CL,0x1B
    JMP IizVCMPPD.cc:
 ENDP IizVCMPFALSE_OSPD::
</pre>

<dl id="IizVCMPNEQ_OSPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPNEQ_OSPD</a></dt>
<dd>Compare Packed Double-FP values Not Equal, Ordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1C</dd>
</dl><pre>
IizVCMPNEQ_OSPD:: PROC
    MOV CL,0x1C
    JMP IizVCMPPD.cc:
 ENDP IizVCMPNEQ_OSPD::
</pre>

<dl id="IizVCMPGE_OQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPGE_OQPD</a></dt>
<dd>Compare Packed Double-FP values Greater than or Equal, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1D</dd>
</dl><pre>
IizVCMPGE_OQPD:: PROC
    MOV CL,0x1D
    JMP IizVCMPPD.cc:
 ENDP IizVCMPGE_OQPD::
</pre>

<dl id="IizVCMPGT_OQPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPGT_OQPD</a></dt>
<dd>Compare Packed Double-FP values Greater Than, Ordered, Quiet</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1E</dd>
</dl><pre>
IizVCMPGT_OQPD:: PROC
    MOV CL,0x1E
    JMP IizVCMPPD.cc:
 ENDP IizVCMPGT_OQPD::
</pre>

<dl id="IizVCMPTRUE_USPD">
<dt><a href="#IizVCMPPD">&uarr; VCMPTRUE_USPD</a></dt>
<dd>Compare Packed Double-FP values True, Unordered, Signaling</dd>
<dt>Operands</dt>
<dd>xmm/krg, xmm, xmm/mem</dd>
<dt>Opcode</dt>
<dd>0xC2 /r 0x1F</dd>
</dl><pre>
IizVCMPTRUE_USPD:: PROC
    MOV CL,0x1F
    JMP IizVCMPPD.cc:
 ENDP IizVCMPTRUE_USPD::
</pre>

<dl id="IizVUCOMISS">
<dt><a href='#IizHandlers'>&uarr; VUCOMISS</a></dt>
<dd>Unordered Compare Scalar Single-FP Values and Set EFLAGS</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VUCOMISS xmm1, xmm2/m32
</th><td>VEX.128.0F.WIG 2E /r 
</td></tr>
<tr><th>VUCOMISS xmm1, xmm2/m32{sae}
</th><td>EVEX.LIG.0F.W0 2E /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdfp,compar</dd>
<dt>Operands</dt>
<dd>Vss,Wss</dd>
<dt>Opcode</dt>
<dd>0x0F2E /r</dd>
<dt>Flags</dt>
<dd>modified:<b>....Z.PC</b>, defined:<b>....Z.PC</b></dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5268.htm">t5268</a>
</dd>
</dl><pre>
IizVUCOMISS:: PROC
    IiEmitOpcode 0x2E
.op:IiAllowSuppressing Register=xmm
    IiEncoding DATA=DWORD
    IiDisp8EVEX T1S32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.0F.WIG, EVEX.LIG.0F.W0
    RET
  ENDP IizVUCOMISS::
</pre>

<dl id="IizVCOMISS">
<dt><a href='#IizVUCOMISS'>&uarr; VCOMISS</a></dt>
<dd>Compare Scalar Ordered Single-FP Values and Set EFLAGS</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCOMISS xmm1, xmm2/m32
</th><td>VEX.128.0F.WIG 2F /r
</td></tr>
<tr><th>VCOMISS xmm1, xmm2/m32{sae}
</th><td>EVEX.LIG.0F.W0 2F /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdfp,compar</dd>
<dt>Operands</dt>
<dd>Vss,Wss</dd>
<dt>Opcode</dt>
<dd>0x0F2F /r</dd>
<dt>Flags</dt>
<dd>modified:<b>....Z.PC</b>, defined:<b>....Z.PC</b></dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5268.htm">t5268</a>
</dd>
</dl><pre>
IizVCOMISS:: PROC
    IiEmitOpcode 0x2F
    JMP IizVUCOMISS.op:
  ENDP IizVCOMISS::
</pre>

<dl id="IizVUCOMISD">
<dt><a href='#IizHandlers'>&uarr; VUCOMISD</a></dt>
<dd>Unordered Compare Scalar Double-FP Values and Set EFLAGS</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VUCOMISD xmm1, xmm2/m64
</th><td>VEX.128.66.0F.WIG 2E /r 
</td></tr>
<tr><th>VUCOMISD xmm1, xmm2/m64{sae}
</th><td>EVEX.LIG.66.0F.W1 2E /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,compar</dd>
<dt>Operands</dt>
<dd>Vsd,Wsd</dd>
<dt>Opcode</dt>
<dd>0x660F2E /r</dd>
<dt>Flags</dt>
<dd>modified:<b>....Z.PC</b>, defined:<b>....Z.PC</b></dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5268.htm">t5268</a>
</dd>
</dl><pre>
IizVUCOMISD:: PROC
    IiEmitOpcode 0x2E
.op:IiAllowSuppressing Register=xmm
    IiEncoding DATA=QWORD
    IiDisp8EVEX T1S64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.66.0F.WIG, EVEX.LIG.66.0F.W1
    RET
  ENDP IizVUCOMISD::
</pre>

<dl id="IizVCOMISD">
<dt><a href='#IizVUCOMISD'>&uarr; VCOMISD</a></dt>
<dd>Compare Scalar Ordered Double-FP Values and Set EFLAGS</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCOMISD xmm1, xmm2/m64
</th><td>VEX.128.66.0F.WIG 2F /r 
</td></tr>
<tr><th>VCOMISD xmm1, xmm2/m64{sae}
</th><td>EVEX.LIG.66.0F.W1 2F /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,compar</dd>
<dt>Operands</dt>
<dd>Vsd,Wsd</dd>
<dt>Opcode</dt>
<dd>0x660F2F /r</dd>
<dt>Flags</dt>
<dd>modified:<b>....Z.PC</b>, defined:<b>....Z.PC</b></dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5268.htm">t5268</a>
</dd>
</dl><pre>
IizVCOMISD:: PROC
    IiEmitOpcode 0x2F
    JMP IizVUCOMISD.op:
  ENDP IizVCOMISD::
</pre>

<dl id="IizVCOMPRESSPS">
<dt><a href='#IizHandlers'>&uarr; VCOMPRESSPS</a></dt>
<dd>Store Sparse Packed Single-Precision Floating-Point Values into Dense Memory</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCOMPRESSPS xmm1/m128 {k1}{z}, xmm2
</th><td>EVEX.128.66.0F38.W0 8A /r 
</td></tr>
<tr><th>VCOMPRESSPS ymm1/m256 {k1}{z}, ymm2
</th><td>EVEX.256.66.0F38.W0 8A /r 
</td></tr>
<tr><th>VCOMPRESSPS zmm1/m512 {k1}{z}, zmm2
</th><td>EVEX.512.66.0F38.W0 8A /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x8A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5270.htm">t5270</a>
</dd>
</dl><pre>
IizVCOMPRESSPS:: PROC
    IiEmitOpcode 0x8A
.op:IiAllowModifier MASK
    IiDisp8EVEX T1S32
    IiOpEn MR
    IiModRM /r
    IiDispatchFormat  xmm.xmm, mem.xmm, ymm.ymm, mem.ymm, zmm.zmm, mem.zmm
.mem.xmm:
.xmm.xmm:
    IiEmitPrefix EVEX.128.66.0F38.W0
    RET
.mem.ymm:
.ymm.ymm:
    IiEmitPrefix EVEX.256.66.0F38.W0
    RET
.mem.zmm:
.zmm.zmm:
    IiEmitPrefix EVEX.512.66.0F38.W0
    RET
  ENDP IizVCOMPRESSPS::
</pre>

<dl id="IizVPCOMPRESSD">
<dt><a href='#IizVCOMPRESSPS'>&uarr; VPCOMPRESSD</a></dt>
<dd>Store Sparse Packed Doubleword Integer Values into Dense Memory/Register</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPCOMPRESSD xmm1/m128 {k1}{z}, xmm2 
</th><td>EVEX.128.66.0F38.W0 8B /r 
</td></tr>
<tr><th>VPCOMPRESSD ymm1/m256 {k1}{z}, ymm2 
</th><td>EVEX.256.66.0F38.W0 8B /r
</td></tr>
<tr><th>VPCOMPRESSD zmm1/m512 {k1}{z}, zmm2</th><td>EVEX.512.66.0F38.W0 8B /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x8B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5270.htm">t5270</a>
</dd>
</dl><pre>
IizVPCOMPRESSD:: PROC
    IiEmitOpcode 0x8B
    JMP IizVCOMPRESSPS.op:
  ENDP IizVPCOMPRESSD::
</pre>

<dl id="IizVCOMPRESSPD">
<dt><a href='#IizHandlers'>&uarr; VCOMPRESSPD</a></dt>
<dd>Store Sparse Packed Double-Precision Floating-Point Values into Dense Memory</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VCOMPRESSPD xmm1/m128 {k1}{z}, xmm2
</th><td>EVEX.128.66.0F38.W1 8A /r
</td></tr>
<tr><th>VCOMPRESSPD ymm1/m256 {k1}{z}, ymm2
</th><td>EVEX.256.66.0F38.W1 8A /r
</td></tr>
<tr><th>VCOMPRESSPD zmm1/m512 {k1}{z}, zmm2
</th><td>EVEX.512.66.0F38.W1 8A /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x8A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5270.htm">t5270</a>
</dd>
</dl><pre>
IizVCOMPRESSPD:: PROC
    IiEmitOpcode 0x8A
.op:IiAllowModifier MASK
    IiDisp8EVEX T1S64
    IiOpEn MR
    IiModRM /r
    IiDispatchFormat  xmm.xmm, mem.xmm, ymm.ymm, mem.ymm, zmm.zmm, mem.zmm
.mem.xmm:
.xmm.xmm:
    IiEmitPrefix EVEX.128.66.0F38.W1
    RET
.mem.ymm:
.ymm.ymm:
    IiEmitPrefix EVEX.256.66.0F38.W1
    RET
.mem.zmm:
.zmm.zmm:
    IiEmitPrefix EVEX.512.66.0F38.W1
    RET
  ENDP IizVCOMPRESSPD::
</pre>

<dl id="IizVPCOMPRESSQ">
<dt><a href='#IizVCOMPRESSPD'>&uarr; VPCOMPRESSQ</a></dt>
<dd>Store Sparse Packed Quadword Integer Values into Dense Memory/Register</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPCOMPRESSQ xmm1/m128 {k1}{z}, xmm2 
</th><td>EVEX.128.66.0F38.W1 8B /r 
</td></tr>
<tr><th>VPCOMPRESSQ ymm1/m256 {k1}{z}, ymm2 
</th><td>EVEX.256.66.0F38.W1 8B /r 
</td></tr>
<tr><th>VPCOMPRESSQ zmm1/m512 {k1}{z}, zmm2
</th><td>EVEX.512.66.0F38.W1 8B /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x8B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5270.htm">t5270</a>
</dd>
</dl><pre>
IizVPCOMPRESSQ:: PROC
    IiEmitOpcode 0x8B
    JMP IizVCOMPRESSPD.op:
  ENDP IizVPCOMPRESSQ::
</pre>

<dl id="IizVMPSADBW">
<dt><a href='#IizHandlers'>&uarr; VMPSADBW</a></dt>
<dd>Compute Multiple Packed Sums of Absolute Difference</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMPSADBW xmm1, xmm2, xmm3/m128, imm8
</th><td>VEX.NDS.128.66.0F3A.WIG 42 /r ib
</td></tr>
<tr><th>VMPSADBW ymm1, ymm2, ymm3/m256, imm8
</th><td>VEX.NDS.256.66.0F3A.WIG 42 /r ib
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,arith</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F3A42 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5280.htm">t5280</a>
</dd>
</dl><pre>
IizVMPSADBW:: PROC
    IiEmitOpcode 0x42
    IiOpEn RVM 
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm, ymm.ymm.ymm.imm, ymm.ymm.mem.imm
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    IiEmitPrefix VEX.NDS.128.66.0F3A.WIG
    RET
.ymm.ymm.ymm.imm:
.ymm.ymm.mem.imm:
    IiEmitPrefix VEX.NDS.256.66.0F3A.WIG
    RET
  ENDP IizVMPSADBW::
</pre>

<dl id="IizVDBPSADBW">
<dt><a href='#IizHandlers'>&uarr; VDBPSADBW</a></dt>
<dd>Double Block Packed Sum-Absolute-Differences (SAD) on Unsigned Bytes</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VDBPSADBW xmm1 {k1}{z}, xmm2, xmm3/m128, imm8
</th><td>EVEX.NDS.128.66.0F3A.W0 42 /r ib 
</td></tr>
<tr><th>VDBPSADBW ymm1 {k1}{z}, ymm2, ymm3/m256, imm8
</th><td>EVEX.NDS.256.66.0F3A.W0 42 /r ib 
</td></tr>
<tr><th>VDBPSADBW zmm1 {k1}{z}, zmm2, zmm3/m512, imm8
</th><td>EVEX.NDS.512.66.0F3A.W0 42 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x42</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5280.htm">t5280</a>
</dd>
</dl><pre>
IizVDBPSADBW:: PROC
    IiAllowModifier MASK
    IiEmitOpcode 0x42
    IiDisp8EVEX FVM
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm, ymm.ymm.ymm.imm, ymm.ymm.mem.imm, zmm.zmm.zmm.imm, zmm.zmm.mem.imm
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    IiEmitPrefix EVEX.NDS.128.66.0F3A.W0
    RET
.ymm.ymm.ymm.imm:
.ymm.ymm.mem.imm:
    IiEmitPrefix EVEX.NDS.256.66.0F3A.W0
    RET
.zmm.zmm.zmm.imm:
.zmm.zmm.mem.imm:
    IiEmitPrefix EVEX.NDS.512.66.0F3A.W0
    RET
  ENDP IizVDBPSADBW::
</pre>

<dl id="IizVDPPS">
<dt><a href='#IizHandlers'>&uarr; VDPPS</a></dt>
<dd>Dot Product of Packed Single-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VDPPS xmm1,xmm2, xmm3/m128, imm8
</th><td>VEX.NDS.128.66.0F3A.WIG 40 /r ib
</td></tr>
<tr><th>VDPPS ymm1, ymm2, ymm3/m256, imm8
</th><td>VEX.NDS.256.66.0F3A.WIG 40 /r ib
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wps</dd>
<dt>Opcode</dt>
<dd>0x660F3A40 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5280.htm">t5280</a>
</dd>
</dl><pre>
IizVDPPS:: PROC
    IiEmitOpcode 0x40
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm, ymm.ymm.ymm.imm, ymm.ymm.mem.imm
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    IiEmitPrefix VEX.NDS.128.66.0F3A.WIG
    RET
.ymm.ymm.ymm.imm:
.ymm.ymm.mem.imm:
    IiEmitPrefix VEX.NDS.256.66.0F3A.WIG
    RET
  ENDP IizVDPPS::
</pre>

<dl id="IizVDPPD">
<dt><a href='#IizHandlers'>&uarr; VDPPD</a></dt>
<dd>Dot Product of Packed Double-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VDPPD xmm1,xmm2, xmm3/m128, imm8
</th><td>VEX.NDS.128.66.0F3A.WIG 41 /r ib
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wpd</dd>
<dt>Opcode</dt>
<dd>0x660F3A41 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5280.htm">t5280</a>
</dd>
</dl><pre>
IizVDPPD:: PROC
    IiEmitOpcode 0x41
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiEmitPrefix VEX.NDS.128.66.0F3A.WIG
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    RET
  ENDP IizVDPPD::
</pre>

<dl id="IizVEXPANDPS">
<dt><a href='#IizHandlers'>&uarr; VEXPANDPS</a></dt>
<dd>Load Sparse Packed Single-Precision Floating-Point Values from Dense Memory</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VEXPANDPS xmm1 {k1}{z}, xmm2/m128 
</th><td>EVEX.128.66.0F38.W0 88 /r 
</td></tr>
<tr><th>VEXPANDPS ymm1 {k1}{z}, ymm2/m256 
</th><td>EVEX.256.66.0F38.W0 88 /r 
</td></tr>
<tr><th>VEXPANDPS zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.66.0F38.W0 88 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x88</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5275.htm">t5275</a>
</dd>
</dl><pre>
IizVEXPANDPS:: PROC
    IiEmitOpcode 0x88
.op:IiAllowModifier MASK
    IiDisp8EVEX T1S32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F38.W0
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W0
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W0
    RET
  ENDP IizVEXPANDPS::
</pre>

<dl id="IizVPEXPANDD">
<dt><a href='#IizVEXPANDPS'>&uarr; VPEXPANDD</a></dt>
<dd>Load Sparse Packed Doubleword Integer Values from Dense Memory / Register</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPEXPANDD xmm1 {k1}{z}, xmm2/m128
</th><td>EVEX.128.66.0F38.W0 89 /r
</td></tr>
<tr><th>VPEXPANDD ymm1 {k1}{z}, ymm2/m256
</th><td>EVEX.256.66.0F38.W0 89 /r
</td></tr>
<tr><th>VPEXPANDD zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.66.0F38.W0 89 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x89</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5275.htm">t5275</a>
</dd>
</dl><pre>
IizVPEXPANDD:: PROC
    IiEmitOpcode 0x89
    JMP IizVEXPANDPS.op:
  ENDP IizVPEXPANDD::
</pre>

<dl id="IizVEXPANDPD">
<dt><a href='#IizHandlers'>&uarr; VEXPANDPD</a></dt>
<dd>Load Sparse Packed Double-Precision Floating-Point Values from Dense Memory</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VEXPANDPD xmm1 {k1}{z}, xmm2/m128
</th><td>EVEX.128.66.0F38.W1 88 /r
</td></tr>
<tr><th>VEXPANDPD ymm1 {k1}{z}, ymm2/m256  
</th><td>EVEX.256.66.0F38.W1 88 /r 
</td></tr>
<tr><th>VEXPANDPD zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.66.0F38.W1 88 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x88</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5275.htm">t5275</a>
</dd>
</dl><pre>
IizVEXPANDPD:: PROC
    IiEmitOpcode 0x88
.op:IiAllowModifier MASK
    IiDisp8EVEX T1S64
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F38.W1
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W1
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W1
    RET
  ENDP IizVEXPANDPD::
</pre>

<dl id="IizVPEXPANDQ">
<dt><a href='#IizVEXPANDPD'>&uarr; VPEXPANDQ</a></dt>
<dd>Load Sparse Packed Quadword Integer Values from Dense Memory / Register</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPEXPANDQ xmm1 {k1}{z}, xmm2/m128 
</th><td>EVEX.128.66.0F38.W1 89 /r 
</td></tr>
<tr><th>VPEXPANDQ ymm1 {k1}{z}, ymm2/m256 
</th><td>EVEX.256.66.0F38.W1 89 /r 
</td></tr>
<tr><th>VPEXPANDQ zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.66.0F38.W1 89 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x89</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5275.htm">t5275</a>
</dd>
</dl><pre>
IizVPEXPANDQ:: PROC
    IiEmitOpcode 0x89
    JMP IizVEXPANDPD.op:
  ENDP IizVPEXPANDQ::
</pre>

<dl id="IizVEXTRACTF32X4">
<dt><a href='#IizHandlers'>&uarr; VEXTRACTF32X4</a></dt>
<dd>Extract Packed Floating-Point Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VEXTRACTF32X4 xmm1/m128 {k1}{z}, ymm2, imm8
</th><td>EVEX.256.66.0F3A.W0 19 /r ib 
</td></tr>
<tr><th>VEXTRACTF32X4 xmm1/m128 {k1}{z}, zmm2, imm8
</th><td>EVEX.512.66.0F3A.W0 19 /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x19</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5290.htm">t5290</a>
</dd>
</dl><pre>
IizVEXTRACTF32X4:: PROC
    IiEmitOpcode 0x19
.op:IiAllowModifier MASK
    IiEncoding DATA=DWORD
    IiDisp8EVEX T2F64
    IiOpEn MR
    IiModRM /r
    IiEmitImm Operand3,BYTE
    IiDispatchFormat  xmm.ymm.imm, mem.ymm.imm, xmm.zmm.imm, mem.zmm.imm
.xmm.ymm.imm:
.mem.ymm.imm:
    IiEmitPrefix EVEX.256.66.0F3A.W0
    RET
.xmm.zmm.imm:
.mem.zmm.imm:
    IiEmitPrefix EVEX.512.66.0F3A.W0
    RET
  ENDP IizVEXTRACTF32X4::
</pre>

<dl id="IizVEXTRACTI32X4">
<dt><a href='#IizVEXTRACTF32X4'>&uarr; VEXTRACTI32X4</a></dt>
<dd>Extract  packed Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VEXTRACTI32X4 xmm1/m128 {k1}{z}, ymm2, imm8
</th><td>EVEX.256.66.0F3A.W0 39 /r ib
</td></tr>
<tr><th>VEXTRACTI32X4 xmm1/m128 {k1}{z}, zmm2, imm8</th><td>EVEX.512.66.0F3A.W0 39 /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x39</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5292.htm">t5292</a>
</dd>
</dl><pre>
IizVEXTRACTI32X4:: PROC
    IiEmitOpcode 0x39
    JMP IizVEXTRACTF32X4.op:
  ENDP IizVEXTRACTI32X4::
</pre>

<dl id="IizVEXTRACTF32X8">
<dt><a href='#IizHandlers'>&uarr; VEXTRACTF32X8</a></dt>
<dd>Extract Packed Floating-Point Values Opcode/ Op /  64/32</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VEXTRACTF32X8 ymm1/m256 {k1}{z}, zmm2, imm8
</th><td>EVEX.512.66.0F3A.W0 1B /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x1B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5290.htm">t5290</a>
</dd>
</dl><pre>
IizVEXTRACTF32X8:: PROC
    IiEmitOpcode 0x1B
.op:IiAllowModifier MASK
    IiEncoding DATA=DWORD
    IiDisp8EVEX T4F64
    IiOpEn MR
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiEmitPrefix EVEX.512.66.0F3A.W0
    IiDispatchFormat  ymm.zmm.imm, mem.zmm.imm
.ymm.zmm.imm:
.mem.zmm.imm:
    RET
  ENDP IizVEXTRACTF32X8::
</pre>

<dl id="IizVEXTRACTI32X8">
<dt><a href='#IizVEXTRACTF32X8'>&uarr; VEXTRACTI32X8</a></dt>
<dd>Extract  packed Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VEXTRACTI32X8 ymm1/m256 {k1}{z}, zmm2, imm8
</th><td>EVEX.512.66.0F3A.W0 3B /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x39</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5292.htm">t5292</a>
</dd>
</dl><pre>
IizVEXTRACTI32X8:: PROC
    IiEmitOpcode 0x3B
    JMP IizVEXTRACTF32X8.op:
  ENDP IizVEXTRACTI32X8::
</pre>

<dl id="IizVEXTRACTF64X2">
<dt><a href='#IizHandlers'>&uarr; VEXTRACTF64X2</a></dt>
<dd>Extract Packed Floating-Point Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VEXTRACTF64X2 xmm1/m128 {k1}{z}, ymm2, imm8
</th><td>EVEX.256.66.0F3A.W1 19 /r ib 
</td></tr>
<tr><th>VEXTRACTF64X2 xmm1/m128 {k1}{z}, zmm2, imm8
</th><td>EVEX.512.66.0F3A.W1 19 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x19</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5290.htm">t5290</a>
</dd>
</dl><pre>
IizVEXTRACTF64X2:: PROC
    IiEmitOpcode 0x19
.op:IiAllowModifier MASK
    IiEncoding DATA=QWORD
    IiDisp8EVEX T2F64
    IiOpEn MR
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiDispatchFormat  xmm.ymm.imm, mem.ymm.imm, xmm.zmm.imm, mem.zmm.imm
.xmm.ymm.imm:
.mem.ymm.imm:
    IiEmitPrefix EVEX.256.66.0F3A.W1
    RET
.xmm.zmm.imm:
.mem.zmm.imm:
    IiEmitPrefix EVEX.512.66.0F3A.W1
    RET
  ENDP IizVEXTRACTF64X2::
</pre>

<dl id="IizVEXTRACTI64X2">
<dt><a href='#IizVEXTRACTF64X2'>&uarr; VEXTRACTI64X2</a></dt>
<dd>Extract  packed Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VEXTRACTI64X2 xmm1/m128 {k1}{z}, ymm2, imm8
</th><td>EVEX.256.66.0F3A.W1 39 /r ib
</td></tr>
<tr><th>VEXTRACTI64X2 xmm1/m128 {k1}{z}, zmm2, imm8
</th><td>EVEX.512.66.0F3A.W1 39 /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x39</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5292.htm">t5292</a>
</dd>
</dl><pre>
IizVEXTRACTI64X2:: PROC
    IiEmitOpcode 0x39
    JMP IizVEXTRACTF64X2.op:
  ENDP IizVEXTRACTI64X2::
</pre>

<dl id="IizVEXTRACTF64X4">
<dt><a href='#IizHandlers'>&uarr; VEXTRACTF64X4</a></dt>
<dd>Extract Packed Floating-Point Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VEXTRACTF64X4 ymm1/m256 {k1}{z}, zmm2, imm8
</th><td>EVEX.512.66.0F3A.W1 1B /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x1B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5290.htm">t5290</a>
</dd>
</dl><pre>
IizVEXTRACTF64X4:: PROC
    IiEmitOpcode 0x1B
.op:IiAllowModifier MASK
    IiEncoding DATA=QWORD
    IiDisp8EVEX T4F64
    IiOpEn MR
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiEmitPrefix EVEX.512.66.0F3A.W1
    IiDispatchFormat  ymm.zmm.imm, mem.zmm.imm
.ymm.zmm.imm:
.mem.zmm.imm:
    RET
  ENDP IizVEXTRACTF64X4::
</pre>

<dl id="IizVEXTRACTI64X4">
<dt><a href='#IizVEXTRACTF64X4'>&uarr; VEXTRACTI64X4</a></dt>
<dd>Extract  packed Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VEXTRACTI64X4 ymm1/m256 {k1}{z}, zmm2, imm8
</th><td>EVEX.512.66.0F3A.W1 3B /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x3B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5292.htm">t5292</a>
</dd>
</dl><pre>
IizVEXTRACTI64X4:: PROC
    IiEmitOpcode 0x3B
    JMP IizVEXTRACTF64X4.op:
  ENDP IizVEXTRACTI64X4::
</pre>

<dl id="IizVEXTRACTF128">
<dt><a href='#IizHandlers'>&uarr; VEXTRACTF128</a></dt>
<dd>Extract Packed Floating-Point Values</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VEXTRACTF128:VEXTRACTF32x4:VEXTRACTF64x2:VEXTRACTF32x8:VEXTRACTF64x4.html">VEXTRACTF128</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VEXTRACTF128 xmm1/m128, ymm2, imm8
</th><td>VEX.256.66.0F3A.W0 19 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x19</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5290.htm">t5290</a>
</dd>
</dl><pre>
IizVEXTRACTF128:: PROC
    IiEmitOpcode 0x19
.op:IiEncoding DATA=OWORD
    IiOpEn MR
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiEmitPrefix VEX.256.66.0F3A.W0
    IiDispatchFormat  xmm.ymm.imm, mem.ymm.imm
.xmm.ymm.imm:
.mem.ymm.imm:
    RET
  ENDP IizVEXTRACTF128::
</pre>

<dl id="IizVEXTRACTI128">
<dt><a href='#IizVEXTRACTF128'>&uarr; VEXTRACTI128</a></dt>
<dd>Extract packed Integer Values</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VEXTRACTI128:VEXTRACTI32x4:VEXTRACTI64x2:VEXTRACTI32x8:VEXTRACTI64x4.html">VEXTRACTI128</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VEXTRACTI128 xmm1/m128, ymm2, imm8
</th><td>VEX.256.66.0F3A.W0 39 /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x39</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5292.htm">t5292</a>
</dd>
</dl><pre>
IizVEXTRACTI128:: PROC
    IiEmitOpcode 0x39
    JMP IizVEXTRACTF128.op:
  ENDP IizVEXTRACTI128::
</pre>

<dl id="IizVEXTRACTPS">
<dt><a href='#IizHandlers'>&uarr; VEXTRACTPS</a></dt>
<dd>Extract Packed Single-FP Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VEXTRACTPS reg/m32, xmm1, imm8
</th><td>VEX.128.66.0F3A.WIG 17 /r ib 
</td></tr>
<tr><th>VEXTRACTPS reg/m32, xmm1, imm8
</th><td>EVEX.128.66.0F3A.WIG 17 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdfp,datamov</dd>
<dt>Operands</dt>
<dd><b>Ed</b>,Vdq,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F3A17 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5290.htm">t5290</a>
</dd>
</dl><pre>
IizVEXTRACTPS:: PROC
    IiRequire SSE4.1
    IiEmitOpcode 0x17
    IiDisp8EVEX T1S32
    IiOpEn MR
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiEmitPrefix VEX.128.66.0F3A.WIG, EVEX.128.66.0F3A.WIG
    IiDispatchFormat  r64.xmm.imm, r32.xmm.imm, mem.xmm.imm
.r64.xmm.imm:
.r32.xmm.imm:
.mem.xmm.imm:
    RET
  ENDP IizVEXTRACTPS::
</pre>

<dl id="IizVPEXTRB">
<dt><a href='#IizHandlers'>&uarr; VPEXTRB</a></dt>
<dd>Extract Byte</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPEXTRB reg/m8, xmm2, imm8
</th><td>VEX.128.66.0F3A 14 /r ib 
</td></tr>
<tr><th>VPEXTRB reg/m8, xmm2, imm8
</th><td>EVEX.128.66.0F3A.WIG 14 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,datamov</dd>
<dt>Operands</dt>
<dd><b>Mb</b>,Vdq,Ib | <b>Rdqp</b>,Vdq,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F3A14 /r | 0x660F3A14 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5294.htm">t5294</a>
</dd>
</dl><pre>
IizVPEXTRB:: PROC
    IiRequire SSE4.1
    IiEncoding DATA=BYTE
    IiEmitOpcode 0x14
    IiDisp8EVEX T1S8
    IiOpEn MR
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiEmitPrefix VEX.128.66.0F3A, EVEX.128.66.0F3A.WIG
    IiDispatchFormat  r64.xmm.imm,r32.xmm.imm,r16.xmm.imm,r8.xmm.imm, mem.xmm.imm
.r64.xmm.imm:
.r32.xmm.imm:
.r16.xmm.imm:
.r8.xmm.imm:
.mem.xmm.imm:
    RET
  ENDP IizVPEXTRB::
</pre>

<dl id="IizVPEXTRW">
<dt><a href='#IizHandlers'>&uarr; VPEXTRW</a></dt>
<dd>Extract Word</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPEXTRW reg, xmm1, imm8
</th><td>VEX.128.66.0F C5 /r ib 
</td></tr>
<tr><th>VPEXTRW reg/m16, xmm2, imm8
</th><td>VEX.128.66.0F3A 15 /r ib
</td></tr>
<tr><th>VPEXTRW reg, xmm1, imm8
</th><td>EVEX.128.66.0F.WIG C5 /r ib 
</td></tr>
<tr><th>VPEXTRW reg/m16, xmm2, imm8
</th><td>VEX.128.66.0F3A.WIG 15 /r ib
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,datamov</dd>
<dt>Operands</dt>
<dd><b>Mw</b>,Vdq,Ib | <b>Rdqp</b>,Vdq,Ib | <b>Gdqp</b>,Nq,Ib | <b>Gdqp</b>,Udq,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F3A15 /r | 0x660F3A15 /r | 0x0FC5 /r | 0x660FC5 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5294.htm">t5294</a>
</dd>
</dl><pre>
IizVPEXTRW:: PROC
    IiRequire SSE4.1
    IiAllowModifier CODE
    IiDisp8EVEX T1S16
    IiEmitImm Operand3, BYTE
    IiModRM /r
    IiDispatchFormat  r64.xmm.imm,r32.xmm.imm,r16.xmm.imm,mem.xmm.imm
.mem.xmm.imm:
    IiEncoding CODE=LONG,DATA=WORD
    IiEmitOpcode 0x15
    IiEmitPrefix VEX.128.66.0F3A, EVEX.128.66.0F3A.WIG
    IiOpEn MR
    RET
.r64.xmm.imm:
.r32.xmm.imm:
.r16.xmm.imm:
    IiDispatchCode LONG=.mem.xmm.imm:
    IiEncoding CODE=SHORT,DATA=WORD
    IiEmitOpcode 0xC5
    IiEmitPrefix VEX.128.66.0F, EVEX.128.0F.WIG
    IiOpEn RM
    RET
  ENDP IizVPEXTRW::
</pre>

<dl id="IizVPEXTRD">
<dt><a href='#IizHandlers'>&uarr; VPEXTRD</a></dt>
<dd>Extract Dword/Qword</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPEXTRD r32/m32, xmm2, imm8
</th><td>VEX.128.66.0F3A.W0 16 /r ib 
</td></tr>
<tr><th>VPEXTRD r32/m32, xmm2, imm8
</th><td>EVEX.128.66.0F3A.W0 16 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,datamov</dd>
<dt>Operands</dt>
<dd><b>Ed</b>,Vdq,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F3A16 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5294.htm">t5294</a>
</dd>
</dl><pre>
IizVPEXTRD:: PROC
    IiRequire SSE4.1
    IiEmitOpcode 0x16
    IiEncoding DATA=DWORD
    IiDisp8EVEX T1S32
    IiOpEn MR 
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiEmitPrefix VEX.128.66.0F3A.W0, EVEX.128.66.0F3A.W0
    IiDispatchFormat  r32.xmm.imm,r64.xmm.imm,mem.xmm.imm
.r64.xmm.imm:
.r32.xmm.imm:
.mem.xmm.imm:
    RET
  ENDP IizVPEXTRD::
</pre>

<dl id="IizVPEXTRQ">
<dt><a href='#IizHandlers'>&uarr; VPEXTRQ</a></dt>
<dd>Extract Dword/Qword</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPEXTRQ r64/m64, xmm2, imm8
</th><td>VEX.128.66.0F3A.W1 16 /r ib 
</td></tr>
<tr><th>VPEXTRQ r64/m64, xmm2, imm8
</th><td>EVEX.128.66.0F3A.W1 16 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,datamov</dd>
<dt>Operands</dt>
<dd><b>Eqp</b>,Vdq,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F3A16 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5294.htm">t5294</a>
</dd>
</dl><pre>
IizVPEXTRQ:: PROC
    IiRequire SSE4.1
    IiEncoding DATA=QWORD
    IiEmitOpcode 0x16
    IiDisp8EVEX T1S64
    IiOpEn MR
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiEmitPrefix VEX.128.66.0F3A.W1, EVEX.128.66.0F3A.W1
    IiDispatchFormat  r64.xmm.imm, mem.xmm.imm
.r64.xmm.imm:
.mem.xmm.imm:
    RET
  ENDP IizVPEXTRQ::
</pre>

<dl id="IizVINSERTF32X4">
<dt><a href='#IizHandlers'>&uarr; VINSERTF32X4</a></dt>
<dd>Insert Packed  Floating-Point Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VINSERTF32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8
</th><td>EVEX.NDS.256.66.0F3A.W0 18 /r ib 
</td></tr>
<tr><th>VINSERTF32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8
</th><td>EVEX.NDS.512.66.0F3A.W0 18 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x18</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5296.htm">t5296</a>
</dd>
</dl><pre>
IizVINSERTF32X4:: PROC
    IiEmitOpcode 0x18
.op:IiAllowModifier MASK
    IiEncoding DATA=DWORD
    IiDisp8EVEX T2F64
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiDispatchFormat  ymm.ymm.xmm.imm, ymm.ymm.mem.imm, zmm.zmm.xmm.imm, zmm.zmm.mem.imm
.ymm.ymm.xmm.imm:
.ymm.ymm.mem.imm:
    IiEmitPrefix EVEX.NDS.256.66.0F3A.W0
    RET
.zmm.zmm.xmm.imm:
.zmm.zmm.mem.imm:
    IiEmitPrefix EVEX.NDS.512.66.0F3A.W0
    RET
  ENDP IizVINSERTF32X4::
</pre>

<dl id="IizVINSERTI32X4">
<dt><a href='#IizVINSERTF32X4'>&uarr; VINSERTI32X4</a></dt>
<dd>Insert Packed  Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VINSERTI32X4 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8
</th><td>EVEX.NDS.256.66.0F3A.W0 38 /r ib
</td></tr>
<tr><th>VINSERTI32X4 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8
</th><td>EVEX.NDS.512.66.0F3A.W0 38 /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x38</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5298.htm">t5298</a>
</dd>
</dl><pre>
IizVINSERTI32X4:: PROC
    IiEmitOpcode 0x38
    JMP IizVINSERTF32X4.op:
  ENDP IizVINSERTI32X4::
</pre>

<dl id="IizVINSERTF32X8">
<dt><a href='#IizHandlers'>&uarr; VINSERTF32X8</a></dt>
<dd>Insert Packed  Floating-Point Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VINSERTF32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8
</th><td>EVEX.NDS.512.66.0F3A.W0 1A /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x1A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5296.htm">t5296</a>
</dd>
</dl><pre>
IizVINSERTF32X8:: PROC
    IiEmitOpcode 0x1A
.op:IiAllowModifier MASK
    IiEncoding DATA=DWORD
    IiDisp8EVEX T4F64
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiEmitPrefix EVEX.NDS.512.66.0F3A.W0
    IiDispatchFormat  zmm.zmm.ymm.imm, zmm.zmm.mem.imm
.zmm.zmm.ymm.imm:
.zmm.zmm.mem.imm:
    RET
  ENDP IizVINSERTF32X8::
</pre>

<dl id="IizVINSERTI32X8">
<dt><a href='#IizVINSERTF32X8'>&uarr; VINSERTI32X8</a></dt>
<dd>Insert Packed  Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VINSERTI32X8 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8
</th><td>EVEX.NDS.512.66.0F3A.W0 3A /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x3A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5298.htm">t5298</a>
</dd>
</dl><pre>
IizVINSERTI32X8:: PROC
    IiEmitOpcode 0x3A
    JMP IizVINSERTF32X8.op:
  ENDP IizVINSERTI32X8::
</pre>

<dl id="IizVINSERTF64X2">
<dt><a href='#IizHandlers'>&uarr; VINSERTF64X2</a></dt>
<dd>Insert Packed  Floating-Point Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VINSERTF64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8
</th><td>EVEX.NDS.256.66.0F3A.W1 18 /r ib 
</td></tr>
<tr><th>VINSERTF64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8
</th><td>EVEX.NDS.512.66.0F3A.W1 18 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x18</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5296.htm">t5296</a>
</dd>
</dl><pre>
IizVINSERTF64X2:: PROC
    IiEmitOpcode 0x18
.op:IiAllowModifier MASK
    IiEncoding DATA=QWORD
    IiDisp8EVEX T2F64
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiDispatchFormat  ymm.ymm.xmm.imm, ymm.ymm.mem.imm, zmm.zmm.xmm.imm, zmm.zmm.mem.imm
.ymm.ymm.xmm.imm:
.ymm.ymm.mem.imm:
    IiEmitPrefix EVEX.NDS.256.66.0F3A.W1
    RET
.zmm.zmm.xmm.imm:
.zmm.zmm.mem.imm:
    IiEmitPrefix EVEX.NDS.512.66.0F3A.W1
    RET
  ENDP IizVINSERTF64X2::
</pre>

<dl id="IizVINSERTI64X2">
<dt><a href='#IizVINSERTF64X2'>&uarr; VINSERTI64X2</a></dt>
<dd>Insert Packed  Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VINSERTI64X2 ymm1 {k1}{z}, ymm2, xmm3/m128, imm8
</th><td>EVEX.NDS.256.66.0F3A.W1 38 /r ib
</td></tr>
<tr><th>VINSERTI64X2 zmm1 {k1}{z}, zmm2, xmm3/m128, imm8
</th><td>EVEX.NDS.512.66.0F3A.W1 38 /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x38</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5298.htm">t5298</a>
</dd>
</dl><pre>
IizVINSERTI64X2:: PROC
    IiEmitOpcode 0x38
    JMP IizVINSERTF64X2.op:
  ENDP IizVINSERTI64X2::
</pre>

<dl id="IizVINSERTF64X4">
<dt><a href='#IizHandlers'>&uarr; VINSERTF64X4</a></dt>
<dd>Insert Packed  Floating-Point Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VINSERTF64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8
</th><td>EVEX.NDS.512.66.0F3A.W1 1A /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x1A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5296.htm">t5296</a>
</dd>
</dl><pre>
IizVINSERTF64X4:: PROC
    IiEmitOpcode 0x1A
.op:IiAllowModifier MASK
    IiEncoding DATA=QWORD
    IiDisp8EVEX T4F64
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiEmitPrefix EVEX.NDS.512.66.0F3A.W1
    IiDispatchFormat  zmm.zmm.ymm.imm, zmm.zmm.mem.imm
.zmm.zmm.ymm.imm:
.zmm.zmm.mem.imm:
    RET
  ENDP IizVINSERTF64X4::
</pre>

<dl id="IizVINSERTI64X4">
<dt><a href='#IizVINSERTF64X4'>&uarr; VINSERTI64X4</a></dt>
<dd>Insert Packed  Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VINSERTI64X4 zmm1 {k1}{z}, zmm2, ymm3/m256, imm8
</th><td>EVEX.NDS.512.66.0F3A.W1 3A /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x3A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5298.htm">t5298</a>
</dd>
</dl><pre>
IizVINSERTI64X4:: PROC
    IiEmitOpcode 0x3A
    JMP IizVINSERTF64X4.op:
  ENDP IizVINSERTI64X4::
</pre>

<dl id="IizVINSERTF128">
<dt><a href='#IizHandlers'>&uarr; VINSERTF128</a></dt>
<dd>Insert Packed  Floating-Point Values</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VINSERTF128:VINSERTF32x4:VINSERTF64x2:VINSERTF32x8:VINSERTF64x4.html">VINSERTF128</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VINSERTF128 ymm1, ymm2, xmm3/m128, imm8
</th><td>VEX.NDS.256.66.0F3A.W0 18 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x18</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5296.htm">t5296</a>
</dd>
</dl><pre>
IizVINSERTF128:: PROC
    IiEmitOpcode 0x18
.op:IiEncoding DATA=OWORD
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiEmitPrefix VEX.NDS.256.66.0F3A.W0
    IiDispatchFormat  ymm.ymm.xmm.imm, ymm.ymm.mem.imm
.ymm.ymm.xmm.imm:
.ymm.ymm.mem.imm:
    RET
  ENDP IizVINSERTF128::
</pre>

<dl id="IizVINSERTI128">
<dt><a href='#IizVINSERTF128'>&uarr; VINSERTI128</a></dt>
<dd>Insert Packed  Integer Values</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VINSERTI128:VINSERTI32x4:VINSERTI64x2:VINSERTI32x8:VINSERTI64x4.html">VINSERTI128</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VINSERTI128 ymm1, ymm2, xmm3/m128, imm8
</th><td>VEX.NDS.256.66.0F3A.W0 38 /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x38</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5298.htm">t5298</a>
</dd>
</dl><pre>
IizVINSERTI128:: PROC
    IiEmitOpcode 0x38
    JMP IizVINSERTF128.op:
  ENDP IizVINSERTI128::
</pre>

<dl id="IizVINSERTPS">
<dt><a href='#IizHandlers'>&uarr; VINSERTPS</a></dt>
<dd>Insert Packed Single-FP Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VINSERTPS xmm1, xmm2, xmm3/m32, imm8
</th><td>VEX.NDS.128.66.0F3A.WIG 21 /r ib 
</td></tr>
<tr><th>VINSERTPS xmm1, xmm2, xmm3/m32, imm8
</th><td>EVEX.NDS.128.66.0F3A.W0 21 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdfp,datamov</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Ups,Ib | <b>Vps</b>,Md,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F3A21 /r | 0x660F3A21 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5302.htm">t5302</a>
</dd>
</dl><pre>
IizVINSERTPS:: PROC
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x21
    IiDisp8EVEX T1S32
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiEmitPrefix VEX.NDS.128.66.0F3A.WIG, EVEX.NDS.128.66.0F3A.W0
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    RET
  ENDP IizVINSERTPS::
</pre>

<dl id="IizVPINSRB">
<dt><a href='#IizHandlers'>&uarr; VPINSRB</a></dt>
<dd>Insert Byte</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPINSRB xmm1, xmm2, r32/m8, imm8
</th><td>VEX.NDS.128.66.0F3A 20 /r ib
</td></tr>
<tr><th>VPINSRB xmm1, xmm2, r32/m8, imm8
</th><td>EVEX.NDS.128.66.0F3A.WIG 20 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,datamov</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Mb,Ib | <b>Vdq</b>,Rdqp,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F3A20 /r | 0x660F3A20 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5302.htm">t5302</a>
</dd>
</dl><pre>
IizVPINSRB:: PROC
    IiEncoding DATA=BYTE
    IiEmitOpcode 0x20
    IiDisp8EVEX T1S8
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiEmitPrefix VEX.NDS.128.66.0F3A, EVEX.NDS.128.66.0F3A.WIG
    IiDispatchFormat  xmm.xmm.r32.imm, xmm.xmm.mem.imm
.xmm.xmm.r32.imm:
.xmm.xmm.mem.imm:
    RET
  ENDP IizVPINSRB::
</pre>

<dl id="IizVPINSRW">
<dt><a href='#IizHandlers'>&uarr; VPINSRW</a></dt>
<dd>Insert Word</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPINSRW xmm1, xmm2, r32/m16, imm8
</th><td>VEX.NDS.128.66.0F C4 /r ib 
</td></tr>
<tr><th>VPINSRW xmm1, xmm2, r32/m16, imm8
</th><td>EVEX.NDS.128.66.0F.WIG C4 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdint</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Rdqp,Ib | <b>Pq</b>,Mw,Ib | <b>Vdq</b>,Rdqp,Ib | <b>Vdq</b>,Mw,Ib</dd>
<dt>Opcode</dt>
<dd>0x0FC4 /r | 0x0FC4 /r | 0x660FC4 /r | 0x660FC4 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5302.htm">t5302</a>
</dd>
</dl><pre>
IizVPINSRW:: PROC
    IiEncoding DATA=WORD
    IiEmitOpcode 0xC4
    IiDisp8EVEX T1S16
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiEmitPrefix VEX.NDS.128.66.0F, EVEX.NDS.128.66.0F.WIG
    IiDispatchFormat  xmm.xmm.r32.imm, xmm.xmm.mem.imm
.xmm.xmm.r32.imm:
.xmm.xmm.mem.imm:
    RET
  ENDP IizVPINSRW::
</pre>

<dl id="IizVPINSRD">
<dt><a href='#IizHandlers'>&uarr; VPINSRD</a></dt>
<dd>Insert Dword/Qword</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPINSRD xmm1, xmm2, r32/m32, imm8
</th><td>VEX.NDS.128.66.0F3A.W0 22 /r ib 
</td></tr>
<tr><th>VPINSRD xmm1, xmm2, r32/m32, imm8
</th><td>EVEX.NDS.128.66.0F3A.W0 22 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,datamov</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Ed,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F3A22 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5302.htm">t5302</a>
</dd>
</dl><pre>
IizVPINSRD:: PROC
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x22
    IiDisp8EVEX T1S32
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiEmitPrefix VEX.NDS.128.66.0F3A.W0, EVEX.NDS.128.66.0F3A.W0
    IiDispatchFormat  xmm.xmm.r32.imm, xmm.xmm.mem.imm
.xmm.xmm.r32.imm:
.xmm.xmm.mem.imm:
    RET
  ENDP IizVPINSRD::
</pre>

<dl id="IizVPINSRQ">
<dt><a href='#IizHandlers'>&uarr; VPINSRQ</a></dt>
<dd>Insert Dword/Qword</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPINSRQ xmm1, xmm2, r64/m64, imm8
</th><td>VEX.NDS.128.66.0F3A.W1 22 /r ib 
</td></tr>
<tr><th>VPINSRQ xmm1, xmm2, r64/m64, imm8
</th><td>EVEX.NDS.128.66.0F3A.W1 22 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,datamov</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Eqp,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F3A22 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5302.htm">t5302</a>
</dd>
</dl><pre>
IizVPINSRQ:: PROC
    IiEncoding DATA=QWORD
    IiAbortIfNot64
    IiEmitOpcode 0x22
    IiDisp8EVEX T1S64
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiEmitPrefix VEX.NDS.128.66.0F3A.W1, EVEX.NDS.128.66.0F3A.W1
    IiDispatchFormat  xmm.xmm.r64.imm, xmm.xmm.mem.imm
.xmm.xmm.r64.imm:
.xmm.xmm.mem.imm:
    RET
  ENDP IizVPINSRQ::
</pre>

<dl id="IizVFIXUPIMMSS">
<dt><a href='#IizHandlers'>&uarr; VFIXUPIMMSS</a></dt>
<dd>Fix Up Special Scalar Float32 Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFIXUPIMMSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8
</th><td>EVEX.NDS.LIG.66.0F3A.W0 55 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x55</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5308.htm">t5308</a>
</dd>
</dl><pre>
IizVFIXUPIMMSS:: PROC
    IiAllowModifier MASK
    IiAllowSuppressing Operand=DH, Register=xmm
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x55
    IiDisp8EVEX T1S32
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiEmitPrefix EVEX.NDS.LIG.66.0F3A.W0
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    RET
  ENDP IizVFIXUPIMMSS::
</pre>

<dl id="IizVFIXUPIMMSD">
<dt><a href='#IizHandlers'>&uarr; VFIXUPIMMSD</a></dt>
<dd>Fix Up Special Scalar Float64 Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFIXUPIMMSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8
</th><td>EVEX.NDS.LIG.66.0F3A.W1 55 /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x55</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5308.htm">t5308</a>
</dd>
</dl><pre>
IizVFIXUPIMMSD:: PROC
    IiAllowModifier MASK
    IiAllowSuppressing Operand=DH, Register=xmm
    IiEncoding DATA=QWORD
    IiEmitOpcode 0x55
    IiDisp8EVEX T1S64
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiEmitPrefix EVEX.NDS.LIG.66.0F3A.W1    
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    RET
  ENDP IizVFIXUPIMMSD::
</pre>

<dl id="IizVFIXUPIMMPS">
<dt><a href='#IizHandlers'>&uarr; VFIXUPIMMPS</a></dt>
<dd>Fix Up Special Packed Float32 Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFIXUPIMMPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst, imm8
</th><td>EVEX.NDS.128.66.0F3A.W0 54 /r 
</td></tr>
<tr><th>VFIXUPIMMPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst, imm8
</th><td>EVEX.NDS.256.66.0F3A.W0 54 /r 
</td></tr>
<tr><th>VFIXUPIMMPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{sae}, imm8
</th><td>EVEX.NDS.512.66.0F3A.W0 54 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x54</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5308.htm">t5308</a>
</dd>
</dl><pre>
IizVFIXUPIMMPS:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD, Operand=DH
    IiAllowSuppressing Operand=DH
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x54
    IiDisp8EVEX FV32
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm, ymm.ymm.ymm.imm, ymm.ymm.mem.imm, zmm.zmm.zmm.imm, zmm.zmm.mem.imm
.xmm.xmm.mem.imm:
.xmm.xmm.xmm.imm:
    IiEmitPrefix EVEX.NDS.128.66.0F3A.W0
    RET
.ymm.ymm.mem.imm:
.ymm.ymm.ymm.imm:
    IiEmitPrefix EVEX.NDS.256.66.0F3A.W0
    RET
.zmm.zmm.mem.imm:
.zmm.zmm.zmm.imm:
    IiEmitPrefix EVEX.NDS.512.66.0F3A.W0
    RET
  ENDP IizVFIXUPIMMPS::
</pre>

<dl id="IizVFIXUPIMMPD">
<dt><a href='#IizHandlers'>&uarr; VFIXUPIMMPD</a></dt>
<dd>Fix Up Special Packed Float64 Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFIXUPIMMPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst, imm8
</th><td>EVEX.NDS.128.66.0F3A.W1 54 /r ib 
</td></tr>
<tr><th>VFIXUPIMMPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst, imm8
</th><td>EVEX.NDS.256.66.0F3A.W1 54 /r ib 
</td></tr>
<tr><th>VFIXUPIMMPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst{sae}, imm8
</th><td>EVEX.NDS.512.66.0F3A.W1 54 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x54</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5308.htm">t5308</a>
</dd>
</dl><pre>
IizVFIXUPIMMPD:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD, Operand=DH
    IiAllowSuppressing Operand=DH
    IiEncoding DATA=QWORD
    IiEmitOpcode 0x54
    IiDisp8EVEX FV64
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm, ymm.ymm.ymm.imm, ymm.ymm.mem.imm, zmm.zmm.zmm.imm, zmm.zmm.mem.imm
.xmm.xmm.mem.imm:
.xmm.xmm.xmm.imm:
    IiEmitPrefix EVEX.NDS.128.66.0F3A.W1
    RET
.ymm.ymm.mem.imm:
.ymm.ymm.ymm.imm:
    IiEmitPrefix EVEX.NDS.256.66.0F3A.W1
    RET
.zmm.zmm.mem.imm:
.zmm.zmm.zmm.imm:
    IiEmitPrefix EVEX.NDS.512.66.0F3A.W1
    RET
  ENDP IizVFIXUPIMMPD::
</pre>

<dl id="IizVFPCLASSSS">
<dt><a href="#IizHandlers">&uarr; VFPCLASSSS</a></dt>
<dd>Tests Types Of a Scalar Float32 Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFPCLASSSS k2 {k1}, xmm2/m32, imm8
</th><td>EVEX.LIG.66.0F3A.W0 67 /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x67</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5430.htm">t5430</a>
</dd>
</dl><pre>
IizVFPCLASSSS:: PROC
    IiAllowMaskMerging
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x67
    IiDisp8EVEX T1S32
    IiOpEn RM
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiEmitPrefix EVEX.LIG.66.0F3A.W0
    IiDispatchFormat  krg.xmm.imm, krg.mem.imm
.krg.xmm.imm:
.krg.mem.imm:
    RET
  ENDP IizVFPCLASSSS::
</pre>

<dl id="IizVFPCLASSSD">
<dt><a href="#IizHandlers">&uarr; VFPCLASSSD</a></dt>
<dd>Tests Types Of a Scalar Float64 Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFPCLASSSD k2 {k1}, xmm2/m64, imm8
</th><td>EVEX.LIG.66.0F3A.W1 67 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x67</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5430.htm">t5430</a>
</dd>
</dl><pre>
IizVFPCLASSSD:: PROC
    IiAllowMaskMerging
    IiEncoding DATA=QWORD
    IiEmitOpcode 0x67
    IiDisp8EVEX T1S64
    IiOpEn RM
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiEmitPrefix EVEX.LIG.66.0F3A.W1
    IiDispatchFormat  krg.xmm.imm, krg.mem.imm
.krg.xmm.imm:
.krg.mem.imm:
    RET
  ENDP IizVFPCLASSSD::
</pre>

<dl id="IizVFPCLASSPS">
<dt><a href="#IizHandlers">&uarr; VFPCLASSPS</a></dt>
<dd>Tests Types Of a Packed Float32 Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFPCLASSPS k2 {k1}, xmm2/m128/m32bcst, imm8
</th><td>EVEX.128.66.0F3A.W0 66 /r ib 
</td></tr>
<tr><th>VFPCLASSPS k2 {k1}, ymm2/m256/m32bcst, imm8
</th><td>EVEX.256.66.0F3A.W0 66 /r ib 
</td></tr>
<tr><th>VFPCLASSPS k2 {k1}, zmm2/m512/m32bcst, imm8
</th><td>EVEX.512.66.0F3A.W0 66 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x66</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5430.htm">t5430</a>
</dd>
</dl><pre>
IizVFPCLASSPS:: PROC
    IiAllowMaskMerging
    IiAllowBroadcasting DWORD, Operand=DH
    IiEmitOpcode 0x66
    IiDisp8EVEX FV32
    IiOpEn RM
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiDataSize Operand2, StreamingSIMD=ON
    IiDispatchFormat  krg.xmm.imm, krg.ymm.imm, krg.zmm.imm, \
    krg.m128.imm, krg.m256.imm, krg.m512.imm, krg.mem.imm
.krg.m128.imm:
.krg.xmm.imm:
    IiEmitPrefix EVEX.128.66.0F3A.W0
    RET
.krg.m256.imm:
.krg.ymm.imm:
    IiEmitPrefix EVEX.256.66.0F3A.W0
    RET
.krg.mem.imm:    
.krg.m512.imm:
.krg.zmm.imm:
    IiEmitPrefix EVEX.512.66.0F3A.W0
    RET
  ENDP IizVFPCLASSPS::
</pre>

<dl id="IizVFPCLASSPD">
<dt><a href="#IizHandlers">&uarr; VFPCLASSPD</a></dt>
<dd>Tests Types Of a Packed Float64 Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFPCLASSPD k2 {k1}, xmm2/m128/m64bcst, imm8
</th><td>EVEX.128.66.0F3A.W1 66 /r ib 
</td></tr>
<tr><th>VFPCLASSPD k2 {k1}, ymm2/m256/m64bcst, imm8
</th><td>EVEX.256.66.0F3A.W1 66 /r ib 
</td></tr>
<tr><th>VFPCLASSPD k2 {k1}, zmm2/m512/m64bcst, imm8
</th><td>EVEX.512.66.0F3A.W1 66 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x66</dd>
</dl><pre>
IizVFPCLASSPD:: PROC
    IiAllowMaskMerging
    IiAllowBroadcasting QWORD, Operand=DH
    IiEmitOpcode 0x66
    IiOpEn RM
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiDisp8EVEX FV64
    IiDataSize Operand2, StreamingSIMD=ON
    IiDispatchFormat  krg.xmm.imm, krg.ymm.imm, krg.zmm.imm, \
    krg.m128.imm, krg.m256.imm, krg.m512.imm, krg.mem.imm
.krg.m128.imm:
.krg.xmm.imm:
    IiEmitPrefix EVEX.128.66.0F3A.W1
    RET
.krg.m256.imm:
.krg.ymm.imm:
    IiEmitPrefix EVEX.256.66.0F3A.W1
    RET
.krg.mem.imm:    
.krg.m512.imm:
.krg.zmm.imm:
    IiEmitPrefix EVEX.512.66.0F3A.W1
    RET
  ENDP IizVFPCLASSPD::
</pre>

<dl id="IizVPGATHERDD">
<dt><a href="#IizHandlers">&uarr; VPGATHERDD</a></dt>
<dd>Gather Packed Dword with Signed Dword Indices</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VPGATHERDD:VPGATHERQD.html">VPGATHERDD</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPGATHERDD xmm1, vm32x, xmm2
</th><td>VEX.DDS.128.66.0F38.W0 90 /r /vsib
</td></tr>
<tr><th>VPGATHERDD ymm1, vm32y, ymm2
</th><td>VEX.DDS.256.66.0F38.W0 90 /r /vsib 
</td></tr>
<tr><th>VPGATHERDD xmm1 {k1}, vm32x 
</th><td>EVEX.128.66.0F38.W0 90 /r /vsib 
</td></tr>
<tr><th>VPGATHERDD ymm1 {k1}, vm32y 
</th><td>EVEX.256.66.0F38.W0 90 /r /vsib 
</td></tr>
<tr><th>VPGATHERDD zmm1 {k1}, vm32z
</th><td>EVEX.512.66.0F38.W0 90 /r /vsib 
</td></tr>
<tr><th>VPGATHERDD zmm1 {k1}, vm32z
</th><td>MVEX.512.66.0F38.W0 90 /r /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x90</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5440.htm">t5440</a>
</dd>
</dl><pre>
IizVPGATHERDD:: PROC          
    IiAllowMaskMerging
    IiEmitOpcode 0x90
    IiDisp8EVEX T1S32
    IiDispatchFormat  xmm.mem.xmm, ymm.mem.ymm, xmm.mem, ymm.mem, zmm.mem
.xmm.mem.xmm:
    IiEmitPrefix VEX.DDS.128.66.0F38.W0
    IiVSIB vm32x
    IiOpEn RMV
    IiModRM /r
    RET
.ymm.mem.ymm:
    IiEmitPrefix VEX.DDS.256.66.0F38.W0
    IiVSIB vm32y
    IiOpEn RMV
    IiModRM /r
    RET
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F38.W0
    IiVSIB vm32x
    IiOpEn RM
    IiModRM /r
    RET
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W0
    IiVSIB vm32y
    IiOpEn RM
    IiModRM /r
    RET
.zmm.mem:
    IiDisp8MVEX Di32
    IiEmitPrefix EVEX.512.66.0F38.W0, MVEX.512.66.0F38.W0
    IiVSIB vm32z
    IiOpEn RM
    IiModRM /r
    RET
  ENDP IizVPGATHERDD::
</pre>

<dl id="IizVPGATHERQD">
<dt><a href="#IizHandlers">&uarr; VPGATHERQD</a></dt>
<dd>Gather Packed Dword with Signed Qword Indices</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VPGATHERDD:VPGATHERQD.html">VPGATHERQD</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPGATHERQD xmm1, vm64x, xmm2
</th><td>VEX.DDS.128.66.0F38.W0 91 /r /vsib
</td></tr>
<tr><th>VPGATHERQD xmm1, vm64y, xmm2
</th><td>VEX.DDS.256.66.0F38.W0 91 /r /vsib
</td></tr>
<tr><th>VPGATHERQD xmm1 {k1}, vm64x
</th><td>EVEX.128.66.0F38.W0 91 /r /vsib
</td></tr>
<tr><th>VPGATHERQD xmm1 {k1}, vm64y 
</th><td>EVEX.256.66.0F38.W0 91 /r /vsib 
</td></tr>
<tr><th>VPGATHERQD ymm1 {k1}, vm64z
</th><td>EVEX.512.66.0F38.W0 91 /r /vsib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x91</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5440.htm">t5440</a>
</dd>
</dl><pre>
IizVPGATHERQD:: PROC
    IiAllowMaskMerging
    IiEmitOpcode 0x91
    IiDisp8EVEX T1S32
    IiDispatchFormat  xmm.mem.xmm, xmm.mem, ymm.mem
.xmm.m256.xmm:
    IiEmitPrefix VEX.DDS.256.66.0F38.W0
    IiVSIB vm64y
    IiOpEn RMV
    IiModRM /r
    RET    
.xmm.mem.xmm:
    JSt [EDI+II.Ppx],iiPpxVSIB2, .xmm.m256.xmm: 
    IiEmitPrefix VEX.DDS.128.66.0F38.W0
    IiVSIB vm64x
    IiOpEn RMV
    IiModRM /r
    RET
.xmm.m256:    
    IiEmitPrefix EVEX.256.66.0F38.W0
    IiVSIB vm64y
    IiOpEn RM
    IiModRM /r
    RET
.xmm.mem:
    JSt [EDI+II.Ppx],iiPpxVSIB2, .xmm.m256:
    IiEmitPrefix EVEX.128.66.0F38.W0
    IiVSIB vm64x
    IiOpEn RM
    IiModRM /r
    RET
.ymm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W0
    IiVSIB vm64z
    IiOpEn RM
    IiModRM /r
    RET
  ENDP IizVPGATHERQD::
</pre>

<dl id="IizVPGATHERDQ">
<dt><a href="#IizHandlers">&uarr; VPGATHERDQ</a></dt>
<dd>Gather Packed Qword with Signed Dword Indices</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VPGATHERDQ:VPGATHERQQ.html">VPGATHERDQ</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPGATHERDQ xmm1, vm32x, xmm2
</th><td>VEX.DDS.128.66.0F38.W1 90 /r /vsib
</td></tr>
<tr><th>VPGATHERDQ ymm1, vm32x, ymm2
</th><td>VEX.DDS.256.66.0F38.W1 90 /r /vsib
</td></tr>
<tr><th>VPGATHERDQ xmm1 {k1}, vm32x 
</th><td>EVEX.128.66.0F38.W1 90 /r /vsib 
</td></tr>
<tr><th>VPGATHERDQ ymm1 {k1}, vm32x 
</th><td>EVEX.256.66.0F38.W1 90 /r /vsib 
</td></tr>
<tr><th>VPGATHERDQ zmm1 {k1}, vm32y
</th><td>EVEX.512.66.0F38.W1 90 /r /vsib 
</td></tr>
<tr><th>VPGATHERDQ zmm1 {k1}, vm32z
</th><td>MVEX.512.66.0F38.W1 90 /r /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x90</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5440.htm">t5440</a>
</dd>
</dl><pre>
IizVPGATHERDQ:: PROC
    IiAllowMaskMerging
    IiEmitOpcode 0x90
    IiDisp8EVEX T1S64
    IiDispatchFormat  xmm.mem.xmm, ymm.mem.ymm, xmm.mem, ymm.mem, zmm.mem
.xmm.mem.xmm:
    IiEmitPrefix VEX.DDS.128.66.0F38.W1
    IiVSIB vm32x
    IiOpEn RMV
    IiModRM /r
    RET
.ymm.mem.ymm:
    IiEmitPrefix VEX.DDS.256.66.0F38.W1
    IiVSIB vm32x
    IiOpEn RMV
    IiModRM /r
    RET
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F38.W1
    IiVSIB vm32x
    IiOpEn RM
    IiModRM /r
    RET
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W1
    IiVSIB vm32x
    IiOpEn RM
    IiModRM /r
    RET
.zmm.m512:
    IiDisp8MVEX Sn64
    IiEmitPrefix MVEX.512.66.0F38.W1
    IiVSIB vm32z
    IiOpEn RM
    IiModRM /r
    RET
.zmm.mem:
    JSt [EDI+II.Ppx],iiPpxVSIB1, .zmm.m512:
    IiEmitPrefix EVEX.512.66.0F38.W1
    IiVSIB vm32y
    IiOpEn RM
    IiModRM /r
    RET    
  ENDP IizVPGATHERDQ::
</pre>

<dl id="IizVPGATHERQQ">
<dt><a href="#IizHandlers">&uarr; VPGATHERQQ</a></dt>
<dd>Gather Packed Qword with Signed Qword Indices</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VPGATHERDQ:VPGATHERQQ.html">VPGATHERQQ</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPGATHERQQ xmm1, vm64x, xmm2
</th><td>VEX.DDS.128.66.0F38.W1 91 /r /vsib
</td></tr>
<tr><th>VPGATHERQQ ymm1, vm64y, ymm2
</th><td>VEX.DDS.256.66.0F38.W1 91 /r /vsib
</td></tr>
<tr><th>VPGATHERQQ xmm1 {k1}, vm64x 
</th><td>EVEX.128.66.0F38.W1 91 /r /vsib 
</td></tr>
<tr><th>VPGATHERQQ ymm1 {k1}, vm64y 
</th><td>EVEX.256.66.0F38.W1 91 /r /vsib 
</td></tr>
<tr><th>VPGATHERQQ zmm1 {k1}, vm64z
</th><td>EVEX.512.66.0F38.W1 91 /r /vsib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x91</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5440.htm">t5440</a>
</dd>
</dl><pre>
IizVPGATHERQQ:: PROC
    IiAllowMaskMerging
    IiEmitOpcode 0x91
    IiDisp8EVEX T1S64
    IiDispatchFormat  xmm.mem.xmm, ymm.mem.ymm, xmm.mem, ymm.mem, zmm.mem
.xmm.mem.xmm:
    IiEmitPrefix VEX.DDS.128.66.0F38.W1
    IiVSIB vm64x
    IiOpEn RMV
    IiModRM /r
    RET
.ymm.mem.ymm:
    IiEmitPrefix VEX.DDS.256.66.0F38.W1
    IiVSIB vm64y
    IiOpEn RMV
    IiModRM /r
    RET
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F38.W1
    IiVSIB vm64x
    IiOpEn RM
    IiModRM /r
    RET
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W1
    IiVSIB vm64y
    IiOpEn RM
    IiModRM /r
    RET
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W1
    IiVSIB vm64z
    IiOpEn RM
    IiModRM /r
    RET
  ENDP IizVPGATHERQQ::
</pre>

<dl id="IizVGATHERDPS">
<dt><a href="#IizHandlers">&uarr; VGATHERDPS</a></dt>
<dd>Gather Packed Single with Signed Dword Indices</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VGATHERDPS:VGATHERQPS.html">VGATHERDPS</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERDPS xmm1, vm32x, xmm2
</th><td>VEX.DDS.128.66.0F38.W0 92 /r /vsib
</td></tr>
<tr><th>VGATHERDPS ymm1, vm32y, ymm2
</th><td>VEX.DDS.256.66.0F38.W0 92 /r /vsib
</td></tr>
<tr><th>VGATHERDPS xmm1 {k1}, vm32x
</th><td>EVEX.128.66.0F38.W0 92 /r /vsib 
</td></tr>
<tr><th>VGATHERDPS ymm1 {k1}, vm32y
</th><td>EVEX.256.66.0F38.W0 92 /r /vsib 
</td></tr>
<tr><th>VGATHERDPS zmm1 {k1}, vm32z
</th><td>EVEX.512.66.0F38.W0 92 /r /vsib 
</td></tr>
<tr><th>VGATHERDPS zmm1 {k1}, vm32z
</th><td>MVEX.512.66.0F38.W0 92 /r /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x92</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5442.htm">t5442</a>
</dd>
</dl><pre>
IizVGATHERDPS:: PROC
    IiAllowMaskMerging
    IiEmitOpcode 0x92
    IiDisp8EVEX T1S32
    IiDispatchFormat  xmm.mem.xmm, ymm.mem.ymm, xmm.mem, ymm.mem, zmm.mem
.xmm.mem.xmm:
    IiEmitPrefix VEX.DDS.128.66.0F38.W0
    IiVSIB vm32x
    IiOpEn RMV
    IiModRM /r
    RET
.ymm.mem.ymm:
    IiEmitPrefix VEX.DDS.256.66.0F38.W0
    IiVSIB vm32y
    IiOpEn RMV
    IiModRM /r
    RET
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F38.W0
    IiVSIB vm32x
    IiOpEn RM
    IiModRM /r
    RET
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W0
    IiVSIB vm32y
    IiOpEn RM
    IiModRM /r
    RET
.zmm.mem:
    IiDisp8MVEX Df32
    IiEmitPrefix EVEX.512.66.0F38.W0, MVEX.512.66.0F38.W0
    IiVSIB vm32z
    IiOpEn RM
    IiModRM /r
    RET
  ENDP IizVGATHERDPS::
</pre>

<dl id="IizVGATHERDPD">
<dt><a href="#IizHandlers">&uarr; VGATHERDPD</a></dt>
<dd>Gather Packed Double with Signed Dword Indices</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VGATHERDPD:VGATHERQPD.html">VGATHERDPD</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERDPD xmm1, vm32x, xmm2
</th><td>VEX.DDS.128.66.0F38.W1 92 /r /vsib
</td></tr>
<tr><th>VGATHERDPD ymm1, vm32x, ymm2
</th><td>VEX.DDS.256.66.0F38.W1 92 /r /vsib
</td></tr>
<tr><th>VGATHERDPD xmm1 {k1}, vm32x
</th><td>EVEX.128.66.0F38.W1 92 /r /vsib 
</td></tr>
<tr><th>VGATHERDPD ymm1 {k1}, vm32x
</th><td>EVEX.256.66.0F38.W1 92 /r /vsib 
</td></tr>
<tr><th>VGATHERDPD zmm1 {k1}, vm32y
</th><td>EVEX.512.66.0F38.W1 92 /r /vsib 
</td></tr>
<tr><th>VGATHERDPD zmm1 {k1}, vm32z
</th><td>MVEX.512.66.0F38.W1 92 /r /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0c92</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5442.htm">t5442</a>
</dd>
</dl><pre>
IizVGATHERDPD:: PROC
    IiAllowMaskMerging
    IiEmitOpcode 0x92
    IiDisp8EVEX T1S64
    IiDispatchFormat  xmm.mem.xmm, ymm.mem.ymm, xmm.mem, ymm.mem, zmm.mem
.xmm.mem.xmm:
    IiEmitPrefix VEX.DDS.128.66.0F38.W1
    IiVSIB vm32x
    IiOpEn RMV
    IiModRM /r
    RET
.ymm.mem.ymm:
    IiEmitPrefix VEX.DDS.256.66.0F38.W1
    IiVSIB vm32x
    IiOpEn RMV
    IiModRM /r
    RET
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F38.W1
    IiVSIB vm32x
    IiOpEn RM
    IiModRM /r
    RET
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W1
    IiVSIB vm32x
    IiOpEn RM
    IiModRM /r
    RET
.zmm.m512:
    IiDisp8MVEX Sn64
    IiEmitPrefix MVEX.512.66.0F38.W1
    IiVSIB vm32z
    IiOpEn RM
    IiModRM /r
    RET
.zmm.mem:
    JSt [EDI+II.Ppx],iiPpxVSIB1, .zmm.m512:
    IiEmitPrefix EVEX.512.66.0F38.W1
    IiOpEn RM
    IiVSIB vm32y
    IiModRM /r
    RET
  ENDP IizVGATHERDPD::
</pre>

<dl id="IizVGATHERQPS">
<dt><a href="#IizHandlers">&uarr; VGATHERQPS</a></dt>
<dd>Gather Packed Single with Signed Qword Indices</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VGATHERDPS:VGATHERQPS.html">VGATHERQPS</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERQPS xmm1, vm64x, xmm2
</th><td>VEX.DDS.128.66.0F38.W0 93 /r /vsib
</td></tr>
<tr><th>VGATHERQPS xmm1, vm64y, xmm2
</th><td>VEX.DDS.256.66.0F38.W0 93 /r /vsib
</td></tr>
<tr><th>VGATHERQPS xmm1 {k1}, vm64x 
</th><td>EVEX.128.66.0F38.W0 93 /r /vsib 
</td></tr>
<tr><th>VGATHERQPS xmm1 {k1}, vm64y 
</th><td>EVEX.256.66.0F38.W0 93 /r /vsib 
</td></tr>
<tr><th>VGATHERQPS ymm1 {k1}, vm64z
</th><td>EVEX.512.66.0F38.W0 93 /r /vsib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x93</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5442.htm">t5442</a>
</dd>
</dl><pre>
IizVGATHERQPS:: PROC
    IiAllowMaskMerging 
    IiEmitOpcode 0x93
    IiDisp8EVEX T1S32
    IiDispatchFormat  xmm.mem.xmm, xmm.mem, ymm.mem
.xmm.m256.xmm:
    IiEmitPrefix VEX.DDS.256.66.0F38.W0
    IiVSIB vm64y
    IiOpEn RMV
    IiModRM /r
    RET
.xmm.mem.xmm:
    JSt [EDI+II.Ppx],iiPpxVSIB2, .xmm.m256.xmm:
    IiEmitPrefix VEX.DDS.128.66.0F38.W0
    IiVSIB vm64x
    IiOpEn RMV
    IiModRM /r
    RET
.xmm.m256:
    IiEmitPrefix EVEX.256.66.0F38.W0
    IiVSIB vm64y
    IiOpEn RM
    IiModRM /r
    RET
.xmm.mem:
    JSt [EDI+II.Ppx],iiPpxVSIB2, .xmm.m256:
    IiEmitPrefix EVEX.128.66.0F38.W0
    IiVSIB vm64x
    IiOpEn RM
    IiModRM /r
    RET
.ymm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W0
    IiVSIB vm64z
    IiOpEn RM
    IiModRM /r
    RET
  ENDP IizVGATHERQPS::
</pre>

<dl id="IizVGATHERQPD">
<dt><a href="#IizHandlers">&uarr; VGATHERQPD</a></dt>
<dd>Gather Packed Double with Signed Qword Indices</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VGATHERDPD:VGATHERQPD.html">VGATHERQPD</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERQPD xmm1, vm64x, xmm2
</th><td>VEX.DDS.128.66.0F38.W1 93 /r /vsib
</td></tr>
<tr><th>VGATHERQPD ymm1, vm64y, ymm2
</th><td>VEX.DDS.256.66.0F38.W1 93 /r /vsib
</td></tr>
<tr><th>VGATHERQPD xmm1 {k1}, vm64x
</th><td>EVEX.128.66.0F38.W1 93 /r /vsib 
</td></tr>
<tr><th>VGATHERQPD ymm1 {k1}, vm64y
</th><td>EVEX.256.66.0F38.W1 93 /r /vsib 
</td></tr>
<tr><th>VGATHERQPD zmm1 {k1}, vm64z
</th><td>EVEX.512.66.0F38.W1 93 /r /vsib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x93</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5442.htm">t5442</a>
</dd>
</dl><pre>
IizVGATHERQPD:: PROC
    IiAllowMaskMerging
    IiEmitOpcode 0x93
    IiDisp8EVEX T1S64
    IiDispatchFormat  xmm.mem.xmm, ymm.mem.ymm, xmm.mem, ymm.mem, zmm.mem
.xmm.mem.xmm:
    IiEmitPrefix VEX.DDS.128.66.0F38.W1
    IiVSIB vm64x
    IiOpEn RMV
    IiModRM /r
    RET
.ymm.mem.ymm:
    IiEmitPrefix VEX.DDS.256.66.0F38.W1
    IiVSIB vm64y
    IiOpEn RMV
    IiModRM /r
    RET
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F38.W1
    IiVSIB vm64x
    IiOpEn RM
    IiModRM /r
    RET
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W1
    IiVSIB vm64y
    IiOpEn RM
    IiModRM /r
    RET
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W1
    IiVSIB vm64z
    IiOpEn RM
    IiModRM /r
    RET
  ENDP IizVGATHERQPD::
</pre>

<dl id="IizVGATHERPF0DPS">
<dt><a href="#IizHandlers">&uarr; VGATHERPF0DPS</a></dt>
<dd>Sparse Prefetch  Packed SP Data Values with Signed Dword Indices Using T0 Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERPF0DPS vm32z {k1}
</th><td>EVEX.512.66.0F38.W0 C6 /1 /vsib  
</td></tr>
<tr><th>VGATHERPF0DPS vm32z {k1}
</th><td>MVEX.512.66.0F38.W0 C6 /1 /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5444.htm">t5444</a>
</dd>
</dl><pre>
IizVGATHERPF0DPS:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC6
     IiDisp8EVEX T1S32
     IiDisp8MVEX Df32
     IiOpEn M
     IiVSIB vm32z
     IiModRM /1
     IiEmitPrefix EVEX.512.66.0F38.W0, MVEX.512.66.0F38.W0
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVGATHERPF0DPS::
</pre>

<dl id="IizVGATHERPF0HINTDPS">
<dt><a href="#IizHandlers">&uarr; VGATHERPF0HINTDPS</a></dt>
<dd>Sparse Prefetch Packed SP Data Values with Signed Dword Indices Using T0 Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERPF0HINTDPS vm32z {k1}
</th><td>MVEX.512.66.0F38.W0 C6 /0 /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5444.htm">t5444</a>
</dd>
</dl><pre>
IizVGATHERPF0HINTDPS:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC6
     IiDisp8MVEX Df32
     IiOpEn M
     IiVSIB vm32z
     IiModRM /0
     IiEmitPrefix MVEX.512.66.0F38.W0
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVGATHERPF0HINTDPS::
</pre>

<dl id="IizVGATHERPF0QPS">
<dt><a href="#IizHandlers">&uarr; VGATHERPF0QPS</a></dt>
<dd>Sparse Prefetch Packed SP Data Values with Signed Qword Indices Using T0 Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERPF0QPS vm64z {k1}
</th><td>EVEX.512.66.0F38.W0 C7 /1 /vsib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC7</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5444.htm">t5444</a>
</dd>
</dl><pre>
IizVGATHERPF0QPS:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC7
     IiDisp8EVEX T1S32
     IiOpEn M
     IiVSIB vm64z
     IiModRM /1
     IiEmitPrefix EVEX.512.66.0F38.W0
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVGATHERPF0QPS::
</pre>

<dl id="IizVGATHERPF0DPD">
<dt><a href="#IizHandlers">&uarr; VGATHERPF0DPD</a></dt>
<dd>Sparse Prefetch Packed DP Data Values with Signed Dword Indices Using T0 Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERPF0DPD vm32y {k1}
</th><td>EVEX.512.66.0F38.W1 C6 /1 /vsib  
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5444.htm">t5444</a>
</dd>
</dl><pre>
IizVGATHERPF0DPD:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC6
     IiDisp8EVEX T1S64
     IiOpEn M
     IiVSIB vm32y
     IiModRM /1
     IiEmitPrefix EVEX.512.66.0F38.W1
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVGATHERPF0DPD::
</pre>

<dl id="IizVGATHERPF0HINTDPD">
<dt><a href="#IizHandlers">&uarr; VGATHERPF0HINTDPD</a></dt>
<dd>Sparse Prefetch Packed DP Data Values with Signed Dword Indices Using T0 Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERPF0HINTDPD vm32z {k1}
</th><td>MVEX.512.66.0F38.W1 C6 /0 /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5444.htm">t5444</a>
</dd>
</dl><pre>
IizVGATHERPF0HINTDPD:: PROC
     IiAllowMaskMerging
     IiDisp8MVEX Sn64
     IiEmitOpcode 0xC6
     IiOpEn M
     IiVSIB vm32z
     IiModRM /0
     IiEmitPrefix MVEX.512.66.0F38.W1
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVGATHERPF0HINTDPD::
</pre>

<dl id="IizVGATHERPF0QPD">
<dt><a href="#IizHandlers">&uarr; VGATHERPF0QPD</a></dt>
<dd>Sparse Prefetch Packed DP Data Values with Signed Qword Indices Using T0 Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERPF0QPD vm64z {k1}
</th><td>EVEX.512.66.0F38.W1 C7 /1 /vsib  
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC7</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5444.htm">t5444</a>
</dd>
</dl><pre>
IizVGATHERPF0QPD:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC7
     IiDisp8EVEX T1S64
     IiOpEn M
     IiVSIB vm64z
     IiModRM /1
     IiEmitPrefix EVEX.512.66.0F38.W1
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVGATHERPF0QPD::
</pre>

<dl id="IizVGATHERPF1DPS">
<dt><a href="#IizHandlers">&uarr; VGATHERPF1DPS</a></dt>
<dd>Sparse Prefetch  Packed SP Data Values with Signed Dword Indices Using T1 Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERPF1DPS vm32z {k1}
</th><td>EVEX.512.66.0F38.W0 C6 /2 /vsib  
</td></tr>
<tr><th>VGATHERPF1DPS vm32z {k1}
</th><td>MVEX.512.66.0F38.W0 C6 /2 /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5446.htm">t5446</a>
</dd>
</dl><pre>
IizVGATHERPF1DPS:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC6
     IiDisp8EVEX T1S32
     IiDisp8MVEX Df32
     IiOpEn M
     IiVSIB vm32z
     IiModRM /2
     IiEmitPrefix EVEX.512.66.0F38.W0, MVEX.512.66.0F38.W0
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVGATHERPF1DPS::
</pre>

<dl id="IizVGATHERPF1QPS">
<dt><a href="#IizHandlers">&uarr; VGATHERPF1QPS</a></dt>
<dd>Sparse Prefetch Packed SP Data Values with Signed Qword Indices Using T1 Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERPF1QPS vm64z {k1}
</th><td>EVEX.512.66.0F38.W0 C7 /2 /vsib  
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC7</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5446.htm">t5446</a>
</dd>
</dl><pre>
IizVGATHERPF1QPS:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC7
     IiDisp8EVEX T1S32
     IiOpEn M
     IiVSIB vm64z
     IiModRM /2
     IiEmitPrefix EVEX.512.66.0F38.W0
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVGATHERPF1QPS::
</pre>

<dl id="IizVGATHERPF1DPD">
<dt><a href="#IizHandlers">&uarr; VGATHERPF1DPD</a></dt>
<dd>Sparse Prefetch Packed DP Data Values with Signed Dword Indices Using T1 Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERPF1DPD vm32y {k1}
</th><td>EVEX.512.66.0F38.W1 C6 /2 /vsib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5446.htm">t5446</a>
</dd>
</dl><pre>
IizVGATHERPF1DPD:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC6
     IiDisp8EVEX T1S64
     IiOpEn M
     IiVSIB vm32y
     IiModRM /2
     IiEmitPrefix EVEX.512.66.0F38.W1
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVGATHERPF1DPD::
</pre>

<dl id="IizVGATHERPF1QPD">
<dt><a href="#IizHandlers">&uarr; VGATHERPF1QPD</a></dt>
<dd>Sparse Prefetch Packed DP Data Values with Signed Qword Indices Using T1 Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGATHERPF1QPD vm64z {k1}
</th><td>EVEX.512.66.0F38.W1 C7 /2 /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC7</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5446.htm">t5446</a>
</dd>
</dl><pre>
IizVGATHERPF1QPD:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC7
     IiDisp8EVEX T1S64
     IiOpEn M
     IiVSIB vm64z
     IiModRM /2
     IiEmitPrefix EVEX.512.66.0F38.W1
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVGATHERPF1QPD::
</pre>

<dl id="IizVPSCATTERDD">
<dt><a href="#IizHandlers">&uarr; VPSCATTERDD</a></dt>
<dd>Scatter Packed Dword with Signed Dword Indices</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSCATTERDD vm32x {k1}, xmm1
</th><td>EVEX.128.66.0F38.W0 A0 /r /vsib  
</td></tr>
<tr><th>VPSCATTERDD vm32y {k1}, ymm1
</th><td>EVEX.256.66.0F38.W0 A0 /r /vsib  
</td></tr>
<tr><th>VPSCATTERDD vm32z {k1}, zmm1
</th><td>EVEX.512.66.0F38.W0 A0 /r /vsib  
</td></tr>
<tr><th>VPSCATTERDD vm32z {k1}, zmm1
</th><td>MVEX.512.66.0F38.W0 A0 /r /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xA0</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5450.htm">t5450</a>
</dd>
</dl><pre>
IizVPSCATTERDD:: PROC
    IiAllowMaskMerging
    IiDisp8EVEX T1S32
    IiEmitOpcode 0xA0
    IiOpEn MR
    IiDispatchFormat  mem.xmm, mem.ymm, mem.zmm
.mem.xmm:
    IiEmitPrefix EVEX.128.66.0F38.W0
    IiVSIB vm32x
    IiModRM /r
    RET
.mem.ymm:
    IiEmitPrefix EVEX.256.66.0F38.W0
    IiVSIB vm32y
    IiModRM /r
    RET
.mem.zmm:
    IiDisp8MVEX Di32
    IiEmitPrefix EVEX.512.66.0F38.W0, MVEX.512.66.0F38.W0
    IiVSIB vm32z
    IiModRM /r
    RET
  ENDP IizVPSCATTERDD::
</pre>

<dl id="IizVPSCATTERDQ">
<dt><a href="#IizHandlers">&uarr; VPSCATTERDQ</a></dt>
<dd>Scatter Packed Qword with Signed Dword Indices</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSCATTERDQ vm32x {k1}, xmm1
</th><td>EVEX.128.66.0F38.W1 A0 /r /vsib  
</td></tr>
<tr><th>VPSCATTERDQ vm32x {k1}, ymm1
</th><td>EVEX.256.66.0F38.W1 A0 /r /vsib  
</td></tr>
<tr><th>VPSCATTERDQ vm32y {k1}, zmm1
</th><td>EVEX.512.66.0F38.W1 A0 /r /vsib  
</td></tr>
<tr><th>VPSCATTERDQ vm32z {k1}, zmm1
</th><td>MVEX.512.66.0F38.W1 A0 /r /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xA0</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5450.htm">t5450</a>
</dd>
</dl><pre>
IizVPSCATTERDQ:: PROC
    IiAllowModifier MASK
    IiDisp8EVEX T1S64
    IiOpEn MR
    IiEmitOpcode 0xA0
    IiDispatchFormat  mem.xmm, mem.ymm, mem.zmm
.mem.xmm:
    IiEmitPrefix EVEX.128.66.0F38.W1
    IiVSIB vm32x
    IiModRM /r
    RET
.mem.ymm:
    IiEmitPrefix EVEX.256.66.0F38.W1
    IiVSIB vm32x
    IiModRM /r
    RET
.mem.zmm:
    JSt [EDI+II.Ppx],iiPpxVSIB1, .m512.zmm:
    IiEmitPrefix EVEX.512.66.0F38.W1
    IiVSIB vm32y
    IiModRM /r
    RET
.m512.zmm:
    IiDisp8MVEX Sn64
    IiEmitPrefix MVEX.512.66.0F38.W1
    IiVSIB vm32z
    IiModRM /r
    RET
  ENDP IizVPSCATTERDQ::
</pre>

<dl id="IizVPSCATTERQD">
<dt><a href="#IizHandlers">&uarr; VPSCATTERQD</a></dt>
<dd>Scatter Packed Dword with Signed Qword Indices</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSCATTERQD vm64x {k1}, xmm1
</th><td>EVEX.128.66.0F38.W0 A1 /r /vsib  
</td></tr>
<tr><th>VPSCATTERQD vm64y {k1}, xmm1
</th><td>EVEX.256.66.0F38.W0 A1 /r /vsib  
</td></tr>
<tr><th>VPSCATTERQD vm64z {k1}, ymm1
</th><td>EVEX.512.66.0F38.W0 A1 /r /vsib  
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xA1</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5450.htm">t5450</a>
</dd>
</dl><pre>
IizVPSCATTERQD:: PROC
    IiAllowMaskMerging
    IiEmitOpcode 0xA1
    IiDisp8EVEX T1S32
    IiOpEn MR
    IiDispatchFormat  mem.xmm, mem.ymm
.m256.xmm:
    IiEmitPrefix EVEX.256.66.0F38.W0
    IiVSIB vm64y
    IiModRM /r
    RET
.mem.xmm:
    JSt [EDI+II.Ppx],iiPpxVSIB2, .m256.xmm:
    IiEmitPrefix EVEX.128.66.0F38.W0
    IiVSIB vm64x
    IiModRM /r
    RET
.mem.ymm:
    IiEmitPrefix EVEX.512.66.0F38.W0
    IiVSIB vm64z
    IiModRM /r
    RET
  ENDP IizVPSCATTERQD::
</pre>

<dl id="IizVPSCATTERQQ">
<dt><a href="#IizHandlers">&uarr; VPSCATTERQQ</a></dt>
<dd>Scatter Packed Qword with Signed Qword Indices</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSCATTERQQ vm64x {k1}, xmm1
</th><td>EVEX.128.66.0F38.W1 A1 /r /vsib  
</td></tr>
<tr><th>VPSCATTERQQ vm64y {k1}, ymm1
</th><td>EVEX.256.66.0F38.W1 A1 /r /vsib  
</td></tr>
<tr><th>VPSCATTERQQ vm64z {k1}, zmm1
</th><td>EVEX.512.66.0F38.W1 A1 /r /vsib  
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xA1</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5450.htm">t5450</a>
</dd>
</dl><pre>
IizVPSCATTERQQ:: PROC
    IiAllowModifier MASK
    IiEmitOpcode 0xA1
    IiDisp8EVEX T1S64
    IiOpEn MR
    IiDispatchFormat  mem.xmm, mem.ymm, mem.zmm
.mem.xmm:
    IiEmitPrefix EVEX.128.66.0F38.W1
    IiVSIB vm64x
    IiModRM /r
    RET
.mem.ymm:
    IiEmitPrefix EVEX.256.66.0F38.W1
    IiVSIB vm64y
    IiModRM /r
    RET
.mem.zmm:
    IiEmitPrefix EVEX.512.66.0F38.W1
    IiVSIB vm64z
    IiModRM /r
    RET
  ENDP IizVPSCATTERQQ::
</pre>

<dl id="IizVSCATTERDPS">
<dt><a href="#IizHandlers">&uarr; VSCATTERDPS</a></dt>
<dd>Scatter Packed Single with Signed Dword  Indices</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERDPS vm32x {k1}, xmm1
</th><td>EVEX.128.66.0F38.W0 A2 /r /vsib 
</td></tr>
<tr><th>VSCATTERDPS vm32y {k1}, ymm1
</th><td>EVEX.256.66.0F38.W0 A2 /r /vsib
</td></tr>
<tr><th>VSCATTERDPS vm32z {k1}, zmm1
</th><td>EVEX.512.66.0F38.W0 A2 /r  /vsib
</td></tr>
<tr><th>VSCATTERDPS vm32z {k1}, zmm1
</th><td>MVEX.512.66.0F38.W0 A2 /r /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xA2</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5452.htm">t5452</a>
</dd>
</dl><pre>
IizVSCATTERDPS:: PROC
    IiAllowMaskMerging
    IiEmitOpcode 0xA2
    IiDisp8EVEX T1S32
    IiOpEn MR
    IiDispatchFormat  mem.xmm, mem.ymm, mem.zmm
.mem.xmm:
    IiEmitPrefix EVEX.128.66.0F38.W0
    IiVSIB vm32x
    IiModRM /r
    RET
.mem.ymm:
    IiEmitPrefix EVEX.256.66.0F38.W0
    IiVSIB vm32y
    IiModRM /r
    RET
.mem.zmm:
    IiDisp8MVEX Df32
    IiEmitPrefix EVEX.512.66.0F38.W0, MVEX.512.66.0F38.W0
    IiVSIB vm32z
    IiModRM /r
    RET
  ENDP IizVSCATTERDPS::
</pre>

<dl id="IizVSCATTERDPD">
<dt><a href="#IizHandlers">&uarr; VSCATTERDPD</a></dt>
<dd>Scatter Packed Double with Signed Dword Indices</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERDPD vm32x {k1}, xmm1
</th><td>EVEX.128.66.0F38.W1 A2 /r /vsib 
</td></tr>
<tr><th>VSCATTERDPD vm32x {k1}, ymm1
</th><td>EVEX.256.66.0F38.W1 A2 /r /vsib 
</td></tr>
<tr><th>VSCATTERDPD vm32y {k1}, zmm1
</th><td>EVEX.512.66.0F38.W1 A2 /r /vsib 
</td></tr>
<tr><th>VSCATTERDPD vm32z {k1}, zmm1
</th><td>MVEX.512.66.0F38.W1 A2 /r /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xA2</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5452.htm">t5452</a>
</dd>
</dl><pre>
IizVSCATTERDPD:: PROC
    IiAllowMaskMerging
    IiEmitOpcode 0xA2
    IiDisp8EVEX T1S64
    IiDisp8MVEX Sn64
    IiOpEn MR
    IiDispatchFormat  mem.xmm, mem.ymm, mem.zmm
.mem.xmm:
    IiEmitPrefix EVEX.128.66.0F38.W1
    IiVSIB vm32x
    IiModRM /r
    RET
.mem.ymm:
    IiEmitPrefix EVEX.256.66.0F38.W1
    IiVSIB vm32x
    IiModRM /r
    RET
.m512.zmm:
    IiEmitPrefix  MVEX.512.66.0F38.W1
    IiVSIB vm32z
    IiModRM /r
    RET
.mem.zmm:
    JSt [EDI+II.Ppx],iiPpxVSIB1, .m512.zmm:
    IiEmitPrefix EVEX.512.66.0F38.W1
    IiVSIB vm32y
    IiModRM /r
    RET
  ENDP IizVSCATTERDPD::
</pre>

<dl id="IizVSCATTERQPS">
<dt><a href="#IizHandlers">&uarr; VSCATTERQPS</a></dt>
<dd>Scatter Packed Single with Signed Qword Indices</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERQPS vm64x {k1}, xmm1
</th><td>EVEX.128.66.0F38.W0 A3 /r /vsib 
</td></tr>
<tr><th>VSCATTERQPS vm64y {k1}, xmm1
</th><td>EVEX.256.66.0F38.W0 A3 /r /vsib 
</td></tr>
<tr><th>VSCATTERQPS vm64z {k1}, ymm1
</th><td>EVEX.512.66.0F38.W0 A3 /r /vsib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xA3</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5452.htm">t5452</a>
</dd>
</dl><pre>
IizVSCATTERQPS:: PROC
    IiAllowMaskMerging
    IiEmitOpcode 0xA3
    IiDisp8EVEX T1S32
    IiOpEn MR
    IiDispatchFormat  mem.xmm, mem.ymm
.m256.xmm:    
    IiEmitPrefix EVEX.256.66.0F38.W0
    IiVSIB vm64y
    IiModRM /r
    RET
.mem.xmm:
    JSt [EDI+II.Ppx],iiPpxVSIB2, .m256.xmm: 
    IiEmitPrefix EVEX.128.66.0F38.W0
    IiVSIB vm64x
    IiModRM /r
    RET
.mem.ymm:
    IiEmitPrefix EVEX.512.66.0F38.W0
    IiVSIB vm64z
    IiModRM /r
    RET
  ENDP IizVSCATTERQPS::
</pre>

<dl id="IizVSCATTERQPD">
<dt><a href="#IizHandlers">&uarr; VSCATTERQPD</a></dt>
<dd>Scatter Packed Double with Signed Qword Indices</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERQPD vm64x {k1}, xmm1
</th><td>EVEX.128.66.0F38.W1 A3 /r /vsib 
</td></tr>
<tr><th>VSCATTERQPD vm64y {k1}, ymm1
</th><td>EVEX.256.66.0F38.W1 A3 /r /vsib
</td></tr>
<tr><th>VSCATTERQPD vm64z {k1}, zmm1
</th><td>EVEX.512.66.0F38.W1 A3 /r /vsib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xA3</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5452.htm">t5452</a>
</dd>
</dl><pre>
IizVSCATTERQPD:: PROC
    IiAllowMaskMerging
    IiEmitOpcode 0xA3
    IiDisp8EVEX T1S64
    IiOpEn MR
    IiDispatchFormat  mem.xmm, mem.ymm, mem.zmm
.mem.xmm:
    IiEmitPrefix EVEX.128.66.0F38.W1
    IiVSIB vm64x
    IiModRM /r
    RET
.mem.ymm:
    IiEmitPrefix EVEX.256.66.0F38.W1
    IiVSIB vm64y
    IiModRM /r
    RET
.mem.zmm:
    IiEmitPrefix EVEX.512.66.0F38.W1
    IiVSIB vm64z
    IiModRM /r
    RET
  ENDP IizVSCATTERQPD::
</pre>

<dl id="IizVSCATTERPF0DPS">
<dt><a href="#IizHandlers">&uarr; VSCATTERPF0DPS</a></dt>
<dd>Sparse Prefetch  Packed SP Data Values with Signed Dword Indices Using T0 Hint with Intent  to Write</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERPF0DPS vm32z {k1}
</th><td>EVEX.512.66.0F38.W0 C6 /5 /vsib 
</td></tr>
<tr><th>VSCATTERPF0DPS vm32z {k1}
</th><td>MVEX.512.66.0F38.W0 C6 /5 /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5454.htm">t5454</a>
</dd>
</dl><pre>
IizVSCATTERPF0DPS:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC6
     IiDisp8EVEX T1S32
     IiDisp8MVEX Df32
     IiOpEn M
     IiVSIB vm32z
     IiModRM /5
     IiEmitPrefix EVEX.512.66.0F38.W0, MVEX.512.66.0F38.W0
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVSCATTERPF0DPS::
</pre>

<dl id="IizVSCATTERPF0HINTDPS">
<dt><a href="#IizHandlers">&uarr; VSCATTERPF0HINTDPS</a></dt>
<dd>Sparse Prefetch Packed SP Data Values with Signed Dword Indices Using T0 Hint with Intent to Write</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERPF0HINTDPS vm32z {k1}
</th><td>MVEX.512.66.0F38.W0 C6 /4 /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5454.htm">t5454</a>
</dd>
</dl><pre>
IizVSCATTERPF0HINTDPS:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC6
     IiDisp8MVEX Df32
     IiOpEn M
     IiVSIB vm32z
     IiModRM /4
     IiEmitPrefix MVEX.512.66.0F38.W0
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVSCATTERPF0HINTDPS::
</pre>

<dl id="IizVSCATTERPF0QPS">
<dt><a href="#IizHandlers">&uarr; VSCATTERPF0QPS</a></dt>
<dd>Sparse Prefetch Packed SP Data Values with Signed Qword Indices Using T0 Hint with Intent to Write</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERPF0QPS vm64z {k1}
</th><td>EVEX.512.66.0F38.W0 C7 /5 /vsib 
</td></tr>
</table></dd>
<dt>Operands</dt>
<dd>0xC7</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5454.htm">t5454</a>
</dd>
</dl><pre>
IizVSCATTERPF0QPS:: PROC
     IiAllowModifier MASK
     IiEmitOpcode 0xC7
     IiDisp8EVEX T1S32
     IiOpEn M
     IiVSIB vm64z
     IiModRM /5
     IiEmitPrefix EVEX.512.66.0F38.W0
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVSCATTERPF0QPS::
</pre>

<dl id="IizVSCATTERPF0DPD">
<dt><a href="#IizHandlers">&uarr; VSCATTERPF0DPD</a></dt>
<dd>Sparse Prefetch Packed DP Data Values with Signed Dword Indices Using T0 Hint with Intent to Write</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERPF0DPD vm32y {k1}
</th><td>EVEX.512.66.0F38.W1 C6 /5 /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5454.htm">t5454</a>
</dd>
</dl><pre>
IizVSCATTERPF0DPD:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC6
     IiDisp8EVEX T1S64
     IiOpEn M
     IiVSIB vm64y
     IiModRM /5
     IiEmitPrefix EVEX.512.66.0F38.W1
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVSCATTERPF0DPD::
</pre>

<dl id="IizVSCATTERPF0HINTDPD">
<dt><a href="#IizHandlers">&uarr; VSCATTERPF0HINTDPD</a></dt>
<dd>Sparse Prefetch Packed DP Data Values with Signed Dword Indices Using T0 Hint with Intent to Write</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERPF0HINTDPD vm32z {k1}
</th><td>MVEX.512.66.0F38.W1 C6 /4 /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5454.htm">t5454</a>
</dd>
</dl><pre>
IizVSCATTERPF0HINTDPD:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC6
     IiDisp8MVEX Sn64
     IiOpEn M
     IiVSIB vm32z
     IiModRM /4
     IiEmitPrefix MVEX.512.66.0F38.W1
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVSCATTERPF0HINTDPD::
</pre>

<dl id="IizVSCATTERPF0QPD">
<dt><a href="#IizHandlers">&uarr; VSCATTERPF0QPD</a></dt>
<dd>Sparse Prefetch Packed DP Data Values with Signed Qword Indices Using T0 Hint with Intent to Write</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERPF0QPD vm64z {k1}
</th><td>EVEX.512.66.0F38.W1 C7 /5 /vsib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC7</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5454.htm">t5454</a>
</dd>
</dl><pre>
IizVSCATTERPF0QPD:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC7
     IiDisp8EVEX T1S64
     IiOpEn M
     IiVSIB vm64z
     IiModRM /5
     IiEmitPrefix EVEX.512.66.0F38.W1
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVSCATTERPF0QPD::
</pre>

<dl id="IizVSCATTERPF1DPS">
<dt><a href="#IizHandlers">&uarr; VSCATTERPF1DPS</a></dt>
<dd>Sparse Prefetch  Packed SP Data Values with Signed Dword Indices Using T1 Hint with Intent  to Write</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERPF1DPS vm32z {k1}
</th><td>EVEX.512.66.0F38.W0 C6 /6 /vsib
</td></tr>
<tr><th>VSCATTERPF1DPS vm32z {k1}
</th><td>MVEX.512.66.0F38.W0 C6 /6 /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5456.htm">t5456</a>
</dd>
</dl><pre>
IizVSCATTERPF1DPS:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC6
     IiDisp8EVEX T1S32
     IiDisp8MVEX Df32
     IiOpEn M
     IiVSIB vm32z
     IiModRM /6
     IiEmitPrefix EVEX.512.66.0F38.W0, MVEX.512.66.0F38.W0
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVSCATTERPF1DPS::
</pre>

<dl id="IizVSCATTERPF1QPS">
<dt><a href="#IizHandlers">&uarr; VSCATTERPF1QPS</a></dt>
<dd>Sparse Prefetch Packed SP Data Values with Signed Qword Indices Using T1 Hint with Intent to Write</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERPF1QPS vm64z {k1}
</th><td>EVEX.512.66.0F38.W0 C7 /6 /vsib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC7</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5456.htm">t5456</a>
</dd>
</dl><pre>
IizVSCATTERPF1QPS:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC7
     IiDisp8EVEX T1S32
     IiOpEn M
     IiVSIB vm64z
     IiModRM /6
     IiEmitPrefix EVEX.512.66.0F38.W0
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVSCATTERPF1QPS::
</pre>

<dl id="IizVSCATTERPF1DPD">
<dt><a href="#IizHandlers">&uarr; VSCATTERPF1DPD</a></dt>
<dd>Sparse Prefetch Packed DP Data Values with Signed Dword Indices Using T1 Hint with Intent to Write</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERPF1DPD vm32y {k1}
</th><td>EVEX.512.66.0F38.W1 C6 /6 /vsib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5456.htm">t5456</a>
</dd>
</dl><pre>
IizVSCATTERPF1DPD:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC6
     IiDisp8EVEX T1S64
     IiOpEn M
     IiVSIB vm32y
     IiModRM /6
     IiEmitPrefix EVEX.512.66.0F38.W1
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVSCATTERPF1DPD::
</pre>

<dl id="IizVSCATTERPF1QPD">
<dt><a href="#IizHandlers">&uarr; VSCATTERPF1QPD</a></dt>
<dd>Sparse Prefetch Packed DP Data Values with Signed Qword Indices Using T1 Hint with Intent to Write</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSCATTERPF1QPD vm64z {k1}
</th><td>EVEX.512.66.0F38.W1 C7 /6 /vsib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xC7</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5456.htm">t5456</a>
</dd>
</dl><pre>
IizVSCATTERPF1QPD:: PROC
     IiAllowMaskMerging
     IiEmitOpcode 0xC7
     IiDisp8EVEX T1S64
     IiOpEn M
     IiVSIB vm64z
     IiModRM /6
     IiEmitPrefix EVEX.512.66.0F38.W1
     IiDispatchFormat  mem
.mem:RET
  ENDP IizVSCATTERPF1QPD::
</pre>

<dl id="IizVGETEXPSS">
<dt><a href="#IizHandlers">&uarr; VGETEXPSS</a></dt>
<dd>Convert Exponents of Scalar SP FP Values to SP FP Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGETEXPSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}
</th><td>EVEX.NDS.LIG.66.0F38.W0 43 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x43</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5460.htm">t5460</a>
</dd>
</dl><pre>
IizVGETEXPSS:: PROC
    IiAllowModifier MASK
    IiAllowSuppressing Register=xmm
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x43
    IiDisp8EVEX T1S32
    IiOpEn RVM
    IiModRM /r
    IiEmitPrefix EVEX.NDS.LIG.66.0F38.W0
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    RET
  ENDP IizVGETEXPSS::
</pre>

<dl id="IizVGETEXPSD">
<dt><a href="#IizHandlers">&uarr; VGETEXPSD</a></dt>
<dd>Convert Exponents of Scalar DP FP Values to DP FP Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGETEXPSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}
</th><td>EVEX.NDS.LIG.66.0F38.W1 43 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x43</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5460.htm">t5460</a>
</dd>
</dl><pre>
IizVGETEXPSD:: PROC
    IiAllowModifier MASK
    IiAllowSuppressing Register=xmm
    IiEncoding DATA=QWORD
    IiEmitOpcode 0x43
    IiDisp8EVEX T1S64
    IiOpEn RVM
    IiModRM /r
    IiEmitPrefix EVEX.NDS.LIG.66.0F38.W1
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    RET
  ENDP IizVGETEXPSD::
</pre>

<dl id="IizVGETEXPPS">
<dt><a href="#IizHandlers">&uarr; VGETEXPPS</a></dt>
<dd>Convert Exponents of Packed SP FP Values to SP FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGETEXPPS xmm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.128.66.0F38.W0 42 /r 
</td></tr>
<tr><th>VGETEXPPS ymm1 {k1}{z}, ymm2/m256/m32bcst
</th><td>EVEX.256.66.0F38.W0 42 /r 
</td></tr>
<tr><th>VGETEXPPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}
</th><td>EVEX.512.66.0F38.W0 42 /r 
</td></tr>
<tr><th>VGETEXPPS zmm1 {k1}, zmm2/m512/m32bcst{sae}
</th><td>MVEX.512.66.0F38.W0 42 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x42</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5460.htm">t5460</a>
</dd>
</dl><pre>
IizVGETEXPPS:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiAllowSuppressing 
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x42
    IiDisp8EVEX FV32
    IiDisp8MVEX Us32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F38.W0
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W0
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W0, MVEX.512.66.0F38.W0
    RET
  ENDP IizVGETEXPPS::
</pre>

<dl id="IizVGETEXPPD">
<dt><a href="#IizHandlers">&uarr; VGETEXPPD</a></dt>
<dd>Convert Exponents of Packed DP FP Values to DP FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGETEXPPD xmm1 {k1}{z}, xmm2/m128/m64bcst
</th><td>EVEX.128.66.0F38.W1 42 /r 
</td></tr>
<tr><th>VGETEXPPD ymm1 {k1}{z}, ymm2/m256/m64bcst
</th><td>EVEX.256.66.0F38.W1 42 /r 
</td></tr>
<tr><th>VGETEXPPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}
</th><td>EVEX.512.66.0F38.W1 42 /r 
</td></tr>
<tr><th>VGETEXPPD zmm1 {k1}, zmm2/m512/m64bcst{sae}
</th><td>MVEX.512.66.0F38.W1 42 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x42</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5460.htm">t5460</a>
</dd>
</dl><pre>
IizVGETEXPPD:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiAllowSuppressing
    IiEncoding DATA=QWORD
    IiDisp8EVEX FV64
    IiDisp8MVEX Ub64
    IiOpEn RM
    IiModRM /r
    IiEmitOpcode 0x42
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F38.W1
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W1
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W1, MVEX.512.66.0F38.W1
    RET
  ENDP IizVGETEXPPD::
</pre>

<dl id="IizVGETMANTSS">
<dt><a href="#IizHandlers">&uarr; VGETMANTSS</a></dt>
<dd>Extract Float32 Vector of Normalized Mantissa from Float32 Vector</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8
</th><td>EVEX.NDS.LIG.66.0F3A.W0 27 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x27</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5462.htm">t5462</a>
</dd>
</dl><pre>
IizVGETMANTSS:: PROC
    IiAllowModifier MASK
    IiAllowSuppressing Operand=DH,Register=xmm
    IiEmitOpcode 0x27
    IiDisp8EVEX T1S32
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE, Max=15
    IiEmitPrefix EVEX.NDS.LIG.66.0F3A.W0
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    RET
  ENDP IizVGETMANTSS::
</pre>

<dl id="IizVGETMANTSD">
<dt><a href="#IizHandlers">&uarr; VGETMANTSD</a></dt>
<dd>Extract Float64 of Normalized Mantissas from Float64 Scalar</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGETMANTSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}, imm8
</th><td>EVEX.NDS.LIG.66.0F3A.W1 27 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x27</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5462.htm">t5462</a>
</dd>
</dl><pre>
IizVGETMANTSD:: PROC
    IiAllowModifier MASK
    IiAllowSuppressing Operand=DH, Register=xmm
    IiEmitOpcode 0x27
    IiDisp8EVEX T1S64
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE, Max=15
    IiEmitPrefix EVEX.NDS.LIG.66.0F3A.W1
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    RET
  ENDP IizVGETMANTSD::
</pre>

<dl id="IizVGETMANTPS">
<dt><a href="#IizHandlers">&uarr; VGETMANTPS</a></dt>
<dd>Extract Float32 Vector of Normalized Mantissas from Float32 Vector</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGETMANTPS xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8
</th><td>EVEX.128.66.0F3A.W0 26 /r ib 
</td></tr>
<tr><th>VGETMANTPS ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8
</th><td>EVEX.256.66.0F3A.W0 26 /r ib 
</td></tr>
<tr><th>VGETMANTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}, imm8
</th><td>EVEX.512.66.0F3A.W0 26 /r ib 
</td></tr>
<tr><th>VGETMANTPS zmm1 {k1}, zmm2/m512/m32bcst{sae}, imm8
</th><td>MVEX.512.66.0F3A.W0 26 /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x26</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5462.htm">t5462</a>
</dd>
</dl><pre>
IizVGETMANTPS:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD, Operand=DH
    IiAllowSuppressing Operand=DH 
    IiEmitOpcode 0x26
    IiDisp8EVEX FV32
    IiDisp8MVEX Us32
    IiOpEn RM
    IiModRM /r
    IiEmitImm Operand3, BYTE, Max=15
    IiDispatchFormat  xmm.xmm.imm, xmm.mem.imm, ymm.ymm.imm, ymm.mem.imm, zmm.zmm.imm, zmm.mem.imm
.xmm.mem.imm:
.xmm.xmm.imm:
    IiEmitPrefix EVEX.128.66.0F3A.W0
    RET
.ymm.mem.imm:
.ymm.ymm.imm:
    IiEmitPrefix EVEX.256.66.0F3A.W0
    RET
.zmm.mem.imm:
 .Z:IiEmitPrefix EVEX.512.66.0F3A.W0, MVEX.512.66.0F3A.W0
    RET
.zmm.zmm.imm:
    JMP .Z:
  ENDP IizVGETMANTPS::
</pre>

<dl id="IizVGETMANTPD">
<dt><a href="#IizHandlers">&uarr; VGETMANTPD</a></dt>
<dd>Extract Float64 Vector of Normalized Mantissas from Float64 Vector</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VGETMANTPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8
</th><td>EVEX.128.66.0F3A.W1 26 /r ib 
</td></tr>
<tr><th>VGETMANTPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8
</th><td>EVEX.256.66.0F3A.W1 26 /r ib 
</td></tr>
<tr><th>VGETMANTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8
</th><td>EVEX.512.66.0F3A.W1 26 /r ib
</td></tr>
<tr><th>VGETMANTPD zmm1 {k1}, zmm2/m512/m64bcst{sae}, imm8
</th><td>MVEX.512.66.0F3A.W1 26 /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x26</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5462.htm">t5462</a>
</dd>
</dl><pre>
IizVGETMANTPD:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD, Operand=DH
    IiAllowSuppressing Operand=DH
    IiEmitOpcode 0x26
    IiDisp8EVEX FV64
    IiDisp8MVEX Ub64
    IiOpEn RM
    IiModRM /r
    IiEmitImm Operand3, BYTE, Max=15
    IiDispatchFormat  xmm.xmm.imm, xmm.mem.imm, ymm.ymm.imm, ymm.mem.imm, zmm.zmm.imm, zmm.mem.imm
.xmm.mem.imm:
.xmm.xmm.imm:
    IiEmitPrefix EVEX.128.66.0F3A.W1
    RET
.ymm.mem.imm:
.ymm.ymm.imm:
    IiEmitPrefix EVEX.256.66.0F3A.W1
    RET
.zmm.zmm.imm:
.zmm.mem.imm:
    IiEmitPrefix EVEX.512.66.0F3A.W1, MVEX.512.66.0F3A.W1
    RET
  ENDP IizVGETMANTPD::
</pre>

<dl id="IizVMOVD">
<dt><a href="#IizHandlers">&uarr; VMOVD</a></dt>
<dd>Move Doubleword</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVD xmm1, r32/m32
</th><td>VEX.128.66.0F.W0 6E /r 
</td></tr>
<tr><th>VMOVD xmm1, r32/m32
</th><td>EVEX.128.66.0F.W0 6E /r
</td></tr>
<tr><th>VMOVD r32/m32, xmm1
</th><td>VEX.128.66.0F.W0 7E /r
</td></tr>
<tr><th>VMOVD r32/m32, xmm1
</th><td>EVEX.128.66.0F.W0 7E /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,datamov</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Ed | <b>Pq</b>,Ed | <b>Vdq</b>,Ed | <b>Vdq</b>,Ed | <b>Ed</b>,Pq | <b>Ed</b>,Pq | <b>Ed</b>,Vdq | <b>Ed</b>,Vdq</dd>
<dt>Opcode</dt>
<dd>0x0F6E /r | 0x0F6E /r | 0x660F6E /r | 0x660F6E /r | 0x0F7E /r | 0x0F7E /r | 0x660F7E /r | 0x660F7E /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5470.htm">t5470</a>
</dd>
</dl><pre>
IizVMOVD:: PROC
    IiEncoding DATA=DWORD
    IiEmitPrefix VEX.128.66.0F.W0, EVEX.128.66.0F.W0
    IiDisp8EVEX T1S32
    IiModRM /r
    IiDispatchFormat  xmm.r32, xmm.mem, r32.xmm, mem.xmm
.xmm.r32:
.xmm.mem:
    IiEmitOpcode 0x6E
    IiOpEn RM
    RET
.r32.xmm:
.mem.xmm:
    IiEmitOpcode 0x7E
    IiOpEn MR
    RET
  ENDP IizVMOVD::
</pre>

<dl id="IizVMOVQ">
<dt><a href="#IizHandlers">&uarr; VMOVQ</a></dt>
<dd>Move Quadword</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVQ xmm1, r64/m64
</th><td>VEX.128.66.0F.W1 6E /r 
</td></tr>
<tr><th>VMOVQ xmm1, r64/m64
</th><td>EVEX.128.66.0F.W1 6E /r 
</td></tr>
<tr><th>VMOVQ r64/m64, xmm1
</th><td>VEX.128.66.0F.W1 7E /r 
</td></tr>
<tr><th>VMOVQ r64/m64, xmm1
</th><td>EVEX.128.66.0F.W1 7E /r 
</td></tr>
<tr><th>VMOVQ xmm1, xmm2/m64
</th><td>VEX.128.F3.0F.WIG 7E /r 
</td></tr>
<tr><th>VMOVQ xmm1, xmm2/m64
</th><td>EVEX.128.F3.0F.W1 7E /r 
</td></tr>
<tr><th>VMOVQ xmm1/m64, xmm2
</th><td>VEX.128.66.0F.WIG D6 /r 
</td></tr>
<tr><th>VMOVQ xmm1/m64, xmm2
</th><td>EVEX.128.66.0F.W1 D6 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,datamov</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Eqp | <b>Vdq</b>,Eqp | <b>Eqp</b>,Pq | <b>Eqp</b>,Edq | <b>Pq</b>,Qq | <b>Vq</b>,Wq | <b>Qq</b>,Pq | <b>Wq</b>,Vq</dd>
<dt>Opcode</dt>
<dd>0x0F6E /r | 0x660F6E /r | 0x0F7E /r | 0x660F7E /r | 0x0F6F /r | 0xF30F7E /r | 0x0F7F /r | 0x660FD6 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_MOVQ_0F6E_660F6E_0F7E_660F7E"><sup>31</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5470.htm">t5470</a>
</dd>
</dl><pre>
IizVMOVQ:: PROC
    IiAllowModifier CODE
    IiDisp8EVEX T1S64
    IiModRM /r
    IiDispatchFormat  xmm.r64, xmm.mem, r64.xmm, mem.xmm, xmm.xmm
.xmm.r64:
    IiEncoding DATA=QWORD,CODE=SHORT
    IiEmitPrefix VEX.128.66.0F.W1, EVEX.128.66.0F.W1
    IiEmitOpcode 0x6E
    IiOpEn RM
    RET
.r64.xmm:
    IiEncoding DATA=QWORD,CODE=LONG
    IiEmitPrefix VEX.128.66.0F.W1, EVEX.128.66.0F.W1
    IiEmitOpcode 0x7E
    IiOpEn MR
    RET
.xmm.mem:
    JNSt [EDI+II.SssStatus],sssWidth64, .xmm.mem.L:
    IiDispatchCode SHORT=.xmm.r64:
.xmm.mem.L:
    IiEncoding DATA=QWORD,CODE=LONG
    IiEmitPrefix VEX.128.F3.0F.WIG, EVEX.128.F3.0F.W1
    IiEmitOpcode 0x7E
    IiOpEn RM
    RET
.xmm.xmm:
    IiDispatchCode LONG=.xmm.mem.L:
.xmm.xmm.S:
    IiEncoding DATA=QWORD,CODE=SHORT
    IiEmitPrefix VEX.128.66.0F.WIG, EVEX.128.66.0F.W1
    IiEmitOpcode 0xD6
    IiOpEn MR
    RET
.mem.xmm:
    JNSt [EDI+II.SssStatus],sssWidth64,.xmm.xmm.S:
    IiDispatchCode LONG=.r64.xmm:
    JMP .xmm.xmm.S:
  ENDP IizVMOVQ::
</pre>

<dl id="IizVMOVSS">
<dt><a href="#IizHandlers">&uarr; VMOVSS</a></dt>
<dd>Move or Merge Scalar Single-Precision Floating-Point Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVSS xmm1, xmm2, xmm3
</th><td>VEX.NDS.LIG.F3.0F.WIG 10 /r 
</td></tr>
<tr><th>VMOVSS xmm1, m32 
</th><td>VEX.LIG.F3.0F.WIG 10 /r 
</td></tr>
<tr><th>VMOVSS xmm1, xmm2, xmm3
</th><td>VEX.NDS.LIG.F3.0F.WIG 11 /r 
</td></tr>
<tr><th>VMOVSS m32, xmm1
</th><td>VEX.LIG.F3.0F.WIG 11 /r 
</td></tr>
<tr><th>VMOVSS xmm1 {k1}{z}, xmm2, xmm3
</th><td>EVEX.NDS.LIG.F3.0F.W0 10 /r 
</td></tr>
<tr><th>VMOVSS xmm1 {k1}{z}, m32
</th><td>EVEX.LIG.F3.0F.W0 10 /r 
</td></tr>
<tr><th>VMOVSS xmm1 {k1}{z}, xmm2, xmm3
</th><td>EVEX.NDS.LIG.F3.0F.W0 11 /r 
</td></tr>
<tr><th>VMOVSS m32 {k1}, xmm1
</th><td>EVEX.LIG.F3.0F.W0 11 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdfp,datamov</dd>
<dt>Operands</dt>
<dd><b>Vss</b>,Wss | <b>Wss</b>,Vss</dd>
<dt>Opcode</dt>
<dd>0xF30F10 /r | 0xF30F11 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5472.htm">t5472</a>
</dd>
</dl><pre>
IizVMOVSS:: PROC
    IiAllowModifier MASK,CODE
    IiEmitPrefix VEX.LIG.F3.0F.WIG, EVEX.LIG.F3.0F.W0
    IiDisp8EVEX T1S32
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.mem, mem.xmm
.xmm.mem:
    IiOpEn RM 
 .S:IiEncoding DATA=DWORD,CODE=SHORT
    IiEmitOpcode 0x10
    RET
.mem.xmm:
    IiOpEn MR
 .L:IiEncoding DATA=DWORD,CODE=LONG
    IiEmitOpcode 0x11    
    RET
.xmm.xmm.xmm:
    IiDispatchCode LONG=.MVR:
    IiOpEn RVM
    JMP .S:
.MVR:IiOpEn MVR
    JMP .L:
  ENDP IizVMOVSS::
</pre>

<dl id="IizVMOVSD">
<dt><a href="#IizHandlers">&uarr; VMOVSD</a></dt>
<dd>Move or Merge Scalar Double-Precision Floating-Point Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVSD xmm1, xmm2, xmm3
</th><td>VEX.NDS.LIG.F2.0F.WIG 10 /r 
</td></tr>
<tr><th>VMOVSD xmm1, m64
</th><td>VEX.LIG.F2.0F.WIG 10 /r 
</td></tr>
<tr><th>VMOVSD xmm1, xmm2, xmm3
</th><td>VEX.NDS.LIG.F2.0F.WIG 11 /r 
</td></tr>
<tr><th>VMOVSD m64, xmm1
</th><td>VEX.LIG.F2.0F.WIG 11 /r 
</td></tr>
<tr><th>VMOVSD xmm1 {k1}{z}, xmm2, xmm3
</th><td>EVEX.NDS.LIG.F2.0F.W1 10 /r 
</td></tr>
<tr><th>VMOVSD xmm1 {k1}{z}, m64
</th><td>EVEX.LIG.F2.0F.W1 10 /r 
</td></tr>
<tr><th>VMOVSD xmm1 {k1}{z}, xmm2, xmm3
</th><td>EVEX.NDS.LIG.F2.0F.W1 11 /r 
</td></tr>
<tr><th>VMOVSD m64 {k1}, xmm1
</th><td>EVEX.LIG.F2.0F.W1 11 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: do, address: Y">Ydo</span></i></b>,<i><span title="nr: -, group: -, type: do, address: X">Xdo</span></i> | <b><i><span title="nr: -, group: -, type: do, address: Y">Ydo</span></i></b>,<i><span title="nr: -, group: -, type: do, address: X">Xdo</span></i> | <b>Vsd</b>,Wsd | <b>Wsd</b>,Vsd</dd>
<dt>Opcode</dt>
<dd>0xA5 ^W | 0xA5 ^W | 0xF20F10 /r | 0xF20F11 /r</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5472.htm">t5472</a>
</dd>
</dl><pre>
IizVMOVSD:: PROC
    IiAllowModifier MASK,CODE
    IiEmitPrefix VEX.LIG.F2.0F.WIG, EVEX.LIG.F2.0F.W1
    IiDisp8EVEX T1S64
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.mem, mem.xmm
.xmm.mem:
    IiOpEn RM
 .S:IiEncoding DATA=QWORD,CODE=SHORT
    IiEmitOpcode 0x10    
    RET
.mem.xmm:
    IiOpEn MR
 .L:IiEncoding DATA=QWORD,CODE=LONG
    IiEmitOpcode 0x11
    RET
.xmm.xmm.xmm:
    IiOpEn MVR
    JSt [EDI+II.MfgExplicit],iiMfgCODE_LONG, .L:
    IiOpEn RVM
    JMP .S:
  ENDP IizVMOVSD::
</pre>

<dl id="IizVMOVUPS">
<dt><a href="#IizHandlers">&uarr; VMOVUPS</a></dt>
<dd>Move Unaligned Packed Single-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVUPS xmm1, xmm2/m128
</th><td>VEX.128.0F.WIG 10 /r 
</td></tr>
<tr><th>VMOVUPS xmm2/m128, xmm1
</th><td>VEX.128.0F.WIG 11 /r 
</td></tr>
<tr><th>VMOVUPS ymm1, ymm2/m256
</th><td>VEX.256.0F.WIG 10 /r 
</td></tr>
<tr><th>VMOVUPS ymm2/m256, ymm1
</th><td>VEX.256.0F.WIG 11 /r 
</td></tr>
<tr><th>VMOVUPS xmm1 {k1}{z}, xmm2/m128 
</th><td>EVEX.128.0F.W0 10 /r 
</td></tr>
<tr><th>VMOVUPS ymm1 {k1}{z}, ymm2/m256 
</th><td>EVEX.256.0F.W0 10 /r 
</td></tr>
<tr><th>VMOVUPS zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.0F.W0 10 /r 
</td></tr>
<tr><th>VMOVUPS xmm2/m128 {k1}{z}, xmm1 
</th><td>EVEX.128.0F.W0 11 /r 
</td></tr>
<tr><th>VMOVUPS ymm2/m256 {k1}{z}, ymm1 
</th><td>EVEX.256.0F.W0 11 /r 
</td></tr>
<tr><th>VMOVUPS zmm2/m512 {k1}{z}, zmm1
</th><td>EVEX.512.0F.W0 11 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdfp,datamov</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wps | <b>Wps</b>,Vps</dd>
<dt>Opcode</dt>
<dd>0x0F10 /r | 0x0F11 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5478.htm">t5478</a>
</dd>
</dl><pre>
IizVMOVUPS:: PROC
    IiAllowModifier MASK,CODE
    IiModRM /r
    IiDisp8EVEX FV32
    IiDispatchFormat  xmm.xmm, xmm.mem, mem.xmm, ymm.ymm, ymm.mem, mem.ymm, zmm.zmm, zmm.mem, mem.zmm
.xmm.xmm:
    IiDispatchCode LONG=.mem.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.0F.WIG, EVEX.128.0F.W0
 .S:IiEncoding DATA=DWORD,CODE=SHORT
    IiEmitOpcode 0x10
    IiOpEn RM
    RET
.mem.xmm:
    IiEmitPrefix VEX.128.0F.WIG, EVEX.128.0F.W0
 .L:IiEncoding DATA=DWORD,CODE=LONG
    IiEmitOpcode 0x11
    IiOpEn MR
    RET
.ymm.ymm:
    IiDispatchCode  LONG=.mem.ymm:
.ymm.mem:
    IiEmitPrefix VEX.256.0F.WIG, EVEX.256.0F.W0
    JMP .S:
.mem.ymm:
    IiEmitPrefix VEX.256.0F.WIG, EVEX.256.0F.W0
    JMP .L:
.zmm.zmm:
    IiDispatchCode LONG=.mem.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.0F.W0
    JMP .S:
.mem.zmm:
    IiEmitPrefix EVEX.512.0F.W0
    JMP .L:
  ENDP IizVMOVUPS::
</pre>

<dl id="IizVMOVUPD">
<dt><a href="#IizHandlers">&uarr; VMOVUPD</a></dt>
<dd>Move Unaligned Packed Double-FP Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVUPD xmm1, xmm2/m128
</th><td>VEX.128.66.0F.WIG 10 /r 
</td></tr>
<tr><th>VMOVUPD xmm2/m128, xmm1
</th><td>VEX.128.66.0F.WIG 11 /r 
</td></tr>
<tr><th>VMOVUPD ymm1, ymm2/m256
</th><td>VEX.256.66.0F.WIG 10 /r 
</td></tr>
<tr><th>VMOVUPD ymm2/m256, ymm1
</th><td>VEX.256.66.0F.WIG 11 /r 
</td></tr>
<tr><th>VMOVUPD xmm1 {k1}{z}, xmm2/m128
</th><td>EVEX.128.66.0F.W1 10 /r 
</td></tr>
<tr><th>VMOVUPD xmm2/m128 {k1}{z}, xmm1
</th><td>EVEX.128.66.0F.W1 11 /r 
</td></tr>
<tr><th>VMOVUPD ymm1 {k1}{z}, ymm2/m256
</th><td>EVEX.256.66.0F.W1 10 /r 
</td></tr>
<tr><th>VMOVUPD ymm2/m256 {k1}{z}, ymm1
</th><td>EVEX.256.66.0F.W1 11 /r 
</td></tr>
<tr><th>VMOVUPD zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.66.0F.W1 10 /r
</td></tr>
<tr><th>VMOVUPD zmm2/m512 {k1}{z}, zmm1
</th><td>EVEX.512.66.0F.W1 11 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,datamov</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wpd | <b>Wpd</b>,Vpd</dd>
<dt>Opcode</dt>
<dd>0x660F10 /r | 0x660F11 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5478.htm">t5478</a>
</dd>
</dl><pre>
IizVMOVUPD:: PROC
    IiAllowModifier MASK,CODE
    IiModRM /r
    IiDisp8EVEX FV64
    IiDispatchFormat  xmm.xmm, xmm.mem, mem.xmm, ymm.ymm, ymm.mem, mem.ymm, zmm.zmm, zmm.mem, mem.zmm
.xmm.xmm:
    IiDispatchCode LONG=.mem.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.66.0F.WIG, EVEX.128.66.0F.W1
 .S:IiEncoding DATA=DWORD,CODE=SHORT
    IiEmitOpcode 0x10
    IiOpEn RM
    RET
.mem.xmm:
    IiEmitPrefix VEX.128.66.0F.WIG, EVEX.128.66.0F.W1
 .L:IiEncoding DATA=DWORD,CODE=LONG
    IiEmitOpcode 0x11
    IiOpEn MR
    RET
.ymm.ymm:
    IiDispatchCode LONG=.mem.ymm:
.ymm.mem:
    IiEmitPrefix VEX.256.66.0F.WIG, EVEX.256.66.0F.W1
    JMP .S:
.mem.ymm:
    IiEmitPrefix VEX.256.66.0F.WIG, EVEX.256.66.0F.W1
    JMP .L:
.zmm.zmm:
    IiDispatchCode LONG=.mem.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F.W1
    JMP .S:
.mem.zmm:
    IiEmitPrefix EVEX.512.66.0F.W1
    JMP .L:
  ENDP IizVMOVUPD::
</pre>

<dl id="IizVMOVAPS">
<dt><a href="#IizHandlers">&uarr; VMOVAPS</a></dt>
<dd>Move Aligned Packed Single-Precision Floating-Point Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVAPS xmm1, xmm2/m128
</th><td>VEX.128.0F.WIG 28 /r 
</td></tr>
<tr><th>VMOVAPS xmm2/m128, xmm1
</th><td>VEX.128.0F.WIG 29 /r 
</td></tr>
<tr><th>VMOVAPS ymm1, ymm2/m256
</th><td>VEX.256.0F.WIG 28 /r 
</td></tr>
<tr><th>VMOVAPS ymm2/m256, ymm1
</th><td>VEX.256.0F.WIG 29 /r 
</td></tr>
<tr><th>VMOVAPS xmm1 {k1}{z}, xmm2/m128 
</th><td>EVEX.128.0F.W0 28 /r 
</td></tr>
<tr><th>VMOVAPS ymm1 {k1}{z}, ymm2/m256 
</th><td>EVEX.256.0F.W0 28 /r 
</td></tr>
<tr><th>VMOVAPS zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.0F.W0 28 /r 
</td></tr>
<tr><th>VMOVAPS xmm2/m128 {k1}{z}, xmm1 
</th><td>EVEX.128.0F.W0 29 /r 
</td></tr>
<tr><th>VMOVAPS ymm2/m256 {k1}{z}, ymm1 
</th><td>EVEX.256.0F.W0 29 /r 
</td></tr>
<tr><th>VMOVAPS zmm2/m512 {k1}{z}, zmm1
</th><td>EVEX.512.0F.W0 29 /r 
</td></tr>
<tr><th>VMOVAPS zmm1 {k1}, zmm2/mem
</th><td>MVEX.512.0F.W0 28 /r
</td></tr>
<tr><th>VMOVAPS zmm2/mem {k1}, zmm1
</th><td>MVEX.512.0F.W0 29 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x28 || 0x29</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5476.htm">t5476</a>
</dd>
</dl><pre>
IizVMOVAPS:: PROC
    IiAllowModifier MASK,CODE
    IiDisp8EVEX FVM
    IiDisp8MVEX Dn32
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, mem.xmm, ymm.ymm, ymm.mem, mem.ymm, zmm.zmm, zmm.mem, mem.zmm
.xmm.xmm:
    IiDispatchCode LONG=.mem.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.0F.WIG, EVEX.128.0F.W0
 .S:IiEncoding DATA=DWORD,CODE=SHORT
    IiEmitOpcode 0x28
    IiOpEn RM
    RET
.mem.xmm:    
    IiEmitPrefix VEX.128.0F.WIG, EVEX.128.0F.W0
 .L:IiEncoding DATA=DWORD,CODE=LONG
    IiEmitOpcode 0x29
    IiOpEn MR
    RET
.ymm.ymm:
    IiDispatchCode LONG=.mem.ymm:
.ymm.mem:
    IiEmitPrefix VEX.256.0F.WIG, EVEX.256.0F.W0
    JMP .S:
.mem.ymm:
    IiEmitPrefix VEX.256.0F.WIG, EVEX.256.0F.W0
    JMP .L:
.zmm.zmm:
    IiDispatchCode LONG=.mem.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.0F.W0, MVEX.512.0F.W0
    JMP .S:
.mem.zmm:
    IiEmitPrefix EVEX.512.0F.W0, MVEX.512.0F.W0
    JMP .L:
  ENDP IizVMOVAPS::
</pre>

<dl id="IizVMOVAPD">
<dt><a href="#IizHandlers">&uarr; VMOVAPD</a></dt>
<dd>Move Aligned Packed Double-Precision Floating-Point Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVAPD xmm1, xmm2/m128
</th><td>VEX.128.66.0F.WIG 28 /r 
</td></tr>
<tr><th>VMOVAPD xmm2/m128, xmm1
</th><td>VEX.128.66.0F.WIG 29 /r 
</td></tr>
<tr><th>VMOVAPD ymm1, ymm2/m256
</th><td>VEX.256.66.0F.WIG 28 /r 
</td></tr>
<tr><th>VMOVAPD ymm2/m256, ymm1
</th><td>VEX.256.66.0F.WIG 29 /r 
</td></tr>
<tr><th>VMOVAPD xmm1 {k1}{z}, xmm2/m128 
</th><td>EVEX.128.66.0F.W1 28 /r 
</td></tr>
<tr><th>VMOVAPD ymm1 {k1}{z}, ymm2/m256 
</th><td>EVEX.256.66.0F.W1 28 /r 
</td></tr>
<tr><th>VMOVAPD zmm1 {k1}{z}, zmm2/m512 
</th><td>EVEX.512.66.0F.W1 28 /r 
</td></tr>
<tr><th>VMOVAPD xmm2/m128 {k1}{z}, xmm1 
</th><td>EVEX.128.66.0F.W1 29 /r 
</td></tr>
<tr><th>VMOVAPD ymm2/m256 {k1}{z}, ymm1 
</th><td>EVEX.256.66.0F.W1 29 /r 
</td></tr>
<tr><th>VMOVAPD zmm2/m512 {k1}{z}, zmm1
</th><td>EVEX.512.66.0F.W1 29 /r 
</td></tr>
<tr><th>VMOVAPD zmm1 {k1}{z}, zmm2/m512 
</th><td>MVEX.512.66.0F.W1 28 /r
</td></tr>
<tr><th>VMOVAPD zmm2/m512 {k1}{z}, zmm1
</th><td>MVEX.512.66.0F.W1 29 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x28 || 0x29</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5476.htm">t5476</a>
</dd>
</dl><pre>
IizVMOVAPD:: PROC
    IiAllowModifier MASK, CODE
    IiDisp8EVEX FVM
    IiDisp8MVEX Di64
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, mem.xmm, ymm.ymm, ymm.mem, mem.ymm, zmm.zmm, zmm.mem, mem.zmm
.xmm.xmm:
    IiDispatchCode LONG=.mem.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.66.0F.WIG, EVEX.128.66.0F.W1
 .S:IiEncoding DATA=QWORD,CODE=SHORT
    IiEmitOpcode 0x28
    IiOpEn RM
    RET
.mem.xmm:
    IiEmitPrefix VEX.128.66.0F.WIG, EVEX.128.66.0F.W1
 .L:IiEncoding DATA=QWORD,CODE=LONG
    IiEmitOpcode 0x29
    IiOpEn MR
    RET
.ymm.ymm:
    IiDispatchCode LONG=.mem.ymm:
.ymm.mem:
    IiEmitPrefix VEX.256.66.0F.WIG, EVEX.256.66.0F.W1
    JMP .S:
.mem.ymm:
    IiEmitPrefix VEX.256.66.0F.WIG, EVEX.256.66.0F.W1
    JMP .L:
.zmm.zmm:
    IiDispatchCode LONG=.mem.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F.W1, MVEX.512.66.0F.W1
    JMP .S:
.mem.zmm:
    IiEmitPrefix EVEX.512.66.0F.W1, MVEX.512.66.0F.W1
    JMP .L:
  ENDP IizVMOVAPD::
</pre>

<dl id="IizVMOVLPS">
<dt><a href="#IizHandlers">&uarr; VMOVLPS</a></dt>
<dd>Move Low Packed Single-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVLPS xmm2, xmm1, m64
</th><td>VEX.NDS.128.0F.WIG 12 /r 
</td></tr>
<tr><th>VMOVLPS xmm2, xmm1, m64
</th><td>EVEX.NDS.128.0F.W0 12 /r 
</td></tr>
<tr><th>VMOVLPS m64, xmm1
</th><td>VEX.128.0F.WIG 13/r 
</td></tr>
<tr><th>VMOVLPS m64, xmm1
</th><td>EVEX.128.0F.W0 13/r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdfp,datamov</dd>
<dt>Operands</dt>
<dd><b>Vq</b>,Mq | <b>Mq</b>,Vq</dd>
<dt>Opcode</dt>
<dd>0x0F12 /r | 0x0F13 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5480.htm">t5480</a>
</dd>
</dl><pre>
IizVMOVLPS:: PROC
    MOV AL,0x12
    MOV CL,0x13
.op:IiDisp8EVEX T1S64
    IiModRM /r
    IiEncoding DATA=DWORD
    IiDispatchFormat  xmm.xmm.mem, mem.xmm
.xmm.xmm.mem:
    IiEmitOpcode EAX
    IiEmitPrefix VEX.NDS.128.0F.WIG, EVEX.NDS.128.0F.W0
    IiOpEn RVM
    RET
.mem.xmm:
    IiEmitOpcode ECX
    IiEmitPrefix VEX.128.0F.WIG, EVEX.128.0F.W0
    IiOpEn MR
    RET
  ENDP IizVMOVLPS::
</pre>

<dl id="IizVMOVHPS">
<dt><a href="#IizVMOVLPS">&uarr; VMOVHPS</a></dt>
<dd>Move High Packed Single-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVHPS xmm2, xmm1, m64
</th><td>VEX.NDS.128.0F.WIG 16 /r 
</td></tr>
<tr><th>VMOVHPS xmm2, xmm1, m64
</th><td>EVEX.NDS.128.0F.W0 16 /r 
</td></tr>
<tr><th>VMOVHPS m64, xmm1
</th><td>VEX.128.0F.WIG 17 /r 
</td></tr>
<tr><th>VMOVHPS m64, xmm1
</th><td>EVEX.128.0F.W0 17 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdfp,datamov</dd>
<dt>Operands</dt>
<dd><b>Vq</b>,Mq | <b>Mq</b>,Vq</dd>
<dt>Opcode</dt>
<dd>0x0F16 /r | 0x0F17 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5480.htm">t5480</a>
</dd>
</dl><pre>
IizVMOVHPS:: PROC
    MOV AL,0x16
    MOV CL,0x17
    JMP IizVMOVLPS.op:
  ENDP IizVMOVHPS::
</pre>

<dl id="IizVMOVLPD">
<dt><a href="#IizHandlers">&uarr; VMOVLPD</a></dt>
<dd>Move Low Packed Double-FP Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVLPD xmm2, xmm1, m64
</th><td>VEX.NDS.128.66.0F.WIG 12 /r 
</td></tr>
<tr><th>VMOVLPD xmm2, xmm1, m64
</th><td>EVEX.NDS.128.66.0F.W1 12 /r 
</td></tr>
<tr><th>VMOVLPD m64, xmm1
</th><td>VEX.128.66.0F.WIG 13/r
</td></tr>
<tr><th>VMOVLPD m64, xmm1
</th><td>EVEX.128.66.0F.W1 13/r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,datamov</dd>
<dt>Operands</dt>
<dd><b>Vq</b>,Mq | <b>Mq</b>,Vq</dd>
<dt>Opcode</dt>
<dd>0x660F12 /r | 0x660F13 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5480.htm">t5480</a>
</dd>
</dl><pre>
IizVMOVLPD:: PROC
    MOV AL,0x12
    MOV CL,0x13
.op:IiDisp8EVEX T1S64
    IiModRM /r
    IiEncoding DATA=QWORD
    IiDispatchFormat  xmm.xmm.mem, mem.xmm
.xmm.xmm.mem:
    IiEmitOpcode EAX
    IiEmitPrefix VEX.NDS.128.66.0F.WIG, EVEX.NDS.128.66.0F.W1
    IiOpEn RVM
    RET
.mem.xmm:
    IiEmitOpcode ECX
    IiEmitPrefix VEX.128.66.0F.WIG, EVEX.128.66.0F.W1
    IiOpEn MR
    RET
  ENDP IizVMOVLPD::
</pre>

<dl id="IizVMOVHPD">
<dt><a href="#IizVMOVLPD">&uarr; VMOVHPD</a></dt>
<dd>Move High Packed Double-FP Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVHPD xmm2, xmm1, m64
</th><td>VEX.NDS.128.66.0F.WIG 16 /r 
</td></tr>
<tr><th>VMOVHPD xmm2, xmm1, m64
</th><td>EVEX.NDS.128.66.0F.W1 16 /r
</td></tr>
<tr><th>VMOVHPD m64, xmm1
</th><td>VEX.128.66.0F.WIG 17 /r 
</td></tr>
<tr><th>VMOVHPD m64, xmm1
</th><td>EVEX.128.66.0F.W1 17 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,datamov</dd>
<dt>Operands</dt>
<dd><b>Vq</b>,Mq | <b>Mq</b>,Vq</dd>
<dt>Opcode</dt>
<dd>0x660F16 /r | 0x660F17 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5480.htm">t5480</a>
</dd>
</dl><pre>
IizVMOVHPD:: PROC
    MOV AL,0x16
    MOV CL,0x17
    JMP IizVMOVLPD.op:
  ENDP IizVMOVHPD::
</pre>

<dl id="IizVMOVLHPS">
<dt><a href="#IizHandlers">&uarr; VMOVLHPS</a></dt>
<dd>Move Packed Single-FP Values Low to High</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVLHPS xmm1, xmm2, xmm3
</th><td>VEX.NDS.128.0F.WIG 16 /r 
</td></tr>
<tr><th>VMOVLHPS xmm1, xmm2, xmm3
</th><td>EVEX.NDS.128.0F.W0 16 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdfp,datamov</dd>
<dt>Operands</dt>
<dd><b>Vq</b>,Uq</dd>
<dt>Opcode</dt>
<dd>0x0F16 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5480.htm">t5480</a>
</dd>
</dl><pre>
IizVMOVLHPS:: PROC
    IiEmitOpcode 0x16
.op:IiOpEn RVM
    IiEmitPrefix VEX.NDS.128.0F.WIG, EVEX.NDS.128.0F.W0
    IiModRM /r
    IiEncoding DATA=DWORD
    IiDispatchFormat  xmm.xmm.xmm
.xmm.xmm.xmm:
    RET
  ENDP IizVMOVLHPS::
</pre>

<dl id="IizVMOVHLPS">
<dt><a href="#IizVMOVLHPS">&uarr; VMOVHLPS</a></dt>
<dd>Move Packed Single-FP Values High to Low</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVHLPS xmm1, xmm2, xmm3
</th><td>VEX.NDS.128.0F.WIG 12 /r 
</td></tr>
<tr><th>VMOVHLPS xmm1, xmm2, xmm3
</th><td>EVEX.NDS.128.0F.W0 12 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdfp,datamov</dd>
<dt>Operands</dt>
<dd><b>Vq</b>,Uq</dd>
<dt>Opcode</dt>
<dd>0x0F12 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5480.htm">t5480</a>
</dd>
</dl><pre>
IizVMOVHLPS:: PROC
    IiEmitOpcode 0x12
    JMP IizVMOVLHPS.op:
  ENDP IizVMOVHLPS::
</pre>

<dl id="IizVMOVSLDUP">
<dt><a href="#IizHandlers">&uarr; VMOVSLDUP</a></dt>
<dd>Move Packed Single-FP Low and Duplicate</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVSLDUP xmm1, xmm2/m128
</th><td>VEX.128.F3.0F.WIG 12 /r 
</td></tr>
<tr><th>VMOVSLDUP ymm1, ymm2/m256
</th><td>VEX.256.F3.0F.WIG 12 /r 
</td></tr>
<tr><th>VMOVSLDUP xmm1 {k1}{z}, xmm2/m128
</th><td>EVEX.128.F3.0F.W0 12 /r 
</td></tr>
<tr><th>VMOVSLDUP ymm1 {k1}{z}, ymm2/m256
</th><td>EVEX.256.F3.0F.W0 12 /r 
</td></tr>
<tr><th>VMOVSLDUP zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.F3.0F.W0 12 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse3,simdfp,datamov</dd>
<dt>Operands</dt>
<dd><b>Vq</b>,Wq</dd>
<dt>Opcode</dt>
<dd>0xF30F12 /r</dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5482.htm">t5482</a>
</dd>
</dl><pre>
IizVMOVSLDUP:: PROC
    IiEmitOpcode 0x12
.op:IiAllowModifier MASK
    IiDisp8EVEX FV32
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.mem:
.xmm.xmm:
    IiEmitPrefix VEX.128.F3.0F.WIG, EVEX.128.F3.0F.W0
    RET
.ymm.mem:
.ymm.ymm:
    IiEmitPrefix VEX.256.F3.0F.WIG, EVEX.256.F3.0F.W0
    RET
.zmm.mem:
.zmm.zmm:
    IiEmitPrefix EVEX.512.F3.0F.W0
    RET
  ENDP IizVMOVSLDUP::
</pre>

<dl id="IizVMOVSHDUP">
<dt><a href="#IizHandlers">&uarr; VMOVSHDUP</a></dt>
<dd>Move Packed Single-FP High and Duplicate</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVSHDUP xmm1, xmm2/m128
</th><td>VEX.128.F3.0F.WIG 16 /r 
</td></tr>
<tr><th>VMOVSHDUP ymm1, ymm2/m256
</th><td>VEX.256.F3.0F.WIG 16 /r 
</td></tr>
<tr><th>VMOVSHDUP xmm1 {k1}{z}, xmm2/m128
</th><td>EVEX.128.F3.0F.W0 16 /r 
</td></tr>
<tr><th>VMOVSHDUP ymm1 {k1}{z}, ymm2/m256
</th><td>EVEX.256.F3.0F.W0 16 /r 
</td></tr>
<tr><th>VMOVSHDUP zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.F3.0F.W0 16 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse3,simdfp,datamov</dd>
<dt>Operands</dt>
<dd><b>Vq</b>,Wq</dd>
<dt>Opcode</dt>
<dd>0xF30F16 /r</dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5482.htm">t5482</a>
</dd>
</dl><pre>
IizVMOVSHDUP:: PROC
    IiEmitOpcode 0x16
    JMP IizVMOVSLDUP.op:
  ENDP IizVMOVSHDUP::
</pre>

<dl id="IizVMOVDQA">
<dt><a href="#IizHandlers">&uarr; VMOVDQA</a></dt>
<dd>Move Aligned Double Quadword</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVDQA xmm1, xmm2/m128
</th><td>VEX.128.66.0F.WIG 6F /r 
</td></tr>
<tr><th>VMOVDQA xmm2/m128, xmm1
</th><td>VEX.128.66.0F.WIG 7F /r 
</td></tr>
<tr><th>VMOVDQA ymm1, ymm2/m256
</th><td>VEX.256.66.0F.WIG 6F /r 
</td></tr>
<tr><th>VMOVDQA ymm2/m256, ymm1
</th><td>VEX.256.66.0F.WIG 7F /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,simdint,datamov</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq | <b>Wdq</b>,Vdq</dd>
<dt>Opcode</dt>
<dd>0x660F6F /r | 0x660F7F /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5484.htm">t5484</a>
</dd>
</dl><pre>
IizVMOVDQA:: PROC
    IiAllowModifier MASK,CODE
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, mem.xmm, ymm.ymm, ymm.mem, mem.ymm
.xmm.xmm:
    IiDispatchCode LONG=.mem.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.66.0F.WIG
 .S:IiEncoding CODE=SHORT
    IiEmitOpcode 0x6F
    IiOpEn RM
    RET
.mem.xmm:
    IiEmitPrefix VEX.128.66.0F.WIG
 .L:IiEncoding CODE=LONG
    IiEmitOpcode 0x7F
    IiOpEn MR
    RET
.ymm.ymm:
    IiDispatchCode LONG=.mem.ymm:
.ymm.mem:
    IiEmitPrefix VEX.256.66.0F.WIG
    JMP .S:
.mem.ymm:
    IiEmitPrefix VEX.256.66.0F.WIG
    JMP .L:
  ENDP IizVMOVDQA::
</pre>

<dl id="IizVMOVQQA">
<dt><a href="#IizVMOVDQA">&uarr; VMOVQQA</a></dt>
<dd>Move Aligned Double Quadword</dd>
<dt>Comment</dt>
<dd>Alias to VMOVDQA for better compatibility with NASM.</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVQQA xmm1, xmm2/m128
</th><td>VEX.128.66.0F.WIG 6F /r
</td></tr>
<tr><th>VMOVQQA xmm2/m128, xmm1
</th><td>VEX.128.66.0F.WIG 7F /r
</td></tr>
<tr><th>VMOVQQA ymm1, ymm2/m256
</th><td>VEX.256.66.0F.WIG 6F /r
</td></tr>
<tr><th>VMOVQQA ymm2/m256, ymm1
</th><td>VEX.256.66.0F.WIG 7F /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,simdint,datamov</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq | <b>Wdq</b>,Vdq</dd>
<dt>Opcode</dt>
<dd>0x660F6F /r | 0x660F7F /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5484.htm">t5484</a>
</dd>
</dl><pre>
IizVMOVQQA:: PROC
    JMP IizVMOVDQA:
  ENDP IizVMOVQQA::
</pre>

<dl id="IizVMOVDQA32">
<dt><a href="#IizHandlers">&uarr; VMOVDQA32</a></dt>
<dd>Move Aligned Packed DWORD Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVDQA32 xmm1 {k1}{z}, xmm2/m128
</th><td>EVEX.128.66.0F.W0 6F /r 
</td></tr>
<tr><th>VMOVDQA32 ymm1 {k1}{z}, ymm2/m256 
</th><td>EVEX.256.66.0F.W0 6F /r 
</td></tr>
<tr><th>VMOVDQA32 zmm1 {k1}{z}, zmm2/m512 
</th><td>EVEX.512.66.0F.W0 6F /r 
</td></tr>
<tr><th>VMOVDQA32 xmm2/m128 {k1}{z}, xmm1
</th><td>EVEX.128.66.0F.W0 7F /r 
</td></tr>
<tr><th>VMOVDQA32 ymm2/m256 {k1}{z}, ymm1
</th><td>EVEX.256.66.0F.W0 7F /r 
</td></tr>
<tr><th>VMOVDQA32 zmm2/m512 {k1}{z}, zmm1
</th><td>EVEX.512.66.0F.W0 7F /r 
</td></tr>
<tr><th>VMOVDQA32 zmm1 {k1}, zmm2/mem
</th><td>MVEX.512.66.0F.W0 6F /r 
</td></tr>
<tr><th>VMOVDQA32 zmm1/mem {k1}, zmm2
</th><td>MVEX.512.66.0F.W0 7F /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x6F | 0x7F</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5484.htm">t5484</a>
</dd>
</dl><pre>
IizVMOVDQA32:: PROC
    IiAllowModifier MASK,CODE
    IiDisp8EVEX FV32
    IiDisp8MVEX Un32
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem, mem.xmm, mem.ymm, mem.zmm
.xmm.xmm:
    IiDispatchCode LONG=.mem.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F.W0
 .S:IiEncoding DATA=DWORD,CODE=SHORT
    IiEmitOpcode 0x6F     
    IiOpEn RM
    RET
.mem.xmm:
    IiEmitPrefix EVEX.128.66.0F.W0
 .L:IiEncoding DATA=DWORD,CODE=LONG
    IiEmitOpcode 0x7F     
    IiOpEn MR
    RET
.ymm.ymm:
    IiDispatchCode LONG=.mem.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F.W0
    JMP .S:
.mem.ymm:
    IiEmitPrefix EVEX.256.66.0F.W0
    JMP .L:
.zmm.zmm:
    IiDispatchCode LONG=.mem.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F.W0, MVEX.512.66.0F.W0
    JMP .S:
.mem.zmm:
    IiEmitPrefix EVEX.512.66.0F.W0, MVEX.512.66.0F.W0
    JMP .L:
  ENDP IizVMOVDQA32::
</pre>

<dl id="IizVMOVDQA64">
<dt><a href="#IizHandlers">&uarr; VMOVDQA64</a></dt>
<dd>Move Aligned Packed QWORD Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVDQA64 xmm1 {k1}{z}, xmm2/m128 
</th><td>EVEX.128.66.0F.W1 6F /r 
</td></tr>
<tr><th>VMOVDQA64 ymm1 {k1}{z}, ymm2/m256 
</th><td>EVEX.256.66.0F.W1 6F /r 
</td></tr>
<tr><th>VMOVDQA64 zmm1 {k1}{z}, zmm2/m512 
</th><td>EVEX.512.66.0F.W1 6F /r 
</td></tr>
<tr><th>VMOVDQA64 xmm2/m128 {k1}{z}, xmm1
</th><td>EVEX.128.66.0F.W1 7F /r 
</td></tr>
<tr><th>VMOVDQA64 ymm2/m256 {k1}{z}, ymm1
</th><td>EVEX.256.66.0F.W1 7F /r 
</td></tr>
<tr><th>VMOVDQA64 zmm2/m512 {k1}{z}, zmm1
</th><td>EVEX.512.66.0F.W1 7F /r 
</td></tr>
<tr><th>VMOVDQA64 zmm1 {k1}, zmm2/m512 
</th><td>MVEX.512.66.0F.W1 6F /r 
<tr><th>VMOVDQA64 zmm1/m512 {k1}, zmm2
</th><td>MVEX.512.66.0F.W1 7F /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x6F | 0x7F</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5484.htm">t5484</a>
</dd>
</dl><pre>
IizVMOVDQA64:: PROC
    IiAllowModifier MASK,CODE
    IiDisp8EVEX FV64
    IiDisp8MVEX Di64
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem, mem.xmm, mem.ymm, mem.zmm
.xmm.xmm:
    IiDispatchCode LONG=.mem.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F.W1
 .S:IiEncoding DATA=QWORD,CODE=SHORT
    IiEmitOpcode 0x6F     
    IiOpEn RM
    RET
.mem.xmm:
    IiEmitPrefix EVEX.128.66.0F.W1
 .L:IiEncoding DATA=QWORD,CODE=LONG
    IiEmitOpcode 0x7F     
    IiOpEn MR
    RET
.ymm.ymm:
    IiDispatchCode LONG=.mem.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F.W1
    JMP .S:
.mem.ymm:
    IiEmitPrefix EVEX.256.66.0F.W1
    JMP .L:
.zmm.zmm:
    IiDispatchCode LONG=.mem.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F.W1, MVEX.512.66.0F.W1
    JMP .S:
.mem.zmm:
    IiEmitPrefix EVEX.512.66.0F.W1, MVEX.512.66.0F.W1
    JMP .L:
  ENDP IizVMOVDQA64::
</pre>

<dl id="IizVMOVDQU">
<dt><a href="#IizHandlers">&uarr; VMOVDQU</a></dt>
<dd>Move Unaligned Double Quadword</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVDQU xmm1, xmm2/m128
</th><td>VEX.128.F3.0F.WIG 6F /r 
</td></tr>
<tr><th>VMOVDQU xmm2/m128, xmm1
</th><td>VEX.128.F3.0F.WIG 7F /r 
</td></tr>
<tr><th>VMOVDQU ymm1, ymm2/m256
</th><td>VEX.256.F3.0F.WIG 6F /r 
</td></tr>
<tr><th>VMOVDQU ymm2/m256, ymm1
</th><td>VEX.256.F3.0F.WIG 7F /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,simdint,datamov</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq | <b>Wdq</b>,Vdq</dd>
<dt>Opcode</dt>
<dd>0xF30F6F /r | 0xF30F7F /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5486.htm">t5486</a>
</dd>
</dl><pre>
IizVMOVDQU:: PROC
    IiAllowModifier CODE
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, mem.xmm, ymm.ymm, ymm.mem, mem.ymm
.xmm.xmm:
    IiDispatchCode LONG=.mem.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.F3.0F.WIG
 .S:IiEncoding CODE=SHORT
    IiEmitOpcode 0x6F
    IiOpEn RM
    RET
.mem.xmm:
    IiEmitPrefix VEX.128.F3.0F.WIG
 .L:IiEncoding CODE=LONG
    IiEmitOpcode 0x7F
    IiOpEn MR
    RET
.ymm.ymm:
    IiDispatchCode LONG=.mem.ymm:
.ymm.mem:
    IiEmitPrefix VEX.256.F3.0F.WIG
    JMP .S:
.mem.ymm:
    IiEmitPrefix VEX.256.F3.0F.WIG
    JMP .L:
  ENDP IizVMOVDQU::
</pre>

<dl id="IizVMOVQQU">
<dt><a href="#IizVMOVDQU">&uarr; VMOVQQU</a></dt>
<dd>Move Unaligned Double Quadword</dd>
<dt>Comment</dt>
<dd>Alias to VMOVDQU for better compatibility with NASM.</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVQQU xmm1, xmm2/m128
</th><td>VEX.128.F3.0F.WIG 6F /r
</td></tr>
<tr><th>VMOVQQU xmm2/m128, xmm1
</th><td>VEX.128.F3.0F.WIG 7F /r
</td></tr>
<tr><th>VMOVQQU ymm1, ymm2/m256
</th><td>VEX.256.F3.0F.WIG 6F /r
</td></tr>
<tr><th>VMOVQQU ymm2/m256, ymm1
</th><td>VEX.256.F3.0F.WIG 7F /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,simdint,datamov</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq | <b>Wdq</b>,Vdq</dd>
<dt>Opcode</dt>
<dd>0xF30F6F /r | 0xF30F7F /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5486.htm">t5486</a>
</dd>
</dl><pre>
IizVMOVQQU:: PROC
    JMP IizVMOVDQU:
  ENDP IizVMOVQQU::
</pre>

<dl id="IizVMOVDQU8">
<dt><a href="#IizHandlers">&uarr; VMOVDQU8</a></dt>
<dd>Move Unaligned Packed BYTE Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVDQU8 xmm1 {k1}{z}, xmm2/m128 
</th><td>EVEX.128.F2.0F.W0 6F /r 
</td></tr>
<tr><th>VMOVDQU8 ymm1 {k1}{z}, ymm2/m256  
</th><td>EVEX.256.F2.0F.W0 6F /r 
</td></tr>
<tr><th>VMOVDQU8 zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.F2.0F.W0 6F /r 
</td></tr>
<tr><th>VMOVDQU8 xmm2/m128 {k1}{z}, xmm1 
</th><td>EVEX.128.F2.0F.W0 7F /r 
</td></tr>
<tr><th>VMOVDQU8 ymm2/m256 {k1}{z}, ymm1 
</th><td>EVEX.256.F2.0F.W0 7F /r 
</td></tr>
<tr><th>VMOVDQU8 zmm2/m512 {k1}{z}, zmm1
</th><td>EVEX.512.F2.0F.W0 7F /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x6F | 0x7F</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5486.htm">t5486</a>
</dd>
</dl><pre>
IizVMOVDQU8:: PROC
    IiAllowModifier MASK,CODE
    IiDisp8EVEX FVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem, mem.xmm, mem.ymm, mem.zmm
.xmm.xmm:
    IiDispatchCode LONG=.mem.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.F2.0F.W0
 .S:IiEncoding DATA=BYTE,CODE=SHORT
    IiEmitOpcode 0x6F
    IiOpEn RM
    RET
.mem.xmm:
    IiEmitPrefix EVEX.128.F2.0F.W0
 .L:IiEncoding DATA=BYTE,CODE=LONG
    IiEmitOpcode 0x7F
    IiOpEn MR
    RET
.ymm.ymm:
    IiDispatchCode LONG=.mem.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.F2.0F.W0
    JMP .S:
.mem.ymm:
    IiEmitPrefix EVEX.256.F2.0F.W0
    JMP .L:
.zmm.zmm:
    IiDispatchCode LONG=.mem.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.F2.0F.W0
    JMP .S:
.mem.zmm:
    IiEmitPrefix EVEX.512.F2.0F.W0
    JMP .L:
  ENDP IizVMOVDQU8::
</pre>

<dl id="IizVMOVDQU16">
<dt><a href="#IizHandlers">&uarr; VMOVDQU16</a></dt>
<dd>Move Unaligned Packed WORD Integer Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVDQU16 xmm1 {k1}{z}, xmm2/m128 
</th><td>EVEX.128.F2.0F.W1 6F /r 
</td></tr>
<tr><th>VMOVDQU16 ymm1 {k1}{z}, ymm2/m256 
</th><td>EVEX.256.F2.0F.W1 6F /r 
</td></tr>
<tr><th>VMOVDQU16 zmm1 {k1}{z}, zmm2/m512 
</th><td>EVEX.512.F2.0F.W1 6F /r 
</td></tr>
<tr><th>VMOVDQU16 xmm2/m128 {k1}{z}, xmm1
</th><td>EVEX.128.F2.0F.W1 7F /r 
</td></tr>
<tr><th>VMOVDQU16 ymm2/m256 {k1}{z}, ymm1 
</th><td>EVEX.256.F2.0F.W1 7F /r 
</td></tr>
<tr><th>VMOVDQU16 zmm2/m512 {k1}{z}, zmm1
</th><td>EVEX.512.F2.0F.W1 7F /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x6F | 0x7F</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5486.htm">t5486</a>
</dd>
</dl><pre>
IizVMOVDQU16:: PROC
  IiAllowModifier MASK,CODE
    IiDisp8EVEX FVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem, mem.xmm, mem.ymm, mem.zmm
.xmm.xmm:
    IiDispatchCode LONG=.mem.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.F2.0F.W1
 .S:IiEncoding DATA=BYTE,CODE=SHORT
    IiEmitOpcode 0x6F
    IiOpEn RM
    RET
.mem.xmm:
    IiEmitPrefix EVEX.128.F2.0F.W1
 .L:IiEncoding DATA=BYTE,CODE=LONG
    IiEmitOpcode 0x7F
    IiOpEn MR
    RET
.ymm.ymm:
    IiDispatchCode LONG=.mem.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.F2.0F.W1
    JMP .S:
.mem.ymm:
    IiEmitPrefix EVEX.256.F2.0F.W1
    JMP .L:
.zmm.zmm:
    IiDispatchCode LONG=.mem.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.F2.0F.W1
    JMP .S:
.mem.zmm:
    IiEmitPrefix EVEX.512.F2.0F.W1
    JMP .L:
  ENDP IizVMOVDQU16::
</pre>

<dl id="IizVMOVDQU32">
<dt><a href="#IizHandlers">&uarr; VMOVDQU32</a></dt>
<dd>Move Unaligned Packed DWORD Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVDQU32 xmm1 {k1}{z}, xmm2/m128
</th><td>EVEX.128.F3.0F.W0 6F /r 
</td></tr>
<tr><th>VMOVDQU32 ymm1 {k1}{z}, ymm2/m256
</th><td>EVEX.256.F3.0F.W0 6F /r 
</td></tr>
<tr><th>VMOVDQU32 zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.F3.0F.W0 6F /r 
</td></tr>
<tr><th>VMOVDQU32 xmm2/m128 {k1}{z}, xmm1
</th><td>EVEX.128.F3.0F.W0 7F /r 
</td></tr>
<tr><th>VMOVDQU32 ymm2/m256 {k1}{z}, ymm1
</th><td>EVEX.256.F3.0F.W0 7F /r 
</td></tr>
<tr><th>VMOVDQU32 zmm2/m512 {k1}{z}, zmm1
</th><td>EVEX.512.F3.0F.W0 7F /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x6F | 0x7F</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5486.htm">t5486</a>
</dd>
</dl><pre>
IizVMOVDQU32:: PROC
  IiAllowModifier MASK,CODE
    IiDisp8EVEX FVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem, mem.xmm, mem.ymm, mem.zmm
.xmm.xmm:
    IiDispatchCode LONG=.mem.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.F3.0F.W0
 .S:IiEncoding DATA=BYTE,CODE=SHORT
    IiEmitOpcode 0x6F
    IiOpEn RM
    RET
.mem.xmm:
    IiEmitPrefix EVEX.128.F3.0F.W0
 .L:IiEncoding DATA=BYTE,CODE=LONG
    IiEmitOpcode 0x7F
    IiOpEn MR
    RET
.ymm.ymm:
    IiDispatchCode LONG=.mem.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.F3.0F.W0
    JMP .S:
.mem.ymm:
    IiEmitPrefix EVEX.256.F3.0F.W0
    JMP .L:
.zmm.zmm:
    IiDispatchCode LONG=.mem.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.F3.0F.W0
    JMP .S:
.mem.zmm:
    IiEmitPrefix EVEX.512.F3.0F.W0
    JMP .L:
   ENDP IizVMOVDQU32::
</pre>

<dl id="IizVMOVDQU64">
<dt><a href="#IizHandlers">&uarr; VMOVDQU64</a></dt>
<dd>Move Unaligned Packed QWORD Integer Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVDQU64 xmm1 {k1}{z}, xmm2/m128  
</th><td>EVEX.128.F3.0F.W1 6F /r 
</td></tr>
<tr><th>VMOVDQU64 ymm1 {k1}{z}, ymm2/m256  
</th><td>EVEX.256.F3.0F.W1 6F /r 
</td></tr>
<tr><th>VMOVDQU64 zmm1 {k1}{z}, zmm2/m512 
</th><td>EVEX.512.F3.0F.W1 6F /r 
</td></tr>
<tr><th>VMOVDQU64 xmm2/m128 {k1}{z}, xmm1 
</th><td>EVEX.128.F3.0F.W1 7F /r 
</td></tr>
<tr><th>VMOVDQU64 ymm2/m256 {k1}{z}, ymm1 
</th><td>EVEX.256.F3.0F.W1 7F /r 
</td></tr>
<tr><th>VMOVDQU64 zmm2/m512 {k1}{z}, zmm1
</th><td>EVEX.512.F3.0F.W1 7F /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x6F | 0x7F</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5486.htm">t5486</a>
</dd>
</dl><pre>
IizVMOVDQU64:: PROC
  IiAllowModifier MASK,CODE
    IiDisp8EVEX FVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem, mem.xmm, mem.ymm, mem.zmm
.xmm.xmm:
    IiDispatchCode LONG=.mem.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.F3.0F.W1
 .S:IiEncoding DATA=BYTE,CODE=SHORT
    IiEmitOpcode 0x6F
    IiOpEn RM
    RET
.mem.xmm:
    IiEmitPrefix EVEX.128.F3.0F.W1
 .L:IiEncoding DATA=BYTE,CODE=LONG
    IiEmitOpcode 0x7F
    IiOpEn MR
    RET
.ymm.ymm:
    IiDispatchCode LONG=.mem.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.F3.0F.W1
    JMP .S:
.mem.ymm:
    IiEmitPrefix EVEX.256.F3.0F.W1
    JMP .L:
.zmm.zmm:
    IiDispatchCode LONG=.mem.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.F3.0F.W1
    JMP .S:
.mem.zmm:
    IiEmitPrefix EVEX.512.F3.0F.W1
    JMP .L:
  ENDP IizVMOVDQU64::
</pre>

<dl id="IizVMOVMSKPS">
<dt><a href="#IizHandlers">&uarr; VMOVMSKPS</a></dt>
<dd>Extract Packed Single-FP Sign Mask</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVMSKPS reg, xmm2
</th><td>VEX.128.0F.WIG 50 /r
</td></tr>
<tr><th>VMOVMSKPS reg, ymm2
</th><td>VEX.256.0F.WIG 50 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdfp,datamov</dd>
<dt>Operands</dt>
<dd><b>Gdqp</b>,Ups</dd>
<dt>Opcode</dt>
<dd>0x0F50 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5490.htm">t5490</a>
</dd>
</dl><pre>
IizVMOVMSKPS:: PROC
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x50
    IiModRM /r
    IiOpEn RM
    IiDispatchFormat  r32.xmm, r32.ymm, r64.xmm, r64.ymm
.r64.xmm:
    IiAbortIfNot64
.r32.xmm:
    IiEmitPrefix VEX.128.0F.WIG
    RET
.r64.ymm:
    IiAbortIfNot64
.r32.ymm:
    IiEmitPrefix VEX.256.0F.WIG
    RET
  ENDP IizVMOVMSKPS::
</pre>

<dl id="IizVMOVMSKPD">
<dt><a href="#IizHandlers">&uarr; VMOVMSKPD</a></dt>
<dd>Extract Packed Double-FP Sign Mask</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVMSKPD reg, xmm2
</th><td>VEX.128.66.0F.WIG 50 /r
</td></tr>
<tr><th>VMOVMSKPD reg, ymm2
</th><td>VEX.256.66.0F.WIG 50 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,datamov</dd>
<dt>Operands</dt>
<dd><b>Gdqp</b>,Upd</dd>
<dt>Opcode</dt>
<dd>0x660F50 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5490.htm">t5490</a>
</dd>
</dl><pre>
IizVMOVMSKPD:: PROC
    IiEncoding DATA=QWORD
    IiEmitOpcode 0x50
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  r32.xmm, r32.ymm, r64.xmm, r64.ymm
.r64.xmm:
    IiAbortIfNot64
.r32.xmm:
    IiEmitPrefix VEX.128.66.0F.WIG
    RET
.r64.ymm:
    IiAbortIfNot64
.r32.ymm:
    IiEmitPrefix VEX.256.66.0F.WIG
    RET
  ENDP IizVMOVMSKPD::
</pre>

<dl id="IizVMOVNTPS">
<dt><a href="#IizHandlers">&uarr; VMOVNTPS</a></dt>
<dd>Store Packed Single-FP Values Using Non-Temporal Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVNTPS m128, xmm1
</th><td>VEX.128.0F.WIG 2B /r
</td></tr>
<tr><th>VMOVNTPS m256, ymm1
</th><td>VEX.256.0F.WIG 2B /r
</td></tr>
<tr><th>VMOVNTPS m128, xmm1
</th><td>EVEX.128.0F.W0 2B /r
</td></tr>
<tr><th>VMOVNTPS m256, ymm1
</th><td>EVEX.256.0F.W0 2B /r
</td></tr>
<tr><th>VMOVNTPS m512, zmm1
</th><td>EVEX.512.0F.W0 2B /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,cachect</dd>
<dt>Operands</dt>
<dd><b>Mps</b>,Vps</dd>
<dt>Opcode</dt>
<dd>0x0F2B /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5492.htm">t5492</a>
</dd>
</dl><pre>
IizVMOVNTPS:: PROC
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x2B
    IiModRM /r
    IiOpEn MR
    IiDisp8EVEX FVM
    IiDispatchFormat  mem.xmm, mem.ymm, mem.zmm
.mem.xmm:
    IiEmitPrefix VEX.128.0F.WIG, EVEX.128.0F.W0
    RET
.mem.ymm:
    IiEmitPrefix VEX.256.0F.WIG, EVEX.256.0F.W0
    RET
.mem.zmm:
    IiEmitPrefix EVEX.512.0F.W0
    RET
  ENDP IizVMOVNTPS::
</pre>

<dl id="IizVMOVNTPD">
<dt><a href="#IizHandlers">&uarr; VMOVNTPD</a></dt>
<dd>Store Packed Double-FP Values Using Non-Temporal Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVNTPD m128, xmm1
</th><td>VEX.128.66.0F.WIG 2B /r 
</td></tr>
<tr><th>VMOVNTPD m256, ymm1
</th><td>VEX.256.66.0F.WIG 2B /r
</td></tr>
<tr><th>VMOVNTPD m128, xmm1
</th><td>EVEX.128.66.0F.W1 2B /r
</td></tr>
<tr><th>VMOVNTPD m256, ymm1
</th><td>EVEX.256.66.0F.W1 2B /r
</td></tr>
<tr><th>VMOVNTPD m512, zmm1
</th><td>EVEX.512.66.0F.W1 2B /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,cachect</dd>
<dt>Operands</dt>
<dd><b>Mpd</b>,Vpd</dd>
<dt>Opcode</dt>
<dd>0x660F2B /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5492.htm">t5492</a>
</dd>
</dl><pre>
IizVMOVNTPD:: PROC
    IiEncoding DATA=QWORD
    IiEmitOpcode 0x2B
    IiModRM /r
    IiOpEn MR
    IiDisp8EVEX FVM
    IiDispatchFormat  mem.xmm, mem.ymm, mem.zmm
.mem.xmm:
    IiEmitPrefix VEX.128.66.0F.WIG, EVEX.128.66.0F.W1
    RET
.mem.ymm:
    IiEmitPrefix VEX.256.66.0F.WIG, EVEX.256.66.0F.W1
    RET
.mem.zmm:
    IiEmitPrefix EVEX.512.66.0F.W1
    RET
  ENDP IizVMOVNTPD::
</pre>

<dl id="IizVMOVNTDQ">
<dt><a href="#IizHandlers">&uarr; VMOVNTDQ</a></dt>
<dd>Store Double Quadword Using Non-Temporal Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVNTDQ m128, xmm1
</th><td>VEX.128.66.0F.WIG E7 /r 
</td></tr>
<tr><th>VMOVNTDQ m256, ymm1
</th><td>VEX.256.66.0F.WIG E7 /r
</td></tr>
<tr><th>VMOVNTDQ m128, xmm1
</th><td>EVEX.128.66.0F E7 /r
</td></tr>
<tr><th>VMOVNTDQ m256, ymm1
</th><td>EVEX.256.66.0F E7 /r
</td></tr>
<tr><th>VMOVNTDQ m512, zmm1
</th><td>EVEX.512.66.0F.W0 E7 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,cachect</dd>
<dt>Operands</dt>
<dd><b>Mdq</b>,Vdq</dd>
<dt>Opcode</dt>
<dd>0x660FE7 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5492.htm">t5492</a>
</dd>
</dl><pre>
IizVMOVNTDQ:: PROC
    IiEmitOpcode 0xE7
    IiModRM /r
    IiOpEn MR
    IiDisp8EVEX FVM
    IiDispatchFormat  mem.xmm, mem.ymm, mem.zmm
.mem.xmm:
    IiEmitPrefix VEX.128.66.0F.WIG, EVEX.128.66.0F
    RET
.mem.ymm:
    IiEmitPrefix VEX.256.66.0F.WIG, EVEX.256.66.0F
    RET
.mem.zmm:
    IiEmitPrefix EVEX.512.66.0F.W0
    RET
  ENDP IizVMOVNTDQ::
</pre>

<dl id="IizVMOVNTQQ">
<dt><a href="#IizVMOVNTDQ">&uarr; VMOVNTQQ</a></dt>
<dd>Store Double Quadword Using Non-Temporal Hint</dd>
<dt>Comment</dt>
<dd>Alias to VMOVNTDQ for better compatibility with NASM.</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVNTQQ m128, xmm1
</th><td>VEX.128.66.0F.WIG E7 /r
</td></tr>
<tr><th>VMOVNTQQ m256, ymm1
</th><td>VEX.256.66.0F.WIG E7 /r
</td></tr>
<tr><th>VMOVNTQQ m128, xmm1
</th><td>EVEX.128.66.0F E7 /r
</td></tr>
<tr><th>VMOVNTQQ m256, ymm1
</th><td>EVEX.256.66.0F E7 /r
</td></tr>
<tr><th>VMOVNTQQ m512, zmm1
</th><td>EVEX.512.66.0F.W0 E7 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,cachect</dd>
<dt>Operands</dt>
<dd><b>Mdq</b>,Vdq</dd>
<dt>Opcode</dt>
<dd>0x660FE7 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5492.htm">t5492</a>
</dd>
</dl><pre>
IizVMOVNTQQ:: PROC
    JMP IizVMOVNTDQ:
  ENDP IizVMOVNTQQ::
</pre>

<dl id="IizVMOVNTDQA">
<dt><a href="#IizHandlers">&uarr; VMOVNTDQA</a></dt>
<dd>Load Double Quadword Non-Temporal Aligned Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVNTDQA xmm1, m128
</th><td>VEX.128.66.0F38.WIG 2A /r 
</td></tr>
<tr><th>VMOVNTDQA ymm1, m256
</th><td>VEX.256.66.0F38.WIG 2A /r 
</td></tr>
<tr><th>VMOVNTDQA xmm1, m128 
</th><td>EVEX.128.66.0F38 2A /r 
</td></tr>
<tr><th>VMOVNTDQA ymm1, m256 
</th><td>EVEX.256.66.0F38 2A /r 
</td></tr>
<tr><th>VMOVNTDQA zmm1, m512
</th><td>EVEX.512.66.0F38.W0 2A /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,cachect</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Mdq</dd>
<dt>Opcode</dt>
<dd>0x660F382A /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5492.htm">t5492</a>
</dd>
</dl><pre>
IizVMOVNTDQA:: PROC
    IiRequire SSE4.1
    IiEmitOpcode 0x2A
    IiModRM /r
    IiOpEn RM
    IiDisp8EVEX FVM
    IiModRM /r
    IiDispatchFormat  xmm.mem, ymm.mem, zmm.mem
.xmm.mem:
    IiEmitPrefix VEX.128.66.0F38.WIG, EVEX.128.66.0F38
    RET
.ymm.mem:
    IiEmitPrefix VEX.256.66.0F38.WIG, EVEX.256.66.0F38
    RET
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W0
    RET
  ENDP IizVMOVNTDQA::
</pre>

<dl id="IizVMOVDDUP">
<dt><a href="#IizHandlers">&uarr; VMOVDDUP</a></dt>
<dd>Move One Double-FP and Duplicate</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVDDUP xmm1, xmm2/m64
</th><td>VEX.128.F2.0F.WIG 12 /r 
</td></tr>
<tr><th>VMOVDDUP ymm1, ymm2/m256
</th><td>VEX.256.F2.0F.WIG 12 /r 
</td></tr>
<tr><th>VMOVDDUP xmm1 {k1}{z}, xmm2/m64
</th><td>EVEX.128.F2.0F.W1 12 /r 
</td></tr>
<tr><th>VMOVDDUP ymm1 {k1}{z}, ymm2/m256
</th><td>EVEX.256.F2.0F.W1 12 /r 
</td></tr>
<tr><th>VMOVDDUP zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.F2.0F.W1 12 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse3,simdfp,datamov</dd>
<dt>Operands</dt>
<dd><b>Vq</b>,Wq</dd>
<dt>Opcode</dt>
<dd>0xF20F12 /r</dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5494.htm">t5494</a>
</dd>
</dl><pre>
IizVMOVDDUP:: PROC
    IiEncoding DATA=QWORD
    IiAllowModifier MASK
    IiDisp8EVEX DUP
    IiEmitOpcode 0x12
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.F2.0F.WIG, EVEX.128.F2.0F.W1
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix VEX.256.F2.0F.WIG, EVEX.256.F2.0F.W1
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.F2.0F.W1
    RET
  ENDP IizVMOVDDUP::
</pre>

<dl id="IizVADDSUBPS">
<dt><a href="#IizHandlers">&uarr; VADDSUBPS</a></dt>
<dd>Packed Single-FP Add/Subtract</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VADDSUBPS xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.F2.0F.WIG D0 /r
</td></tr>
<tr><th>VADDSUBPS ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.F2.0F.WIG D0 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse3,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wps</dd>
<dt>Opcode</dt>
<dd>0xF20FD0 /r</dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5502.htm">t5502</a>
</dd>
</dl><pre>
IizVADDSUBPS:: PROC
    IiEmitOpcode 0xD0
    IiEncoding DATA=DWORD 
    IiModRM /r
    IiOpEn RVM
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.F2.0F.WIG
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.F2.0F.WIG
    RET
  ENDP IizVADDSUBPS::
</pre>

<dl id="IizVADDSUBPD">
<dt><a href="#IizHandlers">&uarr; VADDSUBPD</a></dt>
<dd>Packed Double-FP Add/Subtract</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VADDSUBPD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG D0 /r
</td></tr>
<tr><th>VADDSUBPD ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG D0 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse3,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wpd</dd>
<dt>Opcode</dt>
<dd>0x660FD0 /r</dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5502.htm">t5502</a>
</dd>
</dl><pre>
IizVADDSUBPD:: PROC
    IiEmitOpcode 0xD0
    IiEncoding DATA=QWORD 
    IiModRM /r
    IiOpEn RVM
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F.WIG
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F.WIG
    RET
  ENDP IizVADDSUBPD::
</pre>

<dl id="IizVPMINUB">
<dt><a href="#IizHandlers">&uarr; VPMINUB</a></dt>
<dd>Minimum of Packed Unsigned Byte Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMINUB xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F DA /r 
</td></tr>
<tr><th>VPMINUB ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F DA /r 
</td></tr>
<tr><th>VPMINUB xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F DA /r 
</td></tr>
<tr><th>VPMINUB ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F DA /r 
</td></tr>
<tr><th>VPMINUB zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F DA /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdint</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FDA /r | 0x660FDA /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5602.htm">t5602</a>
</dd>
</dl><pre>
IizVPMINUB:: PROC
    IiEmitOpcode 0xDA
.op:IiAllowModifier MASK
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FVM
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F, EVEX.NDS.128.66.0F
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F, EVEX.NDS.256.66.0F
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F
    RET
  ENDP IizVPMINUB::
</pre>

<dl id="IizVPMINUW">
<dt><a href="#IizHandlers">&uarr; VPMINUW</a></dt>
<dd>Minimum of Packed Unsigned Word Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMINUW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38 3A/r 
</td></tr>
<tr><th>VPMINUW ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38 3A/r 
</td></tr>
<tr><th>VPMINUW xmm1{k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F38 3A/r 
</td></tr>
<tr><th>VPMINUW ymm1{k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F38 3A/r 
</td></tr>
<tr><th>VPMINUW zmm1{k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F38 3A/r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,compar</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x660F383A /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5602.htm">t5602</a>
</dd>
</dl><pre>
IizVPMINUW:: PROC
    IiEmitOpcode 0x3A
.op:IiAllowModifier MASK
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FVM 
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F38, EVEX.NDS.128.66.0F38
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F38, EVEX.NDS.256.66.0F38
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38
    RET
  ENDP IizVPMINUW::
</pre>

<dl id="IizVPMINUD">
<dt><a href="#IizHandlers">&uarr; VPMINUD</a></dt>
<dd>Minimum of Packed Unsigned Dword Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMINUD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38.WIG 3B /r 
</td></tr>
<tr><th>VPMINUD ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38.WIG 3B /r 
</td></tr>
<tr><th>VPMINUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
</th><td>EVEX.NDS.128.66.0F38.W0 3B /r 
</td></tr>
<tr><th>VPMINUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
</th><td>EVEX.NDS.256.66.0F38.W0 3B /r 
</td></tr>
<tr><th>VPMINUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
</th><td>EVEX.NDS.512.66.0F38.W0 3B /r 
</td></tr>
<tr><th>VPMINUD zmm1 {k1}, zmm2, zmm3/m512/m32bcst
</th><td>MVEX.NDS.512.66.0F38.W0 3B /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,compar</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x660F383B /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5602.htm">t5602</a>
</dd>
</dl><pre>
IizVPMINUD:: PROC
    IiEmitOpcode 0x3B
.op:IiAllowModifier MASK,EH
    IiAllowBroadcasting DWORD
    IiOpEn RVM
    IiModRM /r 
    IiDisp8EVEX FV32
    IiDisp8MVEX Si32
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F38.WIG, EVEX.NDS.128.66.0F38.W0
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F38.WIG, EVEX.NDS.256.66.0F38.W0
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38.W0, MVEX.NDS.512.66.0F38.W0
    RET
  ENDP IizVPMINUD::
</pre>

<dl id="IizVPMINUQ">
<dt><a href="#IizHandlers">&uarr; VPMINUQ</a></dt>
<dd>Minimum of Packed Unsigned QWORD Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMINUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
</th><td>EVEX.NDS.128.66.0F38.W1 3B /r 
</td></tr>
<tr><th>VPMINUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
</th><td>EVEX.NDS.256.66.0F38.W1 3B /r 
</td></tr>
<tr><th>VPMINUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
</th><td>EVEX.NDS.512.66.0F38.W1 3B /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x3B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5602.htm">t5602</a>
</dd>
</dl><pre>
IizVPMINUQ:: PROC
    IiEmitOpcode 0x3B
.op:IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiOpEn RVM
    IiModRM /r 
    IiDisp8EVEX FV64
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix EVEX.NDS.128.66.0F38.W1
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix EVEX.NDS.256.66.0F38.W1
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38.W1
    RET
  ENDP IizVPMINUQ::
</pre>

<dl id="IizVPMINSB">
<dt><a href="#IizVPMINUW">&uarr; VPMINSB</a></dt>
<dd>Minimum of Packed Signed Byte Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMINSB xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38 38 /r 
</td></tr>
<tr><th>VPMINSB ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38 38 /r 
</td></tr>
<tr><th>VPMINSB xmm1{k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F38.WIG 38 /r 
</td></tr>
<tr><th>VPMINSB ymm1{k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F38.WIG 38 /r 
</td></tr>
<tr><th>VPMINSB zmm1{k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F38.WIG 38 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,compar</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x660F3838 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5604.htm">t5604</a>
</dd>
</dl><pre>
IizVPMINSB:: PROC
    IiEmitOpcode 0x38
    JMP IizVPMINUW.op:
  ENDP IizVPMINSB::
</pre>

<dl id="IizVPMINSW">
<dt><a href="#IizVPMINUB">&uarr; VPMINSW</a></dt>
<dd>Minimum of Packed Signed Word Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMINSW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F EA /r 
</td></tr>
<tr><th>VPMINSW ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F EA /r 
</td></tr>
<tr><th>VPMINSW xmm1{k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG EA /r 
</td></tr>
<tr><th>VPMINSW ymm1{k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG EA /r 
</td></tr>
<tr><th>VPMINSW zmm1{k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG EA /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdint</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FEA /r | 0x660FEA /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5604.htm">t5604</a>
</dd>
</dl><pre>
IizVPMINSW:: PROC
    IiEmitOpcode 0xEA
    JMP IizVPMINUB.op:
  ENDP IizVPMINSW::
</pre>

<dl id="IizVPMINSD">
<dt><a href="#IizVPMINUD">&uarr; VPMINSD</a></dt>
<dd>Minimum of Packed Signed Dword Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMINSD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38.WIG 39 /r 
</td></tr>
<tr><th>VPMINSD ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38.WIG 39 /r 
</td></tr>
<tr><th>VPMINSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
</th><td>EVEX.NDS.128.66.0F38.W0 39 /r 
</td></tr>
<tr><th>VPMINSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
</th><td>EVEX.NDS.256.66.0F38.W0 39 /r 
</td></tr>
<tr><th>VPMINSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
</th><td>EVEX.NDS.512.66.0F38.W0 39 /r 
</td></tr>
<tr><th>VPMINSD zmm1 {k1}, zmm2, zmm3/m512/m32bcst
</th><td>MVEX.NDS.512.66.0F38.W0 39 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,compar</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x660F3839 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5604.htm">t5604</a>
</dd>
</dl><pre>
IizVPMINSD:: PROC
    IiEmitOpcode 0x39
    JMP IizVPMINUD.op:
  ENDP IizVPMINSD::
</pre>

<dl id="IizVPMINSQ">
<dt><a href="#IizVPMINSQ">&uarr; VPMINSQ</a></dt>
<dd>Minimum of Packed Signed QWORD Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMINSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
</th><td>EVEX.NDS.128.66.0F38.W1 39 /r 
</td></tr>
<tr><th>VPMINSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
</th><td>EVEX.NDS.256.66.0F38.W1 39 /r 
</td></tr>
<tr><th>VPMINSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst</th><td>EVEX.NDS.512.66.0F38.W1 39 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x39</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5604.htm">t5604</a>
</dd>
</dl><pre>
IizVPMINSQ:: PROC
    IiEmitOpcode 0x39
    JMP IizVPMINUQ.op:
  ENDP IizVPMINSQ::
</pre>

<dl id="IizVPMAXSB">
<dt><a href="#IizVPMINUW">&uarr; VPMAXSB</a></dt>
<dd>Maximum of Packed Signed Byte Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMAXSB xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38.WIG 3C /r 
</td></tr>
<tr><th>VPMAXSB ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38.WIG 3C /r 
</td></tr>
<tr><th>VPMAXSB xmm1{k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F38.WIG 3C /r 
</td></tr>
<tr><th>VPMAXSB ymm1{k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F38.WIG 3C /r 
</td></tr>
<tr><th>VPMAXSB zmm1{k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F38.WIG 3C /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,compar</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x660F383C /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5608.htm">t5608</a>
</dd>
</dl><pre>
IizVPMAXSB:: PROC
    IiEmitOpcode 0x3C
    JMP IizVPMINUW.op:
  ENDP IizVPMAXSB::
</pre>

<dl id="IizVPMAXSW">
<dt><a href="#IizVPMINUB">&uarr; VPMAXSW</a></dt>
<dd>Maximum of Packed Signed Word Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMAXSW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG EE /r 
</td></tr>
<tr><th>VPMAXSW ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG EE /r 
</td></tr>
<tr><th>VPMAXSW xmm1{k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG EE /r 
</td></tr>
<tr><th>VPMAXSW ymm1{k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG EE /r 
</td></tr>
<tr><th>VPMAXSW zmm1{k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG EE /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdint</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FEE /r | 0x660FEE /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
</dl><pre>
IizVPMAXSW:: PROC
    IiEmitOpcode 0xEE
    JMP IizVPMINUB.op:
  ENDP IizVPMAXSW::
</pre>

<dl id="IizVPMAXSD">
<dt><a href="#IizVPMINUD">&uarr; VPMAXSD</a></dt>
<dd>Maximum of Packed Signed Dword Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMAXSD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38.WIG 3D /r 
</td></tr>
<tr><th>VPMAXSD ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38.WIG 3D /r 
</td></tr>
<tr><th>VPMAXSD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
</th><td>EVEX.NDS.128.66.0F38.W0 3D /r 
</td></tr>
<tr><th>VPMAXSD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
</th><td>EVEX.NDS.256.66.0F38.W0 3D /r 
</td></tr>
<tr><th>VPMAXSD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
</th><td>EVEX.NDS.512.66.0F38.W0 3D /r 
</td></tr>
<tr><th>VPMAXSD zmm1 {k1}, zmm2, zmm3/m512/m32bcst
</th><td>MVEX.NDS.512.66.0F38.W0 3D /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,compar</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x660F383D /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5608.htm">t5608</a>
</dd>
</dl><pre>
IizVPMAXSD:: PROC
    IiEmitOpcode 0x3D
    JMP IizVPMINUD.op:
  ENDP IizVPMAXSD::
</pre>

<dl id="IizVPMAXSQ">
<dt><a href="#IizVPMINUQ">&uarr; VPMAXSQ</a></dt>
<dd>Maximum of Packed Signed QWORD Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMAXSQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
</th><td>EVEX.NDS.128.66.0F38.W1 3D /r 
</td></tr>
<tr><th>VPMAXSQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
</th><td>EVEX.NDS.256.66.0F38.W1 3D /r 
</td></tr>
<tr><th>VPMAXSQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
</th><td>EVEX.NDS.512.66.0F38.W1 3D /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x3D</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5608.htm">t5608</a>
</dd>
</dl><pre>
IizVPMAXSQ:: PROC
    IiEmitOpcode 0x3D
    JMP IizVPMINUQ.op:
  ENDP IizVPMAXSQ::
</pre>

<dl id="IizVPMAXUB">
<dt><a href="#IizVPMINUB">&uarr; VPMAXUB</a></dt>
<dd>Maximum of Packed Unsigned Byte Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMAXUB xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F DE /r 
</td></tr>
<tr><th>VPMAXUB ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F DE /r 
</td></tr>
<tr><th>VPMAXUB xmm1{k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG DE /r 
</td></tr>
<tr><th>VPMAXUB ymm1{k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG DE /r 
</td></tr>
<tr><th>VPMAXUB zmm1{k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG DE /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdint</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FDE /r | 0x660FDE /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5606.htm">t5606</a>
</dd>
</dl><pre>
IizVPMAXUB:: PROC
    IiEmitOpcode 0xDE
    JMP IizVPMINUB.op:
  ENDP IizVPMAXUB::
</pre>

<dl id="IizVPMAXUW">
<dt><a href="#IizVPMINUW">&uarr; VPMAXUW</a></dt>
<dd>Maximum of Packed Unsigned Word Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMAXUW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38 3E /r 
</td></tr>
<tr><th>VPMAXUW ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38 3E /r 
</td></tr>
<tr><th>VPMAXUW xmm1{k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F38.WIG 3E /r 
</td></tr>
<tr><th>VPMAXUW ymm1{k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F38.WIG 3E /r 
</td></tr>
<tr><th>VPMAXUW zmm1{k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F38.WIG 3E /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,compar</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x660F383E /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5606.htm">t5606</a>
</dd>
</dl><pre>
IizVPMAXUW:: PROC
    IiEmitOpcode 0x3E
    JMP IizVPMINUW.op:
  ENDP IizVPMAXUW::
</pre>

<dl id="IizVPMAXUD">
<dt><a href="#IizVPMINUD">&uarr; VPMAXUD</a></dt>
<dd>Maximum of Packed Unsigned Dword Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMAXUD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38.WIG 3F /r 
</td></tr>
<tr><th>VPMAXUD ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38.WIG 3F /r
</td></tr>
<tr><th>VPMAXUD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
</th><td>EVEX.NDS.128.66.0F38.W0 3F /r 
</td></tr>
<tr><th>VPMAXUD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
</th><td>EVEX.NDS.256.66.0F38.W0 3F /r 
</td></tr>
<tr><th>VPMAXUD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
</th><td>EVEX.NDS.512.66.0F38.W0 3F /r 
</td></tr>
<tr><th>VPMAXUD zmm1 {k1}, zmm2, zmm3/m512/m32bcst
</th><td>MVEX.NDS.512.66.0F38.W0 3F /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,compar</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x660F383F /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5606.htm">t5606</a>
</dd>
</dl><pre>
IizVPMAXUD:: PROC
    IiEmitOpcode 0x3F
    JMP IizVPMINUD.op:
  ENDP IizVPMAXUD::
</pre>

<dl id="IizVPMAXUQ">
<dt><a href="#IizVPMINUQ">&uarr; VPMAXUQ</a></dt>
<dd>Maximum of Packed Unsigned QWORD Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMAXUQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
</th><td>EVEX.NDS.128.66.0F38.W1 3F /r 
</td></tr>
<tr><th>VPMAXUQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
</th><td>EVEX.NDS.256.66.0F38.W1 3F /r 
</td></tr>
<tr><th>VPMAXUQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
</th><td>EVEX.NDS.512.66.0F38.W1 3F /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x3F</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5606.htm">t5606</a>
</dd>
</dl><pre>
IizVPMAXUQ:: PROC
    IiEmitOpcode 0x3F
    JMP IizVPMINUQ.op:
  ENDP IizVPMAXUQ::
</pre>

<dl id="IizVPADDB">
<dt><a href="#IizHandlers">&uarr; VPADDB</a></dt>
<dd>Add Packed Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPADDB xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG FC /r
</td></tr>
<tr><th>VPADDB ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG FC /r
</td></tr>
<tr><th>VPADDB xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG FC /r 
</td></tr>
<tr><th>VPADDB ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG FC /r 
</td></tr>
<tr><th>VPADDB zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG FC /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FFC /r | 0x660FFC /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5612.htm">t5612</a>
</dd>
</dl><pre>
IizVPADDB:: PROC
    IiEmitOpcode 0xFC
.op:IiEncoding DATA=BYTE
.os:IiAllowModifier MASK
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FVM
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F.WIG, EVEX.NDS.128.66.0F.WIG
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F.WIG, EVEX.NDS.256.66.0F.WIG
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F.WIG
    RET
  ENDP IizVPADDB::
</pre>

<dl id="IizVPADDW">
<dt><a href="#IizVPADDB">&uarr; VPADDW</a></dt>
<dd>Add Packed Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPADDW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG FD /r
</td></tr>
<tr><th>VPADDW ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG FD /r
</td></tr>
<tr><th>VPADDW xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG FD /r 
</td></tr>
<tr><th>VPADDW ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG FD /r 
</td></tr>
<tr><th>VPADDW zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG FD /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FFD /r | 0x660FFD /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5612.htm">t5612</a>
</dd>
</dl><pre>
IizVPADDW:: PROC
    IiEmitOpcode 0xFD
.op:IiEncoding DATA=WORD
    JMP IizVPADDB.os:
  ENDP IizVPADDW::
</pre>

<dl id="IizVPADDD">
<dt><a href="#IizHandlers">&uarr; VPADDD</a></dt>
<dd>Add Packed Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPADDD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG FE /r
</td></tr>
<tr><th>VPADDD ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG FE /r
</td></tr>
<tr><th>VPADDD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst 
</th><td>EVEX.NDS.128.66.0F.W0 FE /r 
</td></tr>
<tr><th>VPADDD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst 
</th><td>EVEX.NDS.256.66.0F.W0 FE /r 
</td></tr>
<tr><th>VPADDD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst 
</th><td>EVEX.NDS.512.66.0F.W0 FE /r
</td></tr>
<tr><th>VPADDD zmm1 {k1}, zmm2, zmm3/m512/m32bcst
</th><td>MVEX.NDS.512.66.0F.W0 FE /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FFE /r | 0x660FFE /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5612.htm">t5612</a>
</dd>
</dl><pre>
IizVPADDD:: PROC
    IiEmitOpcode 0xFE
.op:IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiDisp8EVEX FV32
    IiDisp8MVEX Si32
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F.WIG, EVEX.NDS.128.66.0F.W0
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F.WIG, EVEX.NDS.256.66.0F.W0
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F.W0, MVEX.NDS.512.66.0F.W0
    RET
  ENDP IizVPADDD::
</pre>

<dl id="IizVPADDQ">
<dt><a href="#IizHandlers">&uarr; VPADDQ</a></dt>
<dd>Add Packed Quadword Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPADDQ xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG D4 /r
</td></tr>
<tr><th>VPADDQ ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG D4 /r
</td></tr>
<tr><th>VPADDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
</th><td>EVEX.NDS.128.66.0F.W1 D4 /r 
</td></tr>
<tr><th>VPADDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
</th><td>EVEX.NDS.256.66.0F.W1 D4 /r 
</td></tr>
<tr><th>VPADDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
</th><td>EVEX.NDS.512.66.0F.W1 D4 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,simdint,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FD4 /r | 0x660FD4 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5612.htm">t5612</a>
</dd>
</dl><pre>
IizVPADDQ:: PROC
    IiEmitOpcode 0xD4
.op:IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiDisp8EVEX FV64
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F.WIG, EVEX.NDS.128.66.0F.W1
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F.WIG, EVEX.NDS.256.66.0F.W1
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F.W1
    RET
  ENDP IizVPADDQ::
</pre>

<dl id="IizVPADDSB">
<dt><a href="#IizHandlers">&uarr; VPADDSB</a></dt>
<dd>Add Packed Signed Integers with Signed Saturation</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPADDSB xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F EC 
</td></tr>
<tr><th>VPADDSB ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F EC 
</td></tr>
<tr><th>VPADDSB xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG EC /r 
</td></tr>
<tr><th>VPADDSB ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG EC /r 
</td></tr>
<tr><th>VPADDSB zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG EC /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FEC /r | 0x660FEC /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5616.htm">t5616</a>
</dd>
</dl><pre>
IizVPADDSB:: PROC
    IiEmitOpcode 0xEC
    JMP IizVPADDB.op:
    RET
  ENDP IizVPADDSB::
</pre>

<dl id="IizVPADDSW">
<dt><a href="#IizVPADDW">&uarr; VPADDSW</a></dt>
<dd>Add Packed Signed Integers with Signed Saturation</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPADDSW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F ED 
</td></tr>
<tr><th>VPADDSW ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F ED 
</td></tr>
<tr><th>VPADDSW xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG ED /r 
</td></tr>
<tr><th>VPADDSW ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG ED /r
</td></tr>
<tr><th>VPADDSW zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG ED /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FED /r | 0x660FED /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5616.htm">t5616</a>
</dd>
</dl><pre>
IizVPADDSW:: PROC
    IiEmitOpcode 0xED
    JMP IizVPADDW.op:
  ENDP IizVPADDSW::
</pre>

<dl id="IizVPSUBB">
<dt><a href="#IizVPADDB">&uarr; VPSUBB</a></dt>
<dd>Subtract Packed Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSUBB xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG F8 /r 
</td></tr>
<tr><th>VPSUBB ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG F8 /r 
</td></tr>
<tr><th>VPSUBB xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG F8 /r 
</td></tr>
<tr><th>VPSUBB ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG F8 /r 
</td></tr>
<tr><th>VPSUBB zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG F8 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FF8 /r | 0x660FF8 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5614.htm">t5614</a>
</dd>
</dl><pre>
IizVPSUBB:: PROC
    IiEmitOpcode 0xF8
    JMP IizVPADDB.op:
  ENDP IizVPSUBB::
</pre>

<dl id="IizVPSUBW">
<dt><a href="#IizVPADDW">&uarr; VPSUBW</a></dt>
<dd>Subtract Packed Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSUBW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG F9 /r 
</td></tr>
<tr><th>VPSUBW ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG F9 /r 
</td></tr>
<tr><th>VPSUBW xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG F9 /r 
</td></tr>
<tr><th>VPSUBW ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG F9 /r 
</td></tr>
<tr><th>VPSUBW zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG F9 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FF9 /r | 0x660FF9 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5614.htm">t5614</a>
</dd>
</dl><pre>
IizVPSUBW:: PROC
    IiEmitOpcode 0xF9
    JMP IizVPADDW.op:
  ENDP IizVPSUBW::
</pre>

<dl id="IizVPSUBD">
<dt><a href="#IizVPADDD">&uarr; VPSUBD</a></dt>
<dd>Subtract Packed Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSUBD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG FA /r 
</td></tr>
<tr><th>VPSUBD ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG FA /r 
</td></tr>
<tr><th>VPSUBD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst 
</th><td>EVEX.NDS.128.66.0F.W0 FA /r
</td></tr>
<tr><th>VPSUBD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst 
</th><td>EVEX.NDS.256.66.0F.W0 FA /r
</td></tr>
<tr><th>VPSUBD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst 
</th><td>EVEX.NDS.512.66.0F.W0 FA /r
</td></tr>
<tr><th>VPSUBD zmm1 {k1}, zmm2, zmm3/m512/m32bcst
</th><td>MVEX.NDS.512.66.0F.W0 FA /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FFA /r | 0x660FFA /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5614.htm">t5614</a>
</dd>
</dl><pre>
IizVPSUBD:: PROC
    IiEmitOpcode 0xFA
    JMP IizVPADDD.op:
  ENDP IizVPSUBD::
</pre>

<dl id="IizVPSUBQ">
<dt><a href="#IizVPADDQ">&uarr; VPSUBQ</a></dt>
<dd>Subtract Packed Quadword Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSUBQ xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG FB /r
</td></tr>
<tr><th>VPSUBQ ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG FB /r
</td></tr>
<tr><th>VPSUBQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
</th><td>EVEX.NDS.128.66.0F.W1 FB /r 
</td></tr>
<tr><th>VPSUBQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
</th><td>EVEX.NDS.256.66.0F.W1 FB /r 
</td></tr>
<tr><th>VPSUBQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
</th><td>EVEX.NDS.512.66.0F.W1 FB/r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,simdint,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FFB /r | 0x660FFB /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5614.htm">t5614</a>
</dd>
</dl><pre>
IizVPSUBQ:: PROC
    IiEmitOpcode 0xFB
    JMP IizVPADDQ.op:
  ENDP IizVPSUBQ::
</pre>

<dl id="IizVPSUBSB">
<dt><a href="#IizVPADDB">&uarr; VPSUBSB</a></dt>
<dd>Subtract Packed Signed Integers with Signed Saturation</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSUBSB xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F E8 /r 
</td></tr>
<tr><th>VPSUBSB ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F E8 /r 
</td></tr>
<tr><th>VPSUBSB xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG E8 /r 
</td></tr>
<tr><th>VPSUBSB ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG E8 /r 
</td></tr>
<tr><th>VPSUBSB zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG E8 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FE8 /r | 0x660FE8 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5616.htm">t5616</a>
</dd>
</dl><pre>
IizVPSUBSB:: PROC
    IiEmitOpcode 0xE8
    JMP IizVPADDB.op:
  ENDP IizVPSUBSB::
</pre>

<dl id="IizVPSUBSW">
<dt><a href="#IizHandlers">&uarr; VPSUBSW</a></dt>
<dd>Subtract Packed Signed Integers with Signed Saturation</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSUBSW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F E9 /r 
</td></tr>
<tr><th>VPSUBSW ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F E9 /r 
</td></tr>
<tr><th>VPSUBSW xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG E9 /r 
</td></tr>
<tr><th>VPSUBSW ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG E9 /r 
</td></tr>
<tr><th>VPSUBSW zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG E9 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FE9 /r | 0x660FE9 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5616.htm">t5616</a>
</dd>
</dl><pre>
IizVPSUBSW:: PROC
    IiEmitOpcode 0xE9
    JMP IizVPADDW.op:
  ENDP IizVPSUBSW::
</pre>

<dl id="IizVPADDUSB">
<dt><a href="#IizVPADDB">&uarr; VPADDUSB</a></dt>
<dd>Add Packed Unsigned Integers with Unsigned Saturation</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPADDUSB xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F DC 
</td></tr>
<tr><th>VPADDUSB ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F DC 
</td></tr>
<tr><th>VPADDUSB xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG DC /r 
</td></tr>
<tr><th>VPADDUSB ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG DC /r 
</td></tr>
<tr><th>VPADDUSB zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG DC /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FDC /r | 0x660FDC /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5618.htm">t5618</a>
</dd>
</dl><pre>
IizVPADDUSB:: PROC
    IiEmitOpcode 0xDC
    JMP IizVPADDB.op:
  ENDP IizVPADDUSB::
</pre>

<dl id="IizVPADDUSW">
<dt><a href="#IizVPADDW">&uarr; VPADDUSW</a></dt>
<dd>Add Packed Unsigned Integers with Unsigned Saturation</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPADDUSW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F DD 
</td></tr>
<tr><th>VPADDUSW ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F DD 
</td></tr>
<tr><th>VPADDUSW xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG DD /r 
</td></tr>
<tr><th>VPADDUSW ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG DD /r 
</td></tr>
<tr><th>VPADDUSW zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG DD /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FDD /r | 0x660FDD /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5618.htm">t5618</a>
</dd>
</dl><pre>
IizVPADDUSW:: PROC
    IiEmitOpcode 0xDD
    JMP IizVPADDW.op:
  ENDP IizVPADDUSW::
</pre>

<dl id="IizVPSUBUSB">
<dt><a href="#IizVPADDB">&uarr; VPSUBUSB</a></dt>
<dd>Subtract Packed Unsigned Integers with Unsigned Saturation</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSUBUSB xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F D8 /r 
</td></tr>
<tr><th>VPSUBUSB ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F D8 /r 
</td></tr>
<tr><th>VPSUBUSB xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG D8 /r 
</td></tr>
<tr><th>VPSUBUSB ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG D8 /r 
</td></tr>
<tr><th>VPSUBUSB zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG D8 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FD8 /r | 0x660FD8 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5618.htm">t5618</a>
</dd>
</dl><pre>
IizVPSUBUSB:: PROC
    IiEmitOpcode 0xD8
    JMP IizVPADDB.op:
  ENDP IizVPSUBUSB::
</pre>

<dl id="IizVPSUBUSW">
<dt><a href="#IizVPADDW">&uarr; VPSUBUSW</a></dt>
<dd>Subtract Packed Signed Integers with Signed Saturation</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSUBUSW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F D9 /r 
</td></tr>
<tr><th>VPSUBUSW ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F D9 /r 
</td></tr>
<tr><th>VPSUBUSW xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG D9 /r 
</td></tr>
<tr><th>VPSUBUSW ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG D9 /r 
</td></tr>
<tr><th>VPSUBUSW zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG D9 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FE9 /r | 0x660FE9 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5618.htm">t5618</a>
</dd>
</dl><pre>
IizVPSUBUSW:: PROC
    IiEmitOpcode 0xD9
    JMP IizVPADDW.op:
  ENDP IizVPSUBUSW::
</pre>

<dl id="IizVHADDPS">
<dt><a href="#IizHandlers">&uarr; VHADDPS</a></dt>
<dd>Packed Single-FP Horizontal Add</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VHADDPS xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.F2.0F.WIG 7C /r
</td></tr>
<tr><th>VHADDPS ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.F2.0F.WIG 7C /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse3,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wps</dd>
<dt>Opcode</dt>
<dd>0xF20F7C /r</dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5610.htm">t5610</a>
</dd>
</dl><pre>
IizVHADDPS:: PROC
    IiEmitOpcode 0x7C
.op:IiEncoding DATA=DWORD
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.F2.0F.WIG
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.F2.0F.WIG
    RET
  ENDP IizVHADDPS::
</pre>

<dl id="IizVHADDPD">
<dt><a href="#IizHandlers">&uarr; VHADDPD</a></dt>
<dd>Packed Double-FP Horizontal Add</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VHADDPD xmm1,xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG 7C /r
</td></tr>
<tr><th>VHADDPD ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG 7C /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse3,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wpd</dd>
<dt>Opcode</dt>
<dd>0x660F7C /r</dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5610.htm">t5610</a>
</dd>
</dl><pre>
IizVHADDPD:: PROC
    IiEmitOpcode 0x7C
.op:IiEncoding DATA=QWORD
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F.WIG
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F.WIG
    RET
  ENDP IizVHADDPD::
</pre>

<dl id="IizVHSUBPS">
<dt><a href="#IizVHADDPS">&uarr; VHSUBPS</a></dt>
<dd>Packed Single-FP Horizontal Subtract</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VHSUBPS xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.F2.0F.WIG 7D /r
</td></tr>
<tr><th>VHSUBPS ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.F2.0F.WIG 7D /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse3,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wps</dd>
<dt>Opcode</dt>
<dd>0xF20F7D /r</dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5610.htm">t5610</a>
</dd>
</dl><pre>
IizVHSUBPS:: PROC
    IiEmitOpcode 0x7D
    JMP IizVHADDPS.op:
  ENDP IizVHSUBPS::
</pre>

<dl id="IizVHSUBPD">
<dt><a href="#IizVHADDPD">&uarr; VHSUBPD</a></dt>
<dd>Packed Double-FP Horizontal Subtract</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VHSUBPD xmm1,xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG 7D /r
</td></tr>
<tr><th>VHSUBPD ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG 7D /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse3,simdfp,arith</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wpd</dd>
<dt>Opcode</dt>
<dd>0x660F7D /r</dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5610.htm">t5610</a>
</dd>
</dl><pre>
IizVHSUBPD:: PROC
    IiEmitOpcode 0x7D
    JMP IizVHADDPD.op:
  ENDP IizVHSUBPD::
</pre>

<dl id="IizVPSRLW">
<dt><a href="#IizHandlers">&uarr; VPSRLW</a></dt>
<dd>Shift Packed Data Right Logical</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSRLW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG D1 /r 
</td></tr>
<tr><th>VPSRLW xmm1, xmm2, imm8
</th><td>VEX.NDD.128.66.0F.WIG 71 /2 ib 
</td></tr>
<tr><th>VPSRLW ymm1, ymm2, xmm3/m128
</th><td>VEX.NDS.256.66.0F.WIG D1 /r 
</td></tr>
<tr><th>VPSRLW ymm1, ymm2, imm8
</th><td>VEX.NDD.256.66.0F.WIG 71 /2 ib 
</td></tr>
<tr><th>VPSRLW xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG D1 /r 
</td></tr>
<tr><th>VPSRLW ymm1 {k1}{z}, ymm2, xmm3/m128
</th><td>EVEX.NDS.256.66.0F.WIG D1 /r 
</td></tr>
<tr><th>VPSRLW zmm1 {k1}{z}, zmm2, xmm3/m128
</th><td>EVEX.NDS.512.66.0F.WIG D1 /r 
</td></tr>
<tr><th>VPSRLW xmm1 {k1}{z}, xmm2/m128, imm8
</th><td>EVEX.NDD.128.66.0F.WIG 71 /2 ib 
</td></tr>
<tr><th>VPSRLW ymm1 {k1}{z}, ymm2/m256, imm8
</th><td>EVEX.NDD.256.66.0F.WIG 71 /2 ib 
</td></tr>
<tr><th>VPSRLW zmm1 {k1}{z}, zmm2/m512, imm8
</th><td>EVEX.NDD.512.66.0F.WIG 71 /2 ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,shift</dd>
<dt>Operands</dt>
<dd><b>Nq</b>,Ib | <b>Udq</b>,Ib | <b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F71 /2 | 0x660F71 /2 | 0x0FD1 /r | 0x660FD1 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5622.htm">t5622</a>
</dd>
</dl><pre>
IizVPSRLW:: PROC
    MOV AL,0xD1
    MOV BL,0x71
    MOV ECX,iiPpgModRMd | 2<<28
.op:IiAllowModifier MASK
    IiEncoding DATA=WORD
    CMP DL,imm
    JE .I:
    IiOpEn RVM
    IiEmitOpcode EAX
    IiModRM /r
    IiDisp8EVEX M128
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.xmm, ymm.ymm.mem, zmm.zmm.xmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F.WIG, EVEX.NDS.128.66.0F.WIG
    RET
.ymm.ymm.xmm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F.WIG, EVEX.NDS.256.66.0F.WIG
    RET
.zmm.zmm.xmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F.WIG
    RET
.I: IiOpEn VM
    IiEmitOpcode EBX
    IiModRM ECX
    IiEmitImm Operand3, BYTE
    IiDisp8EVEX FVM
    IiDispatchFormat  xmm.xmm.imm, ymm.ymm.imm, xmm.mem.imm, ymm.mem.imm, zmm.zmm.imm, zmm.mem.imm
.xmm.xmm.imm:
    IiEmitPrefix VEX.NDD.128.66.0F.WIG, EVEX.NDD.128.66.0F.WIG
    RET
.xmm.mem.imm:
    IiEmitPrefix EVEX.NDD.128.66.0F.WIG
    RET
.ymm.ymm.imm:
    IiEmitPrefix VEX.NDD.256.66.0F.WIG, EVEX.NDD.256.66.0F.WIG
    RET
.ymm.mem.imm:
    IiEmitPrefix EVEX.NDD.256.66.0F.WIG
    RET
.zmm.zmm.imm:
.zmm.mem.imm:
    IiEmitPrefix EVEX.NDD.512.66.0F.WIG
    RET
  ENDP IizVPSRLW::
</pre>

<dl id="IizVPSRLD">
<dt><a href="#IizHandlers">&uarr; VPSRLD</a></dt>
<dd>Shift Double Quadword Right Logical</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSRLD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG D2 /r 
</td></tr>
<tr><th>VPSRLD xmm1, xmm2, imm8
</th><td>VEX.NDD.128.66.0F.WIG 72 /2 ib 
</td></tr>
<tr><th>VPSRLD ymm1, ymm2, xmm3/m128
</th><td>VEX.NDS.256.66.0F.WIG D2 /r 
</td></tr>
<tr><th>VPSRLD ymm1, ymm2, imm8
</th><td>VEX.NDD.256.66.0F.WIG 72 /2 ib 
</td></tr>
<tr><th>VPSRLD xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.W0 D2 /r 
</td></tr>
<tr><th>VPSRLD ymm1 {k1}{z}, ymm2, xmm3/m128
</th><td>EVEX.NDS.256.66.0F.W0 D2 /r 
</td></tr>
<tr><th>VPSRLD zmm1 {k1}{z}, zmm2, xmm3/m128
</th><td>EVEX.NDS.512.66.0F.W0 D2 /r 
</td></tr>
<tr><th>VPSRLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8
</th><td>EVEX.NDD.128.66.0F.W0 72 /2 ib 
</td></tr>
<tr><th>VPSRLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8
</th><td>EVEX.NDD.256.66.0F.W0 72 /2 ib 
</td></tr>
<tr><th>VPSRLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8
</th><td>EVEX.NDD.512.66.0F.W0 72 /2 ib 
</td></tr>
<tr><th>VPSRLD zmm1 {k1}, zmm2/m512/m32bcst, imm8
</th><td>MVEX.NDD.512.66.0F.W0 72 /2 ib
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,shift</dd>
<dt>Operands</dt>
<dd><b>Nq</b>,Ib | <b>Udq</b>,Ib | <b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F72 /2 | 0x660F72 /2 | 0x0FD2 /r | 0x660FD2 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5622.htm">t5622</a>
</dd>
</dl><pre>
IizVPSRLD:: PROC
    MOV AL,0xD2
    MOV BL,0x72
    MOV ECX,iiPpgModRMd | 2<<28
.op:IiAllowModifier MASK
    IiEncoding DATA=DWORD
    CMP DL,imm
    JE .I:
    IiOpEn RVM
    IiEmitOpcode EAX
    IiModRM /r
    IiDisp8EVEX M128
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.xmm, ymm.ymm.mem, zmm.zmm.xmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F.WIG, EVEX.NDS.128.66.0F.W0
    RET
.ymm.ymm.xmm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F.WIG, EVEX.NDS.256.66.0F.W0
    RET
.zmm.zmm.xmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F.W0
    RET
.I: IiOpEn VM
    IiEmitOpcode EBX
    IiModRM ECX
    IiEmitImm Operand3, BYTE
    IiAllowBroadcasting DWORD, Operand=DH
    IiDisp8EVEX FV32
    IiDisp8MVEX Si32
    IiDispatchFormat  xmm.xmm.imm, ymm.ymm.imm, xmm.mem.imm, ymm.mem.imm, zmm.zmm.imm, zmm.mem.imm
.xmm.mem.imm:
    IiEmitPrefix EVEX.NDD.128.66.0F.W0
    RET
.xmm.xmm.imm:
    IiEmitPrefix VEX.NDD.128.66.0F.WIG, EVEX.NDD.128.66.0F.W0
    RET
.ymm.mem.imm:
    IiEmitPrefix EVEX.NDD.256.66.0F.W0
    RET
.ymm.ymm.imm:
    IiEmitPrefix VEX.NDD.256.66.0F.WIG, EVEX.NDD.256.66.0F.W0
    RET
.zmm.zmm.imm:
.zmm.mem.imm:
    IiEmitPrefix EVEX.NDD.512.66.0F.W0, MVEX.NDD.512.66.0F.W0
    RET
  ENDP IizVPSRLD::
</pre>

<dl id="IizVPSRLQ">
<dt><a href="#IizHandlers">&uarr; VPSRLQ</a></dt>
<dd>Shift Packed Data Right Logical</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSRLQ xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG D3 /r 
</td></tr>
<tr><th>VPSRLQ xmm1, xmm2, imm8
</th><td>VEX.NDD.128.66.0F.WIG 73 /2 ib 
</td></tr>
<tr><th>VPSRLQ ymm1, ymm2, xmm3/m128
</th><td>VEX.NDS.256.66.0F.WIG D3 /r 
</td></tr>
<tr><th>VPSRLQ ymm1, ymm2, imm8
</th><td>VEX.NDD.256.66.0F.WIG 73 /2 ib 
</td></tr>
<tr><th>VPSRLQ xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.W1 D3 /r 
</td></tr>
<tr><th>VPSRLQ ymm1 {k1}{z}, ymm2, xmm3/m128
</th><td>EVEX.NDS.256.66.0F.W1 D3 /r 
</td></tr>
<tr><th>VPSRLQ zmm1 {k1}{z}, zmm2, xmm3/m128
</th><td>EVEX.NDS.512.66.0F.W1 D3 /r 
</td></tr>
<tr><th>VPSRLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8
</th><td>EVEX.NDD.128.66.0F.W1 73 /2 ib 
</td></tr>
<tr><th>VPSRLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8
</th><td>EVEX.NDD.256.66.0F.W1 73 /2 ib 
</td></tr>
<tr><th>VPSRLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8
</th><td>EVEX.NDD.512.66.0F.W1 73 /2 ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,shift</dd>
<dt>Operands</dt>
<dd><b>Nq</b>,Ib | <b>Udq</b>,Ib | <b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F73 /2 | 0x660F73 /2 | 0x0FD3 /r | 0x660FD3 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5622.htm">t5622</a>
</dd>
</dl><pre>
IizVPSRLQ:: PROC
    MOV AL,0xD3
    MOV BL,0x73
    MOV ECX,iiPpgModRMd | 2<<28
.op:IiAllowModifier MASK
    IiEncoding DATA=QWORD
    CMP DL,imm
    JE .I:
    IiOpEn RVM
    IiEmitOpcode EAX
    IiModRM /r
    IiDisp8EVEX M128
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.xmm, ymm.ymm.mem, zmm.zmm.xmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F.WIG, EVEX.NDS.128.66.0F.W1
    RET
.ymm.ymm.xmm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F.WIG, EVEX.NDS.256.66.0F.W1
    RET
.zmm.zmm.xmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F.W1
    RET
.I: IiOpEn VM
    IiEmitOpcode EBX
    IiModRM ECX
    IiEmitImm Operand3, BYTE
    IiAllowBroadcasting QWORD, Operand=DH
    IiDisp8EVEX FV64
    IiDispatchFormat  xmm.xmm.imm, ymm.ymm.imm, xmm.mem.imm, ymm.mem.imm, zmm.zmm.imm, zmm.mem.imm
.xmm.mem.imm:
    IiEmitPrefix EVEX.NDD.128.66.0F.W1
    RET
.xmm.xmm.imm:
    IiEmitPrefix VEX.NDD.128.66.0F.WIG, EVEX.NDD.128.66.0F.W1
    RET
.ymm.mem.imm:
    IiEmitPrefix EVEX.NDD.256.66.0F.W1
    RET
.ymm.ymm.imm:
    IiEmitPrefix VEX.NDD.256.66.0F.WIG, EVEX.NDD.256.66.0F.W1
    RET
.zmm.zmm.imm:
.zmm.mem.imm:
    IiEmitPrefix EVEX.NDD.512.66.0F.W1
    RET
  ENDP IizVPSRLQ::
</pre>

<dl id="IizVPSRLDQ">
<dt><a href="#IizHandlers">&uarr; VPSRLDQ</a></dt>
<dd>Shift Double Quadword Right Logical</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSRLDQ xmm1, xmm2, imm8
</th><td>VEX.NDD.128.66.0F 73 /3 ib 
</td></tr>
<tr><th>VPSRLDQ ymm1, ymm2, imm8
</th><td>VEX.NDD.256.66.0F 73 /3 ib 
</td></tr>
<tr><th>VPSRLDQ xmm1, xmm2/m128, imm8
</th><td>EVEX.NDD.128.66.0F.WIG 73 /3 ib 
</td></tr>
<tr><th>VPSRLDQ ymm1, ymm2/m256, imm8
</th><td>EVEX.NDD.256.66.0F.WIG 73 /3 ib 
</td></tr>
<tr><th>VPSRLDQ zmm1, zmm2/m512, imm8
</th><td>EVEX.NDD.512.66.0F.WIG 73 /3 ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,simdint,shift</dd>
<dt>Operands</dt>
<dd><b>Udq</b>,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F73 /3</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5622.htm">t5622</a>
</dd>
</dl><pre>
IizVPSRLDQ:: PROC
    MOV ECX,iiPpgModRMd | 3<<28
    MOV BL,0x73
.d: IiEmitOpcode EBX
    IiModRM ECX
    IiOpEn VM
    IiEmitImm Operand3, BYTE
    IiDisp8EVEX FVM
    IiDispatchFormat  xmm.xmm.imm, ymm.ymm.imm, xmm.mem.imm, ymm.mem.imm, zmm.zmm.imm, zmm.mem.imm
.xmm.mem.imm:
    IiEmitPrefix EVEX.NDD.128.66.0F.WIG
    RET
.xmm.xmm.imm:
    IiEmitPrefix VEX.NDD.128.66.0F, EVEX.NDD.128.66.0F.WIG
    RET
.ymm.mem.imm:
    IiEmitPrefix EVEX.NDD.256.66.0F.WIG
    RET
.ymm.ymm.imm:
    IiEmitPrefix VEX.NDD.256.66.0F, EVEX.NDD.256.66.0F.WIG
    RET
.zmm.mem.imm:
    IiEmitPrefix EVEX.NDD.512.66.0F.WIG
    RET
.zmm.zmm.imm:
    IiEmitPrefix EVEX.NDD.512.66.0F.WIG
    RET
  ENDP IizVPSRLDQ::
</pre>

<dl id="IizVPSRAW">
<dt><a href="#IizVPSRLW">&uarr; VPSRAW</a></dt>
<dd>Shift Packed Data Right Arithmetic</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSRAW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG E1 /r 
</td></tr>
<tr><th>VPSRAW xmm1, xmm2, imm8
</th><td>VEX.NDD.128.66.0F.WIG 71 /4 ib 
</td></tr>
<tr><th>VPSRAW ymm1, ymm2, ymm3/m128
</th><td>VEX.NDS.256.66.0F.WIG E1 /r 
</td></tr>
<tr><th>VPSRAW ymm1, ymm2, imm8
</th><td>VEX.NDD.256.66.0F.WIG 71 /4 ib 
</td></tr>
<tr><th>VPSRAW xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG E1 /r
</td></tr>
<tr><th>VPSRAW ymm1 {k1}{z}, ymm2, xmm3/m128
</th><td>EVEX.NDS.256.66.0F.WIG E1 /r 
</td></tr>
<tr><th>VPSRAW zmm1 {k1}{z}, zmm2, xmm3/m128
</th><td>EVEX.NDS.512.66.0F.WIG E1 /r 
</td></tr>
<tr><th>VPSRAW xmm1 {k1}{z}, xmm2/m128, imm8
</th><td>EVEX.NDD.128.66.0F.WIG 71 /4 ib 
</td></tr>
<tr><th>VPSRAW ymm1 {k1}{z}, ymm2/m256, imm8
</th><td>EVEX.NDD.256.66.0F.WIG 71 /4 ib 
</td></tr>
<tr><th>VPSRAW zmm1 {k1}{z}, zmm2/m512, imm8
</th><td>EVEX.NDD.512.66.0F.WIG 71 /4 ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,shift</dd>
<dt>Operands</dt>
<dd><b>Nq</b>,Ib | <b>Udq</b>,Ib | <b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F71 /4 | 0x660F71 /4 | 0x0FE1 /r | 0x660FE1 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5626.htm">t5626</a>
</dd>
</dl><pre>
IizVPSRAW:: PROC
    MOV AL,0xE1
    MOV BL,0x71
    MOV ECX,iiPpgModRMd | 4<<28
    JMP IizVPSRLW.op:
  ENDP IizVPSRAW::
</pre>

<dl id="IizVPSRAD">
<dt><a href="#IizVPSRLD">&uarr; VPSRAD</a></dt>
<dd>Shift Packed Data Right Arithmetic</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSRAD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG E2 /r 
</td></tr>
<tr><th>VPSRAD xmm1, xmm2, imm8
</th><td>VEX.NDD.128.66.0F.WIG 72 /4 ib
</td></tr>
<tr><th>VPSRAD ymm1, ymm2, xmm3/m128
</th><td>VEX.NDS.256.66.0F.WIG E2 /r 
</td></tr>
<tr><th>VPSRAD ymm1, ymm2, imm8
</th><td>VEX.NDD.256.66.0F.WIG 72 /4 ib 
</td></tr>
<tr><th>VPSRAD xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.W0 E2 /r 
</td></tr>
<tr><th>VPSRAD ymm1 {k1}{z}, ymm2, xmm3/m128
</th><td>EVEX.NDS.256.66.0F.W0 E2 /r 
</td></tr>
<tr><th>VPSRAD zmm1 {k1}{z}, zmm2, xmm3/m128
</th><td>EVEX.NDS.512.66.0F.W0 E2 /r 
</td></tr>
<tr><th>VPSRAD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8
</th><td>EVEX.NDD.128.66.0F.W0 72 /4 ib 
</td></tr>
<tr><th>VPSRAD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8
</th><td>EVEX.NDD.256.66.0F.W0 72 /4 ib 
</td></tr>
<tr><th>VPSRAD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8
</th><td>EVEX.NDD.512.66.0F.W0 72 /4 ib 
</td></tr>
<tr><th>VPSRAD zmm1 {k1}, zmm2/m512/m32bcst, imm8
</th><td>MVEX.NDD.512.66.0F.W0 72 /4 ib
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,shift</dd>
<dt>Operands</dt>
<dd><b>Nq</b>,Ib | <b>Udq</b>,Ib | <b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F72 /4 | 0x660F72 /4 | 0x0FE2 /r | 0x660FE2 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5626.htm">t5626</a>
</dd>
</dl><pre>
IizVPSRAD:: PROC
    MOV AL,0xE2
    MOV BL,0x72
    MOV ECX,iiPpgModRMd | 4<<28
    JMP IizVPSRLD.op:
  ENDP IizVPSRAD::
</pre>

<dl id="IizVPSRAQ">
<dt><a href="#IizHandlers">&uarr; VPSRAQ</a></dt>
<dd>Bit Shift Arithmetic Right</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSRAQ xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.W1 E2 /r 
</td></tr>
<tr><th>VPSRAQ ymm1 {k1}{z}, ymm2, xmm3/m128
</th><td>EVEX.NDS.256.66.0F.W1 E2 /r 
</td></tr>
<tr><th>VPSRAQ zmm1 {k1}{z}, zmm2, xmm3/m128
</th><td>EVEX.NDS.512.66.0F.W1 E2 /r 
</td></tr>
<tr><th>VPSRAQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8
</th><td>EVEX.NDD.128.66.0F.W1 72 /4 ib 
</td></tr>
<tr><th>VPSRAQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8
</th><td>EVEX.NDD.256.66.0F.W1 72 /4 ib 
</td></tr>
<tr><th>VPSRAQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8
</th><td>EVEX.NDD.512.66.0F.W1 72 /4 ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xE2 | 0x72</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5626.htm">t5626</a>
</dd>
</dl><pre>
IizVPSRAQ:: PROC
    IiAllowModifier MASK
    IiEncoding DATA=QWORD
    CMP DL,imm
    JE .I:
    IiOpEn RVM
    IiEmitOpcode 0xE2
    IiModRM /r
    IiDisp8EVEX M128
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.xmm, ymm.ymm.mem, zmm.zmm.xmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix EVEX.NDS.128.66.0F.W1
    RET
.ymm.ymm.xmm:
.ymm.ymm.mem:
    IiEmitPrefix EVEX.NDS.256.66.0F.W1
    RET
.zmm.zmm.xmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F.W1
    RET
.I: IiOpEn VM
    IiEmitOpcode 0x72
    IiModRM /4
    IiEmitImm Operand3, BYTE
    IiAllowBroadcasting QWORD, Operand=DH
    IiDisp8EVEX FV64
    IiDispatchFormat  xmm.xmm.imm, xmm.mem.imm, ymm.ymm.imm, ymm.mem.imm, zmm.zmm.imm, zmm.mem.imm
.xmm.xmm.imm:
.xmm.mem.imm:
    IiEmitPrefix EVEX.NDD.128.66.0F.W1
    RET
.ymm.ymm.imm:
.ymm.mem.imm:
    IiEmitPrefix EVEX.NDD.256.66.0F.W1
    RET
.zmm.zmm.imm:
.zmm.mem.imm:
    IiEmitPrefix EVEX.NDD.512.66.0F.W1
    RET
  ENDP IizVPSRAQ::
</pre>

<dl id="IizVPSLLW">
<dt><a href="#IizVPSRLW">&uarr; VPSLLW</a></dt>
<dd>Shift Packed Data Left Logical</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSLLW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG F1 /r 
</td></tr>
<tr><th>VPSLLW xmm1, xmm2, imm8
</th><td>VEX.NDD.128.66.0F.WIG 71 /6 ib 
</td></tr>
<tr><th>VPSLLW ymm1, ymm2, xmm3/m128
</th><td>VEX.NDS.256.66.0F.WIG F1 /r 
</td></tr>
<tr><th>VPSLLW ymm1, ymm2, imm8
</th><td>VEX.NDD.256.66.0F.WIG 71 /6 ib 
</td></tr>
<tr><th>VPSLLW xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG F1 /r 
</td></tr>
<tr><th>VPSLLW ymm1 {k1}{z}, ymm2, xmm3/m128
</th><td>EVEX.NDS.256.66.0F.WIG F1 /r 
</td></tr>
<tr><th>VPSLLW zmm1 {k1}{z}, zmm2, xmm3/m128
</th><td>EVEX.NDS.512.66.0F.WIG F1 /r 
</td></tr>
<tr><th>VPSLLW xmm1 {k1}{z}, xmm2/m128, imm8
</th><td>EVEX.NDD.128.66.0F.WIG 71 /6 ib 
</td></tr>
<tr><th>VPSLLW ymm1 {k1}{z}, ymm2/m256, imm8
</th><td>EVEX.NDD.256.66.0F.WIG 71 /6 ib 
</td></tr>
<tr><th>VPSLLW zmm1 {k1}{z}, zmm2/m512, imm8
</th><td>EVEX.NDD.512.66.0F.WIG 71 /6 ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,shift</dd>
<dt>Operands</dt>
<dd><b>Nq</b>,Ib | <b>Udq</b>,Ib | <b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F71 /6 | 0x660F71 /6 | 0x0FF1 /r | 0x660FF1 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5624.htm">t5624</a>
</dd>
</dl><pre>
IizVPSLLW:: PROC
    MOV AL,0xF1
    MOV BL,0x71
    MOV ECX,iiPpgModRMd | 6<<28
    JMP IizVPSRLW.op:
  ENDP IizVPSLLW::
</pre>

<dl id="IizVPSLLD">
<dt><a href="#IizVPSRLD">&uarr; VPSLLD</a></dt>
<dd>Shift Packed Data Left Logical</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSLLD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG F2 /r 
</td></tr>
<tr><th>VPSLLD xmm1, xmm2, imm8
</th><td>VEX.NDD.128.66.0F.WIG 72 /6 ib 
</td></tr>
<tr><th>VPSLLD ymm1, ymm2, xmm3/m128
</th><td>VEX.NDS.256.66.0F.WIG F2 /r 
</td></tr>
<tr><th>VPSLLD ymm1, ymm2, imm8
</th><td>VEX.NDD.256.66.0F.WIG 72 /6 ib 
</td></tr>
<tr><th>VPSLLD xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.W0 F2 /r 
</td></tr>
<tr><th>VPSLLD ymm1 {k1}{z}, ymm2, xmm3/m128
</th><td>EVEX.NDS.256.66.0F.W0 F2 /r 
</td></tr>
<tr><th>VPSLLD zmm1 {k1}{z}, zmm2, xmm3/m128
</th><td>EVEX.NDS.512.66.0F.W0 F2 /r 
</td></tr>
<tr><th>VPSLLD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8
</th><td>EVEX.NDD.128.66.0F.W0 72 /6 ib 
</td></tr>
<tr><th>VPSLLD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8
</th><td>EVEX.NDD.256.66.0F.W0 72 /6 ib 
</td></tr>
<tr><th>VPSLLD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8
</th><td>EVEX.NDD.512.66.0F.W0 72 /6 ib 
</td></tr>
<tr><th>VPSLLD zmm1 {k1}, zmm2/m512/m32bcst, imm8
</th><td>MVEX.NDD.512.66.0F.W0 72 /6 ib
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,shift</dd>
<dt>Operands</dt>
<dd><b>Nq</b>,Ib | <b>Udq</b>,Ib | <b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F72 /6 | 0x660F72 /6 | 0x0FF2 /r | 0x660FF2 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5624.htm">t5624</a>
</dd>
</dl><pre>
IizVPSLLD:: PROC
    MOV AL,0xF2
    MOV BL,0x72
    MOV ECX,iiPpgModRMd | 6<<28
    JMP IizVPSRLD.op:
  ENDP IizVPSLLD::
</pre>

<dl id="IizVPSLLQ">
<dt><a href="#IizVPSRLQ">&uarr; VPSLLQ</a></dt>
<dd>Shift Packed Data Left Logical</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSLLQ xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG F3 /r 
</td></tr>
<tr><th>VPSLLQ xmm1, xmm2, imm8
</th><td>VEX.NDD.128.66.0F.WIG 73 /6 ib 
</td></tr>
<tr><th>VPSLLQ ymm1, ymm2, xmm3/m128
</th><td>VEX.NDS.256.66.0F.WIG F3 /r 
</td></tr>
<tr><th>VPSLLQ ymm1, ymm2, imm8
</th><td>VEX.NDD.256.66.0F.WIG 73 /6 ib 
</td></tr>
<tr><th>VPSLLQ xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.W1 F3 /r 
</td></tr>
<tr><th>VPSLLQ ymm1 {k1}{z}, ymm2, xmm3/m128
</th><td>EVEX.NDS.256.66.0F.W1 F3 /r 
</td></tr>
<tr><th>VPSLLQ zmm1 {k1}{z}, zmm2, xmm3/m128
</th><td>EVEX.NDS.512.66.0F.W1 F3 /r 
</td></tr>
<tr><th>VPSLLQ xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8
</th><td>EVEX.NDD.128.66.0F.W1 73 /6 ib 
</td></tr>
<tr><th>VPSLLQ ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8
</th><td>EVEX.NDD.256.66.0F.W1 73 /6 ib 
</td></tr>
<tr><th>VPSLLQ zmm1 {k1}{z}, zmm2/m512/m64bcst, imm8
</th><td>EVEX.NDD.512.66.0F.W1 73 /6 ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,shift</dd>
<dt>Operands</dt>
<dd><b>Nq</b>,Ib | <b>Udq</b>,Ib | <b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F73 /6 | 0x660F73 /6 | 0x0FF3 /r | 0x660FF3 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5624.htm">t5624</a>
</dd>
</dl><pre>
IizVPSLLQ:: PROC
    MOV AL,0xF3
    MOV BL,0x73
    MOV ECX,iiPpgModRMd | 6<<28
    JMP IizVPSRLQ.op:
  ENDP IizVPSLLQ::
</pre>

<dl id="IizVPSLLDQ">
<dt><a href="#IizVPSRLDQ">&uarr; VPSLLDQ</a></dt>
<dd>Shift Double Quadword Left Logical</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSLLDQ xmm1, xmm2, imm8
</th><td>VEX.NDD.128.66.0F 73 /7 ib 
</td></tr>
<tr><th>VPSLLDQ ymm1, ymm2, imm8
</th><td>VEX.NDD.256.66.0F 73 /7 ib 
</td></tr>
<tr><th>VPSLLDQ xmm1,xmm2/ m128, imm8
</th><td>EVEX.NDD.128.66.0F 73 /7 ib 
</td></tr>
<tr><th>VPSLLDQ ymm1, ymm2/m256, imm8
</th><td>EVEX.NDD.256.66.0F 73 /7 ib 
</td></tr>
<tr><th>VPSLLDQ zmm1, zmm2/m512, imm8
</th><td>EVEX.NDD.512.66.0F 73 /7 ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,simdint,shift</dd>
<dt>Operands</dt>
<dd><b>Udq</b>,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F73 /7</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5624.htm">t5624</a>
</dd>
</dl><pre>
IizVPSLLDQ:: PROC
    MOV ECX,iiPpgModRMd | 7<<28
    MOV BL,0x73
    JMP IizVPSRLDQ.d:
  ENDP IizVPSLLDQ::
</pre>

<dl id="IizVPSRLVW">
<dt><a href="#IizHandlers">&uarr; VPSRLVW</a></dt>
<dd>Variable Bit Shift Right Logical WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSRLVW xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F38.W1 10 /r 
</td></tr>
<tr><th>VPSRLVW ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F38.W1 10 /r 
</td></tr>
<tr><th>VPSRLVW zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F38.W1 10 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x10</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5632.htm">t5632</a>
</dd>
</dl><pre>
IizVPSRLVW:: PROC
    IiEmitOpcode 0x10
.op:IiEncoding DATA=WORD
    IiAllowModifier MASK
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FVM
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix EVEX.NDS.128.66.0F38.W1
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix EVEX.NDS.256.66.0F38.W1
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38.W1
    RET
  ENDP IizVPSRLVW::
</pre>

<dl id="IizVPSRLVD">
<dt><a href="#IizHandlers">&uarr; VPSRLVD</a></dt>
<dd>Variable Bit Shift Right Logical DWORD</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VPSRLVW:VPSRLVD:VPSRLVQ.html">VPSRLVD</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSRLVD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38.W0 45 /r 
</td></tr>
<tr><th>VPSRLVD ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38.W0 45 /r 
</td></tr>
<tr><th>VPSRLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
</th><td>EVEX.NDS.128.66.0F38.W0 45 /r 
</td></tr>
<tr><th>VPSRLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
</th><td>EVEX.NDS.256.66.0F38.W0 45 /r 
</td></tr>
<tr><th>VPSRLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
</th><td>EVEX.NDS.512.66.0F38.W0 45 /r 
</td></tr>
<tr><th>VPSRLVD zmm1 {k1}, zmm2, zmm3/m512/m32bcst
</th><td>MVEX.NDS.512.66.0F38.W0 45 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x45</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5632.htm">t5632</a>
</dd>
</dl><pre>
IizVPSRLVD:: PROC
    IiEmitOpcode 0x45
.op:IiEncoding DATA=DWORD
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FV32
    IiDisp8MVEX Si32
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F38.W0, EVEX.NDS.128.66.0F38.W0
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F38.W0, EVEX.NDS.256.66.0F38.W0
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38.W0, MVEX.NDS.512.66.0F38.W0
    RET
  ENDP IizVPSRLVD::
</pre>

<dl id="IizVPSRLVQ">
<dt><a href="#IizHandlers">&uarr; VPSRLVQ</a></dt>
<dd>Variable Bit Shift Right Logical QWORD</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VPSRLVW:VPSRLVD:VPSRLVQ.html">VPSRLVQ</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSRLVQ xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38.W1 45 /r 
</td></tr>
<tr><th>VPSRLVQ ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38.W1 45 /r 
</td></tr>
<tr><th>VPSRLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
</th><td>EVEX.NDS.128.66.0F38.W1 45 /r
</td></tr>
<tr><th>VPSRLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
</th><td>EVEX.NDS.256.66.0F38.W1 45 /r
</td></tr>
<tr><th>VPSRLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
</th><td>EVEX.NDS.512.66.0F38.W1 45 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x45</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5632.htm">t5632</a>
</dd>
</dl><pre>
IizVPSRLVQ:: PROC
    IiEmitOpcode 0x45
.op:IiEncoding DATA=QWORD
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FV64
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F38.W1, EVEX.NDS.128.66.0F38.W1
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F38.W1, EVEX.NDS.256.66.0F38.W1
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38.W1
    RET
  ENDP IizVPSRLVQ::
</pre>

<dl id="IizVPSRAVW">
<dt><a href="#IizHandlers">&uarr; VPSRAVW</a></dt>
<dd>Variable Bit Shift Right Arithmetic WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSRAVW xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F38.W1 11 /r 
</td></tr>
<tr><th>VPSRAVW ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F38.W1 11 /r 
</td></tr>
<tr><th>VPSRAVW zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F38.W1 11 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x11</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5634.htm">t5634</a>
</dd>
</dl><pre>
IizVPSRAVW:: PROC
    IiEmitOpcode 0x11
    JMP IizVPSRLVW.op:
    RET
  ENDP IizVPSRAVW::
</pre>

<dl id="IizVPSRAVD">
<dt><a href="#IizHandlers">&uarr; VPSRAVD</a></dt>
<dd>Variable Bit Shift Right Arithmetic DWORD</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VPSRAVW:VPSRAVD:VPSRAVQ.html">VPSRAVD</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSRAVD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38.W0 46 /r 
</td></tr>
<tr><th>VPSRAVD ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38.W0 46 /r 
</td></tr>
<tr><th>VPSRAVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
</th><td>EVEX.NDS.128.66.0F38.W0 46 /r 
</td></tr>
<tr><th>VPSRAVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
</th><td>EVEX.NDS.256.66.0F38.W0 46 /r 
</td></tr>
<tr><th>VPSRAVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
</th><td>EVEX.NDS.512.66.0F38.W0 46 /r 
</td></tr>
<tr><th>VPSRAVD zmm1 {k1}, zmm2, zmm3/m512/m32bcst
</th><td>MVEX.NDS.512.66.0F38.W0 46 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x46</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5634.htm">t5634</a>
</dd>
</dl><pre>
IizVPSRAVD:: PROC
    IiEmitOpcode 0x46
    JMP IizVPSRLVD.op:
  ENDP IizVPSRAVD::
</pre>

<dl id="IizVPSRAVQ">
<dt><a href="#IizHandlers">&uarr; VPSRAVQ</a></dt>
<dd>Variable Bit Shift Right Arithmetic QWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSRAVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
</th><td>EVEX.NDS.128.66.0F38.W1 46 /r 
</td></tr>
<tr><th>VPSRAVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
</th><td>EVEX.NDS.256.66.0F38.W1 46 /r
</td></tr>
<tr><th>VPSRAVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
</th><td>EVEX.NDS.512.66.0F38.W1 46 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x46</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5634.htm">t5634</a>
</dd>
</dl><pre>
IizVPSRAVQ:: PROC
    IiEmitOpcode 0x46
    IiEncoding DATA=QWORD
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FV64
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix EVEX.NDS.128.66.0F38.W1
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix EVEX.NDS.256.66.0F38.W1
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38.W1
    RET
  ENDP IizVPSRAVQ::
</pre>

<dl id="IizVPSLLVW">
<dt><a href="#IizHandlers">&uarr; VPSLLVW</a></dt>
<dd>Variable Bit Shift Left Logical WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSLLVW xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F38.W1 12 /r 
</td></tr>
<tr><th>VPSLLVW ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F38.W1 12 /r 
</td></tr>
<tr><th>VPSLLVW zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F38.W1 12 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x12</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5636.htm">t5636</a>
</dd>
</dl><pre>
IizVPSLLVW:: PROC
    IiEmitOpcode 0x12
    JMP IizVPSRLVW.op:
  ENDP IizVPSLLVW::
</pre>

<dl id="IizVPSLLVD">
<dt><a href="#IizHandlers">&uarr; VPSLLVD</a></dt>
<dd>Variable Bit Shift Left Logical DWORD</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VPSLLVW:VPSLLVD:VPSLLVQ.html">VPSLLVD</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSLLVD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38.W0 47 /r 
</td></tr>
<tr><th>VPSLLVD ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38.W0 47 /r 
</td></tr>
<tr><th>VPSLLVD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
</th><td>EVEX.NDS.128.66.0F38.W0 47 /r 
</td></tr>
<tr><th>VPSLLVD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
</th><td>EVEX.NDS.256.66.0F38.W0 47 /r 
</td></tr>
<tr><th>VPSLLVD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
</th><td>EVEX.NDS.512.66.0F38.W0 47 /r 
</td></tr>
<tr><th>VPSLLVD zmm1 {k1}, zmm2, zmm3/m512/m32bcst
</th><td>MVEX.NDS.512.66.0F38.W0 47 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x47</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5636.htm">t5636</a>
</dd>
</dl><pre>
IizVPSLLVD:: PROC
    IiEmitOpcode 0x47
    JMP IizVPSRLVD.op:
  ENDP IizVPSLLVD::
</pre>

<dl id="IizVPSLLVQ">
<dt><a href="#IizHandlers">&uarr; VPSLLVQ</a></dt>
<dd>Variable Bit Shift Left Logical QWORD</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VPSLLVW:VPSLLVD:VPSLLVQ.html">VPSLLVQ</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSLLVQ xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38.W1 47 /r 
</td></tr>
<tr><th>VPSLLVQ ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38.W1 47 /r 
</td></tr>
<tr><th>VPSLLVQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
</th><td>EVEX.NDS.128.66.0F38.W1 47 /r 
</td></tr>
<tr><th>VPSLLVQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
</th><td>EVEX.NDS.256.66.0F38.W1 47 /r 
</td></tr>
<tr><th>VPSLLVQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
</th><td>EVEX.NDS.512.66.0F38.W1 47 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x47</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5636.htm">t5636</a>
</dd>
</dl><pre>
IizVPSLLVQ:: PROC
    IiEmitOpcode 0x47
    JMP IizVPSRLVQ.op:
  ENDP IizVPSLLVQ::
</pre>

<dl id="IizVPABSB">
<dt><a href="#IizHandlers">&uarr; VPABSB</a></dt>
<dd>Packed Absolute Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPABSB xmm1, xmm2/m128
</th><td>VEX.128.66.0F38.WIG 1C /r 
</td></tr>
<tr><th>VPABSB ymm1, ymm2/m256 
</th><td>VEX.256.66.0F38.WIG 1C /r 
</td></tr>
<tr><th>VPABSB xmm1 {k1}{z}, xmm2/m128
</th><td>EVEX.128.66.0F38 1C /r
</td></tr>
<tr><th>VPABSB ymm1 {k1}{z}, ymm2/m256
</th><td>EVEX.256.66.0F38 1C /r
</td></tr>
<tr><th>VPABSB zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.66.0F38 1C /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>ssse3,simdint</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F381C /r | 0x660F381C /r</dd>
<dt>CPU</dt>
<dd>C2+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5640.htm">t5640</a>
</dd>
</dl><pre>
IizVPABSB:: PROC
    IiEncoding DATA=BYTE
    IiAllowModifier MASK
    IiEmitOpcode 0x1C
    IiOpEn RM
    IiModRM /r
    IiDisp8EVEX FVM
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.66.0F38.WIG, EVEX.128.66.0F38
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix VEX.256.66.0F38.WIG, EVEX.256.66.0F38
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38
    RET
  ENDP IizVPABSB::
</pre>

<dl id="IizVPABSW">
<dt><a href="#IizHandlers">&uarr; VPABSW</a></dt>
<dd>Packed Absolute Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPABSW xmm1, xmm2/m128
</th><td>VEX.128.66.0F38.WIG 1D /r  
</td></tr>
<tr><th>VPABSW ymm1, ymm2/m256 
</th><td>VEX.256.66.0F38.WIG 1D /r  
</td></tr>
<tr><th>VPABSW xmm1 {k1}{z}, xmm2/m128  
</th><td>EVEX.128.66.0F38 1D /r
</td></tr>
<tr><th>VPABSW ymm1 {k1}{z}, ymm2/m256  
</th><td>EVEX.256.66.0F38 1D /r
</td></tr>
<tr><th>VPABSW zmm1 {k1}{z}, zmm2/m512
</th><td>EVEX.512.66.0F38 1D /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>ssse3,simdint</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F381D /r | 0x660F381D /r</dd>
<dt>CPU</dt>
<dd>C2+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5640.htm">t5640</a>
</dd>
</dl><pre>
IizVPABSW:: PROC
    IiEncoding DATA=WORD
    IiAllowModifier MASK
    IiEmitOpcode 0x1D
    IiOpEn RM
    IiModRM /r
    IiDisp8EVEX FVM
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.66.0F38.WIG, EVEX.128.66.0F38
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix VEX.256.66.0F38.WIG, EVEX.256.66.0F38
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38
    RET
  ENDP IizVPABSW::
</pre>

<dl id="IizVPABSD">
<dt><a href="#IizHandlers">&uarr; VPABSD</a></dt>
<dd>Packed Absolute Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPABSD xmm1, xmm2/m128 
</th><td>VEX.128.66.0F38.WIG 1E /r 
</td></tr>
<tr><th>VPABSD ymm1, ymm2/m256 
</th><td>VEX.256.66.0F38.WIG 1E /r 
</td></tr>
<tr><th>VPABSD xmm1 {k1}{z}, xmm2/m128/m32bcst
</th><td>EVEX.128.66.0F38.W0 1E /r
</td></tr>
<tr><th>VPABSD ymm1 {k1}{z}, ymm2/m256/m32bcst
</th><td>EVEX.256.66.0F38.W0 1E /r
</td></tr>
<tr><th>VPABSD zmm1 {k1}{z}, zmm2/m512/m32bcst
</th><td>EVEX.512.66.0F38.W0 1E /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>ssse3,simdint</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F381E /r | 0x660F381E /r</dd>
<dt>CPU</dt>
<dd>C2+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5640.htm">t5640</a>
</dd>
</dl><pre>
IizVPABSD:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD
    IiEmitOpcode 0x1E
    IiOpEn RM
    IiModRM /r
    IiDisp8EVEX FV32
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.66.0F38.WIG, EVEX.128.66.0F38.W0
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix VEX.256.66.0F38.WIG, EVEX.256.66.0F38.W0
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W0
    RET
  ENDP IizVPABSD::
</pre>

<dl id="IizVPABSQ">
<dt><a href="#IizHandlers">&uarr; VPABSQ</a></dt>
<dd>Packed Absolute Value</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPABSQ xmm1 {k1}{z}, xmm2/m128/m64bcst
</th><td>EVEX.128.66.0F38.W1 1F /r
</td></tr>
<tr><th>VPABSQ ymm1 {k1}{z}, ymm2/m256/m64bcst 
</th><td>EVEX.256.66.0F38.W1 1F /r
</td></tr>
<tr><th>VPABSQ zmm1 {k1}{z}, zmm2/m512/m64bcst
</th><td>EVEX.512.66.0F38.W1 1F /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x1F</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5640.htm">t5640</a>
</dd>
</dl><pre>
IizVPABSQ:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiEmitOpcode 0x1F
    IiOpEn RM
    IiModRM /r
    IiDisp8EVEX FV64
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem, zmm.zmm, zmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix EVEX.128.66.0F38.W1
    RET
.ymm.ymm:
.ymm.mem:
    IiEmitPrefix EVEX.256.66.0F38.W1
    RET
.zmm.zmm:
.zmm.mem:
    IiEmitPrefix EVEX.512.66.0F38.W1
    RET
  ENDP IizVPABSQ::
</pre>

<dl id="IizVPMULUDQ">
<dt><a href="#IizHandlers">&uarr; VPMULUDQ</a></dt>
<dd>Multiply Packed Unsigned DW Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMULUDQ xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F.WIG F4 /r 
</td></tr>
<tr><th>VPMULUDQ ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F.WIG F4 /r 
</td></tr>
<tr><th>VPMULUDQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
</th><td>EVEX.NDS.128.66.0F.W1 F4 /r 
</td></tr>
<tr><th>VPMULUDQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
</th><td>EVEX.NDS.256.66.0F.W1 F4 /r 
</td></tr>
<tr><th>VPMULUDQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
</th><td>EVEX.NDS.512.66.0F.W1 F4 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,simdint,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FF4 /r | 0x660FF4 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5642.htm">t5642</a>
<a class="EXT" href="../eatests/t5680.htm">t5680</a>
</dd>
</dl><pre>
IizVPMULUDQ:: PROC
    IiEmitOpcode 0xF4
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FV64
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F.WIG, EVEX.NDS.128.66.0F.W1
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F.WIG, EVEX.NDS.256.66.0F.W1
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F.W1
    RET
  ENDP IizVPMULUDQ::
</pre>

<dl id="IizVPMADDWD">
<dt><a href="#IizHandlers">&uarr; VPMADDWD</a></dt>
<dd>Multiply and Add Packed Integers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPMADDWD xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F F5 /r 
</td></tr>
<tr><th>VPMADDWD ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F F5 /r 
</td></tr>
<tr><th>VPMADDWD xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG F5 /r 
</td></tr>
<tr><th>VPMADDWD ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG F5 /r 
</td></tr>
<tr><th>VPMADDWD zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F.WIG F5 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>mmx,arith</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qd | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FF5 /r | 0x660FF5 /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5642.htm">t5642</a>
</dd>
</dl><pre>
IizVPMADDWD:: PROC
    IiEmitOpcode 0xF5
    IiAllowModifier MASK
.op:IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FVM
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F, EVEX.NDS.128.66.0F.WIG
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F, EVEX.NDS.256.66.0F.WIG
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F.WIG
    RET
  ENDP IizVPMADDWD::
</pre>

<dl id="IizVPSADBW">
<dt><a href="#IizVPMADDWD">&uarr; VPSADBW</a></dt>
<dd>Compute Sum of Absolute Differences</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSADBW xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F F6 /r 
</td></tr>
<tr><th>VPSADBW ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F F6 /r 
</td></tr>
<tr><th>VPSADBW xmm1, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F.WIG F6 /r 
</td></tr>
<tr><th>VPSADBW ymm1, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F.WIG F6 /r 
</td></tr>
<tr><th>VPSADBW zmm1, zmm2, zmm3/m512</th><td>EVEX.NDS.512.66.0F.WIG F6 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdint</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0FF6 /r | 0x660FF6 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5642.htm">t5642</a>
</dd>
</dl><pre>
IizVPSADBW:: PROC
    IiEmitOpcode 0xF6
    JMP IizVPMADDWD.op:
  ENDP IizVPSADBW::
</pre>

<dl id="IizVSHUFPS">
<dt><a href="#IizHandlers">&uarr; VSHUFPS</a></dt>
<dd>Shuffle Packed Single-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSHUFPS xmm1, xmm2, xmm3/m128, imm8
</th><td>VEX.NDS.128.0F.WIG C6 /r ib 
</td></tr>
<tr><th>VSHUFPS ymm1, ymm2, ymm3/m256, imm8
</th><td>VEX.NDS.256.0F.WIG C6 /r ib 
</td></tr>
<tr><th>VSHUFPS xmm1{k1}{z}, xmm2, xmm3/m128/m32bcst, imm8
</th><td>EVEX.NDS.128.0F.W0 C6 /r ib 
</td></tr>
<tr><th>VSHUFPS ymm1{k1}{z}, ymm2, ymm3/m256/m32bcst, imm8
</th><td>EVEX.NDS.256.0F.W0 C6 /r ib 
</td></tr>
<tr><th>VSHUFPS zmm1{k1}{z}, zmm2, zmm3/m512/m32bcst, imm8
</th><td>EVEX.NDS.512.0F.W0 C6 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse1,simdfp,shunpck</dd>
<dt>Operands</dt>
<dd><b>Vps</b>,Wps,Ib</dd>
<dt>Opcode</dt>
<dd>0x0FC6 /r</dd>
<dt>CPU</dt>
<dd>P3+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5644.htm">t5644</a>
</dd>
</dl><pre>
IizVSHUFPS:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD, Operand=DH
    IiEmitOpcode 0xC6
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiDisp8EVEX FV32
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm, ymm.ymm.ymm.imm, ymm.ymm.mem.imm, zmm.zmm.zmm.imm, zmm.zmm.mem.imm
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    IiEmitPrefix VEX.NDS.128.0F.WIG, EVEX.NDS.128.0F.W0
    RET
.ymm.ymm.ymm.imm:
.ymm.ymm.mem.imm:
    IiEmitPrefix VEX.NDS.256.0F.WIG, EVEX.NDS.256.0F.W0
    RET
.zmm.zmm.zmm.imm:
.zmm.zmm.mem.imm:
    IiEmitPrefix EVEX.NDS.512.0F.W0
    RET
  ENDP IizVSHUFPS::
</pre>

<dl id="IizVSHUFPD">
<dt><a href="#IizHandlers">&uarr; VSHUFPD</a></dt>
<dd>Shuffle Packed Double-FP Values</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSHUFPD xmm1, xmm2, xmm3/m128, imm8
</th><td>VEX.NDS.128.66.0F.WIG C6 /r ib 
</td></tr>
<tr><th>VSHUFPD ymm1, ymm2, ymm3/m256, imm8
</th><td>VEX.NDS.256.66.0F.WIG C6 /r ib
</td></tr>
<tr><th>VSHUFPD xmm1{k1}{z}, xmm2, xmm3/m128/m64bcst, imm8
</th><td>EVEX.NDS.128.66.0F.W1 C6 /r ib
</td></tr>
<tr><th>VSHUFPD ymm1{k1}{z}, ymm2, ymm3/m256/m64bcst, imm8
</th><td>EVEX.NDS.256.66.0F.W1 C6 /r ib
</td></tr>
<tr><th>VSHUFPD zmm1{k1}{z}, zmm2, zmm3/m512/m64bcst, imm8
</th><td>EVEX.NDS.512.66.0F.W1 C6 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,pcksclr,shunpck</dd>
<dt>Operands</dt>
<dd><b>Vpd</b>,Wpd,Ib</dd>
<dt>Opcode</dt>
<dd>0x660FC6 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5644.htm">t5644</a>
</dd>
</dl><pre>
IizVSHUFPD:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting QWORD, Operand=DH
    IiEmitOpcode 0xC6
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiDisp8EVEX FV64
    IiDispatchFormat  xmm.xmm.xmm.imm, xmm.xmm.mem.imm, ymm.ymm.ymm.imm, ymm.ymm.mem.imm, zmm.zmm.zmm.imm, zmm.zmm.mem.imm
.xmm.xmm.xmm.imm:
.xmm.xmm.mem.imm:
    IiEmitPrefix VEX.NDS.128.66.0F.WIG, EVEX.NDS.128.66.0F.W1
    RET
.ymm.ymm.ymm.imm:
.ymm.ymm.mem.imm:
    IiEmitPrefix VEX.NDS.256.66.0F.WIG, EVEX.NDS.256.66.0F.W1
    RET
.zmm.zmm.zmm.imm:
.zmm.zmm.mem.imm:
    IiEmitPrefix EVEX.NDS.512.66.0F.W1
    RET
  ENDP IizVSHUFPD::
</pre>

<dl id="IizVSHUFF32X4">
<dt><a href="#IizHandlers">&uarr; VSHUFF32X4</a></dt>
<dd>Shuffle Packed Values at 128-bit  Granularity</dd>
<dt>Description</dt>
<dd><a class="EXT" href="https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2">VSHUFF32X4</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSHUFF32X4 ymm1{k1}{z}, ymm2, ymm3/m256/m32bcst, imm8
</th><td>EVEX.NDS.256.66.0F3A.W0 23 /r ib 
</td></tr>
<tr><th>VSHUFF32X4 zmm1{k1}{z}, zmm2, zmm3/m512/m32bcst, imm8
</th><td>EVEX.NDS.512.66.0F3A.W0 23 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x23</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5646.htm">t5646</a>
</dd>
</dl><pre>
IizVSHUFF32X4:: PROC
    IiEmitOpcode 0x23
.op:IiAllowBroadcasting DWORD,Operand=DH
    IiDisp8EVEX FV32
    IiAllowModifier MASK
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiDispatchFormat  ymm.ymm.ymm.imm, ymm.ymm.mem.imm, zmm.zmm.zmm.imm, zmm.zmm.mem.imm
.ymm.ymm.ymm.imm:
.ymm.ymm.mem.imm:
    IiEmitPrefix EVEX.NDS.256.66.0F3A.W0
    RET
.zmm.zmm.zmm.imm:
.zmm.zmm.mem.imm:
    IiEmitPrefix EVEX.NDS.512.66.0F3A.W0
    RET
  ENDP IizVSHUFF32X4::
</pre>

<dl id="IizVSHUFI32X4">
<dt><a href="#IizVSHUFF32X4">&uarr; VSHUFI32X4</a></dt>
<dd>Shuffle Packed Values at 128-bit  Granularity</dd>
<dt>Description</dt>
<dd><a class="EXT" href="https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2">VSHUFI32X2</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSHUFI32X4 ymm1{k1}{z}, ymm2, ymm3/m256/m32bcst, imm8
</th><td>EVEX.NDS.256.66.0F3A.W0 43 /r ib
</td></tr>
<tr><th>VSHUFI32X4 zmm1{k1}{z}, zmm2, zmm3/m512/m32bcst, imm8
</th><td>EVEX.NDS.512.66.0F3A.W0 43 /r ib
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x43</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5646.htm">t5646</a>
</dd>
</dl><pre>
IizVSHUFI32X4:: PROC
    IiEmitOpcode 0x43
    JMP IizVSHUFF32X4.op:
  ENDP IizVSHUFI32X4::
</pre>

<dl id="IizVSHUFF64X2">
<dt><a href="#IizHandlers">&uarr; VSHUFF64X2</a></dt>
<dd>Shuffle Packed Values at 128-bit  Granularity</dd>
<dt>Description</dt>
<dd><a class="EXT" href="https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2">VSHUFF64X2</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSHUFF64X2 ymm1{k1}{z}, ymm2, ymm3/m256/m64bcst, imm8
</th><td>EVEX.NDS.256.66.0F3A.W1 23 /r ib 
</td></tr>
<tr><th>VSHUFF64X2 zmm1{k1}{z}, zmm2, zmm3/m512/m64bcst, imm8
</th><td>EVEX.NDS.512.66.0F3A.W1 23 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x23</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5646.htm">t5646</a>
</dd>
</dl><pre>
IizVSHUFF64X2:: PROC
    IiEmitOpcode 0x23
.op:IiAllowModifier MASK
    IiAllowBroadcasting QWORD, Operand=DH
    IiDisp8EVEX FV64
    IiAllowModifier MASK
    IiOpEn RVM
    IiModRM /r
    IiEmitImm Operand4, BYTE
    IiDispatchFormat  ymm.ymm.ymm.imm, ymm.ymm.mem.imm, zmm.zmm.zmm.imm, zmm.zmm.mem.imm
.ymm.ymm.ymm.imm:
    IiEmitPrefix EVEX.NDS.256.66.0F3A.W1
    RET
.ymm.ymm.mem.imm:
    IiEmitPrefix EVEX.NDS.256.66.0F3A.W1
    RET
.zmm.zmm.zmm.imm:
    IiEmitPrefix EVEX.NDS.512.66.0F3A.W1
    RET
.zmm.zmm.mem.imm:
    IiEmitPrefix EVEX.NDS.512.66.0F3A.W1
    RET
  ENDP IizVSHUFF64X2::
</pre>

<dl id="IizVSHUFI64X2">
<dt><a href="#IizHandlers">&uarr; VSHUFI64X2</a></dt>
<dd>Shuffle Packed Values at 128-bit  Granularity</dd>
<dt>Description</dt>
<dd><a class="EXT" href="https://www.felixcloutier.com/x86/vshuff32x4:vshuff64x2:vshufi32x4:vshufi64x2">VSHUFI64X2</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VSHUFI64X2 ymm1{k1}{z}, ymm2, ymm3/m256/m64bcst, imm8
</th><td>EVEX.NDS.256.66.0F3A.W1 43 /r ib 
</td></tr>
<tr><th>VSHUFI64X2 zmm1{k1}{z}, zmm2, zmm3/m512/m64bcst, imm8
</th><td>EVEX.NDS.512.66.0F3A.W1 43 /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x43</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5646.htm">t5646</a>
</dd>
</dl><pre>
IizVSHUFI64X2:: PROC
    IiEmitOpcode 0x43
    JMP IizVSHUFF64X2.op:
  ENDP IizVSHUFI64X2::
</pre>

<dl id="IizVPSHUFB">
<dt><a href="#IizHandlers">&uarr; VPSHUFB</a></dt>
<dd>Packed Shuffle Bytes</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSHUFB xmm1, xmm2, xmm3/m128
</th><td>VEX.NDS.128.66.0F38 00 /r 
</td></tr>
<tr><th>VPSHUFB ymm1, ymm2, ymm3/m256
</th><td>VEX.NDS.256.66.0F38 00 /r 
</td></tr>
<tr><th>VPSHUFB xmm1 {k1}{z}, xmm2, xmm3/m128
</th><td>EVEX.NDS.128.66.0F38.WIG 00 /r 
</td></tr>
<tr><th>VPSHUFB ymm1 {k1}{z}, ymm2, ymm3/m256
</th><td>EVEX.NDS.256.66.0F38.WIG 00 /r 
</td></tr>
<tr><th>VPSHUFB zmm1 {k1}{z}, zmm2, zmm3/m512
</th><td>EVEX.NDS.512.66.0F38.WIG 00 /r 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>ssse3,simdint</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F3800 /r | 0x660F3800 /r</dd>
<dt>CPU</dt>
<dd>C2+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5648.htm">t5648</a>
</dd>
</dl><pre>
IizVPSHUFB:: PROC
    IiAllowModifier MASK
    IiEmitOpcode 0x00
    IiOpEn RVM
    IiModRM /r
    IiDisp8EVEX FVM
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem, zmm.zmm.zmm, zmm.zmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F38, EVEX.NDS.128.66.0F38.WIG
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEmitPrefix VEX.NDS.256.66.0F38, EVEX.NDS.256.66.0F38.WIG
    RET
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix EVEX.NDS.512.66.0F38.WIG
    RET
  ENDP IizVPSHUFB::
</pre>

<dl id="IizVPSHUFLW">
<dt><a href="#IizHandlers">&uarr; VPSHUFLW</a></dt>
<dd>Shuffle Packed Low Words</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSHUFLW xmm1, xmm2/m128, imm8
</th><td>VEX.128.F2.0F 70 /r ib 
</td></tr>
<tr><th>VPSHUFLW ymm1, ymm2/m256, imm8
</th><td>VEX.256.F2.0F 70 /r ib 
</td></tr>
<tr><th>VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8
</th><td>EVEX.128.F2.0F.WIG 70 /r ib 
</td></tr>
<tr><th>VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8
</th><td>EVEX.256.F2.0F.WIG 70 /r ib 
</td></tr>
<tr><th>VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8
</th><td>EVEX.512.F2.0F.WIG 70 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,simdint,shunpck</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq,Ib</dd>
<dt>Opcode</dt>
<dd>0xF20F70 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5648.htm">t5648</a>
</dd>
</dl><pre>
IizVPSHUFLW:: PROC
    IiAllowModifier MASK
    IiEmitOpcode 0x70
    IiOpEn RM
    IiModRM /r
    IiDisp8EVEX FVM
    IiEmitImm Operand3, BYTE
    IiDispatchFormat  xmm.xmm.imm, xmm.mem.imm, ymm.ymm.imm, ymm.mem.imm, zmm.zmm.imm, zmm.mem.imm
.xmm.xmm.imm:
.xmm.mem.imm:
    IiEmitPrefix VEX.128.F2.0F, EVEX.128.F2.0F.WIG
    RET
.ymm.ymm.imm:
.ymm.mem.imm:
    IiEmitPrefix VEX.256.F2.0F, EVEX.256.F2.0F.WIG
    RET
.zmm.zmm.imm:
.zmm.mem.imm:
    IiEmitPrefix EVEX.512.F2.0F.WIG
    RET
  ENDP IizVPSHUFLW::
</pre>

<dl id="IizVPSHUFHW">
<dt><a href="#IizHandlers">&uarr; VPSHUFHW</a></dt>
<dd>Shuffle Packed High Words</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSHUFHW xmm1, xmm2/m128, imm8
</th><td>VEX.128.F3.0F 70 /r ib 
</td></tr>
<tr><th>VPSHUFHW ymm1, ymm2/m256, imm8
</th><td>VEX.256.F3.0F 70 /r ib 
</td></tr>
<tr><th>VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8
</th><td>EVEX.128.F3.0F.WIG 70 /r ib 
</td></tr>
<tr><th>VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8
</th><td>EVEX.256.F3.0F.WIG 70 /r ib 
</td></tr>
<tr><th>VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8
</th><td>EVEX.512.F3.0F.WIG 70 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,simdint,shunpck</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq,Ib</dd>
<dt>Opcode</dt>
<dd>0xF30F70 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5648.htm">t5648</a>
</dd>
</dl><pre>
IizVPSHUFHW:: PROC
    IiAllowModifier MASK
    IiEmitOpcode 0x70
    IiOpEn RM
    IiModRM /r
    IiDisp8EVEX FVM
    IiEmitImm Operand3, BYTE
    IiDispatchFormat  xmm.xmm.imm, xmm.mem.imm, ymm.ymm.imm, ymm.mem.imm, zmm.zmm.imm, zmm.mem.imm
.xmm.xmm.imm:
.xmm.mem.imm:
    IiEmitPrefix VEX.128.F3.0F, EVEX.128.F3.0F.WIG
    RET
.ymm.ymm.imm:
.ymm.mem.imm:
    IiEmitPrefix VEX.256.F3.0F, EVEX.256.F3.0F.WIG
    RET
.zmm.zmm.imm:
.zmm.mem.imm:
    IiEmitPrefix EVEX.512.F3.0F.WIG
    RET
  ENDP IizVPSHUFHW::
</pre>

<dl id="IizVPSHUFD">
<dt><a href="#IizHandlers">&uarr; VPSHUFD</a></dt>
<dd>Shuffle Packed Doublewords</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSHUFD xmm1, xmm2/m128, imm8
</th><td>VEX.128.66.0F.WIG 70 /r ib 
</td></tr>
<tr><th>VPSHUFD ymm1, ymm2/m256, imm8
</th><td>VEX.256.66.0F.WIG 70 /r ib 
</td></tr>
<tr><th>VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8
</th><td>EVEX.128.66.0F.W0 70 /r ib 
</td></tr>
<tr><th>VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8
</th><td>EVEX.256.66.0F.W0 70 /r ib 
</td></tr>
<tr><th>VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8
</th><td>EVEX.512.66.0F.W0 70 /r ib 
</td></tr>
<tr><th>VPSHUFD zmm1 {k1}, zmm2/m512, imm8
</th><td>MVEX.512.66.0F.W0 70 /r ib 
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse2,simdint,shunpck</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F70 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5648.htm">t5648</a>
</dd>
</dl><pre>
IizVPSHUFD:: PROC
    IiAllowModifier MASK
    IiAllowBroadcasting DWORD, Operand=DH
    IiEmitOpcode 0x70
    IiOpEn RM
    IiModRM /r
    IiDisp8EVEX FV32
    IiDisp8MVEX Di64
    IiEmitImm Operand3, BYTE
    IiDispatchFormat  xmm.xmm.imm, xmm.mem.imm, ymm.ymm.imm, ymm.mem.imm, zmm.zmm.imm, zmm.mem.imm
.xmm.xmm.imm:
.xmm.mem.imm:
    IiEmitPrefix VEX.128.66.0F.WIG, EVEX.128.66.0F.W0
    RET
.ymm.ymm.imm:
.ymm.mem.imm:
    IiEmitPrefix VEX.256.66.0F.WIG, EVEX.256.66.0F.W0
    RET
.zmm.zmm.imm:
.zmm.mem.imm:
    IiEmitPrefix EVEX.512.66.0F.W0, MVEX.512.66.0F.W0
    RET
  ENDP IizVPSHUFD::
</pre>

<dl id="IizVFMADD233PS">
<dt><a href="#IizHandlers">&uarr; VFMADD233PS</a></dt>
<dd>Multiply First Source By Specially Swizzled Second Source and Add To Second Source Float32 Vectors</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFMADD233PS zmm1 {k1}, zmm2, Sf32(zmm3/mt)
</th><td>MVEX.NDS.512.66.0F38.W0 A4 /r</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xA4</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5410.htm">t5410</a>
</dd>
</dl><pre>
IizVFMADD233PS:: PROC
    IiAllowMaskMerging
    IiAllowRounding
    IiAllowSuppressing Swizzle=No
    IiDisp8MVEX Sf32
    IiEmitOpcode 0xA4
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  zmm.zmm.zmm, zmm.zmm.mem
.zmm.zmm.zmm:
.zmm.zmm.mem:
    IiEmitPrefix MVEX.NDS.512.66.0F38.W0
    RET
  ENDP IizVFMADD233PS::
</pre>

<dl id="IizVMOVNRAPS">
<dt><a href="#IizHandlers">&uarr; VMOVNRAPS</a></dt>
<dd>Store Aligned Float32 Vector With No-Read Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVNRAPS mem{k1}, Df32(zmm1) 
</th><td>MVEX.512.F2.0F.W0.EH0 29 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x29</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5496.htm">t5496</a>
</dd>
</dl><pre>
IizVMOVNRAPS:: PROC
    IiEmitPrefix MVEX.512.F2.0F.W0.EH0
.d8:IiDisp8MVEX Dn32
.pf:IiAllowMaskMerging
    IiEmitOpcode 0x29
    IiOpEn MR
    IiModRM /r
    IiDispatchFormat  mem.zmm
.mem.zmm:RET
  ENDP IizVMOVNRAPS::
</pre>

<dl id="IizVMOVNRNGOAPS">
<dt><a href="#IizVMOVNRAPS">&uarr; VMOVNRNGOAPS</a></dt>
<dd>Non-globally Ordered Store Aligned Float32 Vector With No-Read Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVNRNGOAPS mem{k1}, Df32(zmm1)
</th><td>MVEX.512.F2.0F.W0.EH1 29 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x29</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5496.htm">t5496</a>
</dd>
</dl><pre>
IizVMOVNRNGOAPS:: PROC
    IiEmitPrefix MVEX.512.F2.0F.W0.EH1
    JMP IizVMOVNRAPS.d8:
  ENDP IizVMOVNRNGOAPS::
</pre>

<dl id="IizVMOVNRAPD">
<dt><a href="#IizVMOVNRAPS">&uarr; VMOVNRAPD</a></dt>
<dd>Store Aligned Float64 Vector With No-Read Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVNRAPD mem{k1}, Df64(zmm1) 
</th><td>MVEX.512.F3.0F.W1.EH0 29 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x29</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5496.htm">t5496</a>
</dd>
</dl><pre>
IizVMOVNRAPD:: PROC
    IiEmitPrefix MVEX.512.F3.0F.W1.EH0
.pf:IiDisp8MVEX Di64
    JMP IizVMOVNRAPS.pf:
  ENDP IizVMOVNRAPD::
</pre>

<dl id="IizVMOVNRNGOAPD">
<dt><a href="#IizVMOVNRAPD">&uarr; VMOVNRNGOAPD</a></dt>
<dd>Non-globally Ordered Store Aligned Float64 Vector With No-Read Hint</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VMOVNRNGOAPD mem{k1}, Df64(zmm1)
</th><td>MVEX.512.F3.0F.W1.EH1 29 /r</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x29</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t5496.htm">t5496</a>
</dd>
</dl><pre>
IizVMOVNRNGOAPD:: PROC
    IiEmitPrefix MVEX.512.F3.0F.W1.EH1
    JMP IizVMOVNRAPD.pf:
  ENDP IizVMOVNRNGOAPD::
</pre>
<!--IizEpilogue--><pre>
  ENDPROGRAM iiz
</pre><!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
