<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='member.htm source file'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>member.htm source file</title>
</head>
<body class='EASOURCE' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>member.htm
<br/><i>Class</i>
<br/><a href="#MEMBER">MEMBER</a>
<br/><i>Encodings</i>
<br/><a href="#MemberEnc">MemberEnc</a>
<br/><i>Procedures</i>
<br/><a href="#MemberAdd">MemberAdd</a>
<br/><a href="#MemberCreate">MemberCreate</a>
<br/><a href="#MemberUpdate">MemberUpdate</a>
</h1>

<p>Class MEMBER describes a named structure member.
<!---->When a structure is declared (by <code>STRUC/ENDSTRUC</code> block), each its <code>D*</code> statement
<!---->with a label creates MEMBER record added to its <code>Sss.SssOrdBuffer</code>.
<!---->Local names of those members are kept in <code>Sss.PgmPool</code> until the end of program.
<br/>Structure members themselves create a plain-numeric symbols. Address symbols will be created from them
<!---->whenever the structure is expanded (structured memory variable created with <code>DS</code>).</p>
<p><b>Declaring</b> the structure creates one symbol from each its member, no matter
<!---->if the structure will be ever expanded in data|bss section or not.
<!---->Fully qualified name of such member symbol is created from the structure name appended with local member name.
<!---->Their type is 'N'.</p>
<p>When the structure is <b>expanded</b> (using <code>DS</code> statement), another set of symbols
<!---->is created, their names are constructed from <code>DS</code> label appended with local member name.</p>
<br class="CLEAR"/>
<dl><dt>Example</dt><dd class="PRE"><!---->Inner STRUC     ; Structure Inner is added on Pgm.SssList.
<!---->       D W      ; Unnamed data do not create structure member nor a symbol.
<!----> .Inn1 D W      ; Member .Inn1 is added to Sss.SssOrdBuffer.
<!---->      ENDSTRUC Inner
<!---->; <b>Scalar symbol Inner.Inn1 is created</b>.
<!---->
<!---->Outer STRUC     ; Struc Outer is added on Pgm.SssList.
<!----> .Out1  D W     ; Member .Out1 is added to Sss.SssOrdBuffer.
<!----> .Out2  D Inner ; Members .Out2 and .Out2.Inn1 are added to Sss.SssOrdBuffer.
<!---->      ENDSTRUC Outer
<!---->; <b>Scalar symbols Outer.Out1, Outer.Out2, Outer.Out2.Inn1 are created</b>.
<!---->
<!---->Var   D Outer ; Definition of a structured memory variable.
<!---->; <b>This creates address symbols Var, Var.Out1, Var.Out2, Var.Out2.Inn1</b>.
</dd></dl>

<pre>
       EUROASM NOWARN=2101
member PROGRAM FORMAT=COFF,MODEL=FLAT,WIDTH=32
       INCLUDEHEAD euroasm.htm, \  Interface (structures, symbols and macros) of other modules used in this source.
                   ea.htm,eaopt.htm,exp.htm,msg.htm,pgm.htm,pgmopt.htm,reloc.htm,sss.htm,stm.htm,sym.htm
</pre><pre>
member HEAD  ; Start of module interface.
</pre>

<dl id="MEMBER"><dt><a href="#top">&uarr; MEMBER</a></dt><dd> represents one member of a structure or library.</dd></dl><pre>
MEMBER   STRUC ; Description of named data (D* statements) inside the structure.
.NamePtr   D D ; Pointer to local member name.
.NameSize  D D ; Number of bytes in member name.
.Offset    D D ; Aligned offset of this member relative to start of the structure.
.Size      D D ; Size of member value in bytes.
.Status    D D ; DataType in LSB ('B','U','W','D','Q','T')
            ENDSTRUC MEMBER
</pre>
<dl id="MemberEnc"><dt><a href="#top">&uarr; MemberEnc</a></dt>
<dd> Encoding of flags used in MEMBER.Status.</dd></dl><pre>
memberType           = 0x0000_00FF ; DataType of the structure member (<code>'B','U','W','D','Q','T'</code>).
 ; Flags memberDelocal* are used in <a class="EXT" href="sym.htm#SymDelocalName">SymDelocalName</a> only.
memberDelocalNone    = 0x0000_0000 ; Do not delocalize symbol name beginning with <kbd>.</kbd>.
memberDelocal        = 0x0000_0100 ; Do prefix symbol name beginning with <kbd>.</kbd> with the current namespace.
memberDelocalParent  = 0x0000_0200 ; Do prefix symbol name beginning with <kbd>.</kbd> with the parent namespace (skip 1 current namespace).
</pre><pre>
  ENDHEAD member ; End of module interface.
</pre>

<dl id="MemberAdd">
<dt><a href="#top">&uarr; MemberAdd</a> SssPtr, StmPtr, DstrucPtr</dt>
<dd>MemberAdd is called when D* data are defined inside STRUC/ENDSTRUC block.
<br/>It creates a new <a href="#MEMBER">MEMBER</a> record in Sss.SssOrdBuffer
<!---->from D* statement, which is  parsed and executed in Stm.
<br/>When Stm contains DS statement (structured data variable defined inside outer structure),
<!---->all members from inner structure are concatenated with Stm local label and
<!---->added on <code>Sss.SssOrdBuffer</code>, too.</dd>
<dt>Input</dt>
<dd><b>SssPtr</b> ^<a class="EXT" href="sss.htm#SSS">SSS</a> structure which to add the member to.
<br/><b>StmPtr</b> Parsed D* <a class="EXT" href="stm.htm#STM">STM</a> with member information.
<br/><b>DstrucPtr</b> ^<a class="EXT" href="sss.htm#SSS">SSS</a> (inner) structure of DS data, otherwise 0.</dd>
<dt>Output</dt>
<dd><b>-</b></dd>
<dt>Error</dt>
<dd><b>-</b></dd>
<dt>Example</dt><dd class="PRE">Inner STRUC
<!---->.Inn1 DD D       ; MemberAdd called here creates the member .Inn1 of Inner structure.
<!---->      ENDSTRUC Inner
<!---->
<!---->Outer STRUC
<!----> .Out1  DD D     ; MemberAdd called here creates member .Out1 of Outer structure.
<!----> .Out2  DS Inner ; MemberAdd called here creates members .Out2 and .Out2.Inn1 of Outer structure.
<!---->      ENDSTRUC Outer
<!---->
<!---->Var   DS Outer ; Definition of structured memory variable.</dd>
<dt>See also</dt>
<dd><a href="#MemberCreate">MemberCreate</a>.
<a href="#MemberUpdate">MemberUpdate</a>.</dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="ea.htm#EaBufferRelease">EaBufferRelease</a>
<a class="EXT" href="ea.htm#EaBufferReserve">EaBufferReserve</a>
</dd>
<dt>Invoked by</dt>
<dd><a class="EXT" href="pseudo.htm#PseudoData">PseudoData</a>
</dd>
</dl><pre>
MemberAdd Procedure SssPtr, StmPtr, DstrucPtr
OutMember  LocalVar Size=SIZE#MEMBER
InnMember  LocalVar Size=SIZE#MEMBER
      MOV EBX,[%StmPtr]
      MOV EDI,[%SssPtr]
      MOV ESI,[EBX+STM.LabelPtr]
      MOV ECX,[EBX+STM.LabelSize]
      PoolStore [EDI+SSS.PgmPool],ESI,ECX
      LEA EDI,[%OutMember]
      MOV [EDI+MEMBER.NamePtr],EAX
      MOV [EDI+MEMBER.NameSize],ECX
      MOV EAX,[EBX+STM.Status]
      MOV EDX,[EBX+STM.Size]
      MOV [EDI+MEMBER.Status],EAX
      MOV [EDI+MEMBER.Size],EDX
      MOV ESI,[%SssPtr]
      MOV EAX,[ESI+SSS.OrgLow]
      ADD EAX,[EBX+STM.AlignBytes]
      MOV [EDI+MEMBER.Offset],EAX
      BufferStore [ESI+SSS.SssOrdBuffer],EDI,SIZE#MEMBER
      Msg cc=C,'9314',MemberAdd
      MOV EDX,[%DstrucPtr]                       ; If the added member (.Out2) is structured, its submembers will be stored, too.
      TEST EDX
      JZ .90:
      JNSt [EDX+SSS.Status],sssStructure,.90:
      MOV EBX,ESI
 ; EDI=^MEMBER just added (".Out2").
 ; EBX=^SSS struc which the member was just added to (Outer)
 ; EDX=^SSS belonging to the added member (Inner).
 ; Local name of each member from structure EDX (".Inn1") will be prefixed with 
 ; member name (".Out2"), saved on [EBX+SSS.PgmPool] and added to [EBX+SSS.SssOrdBuffer].
      BufferRetrieve [EDX+SSS.SssOrdBuffer]
      TEST ECX
      JZ .90:
 .20: PUSH ECX                                   ; ESI=^MEMBER from inner structure (.Inn1)
        LEA EDX,[%InnMember]
        MOV EAX,[ESI+MEMBER.Status]
        MOV ECX,[ESI+MEMBER.Size]
        MOV [EDX+MEMBER.Status],EAX
        MOV [EDX+MEMBER.Size],ECX
        MOV EAX,[EDI+MEMBER.Offset]
        ADD EAX,[ESI+MEMBER.Offset]
        MOV [EDX+MEMBER.Offset],EAX
        Invoke EaBufferReserve::,MemberAdd       ; Temporary buffer for names concatenation.
        BufferStore EAX,[EDI+MEMBER.NamePtr],[EDI+MEMBER.NameSize]
        JC .F9314:
        BufferStore EAX,[ESI+MEMBER.NamePtr],[ESI+MEMBER.NameSize]
        JC .F9314:
        PUSH ESI
          BufferRetrieve EAX
          Invoke EaBufferRelease::,EAX  
          PoolStore [EBX+SSS.PgmPool],ESI,ECX
          MOV [EDX+MEMBER.NamePtr],EAX
          MOV [EDX+MEMBER.NameSize],ECX
        POP ESI
        BufferStore [EBX+SSS.SssOrdBuffer],EDX,SIZE#MEMBER
        JNC .80:
 .F9314:Msg cc=C,'9314',MemberAdd
        POP ECX
        JMPS .90:        
 .80: POP ECX
      ADD ESI,SIZE#MEMBER
      SUB ECX,SIZE#MEMBER
      JA .20:        
 .90:EndProcedure MemberAdd
</pre>

<dl id="MemberCreate">
<dt><a href="#top">&uarr; MemberCreate</a> SssPtr, StmPtr</dt>
<dd><dfn>MemberCreate</dfn> creates a symbol for each named structure member.
<!---->It is used when DS statement is executed both inside a section or inside a structure.
<br/>MemberCreate is invoked in ctxSTRUC+ctxExpansion context, local member names will be combined
<!---->with context namespace.</dd>
<dt>Input</dt>
<dd><b>SssPtr</b> Pointer to an existing <a class="EXT" href="sss.htm#SSS">structure</a> whose members from Sss.SssOrdBuffer are created.
<br/><b>StmPtr</b> DS statement which provides default properties of created symbols.</dd>
<dt>Output</dt>
<dd><b>CF=</b>0</dd>
<dt>Error</dt>
<dd><b>CF=</b>1 Errors are reported with macro <a class="EXT" href="msg.htm#Msg">Msg</a>.</dd>
<dt>Example</dt><dd class="PRE">Inner STRUC
<!---->.Inn1 DD D ; Member of Inner structure.
<!---->      DD D ; Unnamed data do not create structure member.
<!---->      ENDSTRUC Inner
<!---->Outer STRUC
<!----> .Out1  DD D; Member of Outer structure.
<!----> .Out2  DS Inner ; Structured member of Outer structure.
<!---->      ENDSTRUC Outer
<!---->Var   DS Outer ; Definition of structured memory variable.
<!---->; Previous statement will create symbols Var, Var.Out1, Var.Out2, Var.Out2.Inn1</dd>
<dt>See also</dt>
<dd><a href="#MemberAdd">MemberAdd</a>,
<a href="#MemberUpdate">MemberUpdate</a>.</dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="sym.htm#SymCreate">SymCreate</a>
</dd>
<dt>Invoked by</dt>
<dd><a class="EXT" href="pseudo.htm#PseudoData">PseudoData</a>
</dd>
</dl><pre>
MemberCreate Procedure SssPtr, StmPtr
McStm  LocalVar Size=SIZE#STM                    ; Temporary fake statement which provides info for creating a symbol.
     LEA EBX,[%McStm]
     CopyTo EBX,[%StmPtr],Size=SIZE#STM          ; Initialize temporary fake statement.
 .10:MOV EDX,[%SssPtr]                           ; ^SSS structure.
     MOV EDI,[EBX+STM.OffsetLow]
     TEST EDX
     STC
     JZ .90:
     BufferRetrieve [EDX+SSS.SssOrdBuffer]
     TEST ECX
     JZ .90:                                     ; Do nothing if there are no named members in SssOrdBuffer.
 .50:PUSH ECX,ESI,EDI                            ; ESI=^MEMBER, EBX=^STM temporary fake statement.
       MOV ECX,[ESI+MEMBER.NameSize]
       MOV EDX,[ESI+MEMBER.Size]
       ADD EDI,[ESI+MEMBER.Offset]
       MOV EAX,[ESI+MEMBER.Status]
       MOV ESI,[ESI+MEMBER.NamePtr]
       MOV [EBX+STM.Size],EDX
       MOV [EBX+STM.OffsetLow],EDI
       MOV [EBX+STM.Status],AL
       MOV EAX,stmLabelIsPublic                  ; Alias symGlobalRef.
       AND EAX,[EBX+STM.Status]
       OR  EAX,symDefined
       Invoke SymCreate::,EAX,ESI,ECX,EBX
       TEST EAX
       JZ .80:
       SetSt [EAX+SYM.Status],symReferenced      ; Member of a structure shouldn't report W2101.
.80: POP EDI,ESI,ECX
     ADD ESI,SIZE#MEMBER
     SUB ECX,SIZE#MEMBER
     JA .50:                                     ; The next member.
 .90:EndProcedure MemberCreate
</pre>

<dl id="MemberUpdate">
<dt><a href="#top">&uarr; MemberUpdate</a> SssPtr, StmPtr, OutEmitBuffer, OutRelocBuffer</dt>
<dd>MemberUpdate copies data from <code>Sss.EmitBuffer</code> to <code>OutEmitBuffer
</code>, updating matching members by keywords in <code>Stm.KeyBuffer</code>.
<br/>It is used in structured data declaration (pseudoinstruction <code>DS</code>) with initialized members.
<!---->Initialized contents of any member will also set the flag <code>Stm.Flags:stmtNotBSS</code>.</dd>
<dt>Input</dt>
<dd><b>SssPtr</b> Pointer to structure which is instantionized (<a class="EXT" href="sss.htm#SSS">SSS</a>).
<br/><b>StmPtr</b> is the parsed statement which defines the structured memory variable. 
<!---->It may have keywords whose value updates members of the structure.
<br/><b>OutEmitBuffer</b> reserved empty <a class="EXT" href="../maclib/memory32.htm#BUFFER">BUFFER
</a>, allocated by caller.
<br/><b>OutRelocBuffer</b> reserved empty <a class="EXT" href="../maclib/memory32.htm#BUFFER">BUFFER
</a>, allocated by caller.</dd>
<dt>Output</dt>
<dd>OutEmitBuffer is filled with structure data, updated with statement's keyword values. 
<!---->Occupied size equals to Sss.EmitBuffer.
<br/>OutRelocBuffer is filled with <a class="EXT" href="reloc.htm#RELOC">relocations</a> of static data used in this structured memory variable.
<!---->Their origins are related to the beginning of emitted structure.</dd>
<dt>Error</dt>
<dd>reported with macro <a class="EXT" href="msg.htm#Msg">Msg</a>.</dd>
<dt>See also</dt>
<dd><a href="#MemberAdd">MemberAdd</a>,
<a href="#MemberCreate">MemberCreate</a>.</dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="ea.htm#EaBufferRelease">EaBufferRelease</a>
<a class="EXT" href="ea.htm#EaBufferReserve">EaBufferReserve</a>
<a class="EXT" href="exp.htm#ExpEvalData">ExpEvalData</a>
</dd>
<dt>Invoked by</dt>
<dd><a class="EXT" href="pseudo.htm#PseudoData">PseudoData</a>
</dd>
</dl><pre>
MemberUpdate Procedure SssPtr, StmPtr, OutEmitBuffer, OutRelocBuffer
MuEmitBuffer  LocalVar                           ; Temporary buffer used in keyword value evaluation.
MuRelocBuffer LocalVar                           ; Temporary buffer used in keyword value evaluation.
      Invoke EaBufferReserve::,MemberUpdate
      MOV [%MuEmitBuffer],EAX
      Invoke EaBufferReserve::,MemberUpdate
      MOV [%MuRelocBuffer],EAX
      MOV EDI,[%SssPtr]                          ; Instantionized structure.
      MOV EBX,[%StmPtr]                          ; Definition statement with keywords.
      TEST EDI
      STC
      JZ .99:
      BufferRetrieve [EDI+SSS.EmitBuffer]        ; Template data of the structure, including its static defaults.
      BufferStore [%OutEmitBuffer],ESI,ECX
      Msg cc=C,'9314',MemberUpdate
 ; OutEmitBuffer is initialized with STRUC defaults. Now its members will be updated by Stm keywords.
 ; Outer loop .10: .. .80: walks through statement keywords, and for each keyword 
 ;                             and inner loop .20: .. .30: searches for the member.
      BufferRetrieve [EBX+STM.KeyBuffer]
      LEA EDX,[ESI+ECX]                          ; ESI..EDX are keyword records (4*DD).
 .10: CMP ESI,EDX
      JNB .90:
      PUSH EDX,ESI
        MOV EDI,[%SssPtr]
        MOV EBX,ESI                              ; EBX is now keyword record (4*DD).
        BufferRetrieve [EDI+SSS.SssOrdBuffer]
        LEA EDX,[ESI+ECX]                        ; ESI..EDX are MEMBER records.
  .20:  CMP ESI,EDX
        JNB .30:
        Compare [EBX+0],[EBX+4],[ESI+MEMBER.NamePtr],[ESI+MEMBER.NameSize]
        JE .40:
        ADD ESI,SIZE#MEMBER
        JMP .20:
  .30: ; Keyword is not in memberlist.
        Msg '2612',EBX,EDI,PgmStatus=pgmLastPass ;  "!1S" is not member of structure !2S. Ignored.
        JMP .80:                                 ; Continue with the next keyword.
  .40: ; Matching member found. Keyword value at [EBX+8],[EBX+12] will safely rewrite
       ; corresponding contents of OutEmitBuffer at [ESI+MEMBER.Offset].
        BufferClear [%MuEmitBuffer]
        BufferClear [%MuRelocBuffer]
        Invoke ExpEvalData::,[%MuEmitBuffer],[%MuRelocBuffer],[EBX+8],[EBX+12],[ESI+MEMBER.Status],[%StmPtr] ; Also set stmtNotBSS.
        JC .80:
        MOV EAX,[ESI+MEMBER.Offset]              ; Relative offset inside the structure contents (0..value size).
        MOV EDX,[ESI+MEMBER.Size]                ; Maximal size that may be rewritten.
        BufferRetrieve [%MuEmitBuffer]           ; ESI,ECX is proposed new value.
        CMP ECX,EDX
        JBE .50:
        LEA ECX,[EBX+8]
        Msg '2613',ECX,[%SssPtr],EBX             ; Value "!1S" does not fit to structure member !2S.!3S. Truncated.
        MOV ECX,EDX
  .50:  MOV EDI,ESI
        MOV EDX,ECX                              ; EDI,EDX is now truncated new value.
        BufferRetrieve [%OutEmitBuffer]
        ADD ESI,EAX                              ; Add member offset.
        CopyTo ESI,EDI,Size=EDX                  ; Rewrite (truncated) data in OutEmitBuffer.
        BufferRetrieve [%MuRelocBuffer]
        JECXZ .80:
  .60:  ; Each relocation in keyword value will be patched with member offset in EAX.
        ADD [ESI+RELOC.OrgLow],EAX
        ADCD [ESI+RELOC.OrgHigh],0
        BufferStore [%OutRelocBuffer],ESI,SIZE#RELOC
        Msg cc=C,'9314',MemberUpdate
        ADD ESI,SIZE#RELOC
        SUB ECX,SIZE#RELOC
        JA .60:
  .80:POP ESI,EDX
      ADD ESI,16                                 ; The next keyword.
      JMP .10:
[.data]
           ALIGN DWORD
.TempReloc DS RELOC                              ; Swap area for .SortByOrg.
[.text]
 .90: ; %OutRelocBuffer was filled with relocations from updating keywords.
    ; However, not updated members of the structure may have its own relocations,
    ; they will be appended to %OutRelocBuffer unless a relocation already exists
    ; on the same origin.
      MOV EDI,[%SssPtr]
      BufferRetrieve [EDI+SSS.RelocBuffer]
      JECXZ .98:
 .92: PUSH ECX,ESI
       MOV EBX,ESI                               ; Relocation from the structure.
       MOV EDX,[EBX+RELOC.OrgLow]
       BufferRetrieve [%OutRelocBuffer]
       JECXZ .95:
 .94:  CMP EDX,[ESI+RELOC.OrgLow]                ; Compare with relocation from keywords.
       JE .96:                                   ; Relocation with this origin was already stored in OutRelocBuffer, skip.
       ADD ESI,SIZE#RELOC
       SUB ECX,SIZE#RELOC
       JA .94:
 .95:  ; None from relocations already stored in %OutRelocBuffer has the same origin EDX as EBX.
       BufferStore [%OutRelocBuffer],EBX,SIZE#RELOC
       Msg cc=C,'9314',MemberUpdate
 .96: POP ESI,ECX
      ADD ESI,SIZE#RELOC
      SUB ECX,SIZE#RELOC
      JA .92:
 .98: Invoke EaBufferRelease::,[%MuRelocBuffer]
      Invoke EaBufferRelease::,[%MuEmitBuffer]
      ; Contents of OutRelocBuffer must be sorted by origin.
      BufferRetrieve [%OutRelocBuffer]
      JECXZ .99:
      MOV EDI,SIZE#RELOC
      MOV EAX,ECX
      CDQ
      DIV EDI
      ShellSort ESI,EAX,EDI,SortByOrg
SortByOrg:: PROC1 ; ShellSort callback used to sort relocations by <code>RELOC.Org</code>.
       ; Input: ESI and EDI point to <a class="EXT" href="reloc.htm#RELOC">RELOC</a> objects being compared.
       ; Output: when they are in wrong order, this procedure performs their swap and returns CF=1. EAX,EDX are clobbered.
       ; Called back by Member update and by <a class="EXT" href="pf.htm#PfOutput">PfOutput</a>.
       MOV EDX,[EDI+RELOC.OrgHigh]
       CMP EDX,[ESI+RELOC.OrgHigh]
       JA .OK:                                   ; Return with CF=0.
       JB .Swap:
       MOV EAX,[EDI+RELOC.OrgLow]
       CMP EAX,[ESI+RELOC.OrgLow]
       JAE .OK:                                  ; Return with CF=0.
 .Swap:MOV EDX,MemberUpdate.TempReloc
       CopyTo EDX,ESI,Size=SIZE#RELOC
       CopyTo ESI,EDI,Size=SIZE#RELOC
       CopyTo EDI,EDX,Size=SIZE#RELOC
       STC                                       ; Return with CF=1.
 .OK:  RET
      ENDP1 SortByOrg::
.99: EndProcedure MemberUpdate
</pre>

<pre>
 ENDPROGRAM member
</pre><!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
