<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='eaopt.htm source file'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>eaopt.htm source file</title>
</head>
<body class='EASOURCE' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>eaopt.htm
<br/><i>Class</i>
<br/><a href="#EAOPT">EAOPT</a>
<br/><i>Enumerations</i>
<br/><a href="#EaoptEasmList">%EaoptEasmList</a>
<br/><a href="#EaoptFeaList">%EaoptFeaList</a>
<br/><a href="#EaoptMiscList">%EaoptMiscList</a>
<br/><a href="#EaoptStatusList">%EaoptStatusList</a>
<br/><i>Encodings</i>
<br/><a href="#EaoptEnc">EaoptEnc</a>
<br/><i>Procedures</i>
<br/><a href="#EaoptAssemble">EaoptAssemble</a>
<br/><a href="#EaoptGetOnePath">EaoptGetOnePath</a>
</h1>
<p><dfn>EAOPT</dfn> is a set of &euro;ASM options controlled with </p><ol><li>built-in factory defaults,</li>
<li>keywords specified at <q>euroasm.exe</q> command-line,</li>
<li>keywords specified in [EUROASM] section of <q>euroasm.ini</q>,</li>
<li>keywords specified as operands of pseudoinstruction <a class="EXT" href="../eadoc/index.htm#EUROASM">EUROASM</a>.</li></ol>
<p>Instances of this class appear as a member of
<a class="EXT" href="ea.htm#EA">EA</a>,
<a class="EXT" href="src.htm#SRC">SRC</a>,
<a class="EXT" href="pgm.htm#PGM">PGM</a> and
<a class="EXT" href="src.htm#SRC">Src.EaoptStack</a> objects. 
<br/>All EAOPT objects allocate memory from Ea.Pool.</p>
<p>Current Euroasm options in charge, which control the assembly, are always read from <code>Ea.Eaopt</code>.</p>
<table><caption>Manipulation with EAOPT object</caption>
<tr><th>Action</th><th>Source</th><th>Destination</th></tr>
<tr><td><a class="EXT" href="ea.htm#EaCreate">EaCreate</a></td>
<td>Factory defaults</td><td>Ea.Eaopt</td></tr>
<tr><td rowspan="4"><a class="EXT" href="ea.htm#EaMain">EaMain</a></td>
<td>Cmd line options</td><td>Ea.Eaopt</td></tr>
<tr><td>Global <q>euroasm.ini</q></td><td>Ea.Eaopt</td></tr>
<tr><td>Cmd line options again</td><td>Ea.Eaopt</td></tr>
<tr><td>Ea.Eaopt</td><td>Ea.EaoptIni</td></tr>
<tr><td rowspan="3"><a class="EXT" href="src.htm#SrcCreate">SrcCreate</a></td>
<td>Ea.EaoptIni</td><td>Src.Eaopt</td></tr>
<tr><td>Local <q>euroasm.ini</q></td><td>Src.Eaopt</td></tr>
<tr><td>Src.Eaopt</td><td>Ea.Eaopt</td></tr>
<tr><td><a class="EXT" href="pgm.htm#PgmCreateProgram">PgmCreateProgram</a></td>
<td>Ea.Eaopt</td><td>Pgm.Eaopt</td></tr>
<tr><td><a class="EXT" href="pass.htm#PassCreate">PassCreate</a></td>
<td>Pgm.Eaopt</td><td>Ea.Eaopt</td></tr>
<tr><td><a class="EXT" href="pseudo.htm#PseudoEUROASM">EUROASM PUSH</a></td>
<td>Ea.Eaopt</td><td>Src.EaoptStack</td></tr>
<tr><td><a class="EXT" href="pseudo.htm#PseudoEUROASM">EUROASM option=</a></td>
<td>option=</td><td>Ea.Eaopt</td></tr>
<tr><td><a class="EXT" href="pseudo.htm#PseudoEUROASM">EUROASM POP</a></td>
<td>Src.EaoptStack</td><td>Ea.Eaopt</td></tr>
</table>
<blockquote id="ExtendEAOPT">In order to introduce a new EUROASM option, it must be inserted into
<ol>
<li><a href="#EaoptMiscList">%Eaopt*List</a> enumeration,</li>
<li><a href="#EAOPT">EAOPT</a> structure,</li>
<li>factory-default <a class="EXT" href="../objlib/euroasm.ini"><q>euroasm.ini</q></a> file,</li>
<li><a href="#EaoptAssemble">EaoptAssemble</a> configuration handler,</li>
<li><a class="EXT" href="../easource/var.htm#VarExpand">VarExpand</a> retrieve handler,</li>
<li><a class="EXT" href="../eadoc/index.htm#EUROASM">Pseudoinstructions/EUROASM</a> manual,</li>
<li><a class="EXT" href="../eadoc/index.htm#SystemVariables">Elements/EUROASM System %variables</a> manual,</li>
<li><a class="EXT" href="../eatests/">test</a> program.</li>
</ol></blockquote><br class="CLEAR"/>
<pre>
eaopt PROGRAM FORMAT=COFF,MODEL=FLAT,WIDTH=32
     INCLUDEHEAD euroasm.htm, \  Interface (structures, symbols and macros) of other modules used in this source.
                 dict.htm, ea.htm,exp.htm,ii.htm,msg.htm,pf.htm,pgm.htm,pgmopt.htm,sss.htm,sym.htm,var.htm
</pre><pre>
eaopt HEAD ; Start of module interface.
</pre>
<dl id="EAOPT"><dt><a href="#top">&uarr; EAOPT</a></dt>
<dd>This structure contains assembled options from configuration file <q>euroasm.ini</q> or from pseudoinstruction
<a class="EXT" href="pseudo.htm#PseudoEUROASM">PseudoEUROASM</a>. There are five kinds of options in EAOPT,
<!---->specified in enumerations defined below:
<ol>
<li><a href="#EaoptStatusList">%EaoptStatusList</a> enumerates boolean members defined in
<a href="#EaoptEnc">EAOPT.Status encoding</a> and kept in <code>EAOPT.Status</code>,</li>
<li>CPU generation options listed in <a class="EXT" href="dict.htm#DictEaoptCpu">DictEaoptCpu dictionary
</a> declare boolean members in <a class="EXT" href="ii.htm#IiCpuEnc">CPU requirements encoding</a> kept in
<code>EAOPT.Machine</code>,</li>
<li>SIMD generation options listed in <a class="EXT" href="dict.htm#DictEaoptSimd">DictEaoptSimd dictionary
</a> declare boolean members in <a class="EXT" href="ii.htm#IiCpuEnc">SIMD requirements encoding</a> kept in
<code>EAOPT.Machine</code>,</li>
<li><a href="#EaoptFeaList">%EaoptFeaList</a> enumerates boolean members defined in
<a class="EXT" href="ii.htm#IiFeaEnc">CPU features encoding</a> and kept in <code>EAOPT.Features</code>,</li>
<li><a href="#EaoptMiscList">%EaoptMiscList</a> enumerates miscellanous non-boolean members listed in
<a class="EXT" href="dict.htm#DictEaoptMisc">DictEaoptMisc dictionary</a> and kept in <code>EAOPT</code> members.</li></ol>
</dd></dl><pre>
EAOPT STRUC
.ListFilePtr      D DWORD ; Option EUROASM LISTFILE=.
.ListFileSize     D DWORD ; Number of bytes in LISTFILE.
.MaxInclusions    D DWORD ; Option EUROASM MAXINCLUSIONS=.
.MaxLinks         D DWORD ; Option EUROASM MAXLINKS=.
                  ; +10h.
.Status           D DWORD ; Boolean EUROASM options in <a href="#EaoptEnc">EaoptEnc</a> below.
.Machine          D DWORD ; CPU and SIMD generation in <a class="EXT" href="ii.htm#IiCpuEnc">CPU requirements</a> encoding.
.Features         D DWORD ; Processor properties in <a class="EXT" href="ii.htm#IiFeaEnc">CPU features </a> encoding.
.DumpWidth        D DWORD ; Option EUROASM DUMPWIDTH=.
                  ; +20h.
.IncludePathPtr   D DWORD ; Option EUROASM INCLUDEPATH=.
.IncludePathSize  D DWORD ; Number of bytes in INCLUDEPATH string.
.LinkPathPtr      D DWORD ; Option EUROASM LINKPATH=.
.LinkPathSize     D DWORD ; Number of bytes in LINKPATH string.
                  ; +30h.
.RunPathPtr       D DWORD ; Option EUROASM RUNPATH=.
.RunPathSize      D DWORD ; Number of bytes in RUNPATH string.
.InterpreterPtr   D DWORD ; Option EUROASM INTERPRETER=.
.InterpreterSize  D DWORD ; Number of bytes in INTERPRETER string.
                  ; +40h.
.CodePage         D DWORD ; Option EUROASM CODEPAGE=.
.TimeStamp        D DWORD ; Option EUROASM TIMESTAMP=. Initialized from Ea.TimeStart in <a class="EXT" href="ea.htm#EaCreate">EaCreate</a>.
.NoWarn           D 500*B ; Options EUROASM NOWARN= and WARN=.
     ; Each .NoWarn bit will suppress one warning from I0000 to W3999.
     ; E.g. <code>EUROASM NOWARN=0003..0006</code> will set the byte [EAOPT.NoWarn+0] to 0x79.
  ENDSTRUC EAOPT  ; Size=0x23C=572.
</pre>

<dl id="EaoptEnc"><dt><a href="#top">&uarr; EaoptEnc</a></dt>
<dd>Encoding of flags used in EAOPT.Status, set by pseudoinstruction <code>EUROASM</code>.</dd></dl><pre>
eaoptAUTOALIGN    EQU 0x0000_0001
eaoptAUTOSEGMENT  EQU 0x0000_0002
eaoptDUMP         EQU 0x0000_0010
eaoptDUMPALL      EQU 0x0000_0020
eaoptLIST         EQU 0x0000_0100
eaoptLISTINCLUDE  EQU 0x0000_1000
eaoptLISTMACRO    EQU 0x0000_2000
eaoptLISTREPEAT   EQU 0x0000_4000
eaoptLISTVAR      EQU 0x0000_8000
eaoptDISPLAYSTM   EQU 0x0001_0000
eaoptDISPLAYENC   EQU 0x0002_0000
eaoptUNICODE      EQU 0x0010_0000
eaoptDEBUG        EQU 0x0040_0000
eaoptPROFILE      EQU 0x0080_0000
eaoptNOWARN       EQU 0x8000_0000 ; Internal flag to distinguish WARN=/NOWARN= in <a href="#EaoptAssemble">EaoptAssemble</a>.
</pre>
            
<dl id="EaoptMiscList"><dt><a href="#top">&uarr; %EaoptMiscList</a></dt><dd>EUROASM nonboolean options and EUROASM system %^variables enumeration used in
<a class="EXT" href="dict.htm#DictEaoptMisc">DictEaoptMisc</a>,
<a href="#EaoptAssemble">EaoptAssemble</a>.</dd></dl><pre>
%EaoptMiscList    %SET CPU,SIMD,WARN,NOWARN,CODEPAGE,DUMPWIDTH,LISTFILE, TIMESTAMP, \
                       MAXINCLUSIONS,MAXLINKS,INCLUDEPATH,LINKPATH,RUNPATH,INTERPRETER
</pre>

<dl id="EaoptFeaList"><dt><a href="#top">&uarr; %EaoptFeaList</a></dt><dd>EUROASM processor features and EUROASM system %^variables enumeration used in
<a class="EXT" href="dict.htm#DictEaoptFea">DictEaoptFea</a>,
<a href="#EaoptAssemble">EaoptAssemble</a>.</dd></dl><pre>
%EaoptFeaList    %SET PROT,VMX,AES,SHA,LWP,XOP,MVEX,EVEX,FPU,TSX,MMX,SGX,ABM,SVM,MPX,  \
                      PRIV,UNDOC,AMD,CYRIX,VIA,D3NOW,FMA,SPEC,CET
</pre>

<dl id="EaoptStatusList"><dt><a href="#top">&uarr; %EaoptStatusList</a></dt><dd>EUROASM boolean options and EUROASM system %^variables enumeration used in
<a class="EXT" href="dict.htm#DictEaoptFea">DictEaoptFea</a>,
<a href="#EaoptAssemble">EaoptAssemble</a>.</dd></dl><pre>
%EaoptStatusList %SET AUTOALIGN,AUTOSEGMENT,DUMP,DUMPALL,LIST,LISTINCLUDE,LISTMACRO,LISTREPEAT,LISTVAR, \
                      DISPLAYSTM,DISPLAYENC,UNICODE,DEBUG,PROFILE
</pre>

<dl id="EaoptEasmList"><dt><a href="#top">&uarr; %EaoptEasmList</a></dt><dd>&euro;ASM system %^variables enumeration used in
<a class="EXT" href="dict.htm#DictEaoptFea">DictEaoptFea</a>.</dd></dl><pre>
%EaoptEasmList %SET DATE, ERRORLEVEL, EUROASMOS, PASS, PROC, PROGRAM, SECTION, SEGMENT, \
                    SOURCEEXT, SOURCEFILE, SOURCELINE, SOURCENAME, TIME, VERSION
%EaoptEasmListLength %SETL %EaoptEasmList
</pre>
<pre>
  ENDHEAD eaopt  ; End of module interface.
[.text]
</pre>

<dl id="EaoptAssemble">
<dt><a href="#top">&uarr; EaoptAssemble</a> EaoptPtr, KeyPtr, KeySize, ValPtr, ValSize</dt>
<dd>EaoptAssemble will process one EUROASM keyword option, e.g. <code>LISTVAR=ON</code> or <code>NOWARN=3305..3307</code></dd>
<dt>Input</dt>
<dd><b>EaoptPtr</b> Pointer to <a href="#EAOPT">EAOPT</a> structure, where
<!---->the assembled option will be written to.
<br/><b>KeyPtr</b> Pointer to key name, e.g. <code>NOWARN</code>.
<br/><b>KeySize</b> Size of option key.
<br/><b>ValPtr</b> Pointer to option value, e.g.<code>3305..3307</code>.
<br/><b>ValSize</b> Size of the value.</dd>
<dt>Output</dt>
<dd>The object at EaoptPtr is modified.</dd>
<dt>Error</dt>
<dd>Errors W3712,W3713,W3715,W3720 are reported with macro <a class="EXT" href="msg.htm#Msg">Msg</a>.</dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="dict.htm#DictLookup">DictLookup</a>
<a class="EXT" href="exp.htm#ExpCheckBounds">ExpCheckBounds</a>
<a class="EXT" href="exp.htm#ExpEvalBoolean">ExpEvalBoolean</a>
<a class="EXT" href="exp.htm#ExpEvalNum">ExpEvalNum</a>
<a class="EXT" href="exp.htm#ExpParseRange">ExpParseRange</a>
</dd>
<dt>Invoked by</dt>
<dd><a class="EXT" href="ea.htm#EaIniAssemble">EaIniAssemble</a>
<a class="EXT" href="pseudo.htm#PseudoEUROASM">PseudoEUROASM</a>
</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t2280.htm">t2280</a>
</dd>
</dl><pre>
EaoptAssemble Procedure EaoptPtr, KeyPtr, KeySize, ValPtr, ValSize
EaoptKey       LocalVar ; Ptr to Msg !1S with option name.
EaoptVal       LocalVar ; Ptr to Msg !2S with unassembled option value.
EaoptRightPtr  LocalVar ; Right range expression.
EaoptRightSize LocalVar
EaoptLeftVal   LocalVar ; Value of lower (left side) range expression.
EaoptRightVal  LocalVar ; Value of greater (right side) range expression.
     MOV EDI,[%EaoptPtr]
     MOV ESI,[%ValPtr]
     MOV ECX,[%ValSize]
     LEA EBX,[%KeyPtr]
     LEA EAX,[%ValPtr]
     MOV [%EaoptKey],EBX
     MOV [%EaoptVal],EAX
     ; Parse <b>option keyname</b>.
     Invoke DictLookup::, DictEaoptMisc::,[%KeyPtr],[%KeySize]
     JNC .Misc:                                  ; If non-boolean option was used.
     Invoke DictLookup::, DictEaoptStatus::,[%KeyPtr],[%KeySize]
     JNC .Status:                                ; If boolean nonfeature key was used.
     Invoke DictLookup::, DictEaoptFea::,[%KeyPtr],[%KeySize]
     JNC .Fea:                                   ; If boolean feature key was used.
     Msg '3720',[%EaoptKey]                      ; "!1S" is unknown option in [EUROASM] section.
     JMP .99:
[.data] ; Assembled EAOPT values are stored in arrays of dwords, respectively to their order in enumeration.
     ALIGN DWORD
.FeaFlags:
  fea %FOR %EaoptFeaList
        DD iiFea_%fea
      %ENDFOR fea
.StatusFlags:
 status %FOR %EaoptStatusList
          DD eaopt%status
        %ENDFOR status
.MiscTable:
 misc %FOR %EaoptMiscList
        DD .%misc
      %ENDFOR misc
[.text]
.Fea: ; <b>Feature</b> flag recognized, e.g. <code>MMX=</code>. EAX=%ordinal<<16 + varTypeSysEaopt + varTypeSysEaoptF. ;>>
     AND EAX,varTypeSysEnum
     SHR EAX,16
     MOV EAX,[.FeaFlags-4+4*EAX]
     Invoke ExpEvalBoolean::, ESI,ECX
     JC .99:
     JZ .F0:
     OR [EDI+EAOPT.Features],EAX
     JMP .99:
.F0: NOT EAX
     AND [EDI+EAOPT.Features],EAX
     JMP .99:
.Status: ; <b>Status</b> flag was recognized, e.g. <code>LISTMACRO=</code>. EAX==%ordinal<<16 + varTypeSysEaopt + varTypeSysEaoptS. ; >>
     AND EAX,varTypeSysEnum
     SHR EAX,16
     MOV EAX,[.StatusFlags-4+4*EAX]
     Invoke ExpEvalBoolean::, ESI,ECX
     JC .99:
     JZ .S0:
     OR [EDI+EAOPT.Status],EAX
     JMP .99:
.S0: NOT EAX
     AND [EDI+EAOPT.Status],EAX
     JMP .99:
.Misc: ; <b>Non-boolean</b> EAOPT flag was recognized, e.g. <code>DUMPWIDTH=</code>. EAX=%ordinal<<16+varTypeSysEaopt+varTypeSysEaoptM. ; >>
     ; Input: EBX is !1S key name, ESI,ECX is key value.
     AND EAX,varTypeSysEnum
     SHR EAX,16
     MOV EAX,[.MiscTable-4+4*EAX]
     CALL EAX
     JMP .99:
.W3712:Msg '3712',[%EaoptKey],EAX,ECX,EBX        ; DB '3709 !1S=!2D is out of limit !3D..!4D. Ignored.
     RET
.W3713:Msg '3713',[%EaoptKey],ESI,ECX,EBX,EAX    ; DB '3709 !1S=!2D is out of limit !3D..!4D. Set to !5D.
     RET
.W3715:Msg '3715',[%EaoptKey],[%EaoptVal]        ; Invalid [EUROASM] option "!1S=!2S". Ignored.
     RET
.CODEPAGE::
     PUSH ECX,ESI
      StripSpaces ESI,ECX
      JECXZ .CP6:
      CMPB [ESI],'"'
      JE .CP2:
      CMPB [ESI],"'"
      JE .CP3:
.CP2: StripQuotes ESI,ECX
      JMP .CP5:
.CP3: StripApostrophes ESI,ECX
.CP5: StripSpaces ESI,ECX
.CP6: Invoke DictLookup::,DictCodePages::,ESI,ECX
     POP ESI,ECX 
     JNC .CP8:                                   ; If valid enumerated codepage token found.
     Invoke ExpEvalNum::,ESI,ECX                 ; Otherwise assume it is a numeric identifier.
     JC .W3715:
     Invoke ExpCheckBounds::,0,65535
     JNZ .W3715:
.CP8:MOV [EDI+EAOPT.CodePage],EAX
     RET
.DUMPWIDTH::
     Invoke ExpEvalNum::, ESI,ECX
     JC .W3715:
     MOV ECX,16                                  ; Min.
     MOV EBX,128                                 ; Max.
     Invoke ExpCheckBounds::, ECX,EBX
     JNL .D5:
     MOV ESI,EAX
     MOV EAX,ECX
     CALL .W3713:
     JMP .D9:
 .D5:JNG .D9:
     MOV ESI,EAX
     MOV EAX,EBX
     CALL .W3713:
 .D9:MOV [EDI+EAOPT.DumpWidth],EAX
     RET
.MAXINCLUSIONS::
     Invoke ExpEvalNum::, ESI,ECX
     JC .W3715:
     MOV [EDI+EAOPT.MaxInclusions],EAX
     RET
.MAXLINKS::
     Invoke ExpEvalNum::, ESI,ECX
     JC .W3715:
     MOV [EDI+EAOPT.MaxLinks],EAX
     RET
.TIMESTAMP::
     StripSpaces ESI,ECX
     JECXZ .TS9:                                 ; If TIMESTAMP= is empty or -1, do not change Ea.TimeStamp.
     Invoke ExpEvalNum::, ESI,ECX
     JC .W3715:
     CMP EAX,-1
     JE .TS9:                                    ; If TIMESTAMP= is empty or -1, do not change Ea.TimeStamp.
.TS8:MOV [EDI+EAOPT.TimeStamp],EAX
.TS9:RET
.INCLUDEPATH::
     StripQuotes ESI,ECX
     PoolStore [Ea.Pool::],ESI,ECX
     MOV [EDI+EAOPT.IncludePathSize],ECX
     MOV [EDI+EAOPT.IncludePathPtr],EAX
     RET
.LINKPATH::
     StripQuotes ESI,ECX
     PoolStore [Ea.Pool::],ESI,ECX
     MOV [EDI+EAOPT.LinkPathSize],ECX
     MOV [EDI+EAOPT.LinkPathPtr],EAX
     RET
.RUNPATH::
     StripQuotes ESI,ECX
     PoolStore [Ea.Pool::],ESI,ECX
     MOV [EDI+EAOPT.RunPathSize],ECX
     MOV [EDI+EAOPT.RunPathPtr],EAX
     RET
.INTERPRETER::
     StripQuotes ESI,ECX
     PoolStore [Ea.Pool::],ESI,ECX
     MOV [EDI+EAOPT.InterpreterSize],ECX
     MOV [EDI+EAOPT.InterpreterPtr],EAX
     RET
.LISTFILE::
     StripQuotes ESI,ECX
     PoolStore [Ea.Pool::],ESI,ECX
     MOV [EDI+EAOPT.ListFileSize],ECX
     MOV [EDI+EAOPT.ListFilePtr],EAX
     RET
.CPU::
     Invoke DictLookup::, DictEaoptCpu::,ESI,ECX
     JC .W3715:                                  ; Invalid [EUROASM] option "!1S=!2S". Ignored.
     RstSt [EDI+EAOPT.Machine],iiCPU_CpuMask
     SetSt [EDI+EAOPT.Machine],EAX
     RET
.SIMD::
     Invoke DictLookup::, DictEaoptSimd::,ESI,ECX
     JNC .S5:
     Invoke ExpEvalBoolean::, ESI,ECX
     JC .W3715:                                  ;  Invalid [EUROASM] option "!1S=!2S". Ignored.
     MOV EAX,iiCPU_SSE1 ; EUROASM SIMD=TRUE alias SIMD=SSE1 alias SIMD=SSE.
     JNZ .S5:
     XOR EAX,EAX ; SIMD=FALSE.
 .S5:RstSt [EDI+EAOPT.Machine],iiCPU_SimdMask    ; Erase all previous SIMD flags.
     SetSt [EDI+EAOPT.Machine],EAX
     RET
.NOWARN::
      SetSt [EDI+EAOPT.Status],eaoptNOWARN
      JMPS .W1:
.WARN::
      RstSt [EDI+EAOPT.Status],eaoptNOWARN
.W1:  ADD ECX,ESI                                ; Common handler for WARN= and NOWARN=,
      Invoke ExpParseRange::,ESI,ECX
      JC .W3:                                    ; When no range was provided, e.g. <code>EUROASM NOWARN=3205</code>.
      SUB ECX,EAX
      MOV [%EaoptRightPtr],EAX
      MOV [%EaoptRightSize],ECX
      LEA ECX,[EAX-2]
      SUB ECX,ESI
      Invoke ExpEvalNum::,ESI,ECX
      JC .W3715:
      SUB ECX,ECX
      MOV EBX,3999
      Invoke ExpCheckBounds::,ECX,EBX
      JNZ .W3712:
      MOV [%EaoptLeftVal],EAX
      MOV ESI,[%EaoptRightPtr]
      MOV ECX,[%EaoptRightSize]
      Invoke ExpEvalNum::,ESI,ECX
      JC .W3715:
      SUB ECX,ECX
      Invoke ExpCheckBounds::,ECX,EBX
      JNZ .W3712:
      CMP EAX,[%EaoptLeftVal]
      JGE .W4:
      XCHG EAX,[%EaoptLeftVal]                   ; If swapped range was provided, e.g.<code>EUROASM NOWARN=3205..3200</code>.
      JMPS .W4:
.W3:  SUB ECX,ESI                                ; No range was detected.
      Invoke ExpEvalNum::,ESI,ECX
      JC .W3715:
      SUB ECX,ECX
      MOV EBX,3999
      Invoke ExpCheckBounds::,ECX,EBX
      JNZ .W3712:
      MOV [%EaoptLeftVal],EAX
.W4:  MOV [%EaoptRightVal],EAX
      SUB ECX,ECX
      MOV EAX,[%EaoptLeftVal]                    ; Option number 0..3999.
.W5:  MOV CL,07h
      AND ECX,EAX
      SHR EAX,3
      JSt [EDI+EAOPT.Status],eaoptNOWARN,.W6:
      ; WARN=reset bit.
      BTR [EDI+EAOPT.NoWarn+EAX],ECX
      JMPS .W7:
.W6:  ; NOWARN=set bit.
      BTS [EDI+EAOPT.NoWarn+EAX],ECX
.W7:  MOV EAX,[%EaoptLeftVal]
      INC EAX
      MOV [%EaoptLeftVal],EAX
      CMP EAX,[%EaoptRightVal]
      JBE .W5:
      RET
.99:EndProcedure EaoptAssemble
</pre>

<dl id="EaoptGetOnePath">
<dt><a href="#top">&uarr; EaoptGetOnePath</a> PathPtr, PathSize, PathNr</dt>
<dd><dfn>EaoptGetOnePath</dfn> returns one of the many pathes which may be specified
<!---->by Euroasm option INCLUDEPATH= or LINKPATH=.
<br/>They may be separated with comma <kbd>,</kbd> or semicolon <kbd>;</kbd>.</dd>
<dt>Input</dt>
<dd><b>PathPtr</b> is pointer to the pathstring INCLUDEPATH / LINKPATH, without quotes.
<br/><b>PathSize</b> is number of bytes in this string.
<br/><b>PathNr</b> (0,1,2...) specifies how many pathes to skip in INCLUDEPATH / LINKPATH contents.
<dt>Output</dt>
<dd><b>CF=0</b> ESI,ECX specify one path, unquoted, trimmed from white spaces. It may not be terminated with slash.
<br/><b>CF=1, ECX=0</b> if no path with requested ordinal number is found in INCLUDEPATH / LINKPATH.
<dt>Error</dt><dd>-</dd>
<dt>Invoked by</dt>
<dd><a class="EXT" href="chunk.htm#ChunkInclude">ChunkInclude</a>
<a class="EXT" href="pf.htm#PfLoad">PfLoad</a>
<a class="EXT" href="pfpe.htm#PfpeLoadStubFile">PfpeLoadStubFile</a>
<a class="EXT" href="pfrsrc.htm#PfrsrcLoadIconFile">PfrsrcLoadIconFile</a>
</dd>
</dl><pre>
EaoptGetOnePath Procedure PathPtr, PathSize, PathNr
    SUB EAX,EAX
    MOV ECX,[%PathSize]
    MOV ESI,[%PathPtr]
    MOVD [%ReturnECX],EAX
    LEA EDX,[ESI+ECX]                            ; End of pathes.
.10:CMP ESI,EDX 
    CMC
    JC .90:
    MOV EDI,ESI                                  ; Potential start of path.
.30:CMP ESI,EDX                                  ; Parse pathstring up to the separator or EDX.
    JNB .50:
    LODSB
    CMP AL,','
    JE .40;
    CMP AL,';'
    JNE .30:
.40:DEC ESI
.50:MOV ECX,ESI                                  ; EDI..ESI is parsed path.
    INC ESI
    SUB ECX,EDI
    StripSpaces EDI,ECX
    JECXZ .10:                                   ; Empty pathes do not count, e.g. <code>path1;;path2</code>.
    DECD [%PathNr]
    JNS .10:                                     ; If not the required path number yet.
    CLC
    MOV [%ReturnESI],EDI
    MOV [%ReturnECX],ECX
.90:EndProcedure EaoptGetOnePath
</pre>

<pre>
  ENDPROGRAM eaopt
</pre><!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
