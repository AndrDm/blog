<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='iig.htm source file'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>iig.htm source file</title>
</head>
<body class='EASOURCE' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>iig.htm
<br/><i>Enumerations</i>
<br/><a href="#IigList">IigList</a>
<br/><i>Instruction handlers</i><br/><span class="ILIST">
<a href="#IigAAA">AAA</a>
<a href="#IigAAD">AAD</a>
<a href="#IigAAM">AAM</a>
<a href="#IigAAS">AAS</a>
<a href="#IigADC">ADC</a>
<a href="#IigADCB">ADCB</a>
<a href="#IigADCD">ADCD</a>
<a href="#IigADCQ">ADCQ</a>
<a href="#IigADCW">ADCW</a>
<a href="#IigADD">ADD</a>
<a href="#IigADDB">ADDB</a>
<a href="#IigADDD">ADDD</a>
<a href="#IigADDQ">ADDQ</a>
<a href="#IigADDW">ADDW</a>
<a href="#IigAND">AND</a>
<a href="#IigANDB">ANDB</a>
<a href="#IigANDD">ANDD</a>
<a href="#IigANDQ">ANDQ</a>
<a href="#IigANDW">ANDW</a>
<a href="#IigBOUND">BOUND</a>
<a href="#IigBSF">BSF</a>
<a href="#IigBSR">BSR</a>
<a href="#IigBSWAP">BSWAP</a>
<a href="#IigBT">BT</a>
<a href="#IigBTC">BTC</a>
<a href="#IigBTCD">BTCD</a>
<a href="#IigBTCQ">BTCQ</a>
<a href="#IigBTCW">BTCW</a>
<a href="#IigBTD">BTD</a>
<a href="#IigBTQ">BTQ</a>
<a href="#IigBTR">BTR</a>
<a href="#IigBTRD">BTRD</a>
<a href="#IigBTRQ">BTRQ</a>
<a href="#IigBTRW">BTRW</a>
<a href="#IigBTS">BTS</a>
<a href="#IigBTSD">BTSD</a>
<a href="#IigBTSQ">BTSQ</a>
<a href="#IigBTSW">BTSW</a>
<a href="#IigBTW">BTW</a>
<a href="#IigCALL">CALL</a>
<a href="#IigCALLF">CALLF</a>
<a href="#IigCALLN">CALLN</a>
<a href="#IigCBW">CBW</a>
<a href="#IigCDQ">CDQ</a>
<a href="#IigCDQE">CDQE</a>
<a href="#IigCLC">CLC</a>
<a href="#IigCLD">CLD</a>
<a href="#IigCLI">CLI</a>
<a href="#IigCMC">CMC</a>
<a href="#IigCMOVA">CMOVA</a>
<a href="#IigCMOVAE">CMOVAE</a>
<a href="#IigCMOVB">CMOVB</a>
<a href="#IigCMOVBE">CMOVBE</a>
<a href="#IigCMOVC">CMOVC</a>
<a href="#IigCMOVE">CMOVE</a>
<a href="#IigCMOVG">CMOVG</a>
<a href="#IigCMOVGE">CMOVGE</a>
<a href="#IigCMOVL">CMOVL</a>
<a href="#IigCMOVLE">CMOVLE</a>
<a href="#IigCMOVNA">CMOVNA</a>
<a href="#IigCMOVNAE">CMOVNAE</a>
<a href="#IigCMOVNB">CMOVNB</a>
<a href="#IigCMOVNBE">CMOVNBE</a>
<a href="#IigCMOVNC">CMOVNC</a>
<a href="#IigCMOVNE">CMOVNE</a>
<a href="#IigCMOVNG">CMOVNG</a>
<a href="#IigCMOVNGE">CMOVNGE</a>
<a href="#IigCMOVNL">CMOVNL</a>
<a href="#IigCMOVNLE">CMOVNLE</a>
<a href="#IigCMOVNO">CMOVNO</a>
<a href="#IigCMOVNP">CMOVNP</a>
<a href="#IigCMOVNS">CMOVNS</a>
<a href="#IigCMOVNZ">CMOVNZ</a>
<a href="#IigCMOVO">CMOVO</a>
<a href="#IigCMOVP">CMOVP</a>
<a href="#IigCMOVPE">CMOVPE</a>
<a href="#IigCMOVPO">CMOVPO</a>
<a href="#IigCMOVS">CMOVS</a>
<a href="#IigCMOVZ">CMOVZ</a>
<a href="#IigCMP">CMP</a>
<a href="#IigCMPB">CMPB</a>
<a href="#IigCMPD">CMPD</a>
<a href="#IigCMPQ">CMPQ</a>
<a href="#IigCMPS">CMPS</a>
<a href="#IigCMPSB">CMPSB</a>
<a href="#IigCMPSD">CMPSD</a>
<a href="#IigCMPSQ">CMPSQ</a>
<a href="#IigCMPSW">CMPSW</a>
<a href="#IigCMPW">CMPW</a>
<a href="#IigCMPXCHG">CMPXCHG</a>
<a href="#IigCMPXCHG16B">CMPXCHG16B</a>
<a href="#IigCMPXCHG486">CMPXCHG486</a>
<a href="#IigCMPXCHG8B">CMPXCHG8B</a>
<a href="#IigCPUID">CPUID</a>
<a href="#IigCQO">CQO</a>
<a href="#IigCWD">CWD</a>
<a href="#IigCWDE">CWDE</a>
<a href="#IigDAA">DAA</a>
<a href="#IigDAS">DAS</a>
<a href="#IigDEC">DEC</a>
<a href="#IigDECB">DECB</a>
<a href="#IigDECD">DECD</a>
<a href="#IigDECQ">DECQ</a>
<a href="#IigDECW">DECW</a>
<a href="#IigDIV">DIV</a>
<a href="#IigDIVB">DIVB</a>
<a href="#IigDIVD">DIVD</a>
<a href="#IigDIVQ">DIVQ</a>
<a href="#IigDIVW">DIVW</a>
<a href="#IigENTER">ENTER</a>
<a href="#IigENTERD">ENTERD</a>
<a href="#IigENTERQ">ENTERQ</a>
<a href="#IigENTERW">ENTERW</a>
<a href="#IigHLT">HLT</a>
<a href="#IigICEBP">ICEBP</a>
<a href="#IigIDIV">IDIV</a>
<a href="#IigIDIVB">IDIVB</a>
<a href="#IigIDIVD">IDIVD</a>
<a href="#IigIDIVQ">IDIVQ</a>
<a href="#IigIDIVW">IDIVW</a>
<a href="#IigIMUL">IMUL</a>
<a href="#IigIMULB">IMULB</a>
<a href="#IigIMULD">IMULD</a>
<a href="#IigIMULQ">IMULQ</a>
<a href="#IigIMULW">IMULW</a>
<a href="#IigIN">IN</a>
<a href="#IigINC">INC</a>
<a href="#IigINCB">INCB</a>
<a href="#IigINCD">INCD</a>
<a href="#IigINCQ">INCQ</a>
<a href="#IigINCW">INCW</a>
<a href="#IigINS">INS</a>
<a href="#IigINSB">INSB</a>
<a href="#IigINSD">INSD</a>
<a href="#IigINSW">INSW</a>
<a href="#IigINT">INT</a>
<a href="#IigINT1">INT1</a>
<a href="#IigINT3">INT3</a>
<a href="#IigINTO">INTO</a>
<a href="#IigIRET">IRET</a>
<a href="#IigIRETD">IRETD</a>
<a href="#IigIRETQ">IRETQ</a>
<a href="#IigIRETW">IRETW</a>
<a href="#IigJA">JA</a>
<a href="#IigJAE">JAE</a>
<a href="#IigJB">JB</a>
<a href="#IigJBE">JBE</a>
<a href="#IigJC">JC</a>
<a href="#IigJCXZ">JCXZ</a>
<a href="#IigJE">JE</a>
<a href="#IigJECXZ">JECXZ</a>
<a href="#IigJG">JG</a>
<a href="#IigJGE">JGE</a>
<a href="#IigJL">JL</a>
<a href="#IigJLE">JLE</a>
<a href="#IigJMP">JMP</a>
<a href="#IigJMPF">JMPF</a>
<a href="#IigJMPN">JMPN</a>
<a href="#IigJMPS">JMPS</a>
<a href="#IigJNA">JNA</a>
<a href="#IigJNAE">JNAE</a>
<a href="#IigJNB">JNB</a>
<a href="#IigJNBE">JNBE</a>
<a href="#IigJNC">JNC</a>
<a href="#IigJNE">JNE</a>
<a href="#IigJNG">JNG</a>
<a href="#IigJNGE">JNGE</a>
<a href="#IigJNL">JNL</a>
<a href="#IigJNLE">JNLE</a>
<a href="#IigJNO">JNO</a>
<a href="#IigJNP">JNP</a>
<a href="#IigJNS">JNS</a>
<a href="#IigJNZ">JNZ</a>
<a href="#IigJO">JO</a>
<a href="#IigJP">JP</a>
<a href="#IigJPE">JPE</a>
<a href="#IigJPO">JPO</a>
<a href="#IigJRCXZ">JRCXZ</a>
<a href="#IigJS">JS</a>
<a href="#IigJZ">JZ</a>
<a href="#IigLAHF">LAHF</a>
<a href="#IigLDS">LDS</a>
<a href="#IigLEA">LEA</a>
<a href="#IigLEAVE">LEAVE</a>
<a href="#IigLEAVED">LEAVED</a>
<a href="#IigLEAVEQ">LEAVEQ</a>
<a href="#IigLEAVEW">LEAVEW</a>
<a href="#IigLES">LES</a>
<a href="#IigLFS">LFS</a>
<a href="#IigLGS">LGS</a>
<a href="#IigLODS">LODS</a>
<a href="#IigLODSB">LODSB</a>
<a href="#IigLODSD">LODSD</a>
<a href="#IigLODSQ">LODSQ</a>
<a href="#IigLODSW">LODSW</a>
<a href="#IigLOOP">LOOP</a>
<a href="#IigLOOPE">LOOPE</a>
<a href="#IigLOOPNE">LOOPNE</a>
<a href="#IigLOOPNZ">LOOPNZ</a>
<a href="#IigLOOPZ">LOOPZ</a>
<a href="#IigLSS">LSS</a>
<a href="#IigLZCNT">LZCNT</a>
<a href="#IigMOV">MOV</a>
<a href="#IigMOVB">MOVB</a>
<a href="#IigMOVD">MOVD</a>
<a href="#IigMOVQ">MOVQ</a>
<a href="#IigMOVS">MOVS</a>
<a href="#IigMOVSB">MOVSB</a>
<a href="#IigMOVSD">MOVSD</a>
<a href="#IigMOVSQ">MOVSQ</a>
<a href="#IigMOVSW">MOVSW</a>
<a href="#IigMOVSX">MOVSX</a>
<a href="#IigMOVSXB">MOVSXB</a>
<a href="#IigMOVSXD">MOVSXD</a>
<a href="#IigMOVSXW">MOVSXW</a>
<a href="#IigMOVW">MOVW</a>
<a href="#IigMOVZX">MOVZX</a>
<a href="#IigMOVZXB">MOVZXB</a>
<a href="#IigMOVZXD">MOVZXD</a>
<a href="#IigMOVZXW">MOVZXW</a>
<a href="#IigMUL">MUL</a>
<a href="#IigMULB">MULB</a>
<a href="#IigMULD">MULD</a>
<a href="#IigMULQ">MULQ</a>
<a href="#IigMULW">MULW</a>
<a href="#IigNEG">NEG</a>
<a href="#IigNEGB">NEGB</a>
<a href="#IigNEGD">NEGD</a>
<a href="#IigNEGQ">NEGQ</a>
<a href="#IigNEGW">NEGW</a>
<a href="#IigNOT">NOT</a>
<a href="#IigNOTB">NOTB</a>
<a href="#IigNOTD">NOTD</a>
<a href="#IigNOTQ">NOTQ</a>
<a href="#IigNOTW">NOTW</a>
<a href="#IigOR">OR</a>
<a href="#IigORB">ORB</a>
<a href="#IigORD">ORD</a>
<a href="#IigORQ">ORQ</a>
<a href="#IigORW">ORW</a>
<a href="#IigOUT">OUT</a>
<a href="#IigOUTS">OUTS</a>
<a href="#IigOUTSB">OUTSB</a>
<a href="#IigOUTSD">OUTSD</a>
<a href="#IigOUTSW">OUTSW</a>
<a href="#IigPOP">POP</a>
<a href="#IigPOPA">POPA</a>
<a href="#IigPOPAD">POPAD</a>
<a href="#IigPOPAW">POPAW</a>
<a href="#IigPOPCNT">POPCNT</a>
<a href="#IigPOPD">POPD</a>
<a href="#IigPOPF">POPF</a>
<a href="#IigPOPFD">POPFD</a>
<a href="#IigPOPFQ">POPFQ</a>
<a href="#IigPOPFW">POPFW</a>
<a href="#IigPOPQ">POPQ</a>
<a href="#IigPOPW">POPW</a>
<a href="#IigPSRAQ">PSRAQ</a>
<a href="#IigPUSH">PUSH</a>
<a href="#IigPUSHA">PUSHA</a>
<a href="#IigPUSHAD">PUSHAD</a>
<a href="#IigPUSHAW">PUSHAW</a>
<a href="#IigPUSHD">PUSHD</a>
<a href="#IigPUSHF">PUSHF</a>
<a href="#IigPUSHFD">PUSHFD</a>
<a href="#IigPUSHFQ">PUSHFQ</a>
<a href="#IigPUSHFW">PUSHFW</a>
<a href="#IigPUSHQ">PUSHQ</a>
<a href="#IigPUSHW">PUSHW</a>
<a href="#IigRCL">RCL</a>
<a href="#IigRCLB">RCLB</a>
<a href="#IigRCLD">RCLD</a>
<a href="#IigRCLQ">RCLQ</a>
<a href="#IigRCLW">RCLW</a>
<a href="#IigRCR">RCR</a>
<a href="#IigRCRB">RCRB</a>
<a href="#IigRCRD">RCRD</a>
<a href="#IigRCRQ">RCRQ</a>
<a href="#IigRCRW">RCRW</a>
<a href="#IigRET">RET</a>
<a href="#IigRETF">RETF</a>
<a href="#IigRETN">RETN</a>
<a href="#IigROL">ROL</a>
<a href="#IigROLB">ROLB</a>
<a href="#IigROLD">ROLD</a>
<a href="#IigROLQ">ROLQ</a>
<a href="#IigROLW">ROLW</a>
<a href="#IigROR">ROR</a>
<a href="#IigRORB">RORB</a>
<a href="#IigRORD">RORD</a>
<a href="#IigRORQ">RORQ</a>
<a href="#IigRORW">RORW</a>
<a href="#IigSAHF">SAHF</a>
<a href="#IigSAL">SAL</a>
<a href="#IigSAL2">SAL2</a>
<a href="#IigSAL2B">SAL2B</a>
<a href="#IigSAL2D">SAL2D</a>
<a href="#IigSAL2Q">SAL2Q</a>
<a href="#IigSAL2W">SAL2W</a>
<a href="#IigSALB">SALB</a>
<a href="#IigSALC">SALC</a>
<a href="#IigSALD">SALD</a>
<a href="#IigSALQ">SALQ</a>
<a href="#IigSALW">SALW</a>
<a href="#IigSAR">SAR</a>
<a href="#IigSARB">SARB</a>
<a href="#IigSARD">SARD</a>
<a href="#IigSARQ">SARQ</a>
<a href="#IigSARW">SARW</a>
<a href="#IigSBB">SBB</a>
<a href="#IigSBBB">SBBB</a>
<a href="#IigSBBD">SBBD</a>
<a href="#IigSBBQ">SBBQ</a>
<a href="#IigSBBW">SBBW</a>
<a href="#IigSCAS">SCAS</a>
<a href="#IigSCASB">SCASB</a>
<a href="#IigSCASD">SCASD</a>
<a href="#IigSCASQ">SCASQ</a>
<a href="#IigSCASW">SCASW</a>
<a href="#IigSETA">SETA</a>
<a href="#IigSETAE">SETAE</a>
<a href="#IigSETALC">SETALC</a>
<a href="#IigSETB">SETB</a>
<a href="#IigSETBE">SETBE</a>
<a href="#IigSETC">SETC</a>
<a href="#IigSETE">SETE</a>
<a href="#IigSETG">SETG</a>
<a href="#IigSETGE">SETGE</a>
<a href="#IigSETL">SETL</a>
<a href="#IigSETLE">SETLE</a>
<a href="#IigSETNA">SETNA</a>
<a href="#IigSETNAE">SETNAE</a>
<a href="#IigSETNB">SETNB</a>
<a href="#IigSETNBE">SETNBE</a>
<a href="#IigSETNC">SETNC</a>
<a href="#IigSETNE">SETNE</a>
<a href="#IigSETNG">SETNG</a>
<a href="#IigSETNGE">SETNGE</a>
<a href="#IigSETNL">SETNL</a>
<a href="#IigSETNLE">SETNLE</a>
<a href="#IigSETNO">SETNO</a>
<a href="#IigSETNP">SETNP</a>
<a href="#IigSETNS">SETNS</a>
<a href="#IigSETNZ">SETNZ</a>
<a href="#IigSETO">SETO</a>
<a href="#IigSETP">SETP</a>
<a href="#IigSETPE">SETPE</a>
<a href="#IigSETPO">SETPO</a>
<a href="#IigSETS">SETS</a>
<a href="#IigSETZ">SETZ</a>
<a href="#IigSHL">SHL</a>
<a href="#IigSHLB">SHLB</a>
<a href="#IigSHLD">SHLD</a>
<a href="#IigSHLQ">SHLQ</a>
<a href="#IigSHLW">SHLW</a>
<a href="#IigSHR">SHR</a>
<a href="#IigSHRB">SHRB</a>
<a href="#IigSHRD">SHRD</a>
<a href="#IigSHRQ">SHRQ</a>
<a href="#IigSHRW">SHRW</a>
<a href="#IigSMI">SMI</a>
<a href="#IigSTC">STC</a>
<a href="#IigSTD">STD</a>
<a href="#IigSTI">STI</a>
<a href="#IigSTOS">STOS</a>
<a href="#IigSTOSB">STOSB</a>
<a href="#IigSTOSD">STOSD</a>
<a href="#IigSTOSQ">STOSQ</a>
<a href="#IigSTOSW">STOSW</a>
<a href="#IigSUB">SUB</a>
<a href="#IigSUBB">SUBB</a>
<a href="#IigSUBD">SUBD</a>
<a href="#IigSUBQ">SUBQ</a>
<a href="#IigSUBW">SUBW</a>
<a href="#IigTEST">TEST</a>
<a href="#IigTEST2">TEST2</a>
<a href="#IigTEST2B">TEST2B</a>
<a href="#IigTEST2D">TEST2D</a>
<a href="#IigTEST2Q">TEST2Q</a>
<a href="#IigTEST2W">TEST2W</a>
<a href="#IigTESTB">TESTB</a>
<a href="#IigTESTD">TESTD</a>
<a href="#IigTESTQ">TESTQ</a>
<a href="#IigTESTW">TESTW</a>
<a href="#IigTZCNT">TZCNT</a>
<a href="#IigUMOV">UMOV</a>
<a href="#IigXADD">XADD</a>
<a href="#IigXCHG">XCHG</a>
<a href="#IigXLAT">XLAT</a>
<a href="#IigXLATB">XLATB</a>
<a href="#IigXOR">XOR</a>
<a href="#IigXORB">XORB</a>
<a href="#IigXORD">XORD</a>
<a href="#IigXORQ">XORQ</a>
<a href="#IigXORW">XORW</a>
</span><!--IigAList-->
</h1>
<dl id="IigHandlers"><dt><a href="#top">&uarr; <em>IigHandlers</em></a> </dt>
<dd> assemble general machine instructions.
<dt>See also</dt><dd><a class="EXT" href="ii.htm#IiHandlers">IiHandlers</a>,
<a class="EXTL" href="../eadoc/links.htm#IntelVol2">[IntelVol2]</a>.</dd>
</dl><pre>
iig PROGRAM FORMAT=COFF,MODEL=FLAT,WIDTH=32,MAXPASSES=32
    INCLUDEHEAD euroasm.htm, \  Interface (structures, symbols and macros) of other modules used in this source.
                ctx.htm,ea.htm,eaopt.htm,exp.htm,ii.htm,msg.htm,pgm.htm,pgmopt.htm,sss.htm,stm.htm,sym.htm
</pre><br class="CLEAR"/><pre>
iig HEAD  ; Start of module interface.
</pre>

<dl id="IigList"><dt><a href="#top">&uarr; %IigList</a></dt><dd> enumerates machine instructions
<!---->of this family which &euro;ASM can assemble.
<br/>Each instruction declared in <code>%IigList</code> requires the corresponding
<a href="#IigHandlers">handler</a> in this file.</dd>
<dt>See also</dt><dd><a class="EXT" href="dict.htm#DictLookupIi">DictLookupIi</a></dd></dl><pre>
%IigList %SET \
MOV, \
CALL, \
RET, \
POP, \
POPAD, \
PUSH, \
PUSHAD, \
INC, \
DEC, \
CMP, \
TEST, \
ADD, \
SUB, \
AND, \
OR, \
XOR, \
STC, \
CLC, \
LEA, \
LOOP, \
JA, \
JAE, \
JB, \
JBE, \
JC, \
JCXZ, \
JE, \
JECXZ, \
JG, \
JGE, \
JL, \
JLE, \
JMP, \
JMPF, \
JMPN, \
JMPS, \
JNA, \
JNAE, \
JNB, \
JNBE, \
JNC, \
JNE, \
JNG, \
JNGE, \
JNL, \
JNLE, \
JNO, \
JNP, \
JNS, \
JNZ, \
JO, \
JP, \
JPE, \
JPO, \
JRCXZ, \
JS, \
JZ, \
AAA, \
AAD, \
AAM, \
AAS, \
ADC, \
ADCB, \
ADCD, \
ADCQ, \
ADCW, \
ADDB, \
ADDD, \
ADDQ, \
ADDW, \
ANDB, \
ANDD, \
ANDQ, \
ANDW, \
BOUND, \
BSF, \
BSR, \
BSWAP, \
BT, \
BTC, \
BTR, \
BTS, \
CALLF, \
CALLN, \
CBW, \
CDQ, \
CDQE, \
CLD, \
CLI, \
CMC, \
CMOVA, \
CMOVAE, \
CMOVB, \
CMOVBE, \
CMOVC, \
CMOVE, \
CMOVG, \
CMOVGE, \
CMOVL, \
CMOVLE, \
CMOVNA, \
CMOVNAE, \
CMOVNB, \
CMOVNBE, \
CMOVNC, \
CMOVNE, \
CMOVNG, \
CMOVNGE, \
CMOVNL, \
CMOVNLE, \
CMOVNO, \
CMOVNP, \
CMOVNS, \
CMOVNZ, \
CMOVO, \
CMOVP, \
CMOVPE, \
CMOVPO, \
CMOVS, \
CMOVZ, \
CMPB, \
CMPD, \
CMPQ, \
CMPS, \
CMPSB, \
CMPSD, \
CMPSQ, \
CMPSW, \
CMPW, \
CMPXCHG, \
CMPXCHG16B, \
CMPXCHG8B, \
CPUID, \
CQO, \
CWD, \
CWDE, \
DAA, \
DAS, \
DECB, \
DECD, \
DECQ, \
DECW, \
DIV, \
DIVB, \
DIVD, \
DIVQ, \
DIVW, \
HLT, \
ICEBP, \
IDIV, \
IDIVB, \
IDIVD, \
IDIVQ, \
IDIVW, \
IMUL, \
IMULB, \
IMULD, \
IMULQ, \
IMULW, \
IN, \
INCB, \
INCD, \
INCQ, \
INCW, \
INS, \
INSB, \
INSD, \
INSW, \
INT, \
INT1, \
INT3, \
INTO, \
IRET, \
IRETD, \
IRETQ, \
IRETW, \
LAHF, \
LDS, \
LES, \
LFS, \
LGS, \
LODS, \
LODSB, \
LODSD, \
LODSQ, \
LODSW, \
LOOPE, \
LOOPNE, \
LOOPNZ, \
LOOPZ, \
LSS, \
LZCNT, \
MOVB, \
MOVD, \
MOVQ, \
MOVS, \
MOVSB, \
MOVSD, \
MOVSQ, \
MOVSW, \
MOVSX, \
MOVSXB, \
MOVSXD, \
MOVSXW, \
MOVW, \
MOVZX, \
MOVZXB, \
MOVZXW, \
MUL, \
MULB, \
MULD, \
MULQ, \
MULW, \
NEG, \
NEGB, \
NEGD, \
NEGQ, \
NEGW, \
NOT, \
NOTB, \
NOTD, \
NOTQ, \
NOTW, \
ORB, \
ORD, \
ORQ, \
ORW, \
OUT, \
OUTS, \
OUTSB, \
OUTSD, \
OUTSW, \
POPA, \
POPAW, \
POPCNT, \
POPD, \
POPF, \
POPFD, \
POPFQ, \
POPFW, \
POPQ, \ 
POPW, \
PSRAQ, \
PUSHA, \
PUSHAW, \
PUSHD, \
PUSHF, \
PUSHFD, \
PUSHFQ, \
PUSHFW, \
PUSHQ, \
PUSHW, \
RCL, \
RCLB, \
RCLD, \
RCLQ, \
RCLW, \
RCR, \
RCRB, \
RCRD, \
RCRQ, \
RCRW, \
RETF, \
RETN, \
ROL, \
ROLB, \
ROLD, \
ROLQ, \
ROLW, \
ROR, \
RORB, \
RORD, \
RORQ, \
RORW, \
SAHF, \
SAL, \
SAL2, \
SAL2B, \
SAL2D, \
SAL2Q, \
SAL2W, \
SALB, \
SALC, \
SALD, \
SALQ, \
SALW, \
SAR, \
SARB, \
SARD, \
SARQ, \
SARW, \
SBB, \
SBBB, \
SBBD, \
SBBQ, \
SBBW, \
SCAS, \
SCASB, \
SCASD, \
SCASQ, \
SCASW, \
SETA, \
SETAE, \
SETALC, \
SETB, \
SETBE, \
SETC, \
SETE, \
SETG, \
SETGE, \
SETL, \
SETLE, \
SETNA, \
SETNAE, \
SETNB, \
SETNBE, \
SETNC, \
SETNE, \
SETNG, \
SETNGE, \
SETNL, \
SETNLE, \
SETNO, \
SETNP, \
SETNS, \
SETNZ, \
SETO, \
SETP, \
SETPE, \
SETPO, \
SETS, \
SETZ, \
SHL, \
SHLB, \
SHLD, \
SHLQ, \
SHLW, \
SHR, \
SHRB, \
SHRD, \
SHRQ, \
SHRW, \
STD, \
STI, \
STOS, \
STOSB, \
STOSD, \
STOSQ, \
STOSW, \
SUBB, \
SUBD, \
SUBQ, \
SUBW, \
TEST2, \
TEST2B, \
TEST2D, \
TEST2Q, \
TEST2W, \
TESTB, \
TESTD, \
TESTQ, \
TESTW, \
XADD, \
XCHG, \
XLAT, \
XLATB, \
XORB, \
XORD, \
XORQ, \
XORW, \
ENTER, \
ENTERW, \
ENTERD, \
ENTERQ, \
LEAVE, \
LEAVEW, \
LEAVED, \
LEAVEQ, \
TZCNT, \
CMPXCHG486, \
UMOV, \
SMI, \
MOVZXD, \
BTW, \
BTD, \
BTQ, \
BTCW, \
BTCD, \
BTCQ, \
BTSW, \
BTSD, \
BTSQ, \
BTRW, \
BTRD, \
BTRQ, \
<!--IigList-->
;
</pre><pre>
  ENDHEAD iig  ; End of module interface.
</pre>

<dl id="IigADD">
<dt><a href="#IigHandlers">&uarr; ADD</a></dt>
<dd>Add</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/ADD.html">ADD</a></dd>
<dt>Category</dt>
<dd>gen,arith,binary</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Gb | <b>Evqp</b>,Gvqp | <b>Gb</b>,Eb | <b>Gvqp</b>,Evqp | <b><span title="nr: 0, group: gen, type: b, address: -">AL</span></b>,Ib | <b><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></b>,Ivds | <b>Eb</b>,Ib | <b>Evqp</b>,Ivds | <b>Evqp</b>,Ibs</dd>
<dt>Opcode</dt>
<dd>0x00 ^dw /r | 0x01 ^dW /r | 0x02 ^Dw /r | 0x03 ^DW /r | 0x04 ^w | 0x05 ^W | 0x80 ^w /0 | 0x81 ^W /0 | 0x83 ^SW /0</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3100.htm">t3100</a>
<a class="EXT" href="../eatests/t3110.htm">t3110</a>
<a class="EXT" href="../eatests/t3120.htm">t3120</a>
<a class="EXT" href="../eatests/t3230.htm">t3230</a>
</dd>
</dl><pre>
[.text]
IigADD:: PROC
    MOV CL,0                                     ; 0..7 specifies operation ADD, OR, ADC, SBB, AND, SUB, XOR, CMP.
.dg:IiAllowModifier CODE
    IiDataSize
    CMP DL,imm
    JNE .po:
    IiImmSize Operand2                           ; Set II.MfgImplicitSize when %2 is immediate.
    MOV EAX,[EBX+STM.Section]                    ; Current section.
    CMPD [EDI+II.Operand2.Seg],0
    JE .po:                                      ; If Operand2 is scalar, no reloc.
    JSt [EDI+II.Operand2.Status],expPara,.sg:
    IiReloc iiRelocImmAbs,Operand2
    JMP .po:
.sg:IiReloc iiRelocPara,Operand2
.po:SHL ECX,3
    MOV AL,CL                                    ; Prepare opcode for accumulator version.
    SHL ECX,25                                   ; Position of /digit in iiPpgModDigit.
    OR ECX,iiPpgModRMd                           ; Prepare argument for IiModRM.
    IiDispatchFormat r8.r8:, r16.r16, r32.r32, r64.r64, \
                     m8.r8,  m16.r16, m32.r32, m64.r64, \
                     r8.m8,  r16.m16, r32.m32, r64.m64, \
                     r8.imm, r16.imm, r32.imm, r64.imm, \
                     m8.imm, m16.imm, m32.imm, m64.imm
.m8.imm:
    IiEncoding CODE=LONG, IMM=BYTE
    IiEmitOpcode 0x80
    IiOpEn M
    IiModRM ECX
    RET
.r8.imm:
    IiDispatchNotAccum Operand1, .m8.imm:
    IiDispatchCode LONG=.m8.imm:
    IiEncoding CODE=SHORT, IMM=BYTE              ; Operand1 is AL, use short code.
    OR AL,0x04
    IiEmitOpcode EAX
    RET
.rm.imm8:
    IiEncoding CODE=LONG, IMM=BYTE
    IiEmitOpcode 0x83
    IiOpEn M
    IiModRM ECX                                  ; /digit
    RET
.m16.imm:
    IiDispatchImm WORD=.rm.imm16:                ; Explicitly requested IMM=WORD.
    CMPB [EDI+II.Operand2.Status],'N'
    JNE .rm.imm16:
    IiDispatchImmSize BYTE=.rm.imm8:             ; Immediate fits to a byte.
.rm.imm16:
    IiEncoding CODE=LONG, IMM=WORD
    IiEmitOpcode 0x81
    IiOpEn M
    IiModRM ECX                                  ; /digit
    RET
.EAX.imm8: ; Unless explicitly requested CODE=SHORT or IMM=DWORD, for <b>ADD EAX,imm8</b> prefer
           ;   long-opcode encoding <b>83 /0 ib</b> which is two bytes shorter than short-opcode <b>05 id</b>.
    IiDispatchCode SHORT=.EAX.imm32:
.m64.imm:
.m32.imm:
    IiDispatchImm DWORD=.rm.imm32:               ; Explicitly requested IMM=DWORD.
    CMPB [EDI+II.Operand2.Status],'N'
    JNE .rm.imm32:
    IiDispatchImmSize BYTE=.rm.imm8:             ; Immediate fits to a byte.
.rm.imm32:
    IiEncoding CODE=LONG, IMM=DWORD
    IiEmitOpcode 0x81
    IiOpEn M
    IiModRM ECX                                  ; /digit
    RET
.r16.imm:
    IiDispatchNotAccum Operand1, .m16.imm:
    IiDispatchCode LONG=.m16.imm:
    IiEncoding CODE=SHORT, IMM=WORD              ; Operand1 is AX, use short code.
    OR AL,0x05
    IiEmitOpcode EAX
    RET
.r64.imm:
.r32.imm:
    IiDispatchNotAccum Operand1, .m32.imm:
    CMPB [EDI+II.Operand2.Status],'N'
    JNE .EAX.imm32:
    IiDispatchImmSize BYTE=.EAX.imm8:
.EAX.imm32:
    IiEncoding CODE=SHORT, IMM=DWORD             ; Operand1 is EAX or RAX, use short code.
    OR AL,0x05
    IiEmitOpcode EAX
    RET
.r8.m8:
    OR AL,0x02
    IiEncoding CODE=LONG
    IiEmitOpcode EAX
    IiOpEn RM
    IiModRM /r
    RET
.r8.r8:
    IiDispatchCode LONG=.r8.m8:
.m8.r8:
    IiEncoding CODE=SHORT
   ; OR AL,0x00
    IiEmitOpcode EAX
    IiOpEn MR
    IiModRM /r
    RET
.r16.m16:
.r32.m32:
.r64.m64:
    OR AL,0x03
    JMP .r8.m8:
.r16.r16:
.r32.r32:
.r64.r64:
    IiDispatchCode LONG=.r16.m16:
.m16.r16:
.m32.r32:
.m64.r64:
    OR AL,0x01
    JMP .m8.r8:
 ENDP IigADD::
</pre>

<dl id="IigADDB">
<dt><a href="#IigADD">&uarr; ADDB</a></dt>
<dd>Add BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3100.htm">t3100</a>
<a class="EXT" href="../eatests/t3110.htm">t3110</a>
<a class="EXT" href="../eatests/t3120.htm">t3120</a>
</dd>
</dl><pre>
IigADDB:: PROC
    IiSuffixed ADD,B
 ENDP IigADDB::
</pre>

<dl id="IigADDW">
<dt><a href="#IigADD">&uarr; ADDW</a></dt>
<dd>Add WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3100.htm">t3100</a>
<a class="EXT" href="../eatests/t3110.htm">t3110</a>
<a class="EXT" href="../eatests/t3120.htm">t3120</a>
</dd>
</dl><pre>
IigADDW:: PROC
    IiSuffixed ADD,W
 ENDP IigADDW::
</pre>

<dl id="IigADDD">
<dt><a href="#IigADD">&uarr; ADDD</a></dt>
<dd>Add DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3100.htm">t3100</a>
<a class="EXT" href="../eatests/t3110.htm">t3110</a>
<a class="EXT" href="../eatests/t3120.htm">t3120</a>
</dd>
</dl><pre>
IigADDD:: PROC
    IiSuffixed ADD,D
 ENDP IigADDD::
</pre>

<dl id="IigADDQ">
<dt><a href="#IigADD">&uarr; ADDQ</a></dt>
<dd>Add QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3100.htm">t3100</a>
<a class="EXT" href="../eatests/t3120.htm">t3120</a>
</dd>
</dl><pre>
IigADDQ:: PROC
    IiSuffixed ADD,Q
 ENDP IigADDQ::
</pre>

<dl id="IigOR">
<dt><a href="#IigADD">&uarr; OR</a></dt>
<dd>Logical Inclusive OR</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/OR.html">OR</a></dd>
<dt>Category</dt>
<dd>gen,logical</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Gb | <b>Evqp</b>,Gvqp | <b>Gb</b>,Eb | <b>Gvqp</b>,Evqp | <b><span title="nr: 0, group: gen, type: b, address: -">AL</span></b>,Ib | <b><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></b>,Ivds | <b>Eb</b>,Ib | <b>Evqp</b>,Ivds | <b>Evqp</b>,Ibs</dd>
<dt>Opcode</dt>
<dd>0x08 ^dw /r | 0x09 ^dW /r | 0x0A ^Dw /r | 0x0B ^DW /r | 0x0C ^w | 0x0D ^W | 0x80 ^w /1 | 0x81 ^W /1 | 0x83 ^SW /1</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZ.PC</b>, undefined:<b>.....A..</b>, values:<b>O......C</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3101.htm">t3101</a>
<a class="EXT" href="../eatests/t3111.htm">t3111</a>
<a class="EXT" href="../eatests/t3121.htm">t3121</a>
<a class="EXT" href="../eatests/t3230.htm">t3230</a>
</dd>
</dl><pre>
IigOR:: PROC
    MOV CL,1
    JMP IigADD.dg:
 ENDP IigOR::
</pre>

<dl id="IigORB">
<dt><a href="#IigOR">&uarr; ORB</a></dt>
<dd>Or BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3101.htm">t3101</a>
<a class="EXT" href="../eatests/t3111.htm">t3111</a>
<a class="EXT" href="../eatests/t3121.htm">t3121</a>
</dd>
</dl><pre>
IigORB:: PROC
    IiSuffixed OR,B
 ENDP IigORB::
</pre>

<dl id="IigORW">
<dt><a href="#IigOR">&uarr; ORW</a></dt>
<dd>Or WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3101.htm">t3101</a>
<a class="EXT" href="../eatests/t3111.htm">t3111</a>
<a class="EXT" href="../eatests/t3121.htm">t3121</a>
</dd>
</dl><pre>
IigORW:: PROC
    IiSuffixed OR,W
 ENDP IigORW::
</pre>

<dl id="IigORD">
<dt><a href="#IigOR">&uarr; ORD</a></dt>
<dd>Or DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3101.htm">t3101</a>
<a class="EXT" href="../eatests/t3111.htm">t3111</a>
<a class="EXT" href="../eatests/t3121.htm">t3121</a>
</dd>
</dl><pre>
IigORD:: PROC
    IiSuffixed OR,D
 ENDP IigORD::
</pre>

<dl id="IigORQ">
<dt><a href="#IigOR">&uarr; ORQ</a></dt>
<dd>Or QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3101.htm">t3101</a>
<a class="EXT" href="../eatests/t3121.htm">t3121</a>
</dd>
</dl><pre>
IigORQ:: PROC
    IiSuffixed OR,Q
 ENDP IigORQ::
</pre>

<dl id="IigADC">
<dt><a href="#IigADD">&uarr; ADC</a></dt>
<dd>Add with Carry</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/ADC.html">ADC</a></dd>
<dt>Category</dt>
<dd>gen,arith,binary</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Gb | <b>Evqp</b>,Gvqp | <b>Gb</b>,Eb | <b>Gvqp</b>,Evqp | <b><span title="nr: 0, group: gen, type: b, address: -">AL</span></b>,Ib | <b><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></b>,Ivds | <b>Eb</b>,Ib | <b>Evqp</b>,Ivds | <b>Evqp</b>,Ibs</dd>
<dt>Opcode</dt>
<dd>0x10 ^dw /r | 0x11 ^dW /r | 0x12 ^Dw /r | 0x13 ^DW /r | 0x14 ^w | 0x15 ^W | 0x80 ^w /2 | 0x81 ^W /2 | 0x83 ^SW /2</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3102.htm">t3102</a>
<a class="EXT" href="../eatests/t3112.htm">t3112</a>
<a class="EXT" href="../eatests/t3122.htm">t3122</a>
<a class="EXT" href="../eatests/t3230.htm">t3230</a>
</dd>
</dl><pre>
IigADC:: PROC
    MOV CL,2
    JMP IigADD.dg:
 ENDP IigADC::
</pre>

<dl id="IigADCB">
<dt><a href="#IigADC">&uarr; ADCB</a></dt>
<dd>Add with Carry BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3102.htm">t3102</a>
<a class="EXT" href="../eatests/t3112.htm">t3112</a>
<a class="EXT" href="../eatests/t3122.htm">t3122</a>
</dd>
</dl><pre>
IigADCB:: PROC
    IiSuffixed ADC,B
 ENDP IigADCB::
</pre>

<dl id="IigADCW">
<dt><a href="#IigADC">&uarr; ADCW</a></dt>
<dd>Add with Carry WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3102.htm">t3102</a>
<a class="EXT" href="../eatests/t3112.htm">t3112</a>
<a class="EXT" href="../eatests/t3122.htm">t3122</a>
</dd>
</dl><pre>
IigADCW:: PROC
    IiSuffixed ADC,W
 ENDP IigADCW::
</pre>

<dl id="IigADCD">
<dt><a href="#IigADC">&uarr; ADCD</a></dt>
<dd>Add with Carry DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3102.htm">t3102</a>
<a class="EXT" href="../eatests/t3112.htm">t3112</a>
<a class="EXT" href="../eatests/t3122.htm">t3122</a>
</dd>
</dl><pre>
IigADCD:: PROC
    IiSuffixed ADC,D
 ENDP IigADCD::
</pre>

<dl id="IigADCQ">
<dt><a href="#IigADC">&uarr; ADCQ</a></dt>
<dd>Add with Carry QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3102.htm">t3102</a>
<a class="EXT" href="../eatests/t3122.htm">t3122</a>
</dd>
</dl><pre>
IigADCQ:: PROC
    IiSuffixed ADC,Q
 ENDP IigADCQ::
</pre>

<dl id="IigSBB">
<dt><a href="#IigADD">&uarr; SBB</a></dt>
<dd>Integer Subtraction with Borrow</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SBB.html">SBB</a></dd>
<dt>Category</dt>
<dd>gen,arith,binary</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Gb | <b>Evqp</b>,Gvqp | <b>Gb</b>,Eb | <b>Gvqp</b>,Evqp | <b><span title="nr: 0, group: gen, type: b, address: -">AL</span></b>,Ib | <b><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></b>,Ivds | <b>Eb</b>,Ib | <b>Evqp</b>,Ivds | <b>Evqp</b>,Ibs</dd>
<dt>Opcode</dt>
<dd>0x18 ^dw /r | 0x19 ^dW /r | 0x1A ^Dw /r | 0x1B ^DW /r | 0x1C ^w | 0x1D ^W | 0x80 ^w /3 | 0x81 ^W /3 | 0x83 ^SW /3</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3103.htm">t3103</a>
<a class="EXT" href="../eatests/t3113.htm">t3113</a>
<a class="EXT" href="../eatests/t3123.htm">t3123</a>
<a class="EXT" href="../eatests/t3230.htm">t3230</a>
</dd>
</dl><pre>
IigSBB:: PROC
    MOV CL,3
    JMP IigADD.dg:
 ENDP IigSBB::
</pre>

<dl id="IigSBBB">
<dt><a href="#IigSBB">&uarr; SBBB</a></dt>
<dd>Subtract with Borrow BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3103.htm">t3103</a>
<a class="EXT" href="../eatests/t3113.htm">t3113</a>
<a class="EXT" href="../eatests/t3123.htm">t3123</a>
</dd>
</dl><pre>
IigSBBB:: PROC
    IiSuffixed SBB,B
 ENDP IigSBBB::
</pre>

<dl id="IigSBBW">
<dt><a href="#IigSBB">&uarr; SBBW</a></dt>
<dd>Subtract with Borrow WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3103.htm">t3103</a>
<a class="EXT" href="../eatests/t3113.htm">t3113</a>
<a class="EXT" href="../eatests/t3123.htm">t3123</a>
</dd>
</dl><pre>
IigSBBW:: PROC
    IiSuffixed SBB,W
 ENDP IigSBBW::
</pre>

<dl id="IigSBBD">
<dt><a href="#IigSBB">&uarr; SBBD</a></dt>
<dd>Subtract with Borrow DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3103.htm">t3103</a>
<a class="EXT" href="../eatests/t3113.htm">t3113</a>
<a class="EXT" href="../eatests/t3123.htm">t3123</a>
</dd>
</dl><pre>
IigSBBD:: PROC
    IiSuffixed SBB,D
 ENDP IigSBBD::
</pre>

<dl id="IigSBBQ">
<dt><a href="#IigSBB">&uarr; SBBQ</a></dt>
<dd>Subtract with Borrow QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3103.htm">t3103</a>
<a class="EXT" href="../eatests/t3123.htm">t3123</a>
</dd>
</dl><pre>
IigSBBQ:: PROC
    IiSuffixed SBB,Q
 ENDP IigSBBQ::
</pre>

<dl id="IigAND">
<dt><a href="#IigADD">&uarr; AND</a></dt>
<dd>Logical AND</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/AND.html">AND</a></dd>
<dt>Category</dt>
<dd>gen,logical</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Gb | <b>Evqp</b>,Gvqp | <b>Gb</b>,Eb | <b>Gvqp</b>,Evqp | <b><span title="nr: 0, group: gen, type: b, address: -">AL</span></b>,Ib | <b><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></b>,Ivds | <b>Eb</b>,Ib | <b>Evqp</b>,Ivds | <b>Evqp</b>,Ibs</dd>
<dt>Opcode</dt>
<dd>0x20 ^dw /r | 0x21 ^dW /r | 0x22 ^Dw /r | 0x23 ^DW /r | 0x24 ^w | 0x25 ^W | 0x80 ^w /4 | 0x81 ^W /4 | 0x83 ^SW /4</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZ.PC</b>, undefined:<b>.....A..</b>, values:<b>O......C</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3104.htm">t3104</a>
<a class="EXT" href="../eatests/t3114.htm">t3114</a>
<a class="EXT" href="../eatests/t3124.htm">t3124</a>
<a class="EXT" href="../eatests/t3230.htm">t3230</a>
</dd>
</dl><pre>
IigAND:: PROC
    MOV CL,4
    JMP IigADD.dg:
 ENDP IigAND::
</pre>

<dl id="IigANDB">
<dt><a href="#IigAND">&uarr; ANDB</a></dt>
<dd>And BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3104.htm">t3104</a>
<a class="EXT" href="../eatests/t3114.htm">t3114</a>
<a class="EXT" href="../eatests/t3124.htm">t3124</a>
</dd>
</dl><pre>
IigANDB:: PROC
    IiSuffixed AND,B
 ENDP IigANDB::
</pre>

<dl id="IigANDW">
<dt><a href="#IigAND">&uarr; ANDW</a></dt>
<dd>And WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3104.htm">t3104</a>
<a class="EXT" href="../eatests/t3114.htm">t3114</a>
<a class="EXT" href="../eatests/t3124.htm">t3124</a>
</dd>
</dl><pre>
IigANDW:: PROC
    IiSuffixed AND,W
 ENDP IigANDW::
</pre>

<dl id="IigANDD">
<dt><a href="#IigAND">&uarr; ANDD</a></dt>
<dd>And DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3104.htm">t3104</a>
<a class="EXT" href="../eatests/t3114.htm">t3114</a>
<a class="EXT" href="../eatests/t3124.htm">t3124</a>
</dd>
</dl><pre>
IigANDD:: PROC
    IiSuffixed AND,D
 ENDP IigANDD::
</pre>

<dl id="IigANDQ">
<dt><a href="#IigAND">&uarr; ANDQ</a></dt>
<dd>And QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3104.htm">t3104</a>
<a class="EXT" href="../eatests/t3124.htm">t3124</a>
</dd>
</dl><pre>
IigANDQ:: PROC
    IiSuffixed AND,Q
 ENDP IigANDQ::
</pre>

<dl id="IigSUB">
<dt><a href="#IigADD">&uarr; SUB</a></dt>
<dd>Subtract</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SUB.html">SUB</a></dd>
<dt>Category</dt>
<dd>gen,arith,binary</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Gb | <b>Evqp</b>,Gvqp | <b>Gb</b>,Eb | <b>Gvqp</b>,Evqp | <b><span title="nr: 0, group: gen, type: b, address: -">AL</span></b>,Ib | <b><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></b>,Ivds | <b>Eb</b>,Ib | <b>Evqp</b>,Ivds | <b>Evqp</b>,Ibs</dd>
<dt>Opcode</dt>
<dd>0x28 ^dw /r | 0x29 ^dW /r | 0x2A ^Dw /r | 0x2B ^DW /r | 0x2C ^w | 0x2D ^W | 0x80 ^w /5 | 0x81 ^W /5 | 0x83 ^SW /5</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3105.htm">t3105</a>
<a class="EXT" href="../eatests/t3115.htm">t3115</a>
<a class="EXT" href="../eatests/t3125.htm">t3125</a>
<a class="EXT" href="../eatests/t3230.htm">t3230</a>
</dd>
</dl><pre>
IigSUB:: PROC
    MOV CL,5
    JMP IigADD.dg:
 ENDP IigSUB::
</pre>

<dl id="IigSUBB">
<dt><a href="#IigSUB">&uarr; SUBB</a></dt>
<dd>Subtract BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3105.htm">t3105</a>
<a class="EXT" href="../eatests/t3115.htm">t3115</a>
<a class="EXT" href="../eatests/t3125.htm">t3125</a>
</dd>
</dl><pre>
IigSUBB:: PROC
    IiSuffixed SUB,B
 ENDP IigSUBB::
</pre>

<dl id="IigSUBW">
<dt><a href="#IigSUB">&uarr; SUBW</a></dt>
<dd>Subtract WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3105.htm">t3105</a>
<a class="EXT" href="../eatests/t3115.htm">t3115</a>
<a class="EXT" href="../eatests/t3125.htm">t3125</a>
</dd>
</dl><pre>
IigSUBW:: PROC
    IiSuffixed SUB,W
 ENDP IigSUBW::
</pre>

<dl id="IigSUBD">
<dt><a href="#IigSUB">&uarr; SUBD</a></dt>
<dd>Subtract DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3105.htm">t3105</a>
<a class="EXT" href="../eatests/t3115.htm">t3115</a>
<a class="EXT" href="../eatests/t3125.htm">t3125</a>
</dd>
</dl><pre>
IigSUBD:: PROC
    IiSuffixed SUB,D
 ENDP IigSUBD::
</pre>

<dl id="IigSUBQ">
<dt><a href="#IigSUB">&uarr; SUBQ</a></dt>
<dd>Subtract QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3105.htm">t3105</a>
<a class="EXT" href="../eatests/t3125.htm">t3125</a>
</dd>
</dl><pre>
IigSUBQ:: PROC
    IiSuffixed SUB,Q
 ENDP IigSUBQ::
</pre>

<dl id="IigXOR">
<dt><a href="#IigADD">&uarr; XOR</a></dt>
<dd>Logical Exclusive OR</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XOR.html">XOR</a></dd>
<dt>Category</dt>
<dd>gen,logical</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Gb | <b>Evqp</b>,Gvqp | <b>Gb</b>,Eb | <b>Gvqp</b>,Evqp | <b><span title="nr: 0, group: gen, type: b, address: -">AL</span></b>,Ib | <b><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></b>,Ivds | <b>Eb</b>,Ib | <b>Evqp</b>,Ivds | <b>Evqp</b>,Ibs</dd>
<dt>Opcode</dt>
<dd>0x30 ^dw /r | 0x31 ^dW /r | 0x32 ^Dw /r | 0x33 ^DW /r | 0x34 ^w | 0x35 ^W | 0x80 ^w /6 | 0x81 ^W /6 | 0x83 ^SW /6</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZ.PC</b>, undefined:<b>.....A..</b>, values:<b>O......C</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3106.htm">t3106</a>
<a class="EXT" href="../eatests/t3116.htm">t3116</a>
<a class="EXT" href="../eatests/t3126.htm">t3126</a>
<a class="EXT" href="../eatests/t3230.htm">t3230</a>
</dd>
</dl><pre>
IigXOR:: PROC
    MOV CL,6
    JMP IigADD.dg:
 ENDP IigXOR::
</pre>

<dl id="IigXORB">
<dt><a href="#IigXOR">&uarr; XORB</a></dt>
<dd>Exclusive Or BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3106.htm">t3106</a>
<a class="EXT" href="../eatests/t3116.htm">t3116</a>
<a class="EXT" href="../eatests/t3126.htm">t3126</a>
</dd>
</dl><pre>
IigXORB:: PROC
    IiSuffixed XOR,B
 ENDP IigXORB::
</pre>

<dl id="IigXORW">
<dt><a href="#IigXOR">&uarr; XORW</a></dt>
<dd>Exclusive Or WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3106.htm">t3106</a>
<a class="EXT" href="../eatests/t3116.htm">t3116</a>
<a class="EXT" href="../eatests/t3126.htm">t3126</a>
</dd>
</dl><pre>
IigXORW:: PROC
    IiSuffixed XOR,W
 ENDP IigXORW::
</pre>

<dl id="IigXORD">
<dt><a href="#IigXOR">&uarr; XORD</a></dt>
<dd>Exclusive Or DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3106.htm">t3106</a>
<a class="EXT" href="../eatests/t3116.htm">t3116</a>
<a class="EXT" href="../eatests/t3126.htm">t3126</a>
</dd>
</dl><pre>
IigXORD:: PROC
    IiSuffixed XOR,D
 ENDP IigXORD::
</pre>

<dl id="IigXORQ">
<dt><a href="#IigXOR">&uarr; XORQ</a></dt>
<dd>Exclusive Or QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3106.htm">t3106</a>
<a class="EXT" href="../eatests/t3126.htm">t3126</a>
</dd>
</dl><pre>
IigXORQ:: PROC
    IiSuffixed XOR,Q
 ENDP IigXORQ::
</pre>

<dl id="IigCMP">
<dt><a href="#IigADD">&uarr; CMP</a></dt>
<dd>Compare Two Operands</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CMP.html">CMP</a></dd>
<dt>Category</dt>
<dd>gen,arith,binary</dd>
<dt>Operands</dt>
<dd>Eb,Gb | Evqp,Gvqp | Gb,Eb | Gvqp,Evqp | <span title="nr: 0, group: gen, type: b, address: -">AL</span>,Ib | <span title="nr: 0, group: gen, type: vqp, address: -">rAX</span>,Ivds | Eb,Ib | Evqp,Ivds | Evqp,Ibs</dd>
<dt>Opcode</dt>
<dd>0x38 ^dw /r | 0x39 ^dW /r | 0x3A ^Dw /r | 0x3B ^DW /r | 0x3C ^w | 0x3D ^W | 0x80 ^w /7 | 0x81 ^W /7 | 0x83 ^SW /7</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3107.htm">t3107</a>
<a class="EXT" href="../eatests/t3117.htm">t3117</a>
<a class="EXT" href="../eatests/t3127.htm">t3127</a>
<a class="EXT" href="../eatests/t3230.htm">t3230</a>
</dd>
</dl><pre>
IigCMP:: PROC
    MOV CL,7
    JMP IigADD.dg:
 ENDP IigCMP::
</pre>

<dl id="IigCMPB">
<dt><a href="#IigCMP">&uarr; CMPB</a></dt>
<dd>Compare BYTEs</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3107.htm">t3107</a>
<a class="EXT" href="../eatests/t3117.htm">t3117</a>
<a class="EXT" href="../eatests/t3127.htm">t3127</a>
</dd>
</dl><pre>
IigCMPB:: PROC
    IiSuffixed CMP,B
 ENDP IigCMPB::
</pre>

<dl id="IigCMPW">
<dt><a href="#IigCMP">&uarr; CMPW</a></dt>
<dd>Compare WORDs</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3107.htm">t3107</a>
<a class="EXT" href="../eatests/t3117.htm">t3117</a>
<a class="EXT" href="../eatests/t3127.htm">t3127</a>
</dd>
</dl><pre>
IigCMPW:: PROC
    IiSuffixed CMP,W
 ENDP IigCMPW::
</pre>

<dl id="IigCMPD">
<dt><a href="#IigCMP">&uarr; CMPD</a></dt>
<dd>Compare DWORDs</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3107.htm">t3107</a>
<a class="EXT" href="../eatests/t3117.htm">t3117</a>
<a class="EXT" href="../eatests/t3127.htm">t3127</a>
</dd>
</dl><pre>
IigCMPD:: PROC
    IiSuffixed CMP,D
 ENDP IigCMPD::
</pre>

<dl id="IigCMPQ">
<dt><a href="#IigCMP">&uarr; CMPQ</a></dt>
<dd>Compare QWORDs</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3107.htm">t3107</a>
<a class="EXT" href="../eatests/t3127.htm">t3127</a>
</dd>
</dl><pre>
IigCMPQ:: PROC
    IiSuffixed CMP,Q
 ENDP IigCMPQ::
</pre>

<dl id="IigROL">
<dt><a href="#IigHandlers">&uarr; ROL</a></dt>
<dd>Rotate Left</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/RCL:RCR:ROL:ROR.html">ROL</a></dd>
<dt>Category</dt>
<dd>gen,shftrot</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Ib | <b>Evqp</b>,Ib | <b>Eb</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Evqp</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Eb</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span> | <b>Evqp</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span></dd>
<dt>Opcode</dt>
<dd>0xC0 ^w /0 | 0xC1 ^W /0 | 0xD0 ^w /0 | 0xD1 ^W /0 | 0xD2 ^w /0 | 0xD3 ^W /0</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b>, undefined:<b>O.......</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3050.htm">t3050</a>
<a class="EXT" href="../eatests/t3060.htm">t3060</a>
<a class="EXT" href="../eatests/t3070.htm">t3070</a>
</dd>
</dl><pre>
IigROL:: PROC
    IiModRM /0
.rm:IiOpEn M
IiRequire 086
    IiAllowModifier CODE, IMM
    IiDataSize Operand1
    IiAssumeEmpty Operand2, 1
    MOV ECX,[EDI+II.Operand2.Low] ; Immediate value.
    DEC ECX ; ECX=0 if shift by 1, otherwise shift by CL or by imm8.
    IiDispatchFormat r8:, m8,  r8.imm,  m8.imm,  r8.r8,  m8.r8, \
                    r16, m16, r16.imm, m16.imm, r16.r8, m16.r8, \
                    r32, m32, r32.imm, m32.imm, r32.r8, m32.r8, \
                    r64, m64, r64.imm, m64.imm, r64.r8, m64.r8
.r8:
.m8:IiDispatchCode LONG=.C0:
    IiDispatchImm  BYTE=.C0:
    IiEncoding CODE=SHORT
    IiEmitOpcode 0xD0
    RET                    
.r8.imm:
.m8.imm:
    JECXZ .m8:
.C0:IiEmitOpcode 0xC0
    IiRequire 186
    IiEncoding CODE=LONG, IMM=BYTE
    IiEmitImm Operand2, BYTE
    RET
.r8.r8:
.m8.r8:
    IiAbortIfNot Operand2,CL
    IiEmitOpcode 0xD2
    RET
.r16:
.m16:
.r32:
.m32:
.r64:
.m64:IiDispatchCode LONG=.C1:
     IiDispatchImm  BYTE=.C1:
     IiEncoding CODE=SHORT
     IiEmitOpcode 0xD1
     RET
.r16.imm:
.m16.imm:
.r32.imm:
.m32.imm:
.r64.imm:
.m64.imm:
    JECXZ .m64:
.C1:IiEmitOpcode 0xC1
    IiRequire 186
    IiEncoding CODE=LONG, IMM=BYTE
    IiEmitImm Operand2, BYTE
    RET
.r16.r8:
.m16.r8:
.r32.r8:
.m32.r8:
.r64.r8:
.m64.r8:
    IiAbortIfNot Operand2,CL
    IiEmitOpcode 0xD3
    RET
 ENDP IigROL::
</pre>

<dl id="IigROLB">
<dt><a href="#IigROL">&uarr; ROLB</a></dt>
<dd>Rotate Left BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3050.htm">t3050</a>
<a class="EXT" href="../eatests/t3060.htm">t3060</a>
<a class="EXT" href="../eatests/t3070.htm">t3070</a>
</dd>
</dl><pre>
IigROLB:: PROC
    IiSuffixed ROL,B
 ENDP IigROLB::
</pre>

<dl id="IigROLW">
<dt><a href="#IigROL">&uarr; ROLW</a></dt>
<dd>Rotate Left WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3050.htm">t3050</a>
<a class="EXT" href="../eatests/t3060.htm">t3060</a>
<a class="EXT" href="../eatests/t3070.htm">t3070</a>
</dd>
</dl><pre>
IigROLW:: PROC
    IiSuffixed ROL,W
 ENDP IigROLW::
</pre>

<dl id="IigROLD">
<dt><a href="#IigROL">&uarr; ROLD</a></dt>
<dd>Rotate Left DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3050.htm">t3050</a>
<a class="EXT" href="../eatests/t3060.htm">t3060</a>
<a class="EXT" href="../eatests/t3070.htm">t3070</a>
</dd>
</dl><pre>
IigROLD:: PROC
    IiSuffixed ROL,D
 ENDP IigROLD::
</pre>

<dl id="IigROLQ">
<dt><a href="#IigROL">&uarr; ROLQ</a></dt>
<dd>Rotate Left QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3070.htm">t3070</a>
</dd>
</dl><pre>
IigROLQ:: PROC
    IiSuffixed ROL,Q
 ENDP IigROLQ::
</pre>

<dl id="IigROR">
<dt><a href="#IigROL">&uarr; ROR</a></dt>
<dd>Rotate Right</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/RCL:RCR:ROL:ROR.html">ROR</a></dd>
<dt>Category</dt>
<dd>gen,shftrot</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Ib | <b>Evqp</b>,Ib | <b>Eb</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Evqp</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Eb</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span> | <b>Evqp</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span></dd>
<dt>Opcode</dt>
<dd>0xC0 ^w /1 | 0xC1 ^W /1 | 0xD0 ^w /1 | 0xD1 ^W /1 | 0xD2 ^w /1 | 0xD3 ^W /1</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b>, undefined:<b>O.......</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3051.htm">t3051</a>
<a class="EXT" href="../eatests/t3061.htm">t3061</a>
<a class="EXT" href="../eatests/t3071.htm">t3071</a>
</dd>
</dl><pre>
IigROR:: PROC
    IiModRM /1
    JMP IigROL.rm:
 ENDP IigROR::
</pre>

<dl id="IigRORB">
<dt><a href="#IigROR">&uarr; RORB</a></dt>
<dd>Rotate Right BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3051.htm">t3051</a>
<a class="EXT" href="../eatests/t3061.htm">t3061</a>
<a class="EXT" href="../eatests/t3071.htm">t3071</a>
</dd>
</dl><pre>
IigRORB:: PROC
    IiSuffixed ROR,B
 ENDP IigRORB::
</pre>

<dl id="IigRORW">
<dt><a href="#IigROR">&uarr; RORW</a></dt>
<dd>Rotate Right WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3051.htm">t3051</a>
<a class="EXT" href="../eatests/t3061.htm">t3061</a>
<a class="EXT" href="../eatests/t3071.htm">t3071</a>
</dd>
</dl><pre>
IigRORW:: PROC
    IiSuffixed ROR,W
 ENDP IigRORW::
</pre>

<dl id="IigRORD">
<dt><a href="#IigROR">&uarr; RORD</a></dt>
<dd>Rotate Right DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3051.htm">t3051</a>
<a class="EXT" href="../eatests/t3061.htm">t3061</a>
<a class="EXT" href="../eatests/t3071.htm">t3071</a>
</dd>
</dl><pre>
IigRORD:: PROC
    IiSuffixed ROR,D
 ENDP IigRORD::
</pre>

<dl id="IigRORQ">
<dt><a href="#IigROR">&uarr; RORQ</a></dt>
<dd>Rotate Right QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3071.htm">t3071</a>
</dd>
</dl><pre>
IigRORQ:: PROC
    IiSuffixed ROR,Q
 ENDP IigRORQ::
</pre>

<dl id="IigRCL">
<dt><a href="#IigROL">&uarr; RCL</a></dt>
<dd>Rotate through Carry Left</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/RCL:RCR:ROL:ROR.html">RCL</a></dd>
<dt>Category</dt>
<dd>gen,shftrot</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Ib | <b>Evqp</b>,Ib | <b>Eb</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Evqp</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Eb</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span> | <b>Evqp</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span></dd>
<dt>Opcode</dt>
<dd>0xC0 ^w /2 | 0xC1 ^W /2 | 0xD0 ^w /2 | 0xD1 ^W /2 | 0xD2 ^w /2 | 0xD3 ^W /2</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b>, undefined:<b>O.......</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3052.htm">t3052</a>
<a class="EXT" href="../eatests/t3062.htm">t3062</a>
<a class="EXT" href="../eatests/t3072.htm">t3072</a>
</dd>
</dl><pre>
IigRCL:: PROC
    IiModRM /2
    JMP IigROL.rm:
 ENDP IigRCL::
</pre>

<dl id="IigRCLB">
<dt><a href="#IigRCL">&uarr; RCLB</a></dt>
<dd>Rotate through Carry Left BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3052.htm">t3052</a>
<a class="EXT" href="../eatests/t3062.htm">t3062</a>
<a class="EXT" href="../eatests/t3072.htm">t3072</a>
</dd>
</dl><pre>
IigRCLB:: PROC
    IiSuffixed RCL,B
 ENDP IigRCLB::
</pre>

<dl id="IigRCLW">
<dt><a href="#IigRCL">&uarr; RCLW</a></dt>
<dd>Rotate through Carry Left WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3052.htm">t3052</a>
<a class="EXT" href="../eatests/t3062.htm">t3062</a>
<a class="EXT" href="../eatests/t3072.htm">t3072</a>
</dd>
</dl><pre>
IigRCLW:: PROC
    IiSuffixed RCL,W
 ENDP IigRCLW::
</pre>

<dl id="IigRCLD">
<dt><a href="#IigRCL">&uarr; RCLD</a></dt>
<dd>Rotate through Carry Left DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3052.htm">t3052</a>
<a class="EXT" href="../eatests/t3062.htm">t3062</a>
<a class="EXT" href="../eatests/t3072.htm">t3072</a>
</dd>
</dl><pre>
IigRCLD:: PROC
    IiSuffixed RCL,D
 ENDP IigRCLD::
</pre>

<dl id="IigRCLQ">
<dt><a href="#IigRCL">&uarr; RCLQ</a></dt>
<dd>Rotate through Carry Left QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3072.htm">t3072</a>
</dd>
</dl><pre>
IigRCLQ:: PROC
    IiSuffixed RCL,Q
 ENDP IigRCLQ::
</pre>

<dl id="IigRCR">
<dt><a href="#IigROL">&uarr; RCR</a></dt>
<dd>Rotate through Carry Right</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/RCL:RCR:ROL:ROR.html">RCR</a></dd>
<dt>Category</dt>
<dd>gen,shftrot</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Ib | <b>Evqp</b>,Ib | <b>Eb</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Evqp</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Eb</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span> | <b>Evqp</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span></dd>
<dt>Opcode</dt>
<dd>0xC0 ^w /3 | 0xC1 ^W /3 | 0xD0 ^w /3 | 0xD1 ^W /3 | 0xD2 ^w /3 | 0xD3 ^W /3</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b>, undefined:<b>O.......</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3053.htm">t3053</a>
<a class="EXT" href="../eatests/t3063.htm">t3063</a>
<a class="EXT" href="../eatests/t3073.htm">t3073</a>
</dd>
</dl><pre>
IigRCR:: PROC
    IiModRM /3
    JMP IigROL.rm:
 ENDP IigRCR::
</pre>

<dl id="IigRCRB">
<dt><a href="#IigRCR">&uarr; RCRB</a></dt>
<dd>Rotate through Carry Right BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3053.htm">t3053</a>
<a class="EXT" href="../eatests/t3063.htm">t3063</a>
<a class="EXT" href="../eatests/t3073.htm">t3073</a>
</dd>
</dl><pre>
IigRCRB:: PROC
    IiSuffixed RCR,B
 ENDP IigRCRB::
</pre>

<dl id="IigRCRW">
<dt><a href="#IigRCR">&uarr; RCRW</a></dt>
<dd>Rotate throudh Carry Right WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3053.htm">t3053</a>
<a class="EXT" href="../eatests/t3063.htm">t3063</a>
<a class="EXT" href="../eatests/t3073.htm">t3073</a>
</dd>
</dl><pre>
IigRCRW:: PROC
    IiSuffixed RCR,W
 ENDP IigRCRW::
</pre>

<dl id="IigRCRD">
<dt><a href="#IigRCR">&uarr; RCRD</a></dt>
<dd>Rotate through Carry Right DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3053.htm">t3053</a>
<a class="EXT" href="../eatests/t3063.htm">t3063</a>
<a class="EXT" href="../eatests/t3073.htm">t3073</a>
</dd>
</dl><pre>
IigRCRD:: PROC
    IiSuffixed RCR,D
 ENDP IigRCRD::
</pre>

<dl id="IigRCRQ">
<dt><a href="#IigRCR">&uarr; RCRQ</a></dt>
<dd>Rotate through Carry Right QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3073.htm">t3073</a>
</dd>
</dl><pre>
IigRCRQ:: PROC
    IiSuffixed RCR,Q
 ENDP IigRCRQ::
</pre>

<dl id="IigSHL">
<dt><a href="#IigROL">&uarr; SHL</a></dt>
<dd>Shift logical Left</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SAL:SAR:SHL:SHR.html">SHL</a></dd>
<dt>Category</dt>
<dd>gen,shftrot</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Ib | <b>Evqp</b>,Ib | <b>Eb</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Evqp</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Eb</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span> | <b>Evqp</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span></dd>
<dt>Opcode</dt>
<dd>0xC0 ^w /4 | 0xC1 ^W /4 | 0xD0 ^w /4 | 0xD1 ^W /4 | 0xD2 ^w /4 | 0xD3 ^W /4</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZ.PC</b>, undefined:<b>O....A.C</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3054.htm">t3054</a>
<a class="EXT" href="../eatests/t3064.htm">t3064</a>
<a class="EXT" href="../eatests/t3074.htm">t3074</a>
</dd>
</dl><pre>
IigSHL:: PROC
    IiModRM /4
    JMP IigROL.rm:
 ENDP IigSHL::
</pre>

<dl id="IigSHLB">
<dt><a href="#IigSHL">&uarr; SHLB</a></dt>
<dd>Shift logical Left BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3054.htm">t3054</a>
<a class="EXT" href="../eatests/t3064.htm">t3064</a>
<a class="EXT" href="../eatests/t3074.htm">t3074</a>
</dd>
</dl><pre>
IigSHLB:: PROC
    IiSuffixed SHL,B
 ENDP IigSHLB::
</pre>

<dl id="IigSHLW">
<dt><a href="#IigSHL">&uarr; SHLW</a></dt>
<dd>Shift logical Left WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3054.htm">t3054</a>
<a class="EXT" href="../eatests/t3064.htm">t3064</a>
<a class="EXT" href="../eatests/t3074.htm">t3074</a>
</dd>
</dl><pre>
IigSHLW:: PROC
    IiSuffixed SHL,W
 ENDP IigSHLW::
</pre>

<dl id="IigSHLD">
<dt><a href="#IigSHL">&uarr; SHLD</a></dt>
<dd>Double Precision Shift Left or <br/> Shift logical Left DWORD</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SHLD.html">SHLD</a></dd>
<dt>Category</dt>
<dd>gen,shftrot</dd>
<dt>Operands</dt>
<dd><b>Evqp</b>,Gvqp,Ib | <b>Evqp</b>,Gvqp,<span title="nr: 1, group: gen, type: b, address: -">CL</span></dd>
<dt>Opcode</dt>
<dd>0x0FA4 ^d /r | 0x0FA5 ^d /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZ.PC</b>, undefined:<b>O....A.C</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3054.htm">t3054</a>
<a class="EXT" href="../eatests/t3064.htm">t3064</a>
<a class="EXT" href="../eatests/t3074.htm">t3074</a>
<a class="EXT" href="../eatests/t3245.htm">t3245</a>
</dd>
</dl><pre>
IigSHLD:: PROC
    IiDispatchSingleShift .Single:
    MOV AL,0xA4
.op:IiAllowModifier IMM
    IiRequire 386
    IiDataSize ; Operand2
    IiEmitOpcode 0x0F
    IiOpEn MR
    IiModRM /r 
    IiAssumeEmpty Operand3, 1
    IiDispatchFormat r16.r16, m16.r16, r16.r16.imm, m16.r16.imm, r16.r16.r8, m16.r16.r8, \
                     r32.r32, m32.r32, r32.r32.imm, m32.r32.imm, r32.r32.r8, m32.r32.r8, \
                     r64.r64, m64.r64, r64.r64.imm, m64.r64.imm, r64.r64.r8, m64.r64.r8
.Single: IiSuffixed SHL,D                     
.r16.r16.r8:
.m16.r16.r8:
.r32.r32.r8:
.m32.r32.r8:
.r64.r64.r8:
.m64.r64.r8:
    IiAbortIfNot Operand3, CL
    INC AL ; Change opcode 0xA4->0xA5, 0xAC->0xAD.
    IiEmitOpcode EAX
    RET 
.r16.r16:
.m16.r16:
.r32.r32:
.m32.r32:
.r64.r64:
.m64.r64:
.r16.r16.imm:
.m16.r16.imm:
.r32.r32.imm:
.m32.r32.imm:
.r64.r64.imm:
.m64.r64.imm:
    IiEmitOpcode EAX
    IiEmitImm Operand3, BYTE
    RET                      
 ENDP IigSHLD::
</pre>

<dl id="IigSHLQ">
<dt><a href="#IigSHL">&uarr; SHLQ</a></dt>
<dd>Shift logical Left QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3074.htm">t3074</a>
</dd>
</dl><pre>
IigSHLQ:: PROC
    IiSuffixed SHL,Q
 ENDP IigSHLQ::
</pre>

<dl id="IigSAL">
<dt><a href="#IigSHL">&uarr; SAL</a></dt>
<dd>Shift Arithmetic Left</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SAL:SAR:SHL:SHR.html">SAL</a></dd>
<dt>Comment</dt>
<dd>SAL is identical with SHL by definition. See also <a href="#IigSAL2">SAL2</a>.</dd>
<dt>Category</dt>
<dd>gen,shftrot</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Ib | <b>Evqp</b>,Ib | <b>Eb</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Evqp</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Eb</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span> | <b>Evqp</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span></dd>
<dt>Opcode</dt>
<dd>0xC0 ^w /4 | 0xC1 ^W /4 | 0xD0 ^w /4 | 0xD1 ^W /4 | 0xD2 ^w /4 | 0xD3 ^W /4</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZ.PC</b>, undefined:<b>O....A.C</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3058.htm">t3058</a>
<a class="EXT" href="../eatests/t3068.htm">t3068</a>
<a class="EXT" href="../eatests/t3078.htm">t3078</a>
</dd>
</dl><pre>
IigSAL:: PROC
    JMP IigSHL:
 ENDP IigSAL::
</pre>

<dl id="IigSALB">
<dt><a href="#IigSAL">&uarr; SALB</a></dt>
<dd>Shift Arithmetic Left BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3058.htm">t3058</a>
<a class="EXT" href="../eatests/t3068.htm">t3068</a>
<a class="EXT" href="../eatests/t3078.htm">t3078</a>
</dd>
</dl><pre>
IigSALB:: PROC
    IiSuffixed SAL,B
 ENDP IigSALB::
</pre>

<dl id="IigSALW">
<dt><a href="#IigSAL">&uarr; SALW</a></dt>
<dd>Shift Arithmetic Left WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3058.htm">t3058</a>
<a class="EXT" href="../eatests/t3068.htm">t3068</a>
<a class="EXT" href="../eatests/t3078.htm">t3078</a>
</dd>
</dl><pre>
IigSALW:: PROC
    IiSuffixed SAL,W
 ENDP IigSALW::
</pre>

<dl id="IigSALD">
<dt><a href="#IigSAL">&uarr; SALD</a></dt>
<dd>Shift Arithmetic Left DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3058.htm">t3058</a>
<a class="EXT" href="../eatests/t3068.htm">t3068</a>
<a class="EXT" href="../eatests/t3078.htm">t3078</a>
</dd>
</dl><pre>
IigSALD:: PROC
    IiSuffixed SAL,D
 ENDP IigSALD::
</pre>

<dl id="IigSALQ">
<dt><a href="#IigSAL">&uarr; SALQ</a></dt>
<dd>Shift Arithmetic Left QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3078.htm">t3078</a>
</dd>
</dl><pre>
IigSALQ:: PROC
    IiSuffixed SAL,Q
 ENDP IigSALQ::
</pre>

<dl id="IigSHR">
<dt><a href="#IigROL">&uarr; SHR</a></dt>
<dd>Shift logical Right</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SAL:SAR:SHL:SHR.html">SHR</a></dd>
<dt>Category</dt>
<dd>gen,shftrot</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Ib | <b>Evqp</b>,Ib | <b>Eb</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Evqp</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Eb</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span> | <b>Evqp</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span></dd>
<dt>Opcode</dt>
<dd>0xC0 ^w /5 | 0xC1 ^W /5 | 0xD0 ^w /5 | 0xD1 ^W /5 | 0xD2 ^w /5 | 0xD3 ^W /5</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZ.PC</b>, undefined:<b>O....A.C</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3055.htm">t3055</a>
<a class="EXT" href="../eatests/t3065.htm">t3065</a>
<a class="EXT" href="../eatests/t3075.htm">t3075</a>
</dd>
</dl><pre>
IigSHR:: PROC
    IiModRM /5
    JMP IigROL.rm:
 ENDP IigSHR::
</pre>

<dl id="IigSHRB">
<dt><a href="#IigSHR">&uarr; SHRB</a></dt>
<dd>Shift logical Right BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3055.htm">t3055</a>
<a class="EXT" href="../eatests/t3065.htm">t3065</a>
<a class="EXT" href="../eatests/t3075.htm">t3075</a>
</dd>
</dl><pre>
IigSHRB:: PROC
    IiSuffixed SHR,B
 ENDP IigSHRB::
</pre>

<dl id="IigSHRW">
<dt><a href="#IigSHR">&uarr; SHRW</a></dt>
<dd>Shift logical Right WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3055.htm">t3055</a>
<a class="EXT" href="../eatests/t3065.htm">t3065</a>
<a class="EXT" href="../eatests/t3075.htm">t3075</a>
</dd>
</dl><pre>
IigSHRW:: PROC
    IiSuffixed SHR,W
 ENDP IigSHRW::
</pre>

<dl id="IigSHRD">
<dt><a href="#IigSHLD">&uarr; SHRD</a></dt>
<dd>Double Precision Shift Right or <br/>Shift logical Right DWORD</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SHRD.html">SHRD</a></dd>
<dt>Category</dt>
<dd>gen,shftrot</dd>
<dt>Operands</dt>
<dd><b>Evqp</b>,Gvqp,Ib | <b>Evqp</b>,Gvqp,<span title="nr: 1, group: gen, type: b, address: -">CL</span></dd>
<dt>Opcode</dt>
<dd>0x0FAC ^d /r | 0x0FAD ^d /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZ.PC</b>, undefined:<b>O....A.C</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3055.htm">t3055</a>
<a class="EXT" href="../eatests/t3065.htm">t3065</a>
<a class="EXT" href="../eatests/t3075.htm">t3075</a>
<a class="EXT" href="../eatests/t3245.htm">t3245</a>
</dd>
</dl><pre>
IigSHRD:: PROC
    IiDispatchSingleShift .Single:
    MOV AL,0xAC
    JMP IigSHLD.op:
.Single:IiSuffixed SHR,D    
 ENDP IigSHRD::
</pre>

<dl id="IigSHRQ">
<dt><a href="#IigSHR">&uarr; SHRQ</a></dt>
<dd>Shift logical Right QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3075.htm">t3075</a>
</dd>
</dl><pre>
IigSHRQ:: PROC
    IiSuffixed SHR,Q
 ENDP IigSHRQ::
</pre>

<dl id="IigSAL2">
<dt><a href="#IigROL">&uarr; SAL2</a></dt>
<dd>Shift Arithmetic Left undocumented alternate</dd>
<dt>Opcode</dt>
<dd>/6</dd>
<dt>See also</dt>
<dd><a href="#IigSAL">SAL</a>.</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3056.htm">t3056</a>
<a class="EXT" href="../eatests/t3066.htm">t3066</a>
<a class="EXT" href="../eatests/t3076.htm">t3076</a>
</dd>
</dl><pre>
IigSAL2:: PROC
    IiRequire UNDOC
    IiModRM /6
    JMP IigROL.rm:
 ENDP IigSAL2::
</pre>

<dl id="IigSAL2B">
<dt><a href="#IigSAL2">&uarr; SAL2B</a></dt>
<dd>Shift Arithmetic Left undocumented alternate BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3056.htm">t3056</a>
<a class="EXT" href="../eatests/t3066.htm">t3066</a>
<a class="EXT" href="../eatests/t3076.htm">t3076</a>
</dd>
</dl><pre>
IigSAL2B:: PROC
    IiSuffixed SAL2,B
 ENDP IigSAL2B::
</pre>

<dl id="IigSAL2W">
<dt><a href="#IigSAL2">&uarr; SAL2W</a></dt>
<dd>Shift Arithmetic Left undocumented alternate WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3056.htm">t3056</a>
<a class="EXT" href="../eatests/t3066.htm">t3066</a>
<a class="EXT" href="../eatests/t3076.htm">t3076</a>
</dd>
</dl><pre>
IigSAL2W:: PROC
    IiSuffixed SAL2,W
 ENDP IigSAL2W::
</pre>

<dl id="IigSAL2D">
<dt><a href="#IigSAL2">&uarr; SAL2D</a></dt>
<dd>Shift Arithmetic Left undocumented alternate DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3056.htm">t3056</a>
<a class="EXT" href="../eatests/t3066.htm">t3066</a>
<a class="EXT" href="../eatests/t3076.htm">t3076</a>
</dd>
</dl><pre>
IigSAL2D:: PROC
    IiSuffixed SAL2,D
 ENDP IigSAL2D::
</pre>

<dl id="IigSAL2Q">
<dt><a href="#IigSAL2">&uarr; SAL2Q</a></dt>
<dd>Shift Arithmetic Left undocumented alternate QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3076.htm">t3076</a>
</dd>
</dl><pre>
IigSAL2Q:: PROC
    IiSuffixed SAL2,Q
 ENDP IigSAL2Q::
</pre>

<dl id="IigSAR">
<dt><a href="#IigROL">&uarr; SAR</a></dt>
<dd>Shift Arithmetic Right</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SAL:SAR:SHL:SHR.html">SAR</a></dd>
<dt>Category</dt>
<dd>gen,shftrot</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Ib | <b>Evqp</b>,Ib | <b>Eb</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Evqp</b>,<span title="nr: -, group: -, type: -, address: I">1</span> | <b>Eb</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span> | <b>Evqp</b>,<span title="nr: 1, group: gen, type: b, address: -">CL</span></dd>
<dt>Opcode</dt>
<dd>0xC0 ^w /7 | 0xC1 ^W /7 | 0xD0 ^w /7 | 0xD1 ^W /7 | 0xD2 ^w /7 | 0xD3 ^W /7</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZ.PC</b>, undefined:<b>O....A..</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3057.htm">t3057</a>
<a class="EXT" href="../eatests/t3067.htm">t3067</a>
<a class="EXT" href="../eatests/t3077.htm">t3077</a>
</dd>
</dl><pre>
IigSAR:: PROC
    IiModRM /7
    JMP IigROL.rm:
 ENDP IigSAR::
</pre>

<dl id="IigSARB">
<dt><a href="#IigSAR">&uarr; SARB</a></dt>
<dd>Shift Arithmetic Right BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3057.htm">t3057</a>
<a class="EXT" href="../eatests/t3067.htm">t3067</a>
<a class="EXT" href="../eatests/t3077.htm">t3077</a>
</dd>
</dl><pre>
IigSARB:: PROC
    IiSuffixed SAR,B
 ENDP IigSARB::
</pre>

<dl id="IigSARW">
<dt><a href="#IigSAR">&uarr; SARW</a></dt>
<dd>Shift Arithmetic Right WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3057.htm">t3057</a>
<a class="EXT" href="../eatests/t3067.htm">t3067</a>
<a class="EXT" href="../eatests/t3077.htm">t3077</a>
</dd>
</dl><pre>
IigSARW:: PROC
    IiSuffixed SAR,W
 ENDP IigSARW::
</pre>

<dl id="IigSARD">
<dt><a href="#IigSAR">&uarr; SARD</a></dt>
<dd>Shift Arithmetic Right DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3057.htm">t3057</a>
<a class="EXT" href="../eatests/t3067.htm">t3067</a>
<a class="EXT" href="../eatests/t3077.htm">t3077</a>
</dd>
</dl><pre>
IigSARD:: PROC
    IiSuffixed SAR,D
 ENDP IigSARD::
</pre>

<dl id="IigSARQ">
<dt><a href="#IigSAR">&uarr; SARQ</a></dt>
<dd>Shift Arithmetic Right QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3077.htm">t3077</a>
</dd>
</dl><pre>
IigSARQ:: PROC
    IiSuffixed SAR,Q
 ENDP IigSARQ::
</pre>

<dl id="IigNOT">
<dt><a href="#IigHandlers">&uarr; NOT</a></dt>
<dd>One's Complement Negation</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/NOT.html">NOT</a></dd>
<dt>Category</dt>
<dd>gen,logical</dd>
<dt>Operands</dt>
<dd><b>Eb</b> | <b>Evqp</b></dd>
<dt>Opcode</dt>
<dd>0xF6 ^w /2 | 0xF7 ^W /2</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigNOT:: PROC
    IiModRM /2
.rm:IiOpEn M
    IiDataSize Operand1
    IiDispatchFormat  r8:,  m8, r16, m16, r32, m32, r64, m64
.r8:
.m8:IiEmitOpcode 0xF6
    RET
.r16:
.m16:
.r32:
.m32:
.r64:
.m64:IiEmitOpcode 0xF7
     RET
 ENDP IigNOT::
</pre>

<dl id="IigNOTB">
<dt><a href="#IigNOT">&uarr; NOTB</a></dt>
<dd>One's Complement Negation BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigNOTB:: PROC
    IiSuffixed NOT,B
 ENDP IigNOTB::
</pre>

<dl id="IigNOTW">
<dt><a href="#IigNOT">&uarr; NOTW</a></dt>
<dd>One's Complement Negation WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigNOTW:: PROC
    IiSuffixed NOT,W
 ENDP IigNOTW::
</pre>

<dl id="IigNOTD">
<dt><a href="#IigNOT">&uarr; NOTD</a></dt>
<dd>One's Complement Negation DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigNOTD:: PROC
    IiSuffixed NOT,D
 ENDP IigNOTD::
</pre>

<dl id="IigNOTQ">
<dt><a href="#IigNOT">&uarr; NOTQ</a></dt>
<dd>One's Complement Negation QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigNOTQ:: PROC
    IiSuffixed NOT,Q
 ENDP IigNOTQ::
</pre>

<dl id="IigNEG">
<dt><a href="#IigNOT">&uarr; NEG</a></dt>
<dd>Two's Complement Negation</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/NEG.html">NEG</a></dd>
<dt>Category</dt>
<dd>gen,arith,binary</dd>
<dt>Operands</dt>
<dd><b>Eb</b> | <b>Evqp</b></dd>
<dt>Opcode</dt>
<dd>0xF6 ^w /3 | 0xF7 ^W /3</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigNEG:: PROC
    IiModRM /3
    JMP IigNOT.rm:
 ENDP IigNEG::
</pre>

<dl id="IigNEGB">
<dt><a href="#IigNEG">&uarr; NEGB</a></dt>
<dd>Two's Complement Negation BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigNEGB:: PROC
    IiSuffixed NEG,B
 ENDP IigNEGB::
</pre>

<dl id="IigNEGW">
<dt><a href="#IigNEG">&uarr; NEGW</a></dt>
<dd>Two's Complement Negation WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigNEGW:: PROC
    IiSuffixed NEG,W
 ENDP IigNEGW::
</pre>

<dl id="IigNEGD">
<dt><a href="#IigNEG">&uarr; NEGD</a></dt>
<dd>Two's Complement Negation DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigNEGD:: PROC
    IiSuffixed NEG,D
 ENDP IigNEGD::
</pre>

<dl id="IigNEGQ">
<dt><a href="#IigNEG">&uarr; NEGQ</a></dt>
<dd>Two's Complement Negation QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigNEGQ:: PROC
    IiSuffixed NEG,Q
 ENDP IigNEGQ::
</pre>

<dl id="IigMUL">
<dt><a href="#IigNOT">&uarr; MUL</a></dt>
<dd>Unsigned Multiply</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/MUL.html">MUL</a></dd>
<dt>Category</dt>
<dd>gen,arith,binary</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: w, address: -">AX</span></i></b>,<i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i>,Eb | <b><i><span title="nr: 2, group: gen, type: vqp, address: -">rDX</span></i></b>,<b><i><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></i></b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0xF6 ^w /4 | 0xF7 ^W /4</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O......C</b>, undefined:<b>...SZAP.</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigMUL:: PROC
    IiModRM /4
    JMP IigNOT.rm:
 ENDP IigMUL::
</pre>

<dl id="IigMULB">
<dt><a href="#IigMUL">&uarr; MULB</a></dt>
<dd>Unsigned Multiply by BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigMULB:: PROC
    IiSuffixed MUL,B
 ENDP IigMULB::
</pre>

<dl id="IigMULW">
<dt><a href="#IigMUL">&uarr; MULW</a></dt>
<dd>Unsigned Multiply by WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigMULW:: PROC
    IiSuffixed MUL,W
 ENDP IigMULW::
</pre>

<dl id="IigMULD">
<dt><a href="#IigMUL">&uarr; MULD</a></dt>
<dd>Unsigned Multiply by DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigMULD:: PROC
    IiSuffixed MUL,D
 ENDP IigMULD::
</pre>

<dl id="IigMULQ">
<dt><a href="#IigMUL">&uarr; MULQ</a></dt>
<dd>Unsigned Multiply by QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3253.htm">t3253</a>
<a class="EXT" href="../eatests/t3273.htm">t3273</a>
</dd>
</dl><pre>
IigMULQ:: PROC
    IiSuffixed MUL,Q
 ENDP IigMULQ::
</pre>

<dl id="IigDIV">
<dt><a href="#IigNOT">&uarr; DIV</a></dt>
<dd>Unsigned Divide</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/DIV.html">DIV</a></dd>
<dt>Category</dt>
<dd>gen,arith,binary</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b>,<b><i><span title="nr: 4, group: gen, type: b, address: -">AH</span></i></b>,<i><span title="nr: 0, group: gen, type: w, address: -">AX</span></i>,Eb | <b><i><span title="nr: 2, group: gen, type: vqp, address: -">rDX</span></i></b>,<b><i><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></i></b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0xF6 ^w /6 | 0xF7 ^w /6</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, undefined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigDIV:: PROC
    IiModRM /6
    JMP IigNOT.rm:
 ENDP IigDIV::
</pre>

<dl id="IigDIVB">
<dt><a href="#IigDIV">&uarr; DIVB</a></dt>
<dd>Unsigned Divide by BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigDIVB:: PROC
    IiSuffixed DIV,B
 ENDP IigDIVB::
</pre>

<dl id="IigDIVW">
<dt><a href="#IigDIV">&uarr; DIVW</a></dt>
<dd>Unsigned Divide by WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigDIVW:: PROC
    IiSuffixed DIV,W
 ENDP IigDIVW::
</pre>

<dl id="IigDIVD">
<dt><a href="#IigDIV">&uarr; DIVD</a></dt>
<dd>Unsigned Divide by DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigDIVD:: PROC
    IiSuffixed DIV,D
 ENDP IigDIVD::
</pre>

<dl id="IigDIVQ">
<dt><a href="#IigDIV">&uarr; DIVQ</a></dt>
<dd>Unsigned Divide by QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigDIVQ:: PROC
    IiSuffixed DIV,Q
 ENDP IigDIVQ::
</pre>

<dl id="IigIDIV">
<dt><a href="#IigNOT">&uarr; IDIV</a></dt>
<dd>Signed Divide</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/IDIV.html">IDIV</a></dd>
<dt>Category</dt>
<dd>gen,arith,binary</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b>,<b><i><span title="nr: 4, group: gen, type: b, address: -">AH</span></i></b>,<i><span title="nr: 0, group: gen, type: w, address: -">AX</span></i>,Eb | <b><i><span title="nr: 2, group: gen, type: vqp, address: -">rDX</span></i></b>,<b><i><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></i></b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0xF6 ^w /7 | 0xF7 ^w /7</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, undefined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigIDIV:: PROC
    IiModRM /7
    JMP IigNOT.rm:
 ENDP IigIDIV::
</pre>

<dl id="IigIDIVB">
<dt><a href="#IigIDIV">&uarr; IDIVB</a></dt>
<dd>Signed Divide by BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigIDIVB:: PROC
    IiSuffixed IDIV,B
 ENDP IigIDIVB::
</pre>

<dl id="IigIDIVW">
<dt><a href="#IigIDIV">&uarr; IDIVW</a></dt>
<dd>Signed Divide by WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigIDIVW:: PROC
    IiSuffixed IDIV,W
 ENDP IigIDIVW::
</pre>

<dl id="IigIDIVD">
<dt><a href="#IigIDIV">&uarr; IDIVD</a></dt>
<dd>Signed Divide by DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3251.htm">t3251</a>
<a class="EXT" href="../eatests/t3252.htm">t3252</a>
<a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigIDIVD:: PROC
    IiSuffixed IDIV,D
 ENDP IigIDIVD::
</pre>

<dl id="IigIDIVQ">
<dt><a href="#IigIDIV">&uarr; IDIVQ</a></dt>
<dd>Signed Divide by QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3253.htm">t3253</a>
</dd>
</dl><pre>
IigIDIVQ:: PROC
    IiSuffixed IDIV,Q
 ENDP IigIDIVQ::
</pre>

<dl id="IigTEST">
<dt><a href="#IigHandlers">&uarr; TEST</a></dt>
<dd>Logical Compare</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/TEST.html">TEST</a></dd>
<dt>Reference</dt>
<dd><table>
<tr><th>TEST AL, imm8, CODE=SHORT</th><td>A8 ib</td></tr>
<tr><th>TEST rAX, imm, CODE=SHORT</th><td>A9 imm</td></tr>
<tr><th>TEST r/m8, imm8, CODE=LONG</th><td>F6 /0 ib</td></tr>
<tr><th>TEST reg/mem, imm, CODE=LONG</th><td>F7 /0 imm</td></tr>
<tr><th>TEST r/m8, r8, CODE=SHORT</th><td>84 /r</td></tr>
<tr><th>TEST r8, r/m8, CODE=LONG</th><td>84 /r</td></tr>
<tr><th>TEST reg/mem, reg, CODE=SHORT</th><td>85 /r</td></tr>
<tr><th>TEST reg, reg/mem, CODE=LONG</th><td>85 /r</td></tr>
</table></dd>
<dt>Category</dt>
<dd>gen,arith,binary</dd>
<dt>Operands</dt>
<dd>Eb,Gb | Evqp,Gvqp | <span title="nr: 0, group: gen, type: b, address: -">AL</span>,Ib | <span title="nr: 0, group: gen, type: vqp, address: -">rAX</span>,Ivds | Eb,Ib | Evqp,Ivqp</dd>
<dt>Opcode</dt>
<dd>0x84 ^dw /r | 0x85 ^dW /r | 0xA8 ^w | 0xA9 ^W | 0xF6 ^w /0 | 0xF7 ^W /0</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZ.PC</b>, undefined:<b>.....A..</b>, values:<b>O......C</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3261.htm">t3261</a>
<a class="EXT" href="../eatests/t3262.htm">t3262</a>
<a class="EXT" href="../eatests/t3263.htm">t3263</a>
</dd>
</dl><pre>
IigTEST:: PROC
    IiAllowModifier CODE
    IiAssumeEmpty Operand2,Operand1
    IiOpEn M
    IiDataSize
    IiDispatchFormat r8:, r16, r32, r64, r8.imm, r8.r8, r8.m8, m8.imm, m8.r8, r16.imm, r16.r16, r16.m16, m16.imm, m16.r16, \
                   r32.imm, r32.r32, r32.m32, m32.imm, m32.r32, r64.imm, r64.r64, r64.m64, m64.imm, m64.r64
.r8.m8:
    IiEncoding CODE=LONG
    IiSwap Operand1,Operand2
    JMP .B:
.r8.r8:
.r8:IiDispatchCode LONG=.r8.m8:
.m8.r8:
    IiEncoding CODE=SHORT
 .B:IiEmitOpcode 0x84
    IiOpEn MR
    IiModRM /r
    RET
.r16.m16:
.r32.m32:
.r64.m64:
    IiEncoding CODE=LONG
    IiSwap Operand1,Operand2
    JMP .W:
.r16.r16:
.r32.r32:
.r64.r64:
.r16:
.r32:
.r64:IiDispatchCode LONG=.r16.m16:
.m16.r16:
.m32.r32:
.m64.r64:
     IiEncoding CODE=SHORT
 .W: IiEmitOpcode 0x85
     IiOpEn MR
     IiModRM /r
     RET
.r8.imm:
     IiDispatchNotAccum Operand1,.m8.imm:
     IiDispatchCode LONG=.m8.imm:
     IiEncoding CODE=SHORT
     IiEmitOpcode 0xA8
     IiEmitImm Operand2, BYTE
     RET
.m8.imm:
     IiEncoding CODE=LONG
     IiEmitOpcode 0xF6
     IiModRM /0
     IiEmitImm Operand2, BYTE
     RET
.r16.imm:
     IiDispatchNotAccum Operand1,.m16.imm:
     IiDispatchCode LONG=.m16.imm:
     IiEncoding CODE=SHORT
     IiEmitOpcode 0xA9
     IiEmitImm Operand2, WORD
     RET
.m16.imm:
     IiEncoding CODE=LONG
     IiEmitOpcode 0xF7
     IiModRM /0
     IiEmitImm Operand2, WORD
     RET
.r32.imm:
.r64.imm:
     IiDispatchNotAccum Operand1,.m32.imm:
     IiDispatchCode LONG=.m32.imm:
     IiEncoding CODE=SHORT
     IiEmitOpcode 0xA9
     IiEmitImm Operand2, DWORD
     RET
.m32.imm:
.m64.imm:
     IiEncoding CODE=LONG
     IiEmitOpcode 0xF7
     IiModRM /0
     IiEmitImm Operand2, DWORD
     RET
 ENDP IigTEST::
</pre>

<dl id="IigTESTB">
<dt><a href="#IigTEST">&uarr; TESTB</a></dt>
<dd>Logical Compare BYTEs</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3261.htm">t3261</a>
<a class="EXT" href="../eatests/t3262.htm">t3262</a>
<a class="EXT" href="../eatests/t3263.htm">t3263</a>
</dd>
</dl><pre>
IigTESTB:: PROC
    IiSuffixed TEST,B
 ENDP IigTESTB::
</pre>

<dl id="IigTESTW">
<dt><a href="#IigTEST">&uarr; TESTW</a></dt>
<dd>Logical Compare WORDs</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3261.htm">t3261</a>
<a class="EXT" href="../eatests/t3262.htm">t3262</a>
<a class="EXT" href="../eatests/t3263.htm">t3263</a>
</dd>
</dl><pre>
IigTESTW:: PROC
    IiSuffixed TEST,W
 ENDP IigTESTW::
</pre>

<dl id="IigTESTD">
<dt><a href="#IigTEST">&uarr; TESTD</a></dt>
<dd>Logical Compare DWORDs</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3261.htm">t3261</a>
<a class="EXT" href="../eatests/t3262.htm">t3262</a>
<a class="EXT" href="../eatests/t3263.htm">t3263</a>
</dd>
</dl><pre>
IigTESTD:: PROC
    IiSuffixed TEST,D
 ENDP IigTESTD::
</pre>

<dl id="IigTESTQ">
<dt><a href="#IigTEST">&uarr; TESTQ</a></dt>
<dd>Logical Compare QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3263.htm">t3263</a>
</dd>
</dl><pre>
IigTESTQ:: PROC
    IiSuffixed TEST,Q
 ENDP IigTESTQ::
</pre>

<dl id="IigTEST2">
<dt><a href="#IigTEST">&uarr; TEST2</a></dt>
<dd>Logical Compare alternate</dd>
<dt>Comment</dt>
<dd>Same encoding as <a href="#IigTEST">TEST</a> except for <code>F6 /0 imm</code> encoded as
<code>F6 /1 imm</code> and instead of <code>F7 /0 imm</code> is encoded as <code>F7 /1 imm</code>.</dd>
<dt>Opcode</dt>
<dd>0xF6 /1 | 0xF7 /1</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3261.htm">t3261</a>
<a class="EXT" href="../eatests/t3262.htm">t3262</a>
<a class="EXT" href="../eatests/t3263.htm">t3263</a>
</dd>
</dl><pre>
IigTEST2:: PROC
    IiRequire UNDOC
    ORD [EDI+II.Ppg],0x1000_0000 ; Change /digit from /0 to /1.
    JMP IigTEST
 ENDP IigTEST2::
</pre>

<dl id="IigTEST2B">
<dt><a href="#IigTEST2">&uarr; TEST2B</a></dt>
<dd>Logical Compare alternate BYTEs</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3261.htm">t3261</a>
<a class="EXT" href="../eatests/t3262.htm">t3262</a>
<a class="EXT" href="../eatests/t3263.htm">t3263</a>
</dd>
</dl><pre>
IigTEST2B:: PROC
    IiSuffixed TEST2,B
 ENDP IigTEST2B::
</pre>

<dl id="IigTEST2W">
<dt><a href="#IigTEST2">&uarr; TEST2W</a></dt>
<dd>Logical Compare alternate WORDs</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3261.htm">t3261</a>
<a class="EXT" href="../eatests/t3262.htm">t3262</a>
<a class="EXT" href="../eatests/t3263.htm">t3263</a>
</dd>
</dl><pre>
IigTEST2W:: PROC
    IiSuffixed TEST2,W
 ENDP IigTEST2W::
</pre>

<dl id="IigTEST2D">
<dt><a href="#IigTEST2">&uarr; TEST2D</a></dt>
<dd>Logical Compare alternate DWORDs</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3261.htm">t3261</a>
<a class="EXT" href="../eatests/t3262.htm">t3262</a>
<a class="EXT" href="../eatests/t3263.htm">t3263</a>
</dd>
</dl><pre>
IigTEST2D:: PROC
    IiSuffixed TEST2,D
 ENDP IigTEST2D::
</pre>

<dl id="IigTEST2Q">
<dt><a href="#IigTEST2">&uarr; TEST2Q</a></dt>
<dd>Logical Compare alternate QWORDs</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3263.htm">t3263</a>
</dd>
</dl><pre>
IigTEST2Q:: PROC
    IiSuffixed TEST2,Q
 ENDP IigTEST2Q::
</pre>

<dl id="IigIMUL">
<dt><a href="#IigHandlers">&uarr; IMUL</a></dt>
<dd>Signed Multiply</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/IMUL.html">IMUL</a></dd>
<dt>Category</dt>
<dd>gen,arith,binary</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp,Ivds | <b>Gvqp</b>,Evqp,Ibs | <b><i><span title="nr: 0, group: gen, type: w, address: -">AX</span></i></b>,<i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i>,Eb | <b><i><span title="nr: 2, group: gen, type: vqp, address: -">rDX</span></i></b>,<b><i><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></i></b>,Evqp | <b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x69 /r | 0x6B ^S /r | 0xF6 ^w /5 | 0xF7 ^w /5 | 0x0FAF ^DW /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O......C</b>, undefined:<b>...SZAP.</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3271.htm">t3271</a>
<a class="EXT" href="../eatests/t3272.htm">t3272</a>
<a class="EXT" href="../eatests/t3273.htm">t3273</a>
</dd>
</dl><pre>
IigIMUL:: PROC
    IiDataSize Operand1
    IiDispatchFormat r8:, m8, r16, m16, r32, m32, r64, m64, \
    r16.r16, r16.m16, r32.r32, r32.m32, r64.r64, r64.m64, \
    r16.r16.imm, r16.m16.imm, r32.r32.imm, r32.m32.imm, r64.r64.imm, r64.m64.imm
.m8:
.r8: IiEmitOpcode 0xF6
     IiOpEn M
     IiModRM /5
     RET
.r16:
.r32:
.r64:
.m16:
.m32:
.m64:IiEmitOpcode 0xF7
     IiOpEn M
     IiModRM /5
     RET
.r16.r16:
.r16.m16:
.r32.r32:
.r32.m32:
.r64.r64:
.r64.m64:
     IiEmitOpcode 0x0F,0xAF
     IiOpEn RM
     IiModRM /r
     RET
.r16.r16.imm:
.r16.m16.imm:
.r32.r32.imm:
.r32.m32.imm:
.r64.r64.imm:
.r64.m64.imm:
     IiRequire 186
     IiOpEn RM
     IiModRM /r
     IiAllowModifier IMM
     IiImmSize Operand3
     IiDispatchImm WORD=.69:, DWORD=.69:
     JNSt [EDI+II.MfgImplicit],iiMfgIMM_BYTE,.69:
     IiEmitOpcode 0x6B
     IiEmitImm Operand3, BYTE
     RET
.69: IiEmitOpcode 0x69
     SHR EDX,16 ; Operand1 (r16/r32/r64) shift to DL.
     CMP DL,r16
     JE .W:
     IiEmitImm Operand3, DWORD
     RET
 .W: IiEmitImm Operand3, WORD
     RET
 ENDP IigIMUL::
</pre>

<dl id="IigIMULB">
<dt><a href="#IigIMUL">&uarr; IMULB</a></dt>
<dd>Signed Multiply by BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3271.htm">t3271</a>
<a class="EXT" href="../eatests/t3272.htm">t3272</a>
<a class="EXT" href="../eatests/t3273.htm">t3273</a>
</dd>
</dl><pre>
IigIMULB:: PROC
    IiSuffixed IMUL,B
 ENDP IigIMULB::
</pre>

<dl id="IigIMULW">
<dt><a href="#IigIMUL">&uarr; IMULW</a></dt>
<dd>Signed Multiply by WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3271.htm">t3271</a>
<a class="EXT" href="../eatests/t3272.htm">t3272</a>
<a class="EXT" href="../eatests/t3273.htm">t3273</a>
</dd>
</dl><pre>
IigIMULW:: PROC
    IiSuffixed IMUL,W
 ENDP IigIMULW::
</pre>

<dl id="IigIMULD">
<dt><a href="#IigIMUL">&uarr; IMULD</a></dt>
<dd>Signed Multiply by DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3271.htm">t3271</a>
<a class="EXT" href="../eatests/t3272.htm">t3272</a>
<a class="EXT" href="../eatests/t3273.htm">t3273</a>
</dd>
</dl><pre>
IigIMULD:: PROC
    IiSuffixed IMUL,D
 ENDP IigIMULD::
</pre>

<dl id="IigIMULQ">
<dt><a href="#IigIMUL">&uarr; IMULQ</a></dt>
<dd>Signed Multiply by QWORD</dd>
</dl><pre>
IigIMULQ:: PROC
    IiSuffixed IMUL,Q
 ENDP IigIMULQ::
</pre>

<dl id="IigINC">
<dt><a href="#IigHandlers">&uarr; INC</a></dt>
<dd>Increment by 1</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/INC.html">INC</a></dd>
<dt>Category</dt>
<dd>gen,arith,binary</dd>
<dt>Operands</dt>
<dd><b>Zv</b> | <b>Eb</b> | <b>Evqp</b></dd>
<dt>Opcode</dt>
<dd>0x40 ^+r | 0xFE ^w /0 | 0xFF ^W /0</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAP.</b>, defined:<b>O..SZAP.</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3281.htm">t3281</a>
<a class="EXT" href="../eatests/t3282.htm">t3282</a>
<a class="EXT" href="../eatests/t3283.htm">t3283</a>
<a class="EXT" href="../eatests/t3284.htm">t3284</a>
</dd>
</dl><pre>
IigINC:: PROC
     IiModRM /0
     MOV CL,0x40
.rm: IiAllowModifier CODE
     IiAllowPrefix LOCK
     IiDataSize Operand1
     IiOpEn M
     IiDispatchFormat  r8:, m8, r16, m16, r32, m32, r64, m64
.r8:
.m8:IiEmitOpcode 0xFE
    RET
.m16:
.m32:
.r64:
.m64:
    IiEncoding CODE=LONG
    IiEmitOpcode 0xFF
    RET
.r16:
.r32:
    IiDispatchCode LONG=.m16:
    IiDispatchWidth BITS64=.m16:
    IiEncoding CODE=SHORT
    SetSt [EDI+II.Ppg],iiPpgMod01 ; Change ModRM byte 0xC0+r to opcode byte 0x40+r.
    RET
 ENDP IigINC::
</pre>

<dl id="IigINCB">
<dt><a href="#IigINC">&uarr; INCB</a></dt>
<dd>Increment BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3281.htm">t3281</a>
<a class="EXT" href="../eatests/t3282.htm">t3282</a>
<a class="EXT" href="../eatests/t3283.htm">t3283</a>
<a class="EXT" href="../eatests/t3284.htm">t3284</a>
</dd>
</dl><pre>
IigINCB:: PROC
    IiSuffixed INC,B
 ENDP IigINCB::
</pre>

<dl id="IigINCW">
<dt><a href="#IigINC">&uarr; INCW</a></dt>
<dd>Increment WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3281.htm">t3281</a>
<a class="EXT" href="../eatests/t3282.htm">t3282</a>
<a class="EXT" href="../eatests/t3283.htm">t3283</a>
<a class="EXT" href="../eatests/t3284.htm">t3284</a>
</dd>
</dl><pre>
IigINCW:: PROC
    IiSuffixed INC,W
 ENDP IigINCW::
</pre>

<dl id="IigINCD">
<dt><a href="#IigINC">&uarr; INCD</a></dt>
<dd>Increment DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3281.htm">t3281</a>
<a class="EXT" href="../eatests/t3282.htm">t3282</a>
<a class="EXT" href="../eatests/t3283.htm">t3283</a>
<a class="EXT" href="../eatests/t3284.htm">t3284</a>
</dd>
</dl><pre>
IigINCD:: PROC
    IiSuffixed INC,D
 ENDP IigINCD::
</pre>

<dl id="IigINCQ">
<dt><a href="#IigINC">&uarr; INCQ</a></dt>
<dd>Increment QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3283.htm">t3283</a>
<a class="EXT" href="../eatests/t3284.htm">t3284</a>
</dd>
</dl><pre>
IigINCQ:: PROC
    IiSuffixed INC,Q
 ENDP IigINCQ::
</pre>

<dl id="IigDEC">
<dt><a href="#IigINC">&uarr; DEC</a></dt>
<dd>Decrement by 1</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/DEC.html">DEC</a></dd>
<dt>Category</dt>
<dd>gen,arith,binary</dd>
<dt>Operands</dt>
<dd><b>Zv</b> | <b>Eb</b> | <b>Evqp</b></dd>
<dt>Opcode</dt>
<dd>0x48 ^+r | 0xFE ^w /1 | 0xFF ^W /1</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAP.</b>, defined:<b>O..SZAP.</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3281.htm">t3281</a>
<a class="EXT" href="../eatests/t3282.htm">t3282</a>
<a class="EXT" href="../eatests/t3283.htm">t3283</a>
<a class="EXT" href="../eatests/t3285.htm">t3285</a>
</dd>
</dl><pre>
IigDEC:: PROC
    IiModRM /1
    JMP IigINC.rm:
 ENDP IigDEC::
</pre>

<dl id="IigDECB">
<dt><a href="#IigDEC">&uarr; DECB</a></dt>
<dd>Decrement BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3281.htm">t3281</a>
<a class="EXT" href="../eatests/t3282.htm">t3282</a>
<a class="EXT" href="../eatests/t3283.htm">t3283</a>
<a class="EXT" href="../eatests/t3285.htm">t3285</a>
</dd>
</dl><pre>
IigDECB:: PROC
    IiSuffixed DEC,B
 ENDP IigDECB::
</pre>

<dl id="IigDECW">
<dt><a href="#IigDEC">&uarr; DECW</a></dt>
<dd>Decrement WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3281.htm">t3281</a>
<a class="EXT" href="../eatests/t3282.htm">t3282</a>
<a class="EXT" href="../eatests/t3283.htm">t3283</a>
<a class="EXT" href="../eatests/t3285.htm">t3285</a>
</dd>
</dl><pre>
IigDECW:: PROC
    IiSuffixed DEC,W
 ENDP IigDECW::
</pre>

<dl id="IigDECD">
<dt><a href="#IigDEC">&uarr; DECD</a></dt>
<dd>Decrement DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3281.htm">t3281</a>
<a class="EXT" href="../eatests/t3282.htm">t3282</a>
<a class="EXT" href="../eatests/t3283.htm">t3283</a>
<a class="EXT" href="../eatests/t3285.htm">t3285</a>
</dd>
</dl><pre>
IigDECD:: PROC
    IiSuffixed DEC,D
 ENDP IigDECD::
</pre>

<dl id="IigDECQ">
<dt><a href="#IigDEC">&uarr; DECQ</a></dt>
<dd>Decrement QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3283.htm">t3283</a>
<a class="EXT" href="../eatests/t3285.htm">t3285</a>
</dd>
</dl><pre>
IigDECQ:: PROC
    IiSuffixed DEC,Q
 ENDP IigDECQ::
</pre>

<dl id="IigPUSH">
<dt><a href="#IigHandlers">&uarr; PUSH</a></dt>
<dd>Push Word, Doubleword or Quadword Onto the Stack</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/PUSH.html">PUSH</a></dd>
<dt>Comment</dt>
<dd>This instruction uses nonstandard operand width, therefore it cannot use macro <a class="EXT" href="ii.htm#IiDataSize">IiDataSize
</a> to investigate effective operand-size of immediate value. See also discussion
<a class="EXTW" href="http://stackoverflow.com/questions/11291151/how-push-imm-encodes/11303863">here</a>.</dd>
<dt>Category</dt>
<dd>gen,stack segreg</dd>
<dt>Operands</dt>
<dd><span title="nr: 0, group: seg, type: w, address: S2">ES</span> | <span title="nr: 1, group: seg, type: w, address: S2">CS</span> | <span title="nr: 2, group: seg, type: w, address: S2">SS</span> | <span title="nr: 3, group: seg, type: w, address: S2">DS</span> | Zv | Zvq | Ivs | Ibss | Ev | Evq | <span title="nr: 4, group: seg, type: w, address: S33">FS</span> | <span title="nr: 5, group: seg, type: w, address: S33">GS</span></dd>
<dt>Opcode</dt>
<dd>0x06 ^sr | 0x0E ^sR | 0x16 ^Sr | 0x1E ^SR | 0x50 ^+r | 0x50 ^+r | 0x68 | 0x6A ^S | 0xFF /6 | 0xFF /6 | 0x0FA0 ^Sre | 0x0FA8 ^SrE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3191.htm">t3191</a>
<a class="EXT" href="../eatests/t3192.htm">t3192</a>
</dd>
</dl><pre>
IigPUSH:: PROC
    IiDataSize Operand1, UseSegment=ON ; Unspecified opsize defaults to segment width.
    IiOpEn M
    IiDispatchFormat imm, r32, r64, r8:, r16, m32, m64, m16, m8, Sreg
.r8:
.m8: IiAbort '6753' ; 8bit register or memory operand cannot be pushed/popped.
.m32:IiAbortIf64
.m16:
.m64:IiEmitOpcode 0xFF
     IiModRM /6
     IiRemoveREXW
     RET
.reg:IiEncoding CODE=LONG     
     JMP .m16:
.r32:IiAbortIf64
.r16:
.r64:IiAllowModifier CODE
     IiDispatchCode LONG=.reg:
     IiEncoding CODE=SHORT
     IiModRM /2
     SetSt [EDI+II.Ppg],iiPpgMod01
     IiRemoveREXW
     RET
.immD: ; Operand-size = DWORD.
     IiAbortIf64
     IiDispatchImm DWORD=.id:   ; Explicitly requested immediate encoding IMM=DWORD.
     IiDispatchImmSize BYTE=.ib:; Immediate operand fits to a byte. 
.id: IiEmitOpcode 0x68
     IiEmitImm Operand1, DWORD
     RET
.ib: IiEmitOpcode 0x6A
     IiEmitImm Operand1, BYTE
     RET
.immW: ; Operand-size = WORD.
     IiDispatchImm WORD=.iw:    ; Explicitly requested immediate encoding IMM=WORD.
     IiDispatchImmSize BYTE=.ib:; Immediate operand fits to a byte.
.iw: IiEmitOpcode 0x68
     IiEmitImm Operand1, WORD
     RET
.imm:IiRequire 186
     IiRemoveREXW
     IiImmSize Operand1           ; Propose II.MfgImplicit from the immediate number magnitude.
     CMPB [EDI+II.Operand1.Status],'P'
     JE .ig:
     CMPB [EDI+II.Operand1.Status],'A'
     JNE .is:
     JSt [EDI+II.Operand1.Status],expPara,.ig:
     IiReloc iiRelocImmAbs,Operand1
     JMP .ia:
 .ig:IiReloc iiRelocPara,Operand1
 .ia:IiDispatchData WORD=.iw:
     JMP .id:
 .is:IiDispatchData WORD=.immW:, DWORD=.immD:
     IiAbortIfNot64               ; Operand-size 64 is allowed in 64bit mode only.
     IiDispatchImm DWORD=.id:     ; Explicitly requested immediate encoding IMM=DWORD.
     IiDispatchImmSize BYTE=.ib:  ; Immediate operand fits to a byte.
     JMP .id:
.Sreg:
    IiDispatchData WORD=.SG:,QWORD=.SG:
    IiAbortIf64
.SG:MOV AL,[EDI+II.Operand1.Low]
    AND EAX,7 ; Segment register ordinal number 0..5.
    SHL EAX,3
    CMP AL,4<<3 ; Test if Operand1 is ES,CS,SS,DS.                                                        ; >>
    JAE .FSGS:
    IiAbortIf64 
    OR AL,0x06
    IiEmitOpcode EAX
    RET
.FSGS:
    OR AL,0xA0
    IiEmitOpcode 0x0F,EAX
    IiRemoveREXW
    RET
 ENDP IigPUSH::
</pre>

<dl id="IigPUSHW">
<dt><a href="#IigPUSH">&uarr; PUSHW</a></dt>
<dd>Push WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3191.htm">t3191</a>
<a class="EXT" href="../eatests/t3192.htm">t3192</a>
</dd>
</dl><pre>
IigPUSHW:: PROC
    IiSuffixed PUSH,W
 ENDP IigPUSHW::
</pre>

<dl id="IigPUSHD">
<dt><a href="#IigPUSH">&uarr; PUSHD</a></dt>
<dd>Push DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3191.htm">t3191</a>
<a class="EXT" href="../eatests/t3192.htm">t3192</a>
</dd>
</dl><pre>
IigPUSHD:: PROC
    IiSuffixed PUSH,D
 ENDP IigPUSHD::
</pre>

<dl id="IigPUSHQ">
<dt><a href="#IigPUSH">&uarr; PUSHQ</a></dt>
<dd>Push QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3191.htm">t3191</a>
<a class="EXT" href="../eatests/t3192.htm">t3192</a>
</dd>
</dl><pre>
IigPUSHQ:: PROC
    IiSuffixed PUSH,Q
 ENDP IigPUSHQ::
</pre>

<dl id="IigPUSHA">
<dt><a href="#IigHandlers">&uarr; PUSHA</a></dt>
<dd>Push All General-Purpose Registers</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/PUSHA:PUSHAD.html">PUSHA</a></dd>
<dt>Category</dt>
<dd>gen,stack</dd>
<dt>Operands</dt>
<dd><i><span title="nr: 0, group: gen, type: wo, address: -">AX</span></i>,<i><span title="nr: 1, group: gen, type: wo, address: -">CX</span></i>,<i><span title="nr: 2, group: gen, type: wo, address: -">DX</span></i>,<span title="src: AX src: CX src: DX src: BX src: SP src: BP src: SI src: DI ">...</span></dd>
<dt>Opcode</dt>
<dd>0x60</dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3191.htm">t3191</a>
</dd>
</dl><pre>
IigPUSHA:: PROC
    IiRequire 186
    IiAbortIf64
    IiDataSize Operand1, UseSegment=ON
    IiEmitOpcode 0x60
    IiDispatchFormat none
.none:RET
 ENDP IigPUSHA::
</pre>

<dl id="IigPUSHAW">
<dt><a href="#IigPUSHA">&uarr; PUSHAW</a></dt>
<dd>Push All WORD general-purpose registers</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3191.htm">t3191</a>
</dd>
</dl><pre>
IigPUSHAW:: PROC
    IiSuffixed PUSHA,W
 ENDP IigPUSHAW::
</pre>

<dl id="IigPUSHAD">
<dt><a href="#IigPUSHA">&uarr; PUSHAD</a></dt>
<dd>Push All DWORD general-purpose registers</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/PUSHA:PUSHAD.html">PUSHAD</a></dd>
<dt>Category</dt>
<dd>gen,stack</dd>
<dt>Operands</dt>
<dd><i><span title="nr: 0, group: gen, type: do, address: -">EAX</span></i>,<i><span title="nr: 1, group: gen, type: do, address: -">ECX</span></i>,<i><span title="nr: 2, group: gen, type: do, address: -">EDX</span></i>,<span title="src: EAX src: ECX src: EDX src: EBX src: ESP src: EBP src: ESI src: EDI ">...</span></dd>
<dt>Opcode</dt>
<dd>0x60</dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3191.htm">t3191</a>
</dd>
</dl><pre>
IigPUSHAD:: PROC
    IiSuffixed PUSHA,D
 ENDP IigPUSHAD::
</pre>

<dl id="IigPUSHF">
<dt><a href="#IigHandlers">&uarr; PUSHF</a></dt>
<dd>Push FLAGS Register onto the Stack</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/PUSHF:PUSHFD.html">PUSHF</a></dd>
<dt>Category</dt>
<dd>gen,stack flgctrl</dd>
<dt>Operands</dt>
<dd><i><span title="nr: -, group: -, type: wo, address: F">Fwo</span></i> | <i><span title="nr: -, group: -, type: ws, address: F">Fws</span></i></dd>
<dt>Opcode</dt>
<dd>0x9C | 0x9C</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3191.htm">t3191</a>
</dd>
</dl><pre>
IigPUSHF:: PROC
    IiDataSize UseSegment=ON
    IiRemoveREXW
    IiEmitOpcode 0x9C
    IiDispatchFormat none
.none:RET
 ENDP IigPUSHF::
</pre>

<dl id="IigPUSHFW">
<dt><a href="#IigPUSHF">&uarr; PUSHFW</a></dt>
<dd>Push WORD Flags</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3191.htm">t3191</a>
</dd>
</dl><pre>
IigPUSHFW:: PROC
    IiSuffixed PUSHF,W
 ENDP IigPUSHFW::
</pre>

<dl id="IigPUSHFD">
<dt><a href="#IigPUSHF">&uarr; PUSHFD</a></dt>
<dd>Push DWORD EFlags</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/PUSHF:PUSHFD.html">PUSHFD</a></dd>
<dt>Category</dt>
<dd>gen,stack flgctrl</dd>
<dt>Operands</dt>
<dd><i><span title="nr: -, group: -, type: do, address: F">Fdo</span></i></dd>
<dt>Opcode</dt>
<dd>0x9C</dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3191.htm">t3191</a>
</dd>
</dl><pre>
IigPUSHFD:: PROC
    IiSuffixed PUSHF,D
 ENDP IigPUSHFD::
</pre>

<dl id="IigPUSHFQ">
<dt><a href="#IigPUSHF">&uarr; PUSHFQ</a></dt>
<dd>Push QWORD RFlags</dd>
<dt>Category</dt>
<dd>gen,stack flgctrl</dd>
<dt>Operands</dt>
<dd><i><span title="nr: -, group: -, type: qs, address: F">Fqs</span></i></dd>
<dt>Opcode</dt>
<dd>0x9C</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3191.htm">t3191</a>
</dd>
</dl><pre>
IigPUSHFQ:: PROC
    IiSuffixed PUSHF,Q
 ENDP IigPUSHFQ::
</pre>

<dl id="IigPOP">
<dt><a href="#IigHandlers">&uarr; POP</a></dt>
<dd>Pop a Value from the Stack</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/POP.html">POP</a></dd>
<dt>Category</dt>
<dd>gen,stack segreg</dd>
<dt>Operands</dt>
<dd><b><span title="nr: 0, group: seg, type: w, address: S2">ES</span></b> | <b><span title="nr: 1, group: seg, type: w, address: S2">CS</span></b> | <b><span title="nr: 2, group: seg, type: w, address: S2">SS</span></b> | <b><span title="nr: 3, group: seg, type: w, address: S2">DS</span></b> | <b>Zv</b> | <b>Zvq</b> | <b>Ev</b> | <b>Evq</b> | <b><span title="nr: 4, group: seg, type: w, address: S33">FS</span></b> | <b><span title="nr: 5, group: seg, type: w, address: S33">GS</span></b></dd>
<dt>Opcode</dt>
<dd>0x07 ^sr | 0x0F ^sR | 0x17 ^Sr | 0x1F ^SR | 0x58 ^+r | 0x58 ^+r | 0x8F ^W /0 | 0x8F ^W /0 | 0x0FA1 ^Sre | 0x0FA9 ^SrE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3195.htm">t3195</a>
<a class="EXT" href="../eatests/t3196.htm">t3196</a>
</dd>
</dl><pre>
IigPOP:: PROC
    IiDataSize Operand1, UseSegment=ON
    IiOpEn M
    IiDispatchFormat r32, r64, r8:, r16, m32, m64, m16, m8, Sreg
.r8:
.m8: IiAbort '6753' ; 8bit register or memory operand cannot be pushed/popped.
.m32:IiAbortIf64
.m16:
.m64:IiEmitOpcode 0x8F
     IiModRM /0
     IiRemoveREXW
     RET
.reg:IiEncoding CODE=LONG     
     JMP .m16:
.r32:IiAbortIf64
.r16:
.r64:IiAllowModifier CODE
     IiDispatchCode LONG=.reg:
     IiEncoding CODE=SHORT
     IiModRM /3
     SetSt [EDI+II.Ppg],iiPpgMod01
     IiRemoveREXW
     RET
.Sreg:
    IiDispatchData WORD=.SG:,QWORD=.SG:
    IiAbortIf64
.SG:MOV AL,[EDI+II.Operand1.Low]
    AND EAX,7 ; Segment register ordinal number 0..5.
    SHL EAX,3
    CMP AL,4<<3 ; Test if Operand1 is FS,GS.
    JAE .FSGS:
    CMP AL,1<<3 ; Test if Operand1 is CS.                                                        ; >>
    IiAbort cc=E,'6537' ; MOV CS / POP CS is an invalid operation.
    IiAbortIf64 
    OR AL,0x07
    IiEmitOpcode EAX
    RET
.FSGS:
    OR AL,0xA1
    IiEmitOpcode 0x0F,EAX
    IiRemoveREXW
    RET
 ENDP IigPOP::
</pre>

<dl id="IigPOPW">
<dt><a href="#IigPOP">&uarr; POPW</a></dt>
<dd>Pop WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3195.htm">t3195</a>
<a class="EXT" href="../eatests/t3196.htm">t3196</a>
</dd>
</dl><pre>
IigPOPW:: PROC
    IiSuffixed POP,W
 ENDP IigPOPW::
</pre>

<dl id="IigPOPD">
<dt><a href="#IigPOP">&uarr; POPD</a></dt>
<dd>Pop DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3195.htm">t3195</a>
<a class="EXT" href="../eatests/t3196.htm">t3196</a>
</dd>
</dl><pre>
IigPOPD:: PROC
    IiSuffixed POP,D
 ENDP IigPOPD::
</pre>

<dl id="IigPOPQ">
<dt><a href="#IigPOP">&uarr; POPQ</a></dt>
<dd>Pop QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3195.htm">t3195</a>
<a class="EXT" href="../eatests/t3196.htm">t3196</a>
</dd>
</dl><pre>
IigPOPQ:: PROC
    IiSuffixed POP,Q
 ENDP IigPOPQ::
</pre> 

<dl id="IigPOPA">
<dt><a href="#IigHandlers">&uarr; POPA</a></dt>
<dd>Pop All General-Purpose Registers</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/POPA:POPAD.html">POPA</a></dd>
<dt>Category</dt>
<dd>gen,stack</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 7, group: gen, type: wo, address: -">DI</span></i></b>,<b><i><span title="nr: 6, group: gen, type: wo, address: -">SI</span></i></b>,<b><i><span title="nr: 5, group: gen, type: wo, address: -">BP</span></i></b>,<span title="dst: DI dst: SI dst: BP dst: BX dst: DX dst: CX dst: AX ">...</span></dd>
<dt>Opcode</dt>
<dd>0x61</dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3195.htm">t3195</a>
</dd>
</dl><pre>
IigPOPA:: PROC
    IiRequire 186
    IiAbortIf64
    IiDataSize Operand1, UseSegment=ON
    IiEmitOpcode 0x61
    IiDispatchFormat none
.none:RET
 ENDP IigPOPA::
</pre>

<dl id="IigPOPAW">
<dt><a href="#IigPOPA">&uarr; POPAW</a></dt>
<dd>Pop All WORD general-purpose registers</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3195.htm">t3195</a>
</dd>
</dl><pre>
IigPOPAW:: PROC
    IiSuffixed POPA,W
 ENDP IigPOPAW::
</pre>

<dl id="IigPOPAD">
<dt><a href="#IigPOPA">&uarr; POPAD</a></dt>
<dd>Pop All DWORD general-purpose registers</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/POPA:POPAD.html">POPAD</a></dd>
<dt>Category</dt>
<dd>gen,stack</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 7, group: gen, type: do, address: -">EDI</span></i></b>,<b><i><span title="nr: 6, group: gen, type: do, address: -">ESI</span></i></b>,<b><i><span title="nr: 5, group: gen, type: do, address: -">EBP</span></i></b>,<span title="dst: EDI dst: ESI dst: EBP dst: EBX dst: EDX dst: ECX dst: EAX ">...</span></dd>
<dt>Opcode</dt>
<dd>0x61</dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3195.htm">t3195</a>
</dd>
</dl><pre>
IigPOPAD:: PROC
    IiSuffixed POPA,D
 ENDP IigPOPAD::
</pre>

<dl id="IigPOPF">
<dt><a href="#IigHandlers">&uarr; POPF</a></dt>
<dd>Pop Stack into FLAGS Register</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/POPF:POPFD:POPFQ.html">POPF</a></dd>
<dt>Category</dt>
<dd>gen,stack flgctrl</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: wo, address: F">Fwo</span></i></b> | <b><i><span title="nr: -, group: -, type: ws, address: F">Fws</span></i></b></dd>
<dt>Opcode</dt>
<dd>0x9D | 0x9D</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3195.htm">t3195</a>
</dd>
</dl><pre>
IigPOPF:: PROC
    IiDataSize UseSegment=ON
    IiRemoveREXW
    IiEmitOpcode 0x9D
    IiDispatchFormat none
.none:RET
 ENDP IigPOPF::
</pre>

<dl id="IigPOPFW">
<dt><a href="#IigPOPF">&uarr; POPFW</a></dt>
<dd>Pop WORD Flags</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3195.htm">t3195</a>
</dd>
</dl><pre>
IigPOPFW:: PROC
    IiSuffixed POPF,W
 ENDP IigPOPFW::
</pre>

<dl id="IigPOPFD">
<dt><a href="#IigPOPF">&uarr; POPFD</a></dt>
<dd>Pop DWORD EFlags</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/POPF:POPFD:POPFQ.html">POPFD</a></dd>
<dt>Category</dt>
<dd>gen,stack flgctrl</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: do, address: F">Fdo</span></i></b></dd>
<dt>Opcode</dt>
<dd>0x9D</dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3195.htm">t3195</a>
</dd>
</dl><pre>
IigPOPFD:: PROC
    IiSuffixed POPF,D
 ENDP IigPOPFD::
</pre>

<dl id="IigPOPFQ">
<dt><a href="#IigPOPF">&uarr; POPFQ</a></dt>
<dd>Pop QWORD RFlags</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/POPF:POPFD:POPFQ.html">POPFQ</a></dd>
<dt>Category</dt>
<dd>gen,stack flgctrl</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: qs, address: F">Fqs</span></i></b></dd>
<dt>Opcode</dt>
<dd>0x9D</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3195.htm">t3195</a>
</dd>
</dl><pre>
IigPOPFQ:: PROC
    IiSuffixed POPF,Q
 ENDP IigPOPFQ::
</pre>

<dl id="IigMOV">
<dt><a href="#IigHandlers">&uarr; MOV</a></dt>
<dd>Copy to destination from source</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/MOV.html">MOV (general-purpose registers)</a>
<br/><a class="EXTW" href="http://www.felixcloutier.com/x86/MOVQ.html">MOVQ (XMM registers)</a>
<br/><a class="EXTW" href="http://www.felixcloutier.com/x86/MOV-1.html">MOV (control registers)</a>
<br/><a class="EXTW" href="http://www.felixcloutier.com/x86/MOV-2.html">MOV (debug registers)</a></dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,Gb | <b>Evqp</b>,Gvqp | <b>Gb</b>,Eb | <b>Gvqp</b>,Evqp | <b>Mw</b>,Sw | <b>Rvqp</b>,Sw | <b>Sw</b>,Ew | <b><span title="nr: 0, group: gen, type: b, address: -">AL</span></b>,Ob | <b><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></b>,Ovqp | <b>Ob</b>,<span title="nr: 0, group: gen, type: b, address: -">AL</span> | <b>Ovqp</b>,<span title="nr: 0, group: gen, type: vqp, address: -">rAX</span> | <b>Zb</b>,Ib | <b>Zvqp</b>,Ivqp | <b>Eb</b>,Ib | <b>Evqp</b>,Ivds | <b>Rd</b>,Cd | <b>Hd</b>,Cd | <b>Rq</b>,Cq | <b>Hq</b>,Cq | <b>Rd</b>,Dd | <b>Hd</b>,Dd | <b>Rq</b>,Dq | <b>Hq</b>,Dq | <b>Cd</b>,Rd | <b>Cd</b>,Hd | <b>Cq</b>,Rq | <b>Cq</b>,Hq | <b>Dd</b>,Rd | <b>Dq</b>,Hq | <b>Dq</b>,Rq | <b>Dq</b>,Hq | <b>Rd</b>,Td | <b>Hd</b>,Td | <b>Td</b>,Rd | <b>Td</b>,Hd</dd>
<dt>Opcode</dt>
<dd>0x88 ^dw /r | 0x89 ^dW /r | 0x8A ^Dw /r | 0x8B ^Dw /r | 0x8C ^d /r | 0x8C ^d /r | 0x8E ^D /r | 0xA0 ^w | 0xA1 ^W | 0xA2 ^w | 0xA3 ^W | 0xB0 ^+r | 0xB8 ^+r | 0xC6 ^w /0 | 0xC7 ^W /0 | 0x0F20 /r | 0x0F20 /r | 0x0F20 /r | 0x0F20 /r | 0x0F21 /r | 0x0F21 /r | 0x0F21 /r | 0x0F21 /r | 0x0F22 /r | 0x0F22 /r | 0x0F22 /r | 0x0F22 /r | 0x0F23 /r | 0x0F23 /r | 0x0F23 /r | 0x0F23 /r | 0x0F24 /r | 0x0F24 /r | 0x0F26 /r | 0x0F26 /r</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3031.htm">t3031</a>
<a class="EXT" href="../eatests/t3032.htm">t3032</a>
<a class="EXT" href="../eatests/t3033.htm">t3033</a>
<a class="EXT" href="../eatests/t3041.htm">t3041</a>
<a class="EXT" href="../eatests/t3042.htm">t3042</a>
<a class="EXT" href="../eatests/t3043.htm">t3043</a>
</dd>
</dl><pre>
IigMOV:: PROC
       IiAllowModifier CODE, DISP, ADDR, IMM
       Dispatch DL,imm,Sreg,mmx,xmm        ; Auxilliary format dispatcher of the last operand.
       Dispatch DH,Sreg,mmx,xmm            ; Auxilliary format dispatcher of the last but one operand.
       IiDataSize
       IiDispatchFormat                    \ Regular format dispatcher.
       r8.r8, r16.r16, r32.r32, r64.r64,   \
       r8.m8, r16.m16, r32.m32, r64.m64,   \
       m8.r8, m16.r16, m32.r32, m64.r64,   \
       r32.ctr, r64.ctr, ctr.r32, ctr.r64, \
       r32.ct8, r64.ct8, ct8.r32, ct8.r64, \
       r32.dgr, r64.dgr, dgr.r32, dgr.r64, \
       r32.tsr, tsr.r32
.mr8L: IiEncoding CODE=LONG
.mr8:  IiEmitOpcode 0x88
       IiOpEn MR
       IiModRM /r
       RET
.rm8L: IiEncoding CODE=LONG
       IiEmitOpcode 0x8A
       IiOpEn RM
       IiModRM /r
       RET
.r8.r8:IiDispatchCode LONG=.rm8L:
.mr8S: IiEncoding CODE=SHORT
       JMP .mr8:
.r8.m8:IiDispatchNotAccum Operand1, .rm8L:
       IiDispSize Operand2
       JC .rm8L:
       IiAllowPrefix SegAny086
       IiEncoding CODE=SHORT
       IiEmitOpcode 0xA0
       RET
.m8.r8:IiDispatchNotAccum Operand2, .mr8S:
       IiDispatchCode LONG=.mr8L:
       IiDispSize Operand1
       JC .mr8S:
       IiAllowPrefix SegAny086
       IiEncoding CODE=SHORT
       IiEmitOpcode 0xA2
       RET
.mrWL: IiEncoding CODE=LONG
.mrW:  IiEmitOpcode 0x89
       IiOpEn MR
       IiModRM /r
       RET
.rmWL: IiEncoding CODE=LONG
       IiEmitOpcode 0x8B
       IiOpEn RM
       IiModRM /r
       RET
.r16.r16:
.r32.r32:
.r64.r64:
       IiDispatchCode LONG=.rmWL:
.mrWS: IiEncoding CODE=SHORT
       JMP .mrW:
.r16.m16:
.r32.m32:
.r64.m64:
       IiDispatchNotAccum Operand1, .rmWL:
       IiDispSize Operand2
       JC .rmWL:
       IiAllowPrefix SegAny086
       IiEncoding CODE=SHORT
       IiEmitOpcode 0xA1
       MOV ECX,[EDI+II.Operand2.Status]
       JNSt ECX,expSegmPres,.R5:
       AND ECX,expSegm
       SHR ECX,24
       CMP CL,3
       JE .R5:
       MOV EAX,iiPfxSEGES
       SHL EAX,CL
       SetSt [EDI+II.PfxEmitted],EAX
.R5:   RET
.m16.r16:
.m32.r32:
.m64.r64:
       IiDispatchNotAccum Operand2, .mrWL:
       IiDispSize Operand1
       JC  .mrWL:
       IiAllowPrefix SegAny086
       IiEncoding CODE=SHORT
       IiEmitOpcode 0xA3
       RET
.r32.ct8:
       IiRequire AMD
       IiAllowPrefix LOCK
       IiEmitPrefix LOCK
       IiRemoveREXR
.r32.ctr:
       IiAbortIf64
  .rc: IiEmitOpcode 0x0F,0x20
       IiOpEn MR
       IiModRM /r
       IiRemoveREXW
       IiRemoveOTOGGLE
       RET
.r64.ct8:
.r64.ctr:
       IiAbortIfNot64
       JMP .rc:
.ct8.r32:
       IiRequire AMD
       IiAllowPrefix LOCK
       IiEmitPrefix LOCK
       IiRemoveREXR
.ctr.r32:
       IiAbortIf64
 .cr:  IiEmitOpcode 0x0F,0x22
       IiOpEn RM
       IiModRM /r
       IiRemoveREXW
       IiRemoveOTOGGLE
       RET
.ct8.r64:
.ctr.r64:
       IiAbortIfNot64
       JMP .cr:
.r32.dgr:
       IiAbortIf64
  .rd: IiEmitOpcode 0x0F,0x21
       IiOpEn MR
       IiModRM /r
       IiRemoveREXW
       IiRemoveOTOGGLE
       RET
.r64.dgr:
       IiAbortIfNot64
       JMP .rd:
.dgr.r32:
       IiAbortIf64
  .dr: IiEmitOpcode 0x0F,0x23
       IiOpEn RM
       IiModRM /r
       IiRemoveREXW
       IiRemoveOTOGGLE
       RET 
.dgr.r64:
       IiAbortIfNot64
       JMP .dr:
.r32.tsr:
       IiAbortIf64
       IiEmitOpcode 0x0F,0x24
       IiOpEn MR
       IiModRM /r
       IiRemoveOTOGGLE
       RET 
.tsr.r32:              
       IiAbortIf64
       IiEmitOpcode 0x0F,0x26
       IiOpEn RM
       IiModRM /r
       IiRemoveOTOGGLE
       RET 
.imm:  IiOpEn M                                  ; The last MOV operand is immediate.
       IiImmSize Operand2
       MOV EAX,[EBX+STM.Section]                 ; Current section.
       CMPD [EDI+II.Operand2.Seg],0
       JE .is:                                   ; If scalar immediate, no reloc.
       JSt [EDI+II.Operand2.Status],expPara,.ig:
       IiReloc iiRelocImmAbs,Operand2
       JMP .is:
  .ig: IiReloc iiRelocPara,Operand2
  .is: IiDataSize Operand1, SpecifyMem=ON
       IiDispatchFormat r8.imm, r16.imm, r32.imm, r64.imm,  \
                        m8.imm, m16.imm, m32.imm, m64.imm
.m8.imm:
       IiEmitImm Operand2, BYTE
       IiEncoding CODE=LONG
       IiEmitOpcode 0xC6
       IiModRM /0
       RET
.r8.imm:
       IiDispatchCode LONG=.m8.imm:
       IiEncoding CODE=SHORT
       SetSt [EDI+II.Ppg],iiPpgMod10 ; Change ModRM byte 0xF0+r to opcode byte 0xB0+r.
       IiModRM /6
       IiEmitImm Operand2, BYTE
       RET                                
.m16.imm:
       IiEmitImm Operand2, WORD
  .CL: IiEncoding CODE=LONG
       IiEmitOpcode 0xC7
       IiModRM /0
       RET
.r64.imm:
       CMPD [EDI+II.Operand2.Seg],0
       JZ .sc:
       JSt [EDI+II.MfgExplicit],iiMfgCODE_LONG|iiMfgIMM_DWORD,.sc:
       JMP .IQ:  ; MOV r64,pointer defaults to IMM=QWORD.
  .sc: JSt [EDI+II.MfgExplicit],iiMfgIMM_QWORD,.IQ:
       CMPD [EDI+II.Operand2.High],0
       JNZ .nd:
       JSt [EDI+II.MfgExplicit],iiMfgCODE_LONG,.nd:
       CMPD [EDI+II.Operand2.Seg],0
       JZ .ID:
  .nd: MOV EAX,[EDI+II.Operand2.Low]
       CDQ ; Sign-extend EAX to EDX:EAX.
       CMP EDX,[EDI+II.Operand2.High]
       JNE .IQ:
       JSt [EDI+II.MfgExplicit],iiMfgCODE_SHORT,.IQ:
.m32.imm:
.m64.imm:  
       IiEmitImm Operand2, DWORD
       JMP .CL:
.r16.imm:
       IiDispatchCode LONG=.m16.imm:
       IiEmitImm Operand2, WORD
  .CS: IiEncoding CODE=SHORT
       SetSt [EDI+II.Ppg],iiPpgMod10             ; Change ModRM byte 0xF8+r to opcode byte 0xB8+r.
       IiModRM /7 
       RET                         
.r32.imm:
       IiDispatchCode LONG=.m32.imm:
  .ID: IiEmitImm Operand2, DWORD
       IiRemoveREXW
       JMP .CS:
  .IQ: IiEmitImm Operand2, QWORD
       JMP .CS:

.Sreg: IiDataSize UseSegment=ON
       IiDispatchFormat r16.Sreg, r32.Sreg, r64.Sreg, \
                        m16.Sreg, m32.Sreg, m64.Sreg, \
                        Sreg.r16, Sreg.r32, Sreg.r64, \
                        Sreg.m16, Sreg.m32, Sreg.m64
.r16.Sreg:
.r32.Sreg:
.r64.Sreg:
.m16.Sreg:
.m32.Sreg:
.m64.Sreg:
       IiEmitOpcode 0x8C
       IiOpEn MR
       IiModRM /r
       RET
.Sreg.r16:
.Sreg.r32:
.Sreg.r64:
.Sreg.m16:
.Sreg.m32:
.Sreg.m64:
       RstSt [EDI+II.MfgEmitted],iiMfgDATA_Mask
       IiEncoding DATA=WORD
       CMPB [EDI+II.Operand1.Low],iiReg_SEG+1 ; Check if Operand1 is CS.
       IiAbort cc=E,'6537' ; MOV CS / POP CS is an invalid operation.
       IiEmitOpcode 0x8E
       IiOpEn RM
       IiModRM /r
       IiRemoveREXW
       IiRemoveOTOGGLE
       RET
.mmx:    ; Suffix D or Q is mandatory when copying to/from MMX register.
         IiEmitOpcode 0x0F
         IiModRM /r
         IiDispatchSuffix D=.mmxD:, Q=.mmxQ:
.E7513:  IiAbort '7513' ; This operand combination requires mnemonic suffix ~D or ~Q.
.mmxD:   IiEncoding DATA=DWORD,CODE=SHORT
         IiDispatchFormat mmx.r32, r32.mmx, mmx.mem, mem.mmx
.mmx.r32:IiEmitOpcode 0x6E
         IiOpEn RM
         RET
.r32.mmx:IiEmitOpcode 0x7E
         IiOpEn MR
         RET
.mmxQ:   IiEncoding DATA=QWORD
         IiDispatchFormat mmx.mmx, mmx.r64, r64.mmx, mmx.mem, mem.mmx
.mmx.r64:IiEncoding CODE=LONG
         IiEmitPrefix REX.W
         IiEmitOpcode 0x6E
         IiOpEn RM
         RET
.mmx.mem:IiDispatchSuffix D=.mmx.r32:
         IiDispatchCode LONG=.mmx.r64:
         IiEncoding CODE=SHORT
         IiEmitOpcode 0x6F
         IiOpEn RM
         RET
.r64.mmx:IiEncoding CODE=LONG
         IiEmitPrefix REX.W
         IiEmitOpcode 0x7E
         IiOpEn MR
         RET
.mem.mmx:IiDispatchSuffix D=.r32.mmx:
         IiDispatchCode LONG=.r64.mmx:
         IiEncoding CODE=SHORT
.memmm:  IiEmitOpcode 0x7F
         IiOpEn MR
         RET
.memmmL: IiEncoding CODE=LONG
         JMP .memmm:
.mmx.mmx:IiDispatchCode LONG=.memmmL:
         IiEncoding CODE=SHORT
         IiEmitOpcode 0x6F
         IiOpEn RM
         RET
.xmm:    ; Suffix D or Q is mandatory when copying to/from XMM register.
         IiEmitOpcode 0x0F
         IiModRM /r
         IiDispatchSuffix D=.xmmD:, Q=.xmmQ:
         JMP .E7513: ; This operand combination requires mnemonic suffix ~D or ~Q.
.xmmD:   IiEncoding DATA=DWORD,CODE=SHORT
         IiDispatchFormat xmm.r32, r32.xmm, xmm.mem, mem.xmm
.xmm.r32:IiEmitPrefix OTOGGLE
         IiEmitOpcode 0x6E
         IiOpEn RM
         RET
.r32.xmm:IiEmitPrefix OTOGGLE
         IiEmitOpcode 0x7E
         IiOpEn MR
         RET
.xmmQ:   IiEncoding DATA=QWORD
         IiDispatchFormat xmm.xmm, xmm.r64, r64.xmm, xmm.mem, mem.xmm
.xmm.r64:IiEncoding CODE=LONG
         IiEmitPrefix OTOGGLE, REX.W
         IiEmitOpcode 0x6E
         IiOpEn RM
         RET
.xmm.mem:IiDispatchSuffix D=.xmm.r32:
         IiDispatchCode LONG=.xmm.r64:
         IiEncoding CODE=SHORT
         IiEmitPrefix REPE
         IiEmitOpcode 0x7E
         IiOpEn RM
         RET
.r64.xmm:IiEncoding CODE=LONG
         IiEmitPrefix OTOGGLE, REX.W
         IiEmitOpcode 0x7E
         IiOpEn MR
         RET
.mem.xmm:IiDispatchSuffix D=.r32.xmm:
         IiDispatchCode LONG=.r64.xmm:
         IiEncoding CODE=SHORT
.memxmm: IiEmitPrefix OTOGGLE
         IiEmitOpcode 0xD6
         IiOpEn MR
         RET
.memxmmL:IiEncoding CODE=LONG
         JMP .memxmm:
.xmm.xmm:IiDispatchCode LONG=.memxmmL:
         IiEncoding CODE=SHORT
         IiEmitPrefix REPE
         IiEmitOpcode 0x7E
         IiOpEn RM
         RET
 ENDP IigMOV::
</pre>

<dl id="IigMOVB">
<dt><a href="#IigMOV">&uarr; MOVB</a></dt>
<dd>Copy BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3041.htm">t3041</a>
<a class="EXT" href="../eatests/t3042.htm">t3042</a>
<a class="EXT" href="../eatests/t3043.htm">t3043</a>
</dd>
</dl><pre>
IigMOVB:: PROC
    IiSuffixed MOV,B
 ENDP IigMOVB::
</pre>

<dl id="IigMOVW">
<dt><a href="#IigMOV">&uarr; MOVW</a></dt>
<dd>Copy WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3041.htm">t3041</a>
<a class="EXT" href="../eatests/t3042.htm">t3042</a>
<a class="EXT" href="../eatests/t3043.htm">t3043</a>
</dd>
</dl><pre>
IigMOVW:: PROC
    IiSuffixed MOV,W
 ENDP IigMOVW::
</pre>

<dl id="IigMOVD">
<dt><a href="#IigMOV">&uarr; MOVD</a></dt>
<dd>Copy DWORD</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/MOVD:MOVQ.html">MOVD</a></dd>
<dt>Category</dt>
<dd>mmx,datamov</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Ed | <b>Pq</b>,Ed | <b>Vdq</b>,Ed | <b>Vdq</b>,Ed | <b>Ed</b>,Pq | <b>Ed</b>,Pq | <b>Ed</b>,Vdq | <b>Ed</b>,Vdq</dd>
<dt>Opcode</dt>
<dd>0x0F6E /r | 0x0F6E /r | 0x660F6E /r | 0x660F6E /r | 0x0F7E /r | 0x0F7E /r | 0x660F7E /r | 0x660F7E /r</dd>
<dt>CPU</dt>
<dd>PX+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3041.htm">t3041</a>
<a class="EXT" href="../eatests/t3042.htm">t3042</a>
<a class="EXT" href="../eatests/t3043.htm">t3043</a>
</dd>
</dl><pre>
IigMOVD:: PROC
    IiSuffixed MOV,D
 ENDP IigMOVD::
</pre>

<dl id="IigMOVQ">
<dt><a href="#IigMOV">&uarr; MOVQ</a></dt>
<dd>Copy QWORD</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/MOVQ.html">MOVQ</a></dd>
<dt>Category</dt>
<dd>mmx,datamov</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Eqp | <b>Vdq</b>,Eqp | <b>Eqp</b>,Pq | <b>Eqp</b>,Edq | <b>Pq</b>,Qq | <b>Vq</b>,Wq | <b>Qq</b>,Pq | <b>Wq</b>,Vq</dd>
<dt>Opcode</dt>
<dd>0x0F6E /r | 0x660F6E /r | 0x0F7E /r | 0x660F7E /r | 0x0F6F /r | 0xF30F7E /r | 0x0F7F /r | 0x660FD6 /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_MOVQ_0F6E_660F6E_0F7E_660F7E"><sup>31</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3041.htm">t3041</a>
<a class="EXT" href="../eatests/t3042.htm">t3042</a>
<a class="EXT" href="../eatests/t3043.htm">t3043</a>
</dd>
</dl><pre>
IigMOVQ:: PROC
    IiSuffixed MOV,Q
 ENDP IigMOVQ::
</pre>

<dl id="IigMOVSX">
<dt><a href="#IigHandlers">&uarr; MOVSX</a></dt>
<dd>Copy Sign-Extended</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/MOVSX:MOVSXD.html">MOVSX</a></dd>
<dt>Category</dt>
<dd>gen,conver</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Eb | <b>Gvqp</b>,Ew</dd>
<dt>Opcode</dt>
<dd>0x0FBE ^Dw /r | 0x0FBF ^DW /r</dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3201.htm">t3201</a>
</dd>
</dl><pre>
IigMOVSX:: PROC
         MOV AL,0xBE ; Opcode for BYTE version of MOVSX.
.op:     IiRequire 386
         IiOpEn RM
         IiModRM /r
         CMP DH,r16
         JNE .10:
         IiDataSize BYTE
         JMP .20:
    .10: IiDataSize Operand2 ; Displayed operand-size is specified by Operand2/suffix/modifier. 
    .20: IiRemoveOTOGGLE     ; Prefixes-encoded operand-size will be specified later by Operand1. 
         IiRemoveREXW
         IiDispatchFormat r16.r8,r16.m8, r32.r8,r32.m8,r32.r16,r32.m16, \
                          r64.r8,r64.m8,r64.r16,r64.m16,r64.r32,r64.m32
.r16.r8:
.r16.m8: IiDispatchWidth BITS16=.Op:
.OTOGGLE:IiEmitPrefix OTOGGLE
  .Op:   IiEmitOpcode 0x0F,EAX
         RET
.r32.r16:
.r32.m16:INC EAX ; Change opcode from 0xBE to 0xBF (MOVSX) or from 0xB6 to 0xB7 (MOVZX).
.r32.r8:
.r32.m8: IiDispatchWidth BITS16=.OTOGGLE:
         JMP .Op:
.r64.r16:
.r64.m16:INC EAX ; Change opcode from 0xBE to 0xBF.
.r64.r8:
.r64.m8: IiEmitPrefix REX.W
         JMP .Op:
 .MOVZXD:IiEmitOpcode 0x8B ; MOVZXD r64,r/m32 encode as MOV r32,r/m32 in 64bit mode.
         RET        
.r64.r32:
.r64.m32:CMP AL,0xB6
         JE .MOVZXD:
         IiEmitPrefix REX.W
         IiEmitOpcode 0x63 ; MOVSXD r64,r/m32
         RET  
     ENDP IigMOVSX::
</pre>     

<dl id="IigMOVSXB">
<dt><a href="#IigMOVSX">&uarr; MOVSXB</a></dt>
<dd>Copy Sign-extended BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3201.htm">t3201</a>
</dd>
</dl><pre>
IigMOVSXB:: PROC
       IiSuffixed MOVSX,B
     ENDP IigMOVSXB::
</pre>     

<dl id="IigMOVSXW">
<dt><a href="#IigMOVSX">&uarr; MOVSXW</a></dt>
<dd>Copy Sign-extended WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3201.htm">t3201</a>
</dd>
</dl><pre>
IigMOVSXW:: PROC
       IiSuffixed MOVSX,W
     ENDP IigMOVSXW::
</pre>     

<dl id="IigMOVSXD">
<dt><a href="#IigMOVSX">&uarr; MOVSXD</a></dt>
<dd>Copy Sign-Extended DWORD</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/MOVSX:MOVSXD.html">MOVSXD</a></dd>
<dt>Category</dt>
<dd>gen,conver</dd>
<dt>Operands</dt>
<dd><b>Gdqp</b>,Ed</dd>
<dt>Opcode</dt>
<dd>0x63 ^D /r</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3201.htm">t3201</a>
</dd>
</dl><pre>
IigMOVSXD:: PROC
       IiSuffixed MOVSX,D
     ENDP IigMOVSXD::
</pre>     

<dl id="IigMOVZX">
<dt><a href="#IigMOVSX">&uarr; MOVZX</a></dt>
<dd>Copy Zero-Extended</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/MOVZX.html">MOVZX</a></dd>
<dt>Category</dt>
<dd>gen,conver</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Eb | <b>Gvqp</b>,Ew</dd>
<dt>Opcode</dt>
<dd>0x0FB6 ^Dw /r | 0x0FB7 ^DW /r</dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3201.htm">t3201</a>
</dd>
</dl><pre>
IigMOVZX:: PROC
         MOV AL,0xB6 ; Opcode for BYTE version of MOVZX.
         JMP IigMOVSX.op:
     ENDP IigMOVZX::
</pre>     

<dl id="IigMOVZXB">
<dt><a href="#IigMOVZX">&uarr; MOVZXB</a></dt>
<dd>Copy Zero-extended BYTE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3201.htm">t3201</a>
</dd>
</dl><pre>
IigMOVZXB:: PROC
       IiSuffixed MOVZX,B
     ENDP IigMOVZXB::
</pre>     

<dl id="IigMOVZXW">
<dt><a href="#IigMOVZX">&uarr; MOVZXW</a></dt>
<dd>Copy Zero-extended WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3201.htm">t3201</a>
</dd>
</dl><pre>
IigMOVZXW:: PROC
       IiSuffixed MOVZX,W
     ENDP IigMOVZXW::
</pre>

<dl id="IigMOVZXD">
<dt><a href="#IigHandlers">&uarr; MOVZXD</a></dt>
<dd>Copy Zero-extended DWORD</dd>
<dt>Operands</dt>
<dd>r64, r/m32</dd>
<dt>Opcode</dt>
<dd>89</dd>
<dt>CPU</dt>
<dd>X64</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3201.htm">t3201</a>
</dd>
</dl><pre>
IigMOVZXD:: PROC
    IiSuffixed MOVZX,D
  ENDP IigMOVZXD::
</pre>     

<dl id="IigUMOV">
<dt><a href="#IigHandlers">&uarr; UMOV</a></dt>
<dd>User Move Data</dd>
<dt>Category</dt>
<dd>UNDOC</dd>
<dt>Operands</dt>
<dd>r,r/mem || r/mem,r</dd>
<dt>Opcode</dt>
<dd>0x0F10 || 0x0F11 || 0x0F12 || 0x0F13</dd>
<dt>CPU</dt>
<dd>386 AMD</dd>
<dt>Documented</dt>
<dd><a class="EXTW" href="http://www.rcollins.org/secrets/opcodes/UMOV.html">rcollins.org</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3148.htm">t3148</a>
</dd>
</dl><pre>
IigUMOV:: PROC
    IiRequire 386,AMD,UNDOC
    IiAllowModifier CODE
    IiDataSize SpecifyMem=OFF
    IiEmitOpcode 0x0F
    IiModRM /r
    IiDispatchFormat r8.r8,r8.mem,mem.r8,r16.r16,r16.mem,mem.r16, \
                     r32.r32,r32.mem,mem.r32,r64.r64,r64.mem,mem.r64
.r8.mem:
    IiEncoding CODE=LONG
    IiOpEn RM
    IiEmitOpcode 0x12
    RET
.r8.r8:
    IiDispatchCode LONG=.r8.mem:
.mem.r8:
    IiEncoding CODE=SHORT
    IiOpEn MR
    IiEmitOpcode 0x10
    RET
.r16.mem:
.r32.mem:
.r64.mem:
    IiEncoding CODE=LONG
    IiOpEn RM
    IiEmitOpcode 0x13
    RET
.r16.r16:
.r32.r32:
.r64.r64:
    IiDispatchCode LONG=.r16.mem:
.mem.r16:
.mem.r32:
.mem.r64:
    IiEncoding CODE=SHORT
    IiOpEn MR
    IiEmitOpcode 0x11
    RET
 ENDP IigUMOV::
</pre>

<dl id="IigCALL">
<dt><a href="#IigHandlers">&uarr; CALL</a></dt>
<dd>Call Procedure</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CALL.html">CALL</a></dd>
<dt>Category</dt>
<dd>gen,branch stack</dd>
<dt>Operands</dt>
<dd>Jvds | Ev | Eq</dd>
<dt>Opcode</dt>
<dd>0xE8 | 0xFF /2 | 0xFF /2</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_short_near_jmp"><sup>41</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3161.htm">t3161</a>
<a class="EXT" href="../eatests/t3162.htm">t3162</a>
<a class="EXT" href="../eatests/t3163.htm">t3163</a>
</dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="ii.htm#IiRelocSizeRIP">IiRelocSizeRIP</a>
</dd>
</dl><pre>
IigCALL:: PROC
     IiAllowModifier DIST, DATA
     IiOpEn M
     IiDataSize Operand1,UseSegment=ON,SpecifyMem=OFF
     IiRemoveREXW
     IiDispatchFormat imm,mem,far,r16,r32,r64
.r32:
.r16:IiAbortIf64
 .mn:IiEncoding DIST=NEAR                                            ; <b>Indirect absolute CALLN [mem]</b> or CALLN reg.
     IiEmitOpcode 0xFF
     IiModRM /2
     RET
.r64:IiAbortIfNot64
     JMP .mn:
.mem:IiDispatchDist FAR=.mf:
     IiDispatchData QWORD=.r64:
     JMP .r32:
 .mf:IiEncoding DIST=FAR                                             ; <b>Indirect absolute CALLF [mem]</b>.
     IiEmitOpcode 0xFF
     IiModRM /3
     IiDispatchData QWORD=.RXW:
     RET
.RXW:IiEmitPrefix REX.W
     RET
.imm: ; <b>Direct CALL immediate</b> address. May be changed to FAR when groups do not match or on explicit request or when the target is far PROC.
     RstSt [EDI+II.MfgEmitted],iiMfgDATA_Mask                        ; Operand-size detected by IiDataSize from segment-width may be overwritten.
     IiDispatchDist FAR=.far:,NEAR=.in:                              ; Dispatch explicit suffixed or explicit DIST= request.
     JSt [EDI+II.Operand1.Status],expFar,.far:                       ; If the target is PROC DIST=FAR.
 .in:IiDispatchLocation [EDI+II.Operand1.Seg],RIP=.rip:, NEAR=.near: ; Dispatch by segments difference.
     IiDispatchDist NEAR=.near:
.far:; <b>FAR absolute or relative transfer</b>. Target is specified as
     ; 1) scalar,  direct  imm  far, encoded as <code>CALLF immPara:immOffset</code>; no relocation, or
     ; 2) explicit DIST=FAR request, encoded as <code>CALLF [PARA#target]:{OFFSET#target}</code>; relocPara+relocAbsVA.
     IiAbortIf64                                                     ; <b>Direct absolute CALLF segregvalue:offset</b> (immediate value).
     IiEmitOpcode 0x9A
     IiImmSize Operand1                                              ; Prepare operand and propose imm size into II.MfgImplicit by the operand magnitude.
     CMPB [EDI+II.Operand1.Status],'F'                               ; Is the target specified as absolute scalars?
     JE .fAbs:
     IiReloc iiRelocImmAbs+iiRelocPara,Operand1
.fAbs:SetSt [EDI+II.Ppg],iiPpgPara                                   ; Ask IiFlush to emit 16bit paragraph address from II.Para.
     IiDispatchWidth BITS32=.f32:
     ; Calling from 16bit segment.
     IiDispatchData WORD=.fW:, DWORD=.fOD:                           ; If explicit DATA= modifier in 16bit mode.
     IiDispatchImm     DWORD=.fOD:                                   ; If explicit IMM=DWORD modifier in 16bit mode.
     IiDispatchImmSize DWORD=.fOD:                                   ; If immediate offset over 64K in 16bit mode.
.fW: IiEncoding DIST=FAR,ADDR=ABS,DATA=WORD,IMM=WORD
     RET
.fOW:IiEmitPrefix OTOGGLE
     JMP .fW:
.f32:IiDispatchData DWORD=.fD:, WORD=.fOW:                           ; Calling from 32bit segment.
     IiDispatchImm  WORD=.fOW:                                       ; If explicitly requested IMM=WORD.
.fD: IiEncoding DIST=FAR,ADDR=ABS,DATA=DWORD,IMM=DWORD
     RET
.fOD:IiEmitPrefix OTOGGLE
     JMP .fD:
.near: ; <b>Direct relative CALLN offset</b> with relocation, resolvable at link or marshal time.
     IiDispatchDist FAR=.far:
     IiImmSize Operand1
     IiReloc iiRelocImmRel,Operand1
     MOV EAX,[EDI+II.MfgImplicit]
     ; Immediate number or address is still stored in [EDI+II.Imm] as an original absolute value.
     JMP .n:
.rip: ; <b>Direct rIP-relative CALLN offset</b>, relocation resolved at assembly time.
     IiImmSize Operand1
     IiReloc iiRelocImmRIP                                           ; The actual RIP subtraction and emitting will take place in IiFlush at asm-time.
     Invoke IiRelocSizeRIP::,EDI,EBX                                 ; Inspect Imm-RIP magnitude and return it as iiMfgIMM_Mask to EAX.
.n:  IiEmitOpcode 0xE8
     ; Returned operand-size in EAX can be autoprolonged from 16 bits when relative target distance exceedes 64K,
     ; or if explicitly requested IMM=DWORD or DATA=DWORD, or if in 64bit mode.
     ; Immediate offset (number or address) is still stored in [EDI+II.Imm] as an original absolute value,
     ; the actual RIP subtraction and emitting will take place in IiFlush.
     IiDispatchWidth BITS16=.n16, BITS64=.n64:
     ; Current mode is 32bit.
     JSt EAX,iiMfgIMM_DWORD|iiMfgIMM_QWORD,.nD:                      ; The distance is above 64K, it cannot be overriden to 16bit operand-size.
     IiDispatchData DWORD=.nD:, WORD=.nOW:                           ; Accept explicit DATA= modifier.
     IiDispatchImm  WORD=.nOW:                                       ; Accept explicit IMM= modifier.
.nD: IiEncoding DIST=NEAR,ADDR=REL,DATA=DWORD,IMM=DWORD
     RET
.n64:IiEncoding DIST=NEAR,ADDR=REL,DATA=QWORD,IMM=DWORD
     IiAbortIfNot64
     RET
.n16:; Current segment is 16bit.
     JSt EAX,iiMfgIMM_DWORD|iiMfgIMM_QWORD,.nOD:                     ; If the distance is above 64K, it will be prolonged to 32bit operand-size.
     IiDispatchData DWORD=.nOD:, QWORD=.n64:                         ; Accept explicit DATA= modifier.
     IiDispatchImm  DWORD=.nOD:                                      ; Accept explicit IMM= modifier.
.nW: IiEncoding DIST=NEAR,ADDR=REL,DATA=WORD,IMM=WORD
     RET
.nOW:IiEmitPrefix OTOGGLE
     JMP .nW:
.nOD:IiEmitPrefix OTOGGLE
     JMP .nD:
    ENDP IigCALL
</pre>

<dl id="IigCALLN">
<dt><a href="#IigCALL">&uarr; CALLN</a></dt>
<dd>Near procedure call</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3161.htm">t3161</a>
<a class="EXT" href="../eatests/t3162.htm">t3162</a>
<a class="EXT" href="../eatests/t3163.htm">t3163</a>
</dd>
</dl><pre>
IigCALLN:: PROC
    IiSuffixed CALL,N
 ENDP IigCALLN::
</pre>

<dl id="IigCALLF">
<dt><a href="#IigCALL">&uarr; CALLF</a></dt>
<dd>Far procedure call</dd>
<dt>Category</dt>
<dd>gen,branch stack</dd>
<dt>Operands</dt>
<dd>Ap | Mptp</dd>
<dt>Opcode</dt>
<dd>0x9A | 0xFF /3</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3161.htm">t3161</a>
<a class="EXT" href="../eatests/t3162.htm">t3162</a>
<a class="EXT" href="../eatests/t3163.htm">t3163</a>
</dd>
</dl><pre>
IigCALLF:: PROC
    IiSuffixed CALL,F
 ENDP IigCALLF::
</pre>

<dl id="IigJMP">
<dt><a href="#IigHandlers">&uarr; JMP</a></dt>
<dd>Jump</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/JMP.html">JMP</a></dd>
<dt>Category</dt>
<dd>gen,branch</dd>
<dt>Operands</dt>
<dd>Jvds | Jbs | Ev | Eq</dd>
<dt>Opcode</dt>
<dd>0xE9 | 0xEB | 0xFF /4 | 0xFF /4</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_short_near_jmp"><sup>41</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3141.htm">t3141</a>
<a class="EXT" href="../eatests/t3142.htm">t3142</a>
<a class="EXT" href="../eatests/t3143.htm">t3143</a>
</dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="ii.htm#IiRelocSizeRIP">IiRelocSizeRIP</a>
</dd>
</dl><pre>
IigJMP:: PROC
     IiAllowModifier DIST, DATA
     IiOpEn M
     IiDataSize Operand1,UseSegment=ON,SpecifyMem=OFF
     IiRemoveREXW
     IiDispatchFormat imm,mem,far,r16,r32,r64
.r32:
.r16:IiAbortIf64
 .mn:IiEncoding DIST=NEAR                        ; <b>Indirect JMPN [mem] or JMPN reg</b>.
     IiEmitOpcode 0xFF
     IiModRM /4
     RET
.r64:IiAbortIfNot64
     JMP .mn:
.mem:IiDispatchDist FAR=.mf:
     IiDispatchData QWORD=.r64:
     JMP .r32:
 .mf:IiEncoding DIST=FAR                         ; <b>Indirect JMPF [mem]</b>.
     IiEmitOpcode 0xFF
     IiModRM /5
     IiDispatchData QWORD=.RXW:
     RET
.RXW:IiEmitPrefix REX.W
     RET
.imm: ; <b>Direct JMP immediate</b> address. May be changed to FAR when groups do not match or on explicit request.
     RstSt [EDI+II.MfgEmitted],iiMfgDATA_Mask    ; Operand-size detected by IiDataSize from segment-width may be overwritten.
     IiDispatchDist SHORT=.in:,NEAR=.in:,FAR=.far: ; Dispatch explicit suffixed or DIST= request.
     JSt [EDI+II.Operand1.Status],expFar,.far:   ; If the target is PROC DIST=FAR.
     ; Target distance is not explicitly specified. Use the logic in <a class="EXT" href="ii.htm#IiDispatchLocation">IiDispatchLocation</a>.
.in: IiDispatchLocation [EDI+II.Operand1.Seg],RIP=.rip:,NEAR=.near: ; Dispatch by segments difference.
.far:; <b>FAR absolute or relative transfer</b>. Target is specified as
     ; 1) scalar,  direct  imm  far, encoded as <code>JMPF immPara:immOffset ; no relocation</code>,
     ; 2) explicit DIST=FAR request, encoded as <code>JMPF PARA#target:OFFSET#target ; iiRelocFar=relocPara+relocAbsVA</code>.
     IiDispatchDist NEAR=.near:
     IiAbortIf64
     IiEmitOpcode 0xEA
     IiImmSize Operand1                          ; Prepare operand and propose imm size into II.MfgImplicit by operand magnitude.
     CMPB [EDI+II.Operand1.Status],'F'           ; Is the target specified as absolute scalars?
     JE .fAbs:
     IiReloc iiRelocFar,Operand1                 ; Jumping to a far target requires relocation of both segment:offset values.
.fAbs:SetSt [EDI+II.Ppg],iiPpgPara               ; Ask IiFlush to emit 16bit paragraph address from II.Para.
     IiDispatchWidth BITS32=.f32:
     ; Jumping from 16bit segment.
     IiDispatchData WORD=.fW:, DWORD=.fOD:       ; If explicit DATA= modifier in 16bit mode.
     IiDispatchImm     DWORD=.fOD:               ; If explicit IMM= modifier in 16bit mode.
     IiDispatchImmSize DWORD=.fOD:               ; If immediate offset over 64K in 16bit mode.
.fW: IiEncoding DIST=FAR,ADDR=ABS,DATA=WORD,IMM=WORD
     RET
.fOW:IiEmitPrefix OTOGGLE
     JMP .fW:
.f32:; Jumping from 32bit segment.
     IiDispatchData DWORD=.fD:, WORD=.fOW:
     IiDispatchImm  WORD=.fOW:                   ; If explicitly requested IMM=WORD.
.fD: IiEncoding DIST=FAR,ADDR=ABS,DATA=DWORD,IMM=DWORD
     RET
.fOD:IiEmitPrefix OTOGGLE
     JMP .fD:
.near: ; <b>Direct relative JMPN offset</b> with relocation, resolved at link time.
     IiDispatchDist FAR=.far:
     IiImmSize Operand1
     IiReloc iiRelocImmRel,Operand1
     MOV EAX,[EDI+II.MfgImplicit]
     ; Immediate number or address is still stored in [EDI+II.Imm] as an original absolute value,
     ;   the actual RIP subtraction and emitting will take place in IiFlush.
     JMP .n:
.rip: ; <b>Direct relative short or near JMP offset</b>, relocation resolved at assembly time.
     IiImmSize Operand1
     IiReloc iiRelocImmRIP
     Invoke IiRelocSizeRIP::,EDI,EBX             ; Inspect Imm-RIP magnitude and return it as iiMfgIMM_Mask to EAX.
     JSt EAX,iiMfgIMM_BYTE, .short:
 .n: IiEmitOpcode 0xE9                           ; <b>Direct relative JMPN offset</b> word/dword with relocation, resolved at link time.
    ; Returned operand-size EAX can be autoprolonged from 16 bits when relative target distance exceedes 64K,
    ;   or if explicitly requested IMM=DWORD or DATA=DWORD, or if in 64bit mode.
    ; Immediate number or address is still stored in [EDI+II.Imm] as an original absolute value,
    ;    the actual RIP subtraction and emitting will take place in IiFlush.
     IiDispatchWidth BITS16=.n16, BITS64=.n64:
     ; Current segment is 32bit.
     JSt EAX,iiMfgIMM_DWORD|iiMfgIMM_QWORD,.nD:  ; If the distance is above 64K, it cannot be overriden to 16bit operand-size.
     IiDispatchData DWORD=.nD:, WORD=.nOW:       ; Accept explicit DATA= modifier.
     IiDispatchImm  WORD=.nOW:                   ; Accept explicit IMM= modifier.
.nD: IiEncoding DIST=NEAR,ADDR=REL,DATA=DWORD,IMM=DWORD
     RET
.n64:IiEncoding DIST=NEAR,ADDR=REL,DATA=QWORD,IMM=DWORD ; Current segment is 64bit.
     IiAbortIfNot64
     RET
.n16:; Current segment is 16bit.
     JSt EAX,iiMfgIMM_DWORD|iiMfgIMM_QWORD,.nOD: ; If the distance is above 64K, it will be prolonged to 32bit operand-size.
     IiDispatchData DWORD=.nOD:, QWORD=.n64:     ; Accept explicit DATA= modifier.
     IiDispatchImm  DWORD=.nOD:                  ; Accept explicit IMM= modifier.
.nW: IiEncoding DIST=NEAR,ADDR=REL,DATA=WORD,IMM=WORD
     RET
.nOW:IiEmitPrefix OTOGGLE
     JMP .nW:
.nOD:IiEmitPrefix OTOGGLE
     JMP .nD:
.short:
     IiDispatchDist NEAR=.n:
     IiDispatchData WORD=.n:,DWORD=.n:,QWORD=.n:
     IiDispatchImm WORD=.n:,DWORD=.n:
     IiEmitOpcode 0xEB                           ; <b>Direct relative short JMPS offset</b>. No relocation.
     IiDispatchWidth BITS64=.sQ:,BITS16=.sW:
     IiEncoding DIST=SHORT,ADDR=REL,IMM=BYTE,DATA=DWORD
     RET
 .sW:IiEncoding DIST=SHORT,ADDR=REL,IMM=BYTE,DATA=WORD
     RET
 .sQ:IiEncoding DIST=SHORT,ADDR=REL,IMM=BYTE,DATA=QWORD
     RET
 ENDP IigJMP::
</pre>

<dl id="IigJMPN">
<dt><a href="#IigJMP">&uarr; JMPN</a></dt>
<dd>Near jump</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3141.htm">t3141</a>
<a class="EXT" href="../eatests/t3142.htm">t3142</a>
<a class="EXT" href="../eatests/t3143.htm">t3143</a>
</dd>
</dl><pre>
IigJMPN:: PROC
     IiSuffixed JMP,N
 ENDP IigJMPN::
</pre>

<dl id="IigJMPF">
<dt><a href="#IigJMP">&uarr; JMPF</a></dt>
<dd>Far jump</dd>
<dt>Category</dt>
<dd>gen,branch</dd>
<dt>Operands</dt>
<dd>Ap | Mptp</dd>
<dt>Opcode</dt>
<dd>0xEA | 0xFF /5</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3141.htm">t3141</a>
<a class="EXT" href="../eatests/t3142.htm">t3142</a>
<a class="EXT" href="../eatests/t3143.htm">t3143</a>
</dd>
</dl><pre>
IigJMPF:: PROC
      IiSuffixed JMP,F
 ENDP IigJMPF::
</pre>

<dl id="IigJMPS">
<dt><a href="#IigJMP">&uarr; JMPS</a></dt>
<dd>Short jump</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3141.htm">t3141</a>
<a class="EXT" href="../eatests/t3142.htm">t3142</a>
<a class="EXT" href="../eatests/t3143.htm">t3143</a>
</dd>
</dl><pre>
IigJMPS:: PROC
      IiSuffixed JMP,S
 ENDP IigJMPS::
</pre>

<dl id="IigLOOP">
<dt><a href="#IigHandlers">&uarr; LOOP</a></dt>
<dd>Decrement count; Jump short if count!=0</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LOOP:LOOPcc.html">LOOP</a></dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 1, group: gen, type: va, address: -">eCX</span></i></b>,Jbs | <b><i><span title="nr: 1, group: gen, type: dqa, address: -">rCX</span></i></b>,Jbs</dd>
<dt>Opcode</dt>
<dd>0xE2 | 0xE2</dd>
<dt>Remark</dt>
<dd>LOOP handler is also used for instructions LOOPcc and JrCXZ.
<br/>Out of byte-range loop is replaced with three machine instructions:
<br/>LOOP $+4 ; Loop to near or far proxy JMP.
<br/>JMPS $+JMPsize ; Skip the near or far proxy jump.
<br/>JMP %1 ; Near or far proxy jump to the original target.</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3171.htm">t3171</a>
<a class="EXT" href="../eatests/t3172.htm">t3172</a>
<a class="EXT" href="../eatests/t3173.htm">t3173</a>
</dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="ii.htm#IiRelocSizeRIP">IiRelocSizeRIP</a>
</dd>
</dl><pre>
IigLOOP:: PROC
       MOV AL,0xE2 ; LOOP opcode.
.as:   ; Entry point for LOOPE, LOOPNE with AL=opcode.
       MOV ECX,sssWidthMask ; Detect address-size to ECX.
       AND ECX,[EDI+II.SssStatus]
       CMP DH,none ; When address-size is not overwritten by %2, use segment width in ECX.
       JE .op: ; If single operand version <b>LOOPcc imm</b> is used.
       ; Two-operand version <code>LOOPxx imm, rCX</code> is used.
       IiAbortIfNotCounter Operand2
       MOV ECX,EDX
       SHR EDX,8 ; Remove 2nd operand.
       Dispatch CL,r32,r16
       MOV ECX,sssWidth64
       JMP .op:
 .r32: MOV ECX,sssWidth32
       JMP .op:
 .r16: MOV ECX,sssWidth16
.op:   ; Common entry for LOOPcc and JrCXZ handlers.
       ; AL=opcode, ECX=address-size requested by loop counter width.
       IiEmitOpcode EAX
       IiDispatchWidth BITS32=.32:, BITS64=.64:
       ; Instruction in 16bit mode.
       JSt ECX,sssWidth16,.df:
       JSt ECX,sssWidth32,.ATOGGLE:
.E6731:IiAbort '6731' ; Required address width 64 can be used in 64bit segment only.
.E6733:IiAbort '6733' ; Required address width 16 cannot be used in 64bit segment.
   .32:JSt ECX,sssWidth32,.df:
       JSt ECX,sssWidth16,.ATOGGLE:
       JMP .E6731:
   .64:JSt ECX,sssWidth64,.df:
       JSt ECX,sssWidth16,.E6733:
.ATOGGLE:IiEmitPrefix ATOGGLE
   .df:IiAllowModifier DIST,DATA,IMM
       IiAllowPrefix HintAny, ATOGGLE
       IiDispatchFormat imm
.imm:  IiImmSize Operand1
       IiDispatchLocation [EDI+II.Operand1.Seg],NEAR=.proxy:,FAR=.proxy:
     ; Target is in the same segment, possibly in a short distance.
       IiDispatchDist NEAR=.proxy:,FAR=.proxy:,SHORT=.short: ; Use proxy jump when explicitly requested.
       IiDispatchData WORD=.proxy:,DWORD=.proxy,QWORD=.proxy:
       IiDispatchImm WORD=.proxy,DWORD=.proxy:
       Invoke IiRelocSizeRIP::,EDI,EBX ; Inspect Imm-RIP magnitude and set iiMfgIMM_Mask to EAX.
       JNSt EAX,iiMfgIMM_BYTE,.proxy: ; If the distance is above 127 bytes.
.short: ; Do not use proxy jum when explicitly requested DIST=SHORT.
       IiReloc iiRelocImmRIP
       IiEncoding DIST=SHORT,ADDR=REL,IMM=BYTE ; <b>Standard short relative</b> LOOP/JrCXZ.
       RET
.proxy: ; LOOP/JrCXZ to the proxy jump instead of the target.

       CMPB [EDI+II.Opcode],0xE3
       Msg cc=E, PgmStatus=pgmLastPass,'0622' ; JrCXZ out of byte range; assembled with proxy jump.
       Msg cc=NE,PgmStatus=pgmLastPass,'0621' ; LOOP out of byte range; assembled with proxy jump.

       CALL IigJMP.imm:  ; Construct the code using handler of JMP with current II object in EDI.
       DECB [EDI+II.Ppg] ; Remove opcode byte 0xE9 or 0xEA emitted by calling IigJMP.imm.
       MOV EAX,iiPpgOpcodeSizeMask
       AND EAX,[EDI+II.Ppg]
       MOV CL,[EDI+II.Opcode+EAX] ; Copy removed opcode byte 0xE9 or 0xEA to CL.
       MOV ESI,iiMfgIMM_Mask      ; Calculate size of soon-to-be-assembled JMP instruction to ESI.
       AND ESI,[EDI+II.MfgEmitted] ; Convert Imm-size to 1, 2 or 4.
       MOV EAX,[EDI+II.PfxEmitted]
       INC ESI
       JNSt EAX,iiPfxREX,.p4:
       ANDD [EDI+II.PfxEmitted],0xFFFF_FF00 ; Remove REX prefix copied to AL.
       INC ESI
  .p4: SUB EDX,EDX
       JNSt [EDI+II.PfxEmitted],iiPfxOTOGGLE, .p5:
       RstSt [EDI+II.PfxEmitted],iiPfxOTOGGLE ; Remove OTOGGLE prefix copied to DL.
       MOV DL,0x66                            ; and emit it as opcode instead.
       INC ESI
  .p5: JNSt [EDI+II.Ppg],iiPpgPara, .p6:
       ADD ESI,2
  .p6: IiEmitOpcode 0x02,0xEB,ESI ; Emit actual LOOP $+4 followed with bypassing JMPS.
       TEST EDX
       JZ .p7:
       IiEmitOpcode EDX ; Postponed OTOGGLE.
   .p7:TEST AL
       JZ .p8:
       IiEmitOpcode EAX ; Postponed REX.
   .p8:IiEmitOpcode ECX ; Postponed 0xE9 or 0xEA.
       RET ; IiFlush will arrange the actual proxy-jump target.
 ENDP IigLOOP::
</pre>

<dl id="IigLOOPE">
<dt><a href="#IigLOOP">&uarr; LOOPE</a></dt>
<dd>Decrement count; Jump short if count!=0 and ZF=1</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 1, group: gen, type: va, address: -">eCX</span></i></b>,Jbs | <b><i><span title="nr: 1, group: gen, type: dqa, address: -">rCX</span></i></b>,Jbs</dd>
<dt>Opcode</dt>
<dd>0xE1 | 0xE1</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3171.htm">t3171</a>
<a class="EXT" href="../eatests/t3172.htm">t3172</a>
<a class="EXT" href="../eatests/t3173.htm">t3173</a>
</dd>
</dl><pre>
IigLOOPE:: PROC
    MOV AL,0xE1
    JMP IigLOOP.as:
 ENDP IigLOOPE::
</pre>

<dl id="IigLOOPZ">
<dt><a href="#IigLOOP">&uarr; LOOPZ</a></dt>
<dd>Decrement count; Jump short if count!=0 and ZF=1</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 1, group: gen, type: va, address: -">eCX</span></i></b>,Jbs | <b><i><span title="nr: 1, group: gen, type: dqa, address: -">rCX</span></i></b>,Jbs</dd>
<dt>Opcode</dt>
<dd>0xE1 | 0xE1</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3171.htm">t3171</a>
<a class="EXT" href="../eatests/t3172.htm">t3172</a>
<a class="EXT" href="../eatests/t3173.htm">t3173</a>
</dd>
</dl><pre>
IigLOOPZ:: PROC
    MOV AL,0xE1
    JMP IigLOOP.as:
 ENDP IigLOOPZ::
</pre>

<dl id="IigLOOPNE">
<dt><a href="#IigLOOP">&uarr; LOOPNE</a></dt>
<dd>Decrement count; Jump short if count!=0 and ZF=0</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 1, group: gen, type: va, address: -">eCX</span></i></b>,Jbs | <b><i><span title="nr: 1, group: gen, type: dqa, address: -">rCX</span></i></b>,Jbs</dd>
<dt>Opcode</dt>
<dd>0xE0 | 0xE0</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3171.htm">t3171</a>
<a class="EXT" href="../eatests/t3172.htm">t3172</a>
<a class="EXT" href="../eatests/t3173.htm">t3173</a>
</dd>
</dl><pre>
IigLOOPNE:: PROC
    MOV AL,0xE0
    JMP IigLOOP.as:
 ENDP IigLOOPNE::
</pre>

<dl id="IigLOOPNZ">
<dt><a href="#IigLOOP">&uarr; LOOPNZ</a></dt>
<dd>Decrement count; Jump short if count!=0 and ZF=0</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 1, group: gen, type: va, address: -">eCX</span></i></b>,Jbs | <b><i><span title="nr: 1, group: gen, type: dqa, address: -">rCX</span></i></b>,Jbs</dd>
<dt>Opcode</dt>
<dd>0xE0 | 0xE0</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3171.htm">t3171</a>
<a class="EXT" href="../eatests/t3172.htm">t3172</a>
<a class="EXT" href="../eatests/t3173.htm">t3173</a>
</dd>
</dl><pre>
IigLOOPNZ:: PROC
    MOV AL,0xE0
    JMP IigLOOP.as:
 ENDP IigLOOPNZ::
</pre>

<dl id="IigJCXZ">
<dt><a href="#IigLOOP">&uarr; JCXZ</a></dt>
<dd>Jump short if eCX register is 0</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs,<i><span title="nr: 1, group: gen, type: wa, address: -">CX</span></i></dd>
<dt>Opcode</dt>
<dd>0xE3</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3171.htm">t3171</a>
<a class="EXT" href="../eatests/t3172.htm">t3172</a>
</dd>
</dl><pre>
IigJCXZ:: PROC
     MOV AL,0xE3
     MOV ECX,sssWidth16
     JMP IigLOOP.op:
 ENDP IigJCXZ::
</pre>

<dl id="IigJECXZ">
<dt><a href="#IigLOOP">&uarr; JECXZ</a></dt>
<dd>Jump short if eCX register is 0</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs,<i><span title="nr: 1, group: gen, type: da, address: -">ECX</span></i> | Jbs,<i><span title="nr: 1, group: gen, type: da, address: -">ECX</span></i></dd>
<dt>Opcode</dt>
<dd>0xE3 | 0xE3</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3171.htm">t3171</a>
<a class="EXT" href="../eatests/t3172.htm">t3172</a>
<a class="EXT" href="../eatests/t3173.htm">t3173</a>
</dd>
</dl><pre>
IigJECXZ:: PROC
     MOV AL,0xE3
     MOV ECX,sssWidth32
     JMP IigLOOP.op:
 ENDP IigJECXZ::
</pre>

<dl id="IigJRCXZ">
<dt><a href="#IigLOOP">&uarr; JRCXZ</a></dt>
<dd>Jump short if rCX register is 0</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs,<i><span title="nr: 1, group: gen, type: qa, address: -">RCX</span></i></dd>
<dt>Opcode</dt>
<dd>0xE3</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_short_near_jmp"><sup>41</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3173.htm">t3173</a>
</dd>
</dl><pre>
IigJRCXZ:: PROC
     MOV AL,0xE3
     MOV ECX,sssWidth64
     JMP IigLOOP.op:
 ENDP IigJRCXZ::
</pre>

<dl id="IigJcc">
<dt><a href="#IigHandlers">&uarr; IigJcc</a></dt>
<dd>IigJcc is a common handler for conditional control-transfer instructions
<code>Jcc</code> where <code>cc</code> is the
<a class="EXT" href="../eadoc/index.htm#ConditionCodesGeneral">condition code
</a> mnemonic shortcut.
<br/>When the target distance cannot be encoded as DIST=SHORT and CPU generation is 386 or higher,
<!---->it is encoded as conditional near jump.
<br/>EuroAssembler will encode near or far conditional jump <code>Jcc Target</code> in 16bit real mode for CPU=286 or lower
<!---->as unconditional JMPN or JMPF bypassed by conditional short jump with inverted condition.</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/Jcc.html">Jcc</a></dd>
<dt>Input</dt>
<dd><b>CL</b> is condition code 0x00..0x0F.
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.
<br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>.</dd>
<dt>See also</dt>
<dd><a href="#IigJA">JA</a>,
<a href="#IigJAE">JAE</a>,
<a href="#IigJB">JB</a>,
<a href="#IigJBE">JBE</a>,
<a href="#IigJC">JC</a>,
<a href="#IigJE">JE</a>,
<a href="#IigJG">JG</a>,
<a href="#IigJGE">JGE</a>,
<a href="#IigJL">JL</a>,
<a href="#IigJLE">JLE</a>,
<a href="#IigJNA">JNA</a>,
<a href="#IigJNAE">JNAE</a>,
<a href="#IigJNB">JNB</a>,
<a href="#IigJNBE">JNBE</a>,
<a href="#IigJNC">JNC</a>,
<a href="#IigJNE">JNE</a>,
<a href="#IigJNG">JNG</a>,
<a href="#IigJNGE">JNGE</a>,
<a href="#IigJNLE">JNLE</a>,
<a href="#IigJNL">JNL</a>,
<a href="#IigJNO">JNO</a>,
<a href="#IigJNP">JNP</a>,
<a href="#IigJNS">JNS</a>,
<a href="#IigJNZ">JNZ</a>,
<a href="#IigJO">JO</a>,
<a href="#IigJP">JP</a>,
<a href="#IigJPE">JPE</a>,
<a href="#IigJPO">JPO</a>,
<a href="#IigJS">JS</a>,
<a href="#IigJZ">JZ</a></dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="ii.htm#IiRelocSizeRIP">IiRelocSizeRIP</a>
</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3302.htm">t3302</a>
<a class="EXT" href="../eatests/t3303.htm">t3303</a>
</dd>
</dl><pre>
IigJcc:: PROC ; CL=condition code (0..15).
       IiAllowPrefix HintAny
       IiAllowModifier DIST,DATA,IMM
       IiDispatchFormat imm, far
.imm:  IiImmSize Operand1
       Invoke IiRelocSizeRIP::,EDI,EBX           ; Inspect Imm-RIP magnitude and set iiMfgIMM_Mask to EAX.
       IiDispatchLocation [EDI+II.Operand1.Seg],NEAR=.nearRel:,FAR=.proxy:
       ; Target is in the same segment, possibly in a short distance.
       IiDispatchDist NEAR=.near:,FAR=.proxy:,SHORT=.short:
       IiDispatchData DWORD=.near:,WORD=.near:,QWORD=.near:
       IiDispatchImm  DWORD=.near:,WORD=.near:
       MOV ESI,[EDI+II.Operand1.Seg]             ; Target segment = current segment.
       JSt [ESI+SSS.Status],sssExtern, .nearRel:
.short: ; <b>Direct relative short conditional jump</b>.
       JSt EAX,iiMfgIMM_WORD|iiMfgIMM_DWORD|iiMfgIMM_QWORD,.near: ; If distance magnitude too big.
       IiEncoding DIST=SHORT,ADDR=REL,IMM=BYTE
       IiReloc iiRelocImmRIP
       OR CL,0x70
       IiEmitOpcode ECX
       IiDispatchWidth BITS64=.Q:
       RET
 .Q:   IiEncoding DATA=QWORD
       RET
.nearRel:; <b>Standard 386 direct relative near conditional jump</b> relocable at link time,
       ;        or proxy jump bypassed by short jump with inverted condition.
       MOV ESI,iiRelocImmRel                     ; Relocation at link time.
       JMP .n:
.near: ; <b>Standard 386 direct relative near conditional jump</b> relocable at assembly time,
       MOV ESI,iiRelocImmRIP                     ; Relocation at assembly time.
  .n:  IiDispatchWidth BITS16=.n16:, BITS64=.n64:
       IiDispatchData WORD=.oW:, DWORD=.D:       ; Near conditional jump in 32bit mode.
       IiDispatchImm  WORD=.oW:
  .D:  IiEncoding DATA=DWORD,IMM=DWORD,DIST=NEAR,ADDR=REL
       JMP .N:
  .oD: IiEmitPrefix OTOGGLE
       JMP .D:
 .n64: IiEncoding DATA=QWORD,IMM=DWORD,DIST=NEAR,ADDR=REL ; Near conditional jump in 64bit mode.
  .N:
       IiReloc ESI                               ; Request for relocation iiRelocImmRIP or iiRelocImmRel.
       OR CL,0x80                                ; Standard 386 near conditional jump.
       IiEmitOpcode 0x0F,ECX
       RET
 .n16: ; Near conditional jump in 16bit mode.
       JNSt [Ea.Eaopt.Machine::],iiCPU_386, .proxy: ; If CPU is older than 386.
       JSt EAX,iiMfgIMM_DWORD|iiMfgIMM_QWORD,.oD:
       IiDispatchData DWORD=.oD:, WORD=.W:
       IiDispatchImm  DWORD=.oD:
  .W:  IiEncoding DATA=WORD,IMM=WORD,DIST=NEAR,ADDR=REL
       JMP .N:
 .oW:  IiEmitPrefix OTOGGLE
       JMP .W:
.far:
.proxy: ; <b>Bypass unconditional JMP</b> by short conditional jump with inverted condition CL.
       Msg PgmStatus=pgmLastPass,'0623' ; Jcc out of byte range; assembled with proxy jump.
       XOR CL,1                                  ; Invert condition code.
       OR CL,0x70
       IiEmitOpcode ECX
       CALL IigJMP.imm:                          ; Hire unconditional JMP handler to emit near or far jump.
       DECB [EDI+II.Ppg]                         ; Remove opcode byte 0xE9 or 0xEA emitted by calling IigJMP.imm.
       MOV EAX,iiPpgOpcodeSizeMask
       AND EAX,[EDI+II.Ppg]
       MOV CL,[EDI+II.Opcode+EAX]                ; Copy removed opcode byte 0xE9 or 0xEA to CL.
       MOV ESI,iiMfgIMM_Mask                     ; Calculate size of soon-to-be-assembled JMP instruction to ESI.
       AND ESI,[EDI+II.MfgEmitted]               ; Convert Imm-size to 1, 2 or 4.
       MOV EAX,[EDI+II.PfxEmitted]
       INC ESI
       JNSt EAX,iiPfxREX,.p4:
       ANDD [EDI+II.PfxEmitted],0xFFFF_FF00      ; Remove REX prefix which was just copied to AL.
       INC ESI
  .p4: SUB EDX,EDX
       JNSt [EDI+II.PfxEmitted],iiPfxOTOGGLE, .p5:
       RstSt [EDI+II.PfxEmitted],iiPfxOTOGGLE    ; Remove OTOGGLE prefix copied to DL.
       MOV DL,0x66
       INC ESI
  .p5: JNSt [EDI+II.Ppg],iiPpgPara, .p6:
       ADD ESI,2
  .p6: IiEmitOpcode ESI                          ; Bypassing JMPS value of <b>cb</b>.
       TEST EDX
       JZ .p7:
       IiEmitOpcode EDX                          ; Postponed OTOGGLE.
   .p7:TEST AL
       JZ .p8:
       IiEmitOpcode EAX                          ; Postponed REX.
   .p8:IiEmitOpcode ECX                          ; Postponed JMP opcode 0xE9 or 0xEA.
       RET
    ENDP IigJcc::
</pre>

<dl id="IigJA">
<dt><a href="#IigJcc">&uarr; JA</a></dt>
<dd>Jump short if not below or equal/above (CF=0 AND ZF=0)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x77 ^tTTN | 0x0F87 ^tTTN</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z..C</b></dd>
</dl><pre>
IigJA:: PROC
    MOV CL,0111b
    JMP IigJcc:
 ENDP IigJA::
</pre>

<dl id="IigJAE">
<dt><a href="#IigJcc">&uarr; JAE</a></dt>
<dd>Jump short if not below/above or equal/not carry (CF=0)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x73 ^ttTN | 0x0F83 ^ttTN</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
</dl><pre>
IigJAE:: PROC
    MOV CL,0011b
    JMP IigJcc:
 ENDP IigJAE::
</pre>

<dl id="IigJB">
<dt><a href="#IigJcc">&uarr; JB</a></dt>
<dd>Jump short if below/not above or equal/carry (CF=1)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x72 ^ttTn | 0x0F82 ^ttTn</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
</dl><pre>
IigJB:: PROC
    MOV CL,0010b
    JMP IigJcc:
 ENDP IigJB::
</pre>

<dl id="IigJBE">
<dt><a href="#IigJcc">&uarr; JBE</a></dt>
<dd>Jump short if below or equal/not above (CF=1 AND ZF=1)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x76 ^tTTn | 0x0F86 ^tTTn</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z..C</b></dd>
</dl><pre>
IigJBE:: PROC
    MOV CL,0110b
    JMP IigJcc:
 ENDP IigJBE::
</pre>

<dl id="IigJC">
<dt><a href="#IigJcc">&uarr; JC</a></dt>
<dd>Jump short if below/not above or equal/carry (CF=1)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x72 ^ttTn | 0x0F82 ^ttTn</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
</dl><pre>
IigJC:: PROC
    MOV CL,0010b
    JMP IigJcc:
 ENDP IigJC::
</pre>

<dl id="IigJE">
<dt><a href="#IigJcc">&uarr; JE</a></dt>
<dd>Jump short if zero/equal (ZF=0)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x74 ^tTtn | 0x0F84 ^tTtn</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
</dl><pre>
IigJE:: PROC
    MOV CL,0100b
    JMP IigJcc:
 ENDP IigJE::
</pre>

<dl id="IigJG">
<dt><a href="#IigJcc">&uarr; JG</a></dt>
<dd>Jump short if not less nor equal/greater ((ZF=0) AND (SF=OF))</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x7F ^TTTN | 0x0F8F ^TTTN</dd>
<dt>Flags</dt>
<dd>tested:<b>O..SZ...</b></dd>
</dl><pre>
IigJG:: PROC
    MOV CL,1111b
    JMP IigJcc:
 ENDP IigJG::
</pre>

<dl id="IigJGE">
<dt><a href="#IigJcc">&uarr; JGE</a></dt>
<dd>Jump short if not less/greater or equal (SF=OF)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x7D ^TTtN | 0x0F8D ^TTtN</dd>
<dt>Flags</dt>
<dd>tested:<b>O..S....</b></dd>
</dl><pre>
IigJGE:: PROC
    MOV CL,1101b
    JMP IigJcc:
 ENDP IigJGE::
</pre>

<dl id="IigJL">
<dt><a href="#IigJcc">&uarr; JL</a></dt>
<dd>Jump short if less/not greater (SF!=OF)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x7C ^TTtn | 0x0F8C ^TTtn</dd>
<dt>Flags</dt>
<dd>tested:<b>O..S....</b></dd>
</dl><pre>
IigJL:: PROC
    MOV CL,1100b
    JMP IigJcc:
 ENDP IigJL::
</pre>

<dl id="IigJLE">
<dt><a href="#IigJcc">&uarr; JLE</a></dt>
<dd>Jump short if less or equal/not greater ((ZF=1) OR (SF!=OF))</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x7E ^TTTn | 0x0F8E ^TTTn</dd>
<dt>Flags</dt>
<dd>tested:<b>O..SZ...</b></dd>
</dl><pre>
IigJLE:: PROC
    MOV CL,1110b
    JMP IigJcc:
 ENDP IigJLE::
</pre>

<dl id="IigJNA">
<dt><a href="#IigJcc">&uarr; JNA</a></dt>
<dd>Jump short if below or equal/not above (CF=1 AND ZF=1)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x76 ^tTTn | 0x0F86 ^tTTn</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z..C</b></dd>
</dl><pre>
IigJNA:: PROC
    MOV CL,0110b
    JMP IigJcc:
 ENDP IigJNA::
</pre>

<dl id="IigJNAE">
<dt><a href="#IigJcc">&uarr; JNAE</a></dt>
<dd>Jump short if below/not above or equal/carry (CF=1)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x72 ^ttTn | 0x0F82 ^ttTn</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
</dl><pre>
IigJNAE:: PROC
    MOV CL,0010b
    JMP IigJcc:
 ENDP IigJNAE::
</pre>

<dl id="IigJNB">
<dt><a href="#IigJcc">&uarr; JNB</a></dt>
<dd>Jump short if not below/above or equal/not carry (CF=0)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x73 ^ttTN | 0x0F83 ^ttTN</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
</dl><pre>
IigJNB:: PROC
    MOV CL,0011b
    JMP IigJcc:
 ENDP IigJNB::
</pre>

<dl id="IigJNBE">
<dt><a href="#IigJcc">&uarr; JNBE</a></dt>
<dd>Jump short if not below or equal/above (CF=0 AND ZF=0)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x77 ^tTTN | 0x0F87 ^tTTN</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z..C</b></dd>
</dl><pre>
IigJNBE:: PROC
    MOV CL,0111b
    JMP IigJcc:
 ENDP IigJNBE::
</pre>

<dl id="IigJNC">
<dt><a href="#IigJcc">&uarr; JNC</a></dt>
<dd>Jump short if not below/above or equal/not carry (CF=0)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x73 ^ttTN | 0x0F83 ^ttTN</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
</dl><pre>
IigJNC:: PROC
    MOV CL,0011b
    JMP IigJcc:
 ENDP IigJNC::
</pre>

<dl id="IigJNE">
<dt><a href="#IigJcc">&uarr; JNE</a></dt>
<dd>Jump short if not zero/not equal (ZF=1)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x75 ^tTtN | 0x0F85 ^tTtN</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
</dl><pre>
IigJNE:: PROC
    MOV CL,0101b
    JMP IigJcc:
 ENDP IigJNE::
</pre>

<dl id="IigJNG">
<dt><a href="#IigJcc">&uarr; JNG</a></dt>
<dd>Jump short if less or equal/not greater ((ZF=1) OR (SF!=OF))</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x7E ^TTTn | 0x0F8E ^TTTn</dd>
<dt>Flags</dt>
<dd>tested:<b>O..SZ...</b></dd>
</dl><pre>
IigJNG:: PROC
    MOV CL,1110b
    JMP IigJcc:
 ENDP IigJNG::
</pre>

<dl id="IigJNGE">
<dt><a href="#IigJcc">&uarr; JNGE</a></dt>
<dd>Jump short if less/not greater (SF!=OF)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x7C ^TTtn | 0x0F8C ^TTtn</dd>
<dt>Flags</dt>
<dd>tested:<b>O..S....</b></dd>
</dl><pre>
IigJNGE:: PROC
    MOV CL,1100b
    JMP IigJcc:
 ENDP IigJNGE::
</pre>

<dl id="IigJNL">
<dt><a href="#IigJcc">&uarr; JNL</a></dt>
<dd>Jump short if not less/greater or equal (SF=OF)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x7D ^TTtN | 0x0F8D ^TTtN</dd>
<dt>Flags</dt>
<dd>tested:<b>O..S....</b></dd>
</dl><pre>
IigJNL:: PROC
    MOV CL,1101b
    JMP IigJcc:
 ENDP IigJNL::
</pre>

<dl id="IigJNLE">
<dt><a href="#IigJcc">&uarr; JNLE</a></dt>
<dd>Jump short if not less nor equal/greater ((ZF=0) AND (SF=OF))</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x7F ^TTTN | 0x0F8F ^TTTN</dd>
<dt>Flags</dt>
<dd>tested:<b>O..SZ...</b></dd>
</dl><pre>
IigJNLE:: PROC
    MOV CL,1111b
    JMP IigJcc:
 ENDP IigJNLE::
</pre>

<dl id="IigJNO">
<dt><a href="#IigJcc">&uarr; JNO</a></dt>
<dd>Jump short if not overflow (OF=0)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x71 ^tttN | 0x0F81 ^tttN</dd>
<dt>Flags</dt>
<dd>tested:<b>O.......</b></dd>
</dl><pre>
IigJNO:: PROC
    MOV CL,0001b
    JMP IigJcc:
 ENDP IigJNO::
</pre>

<dl id="IigJNP">
<dt><a href="#IigJcc">&uarr; JNP</a></dt>
<dd>Jump short if not parity/parity odd</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x7B ^TtTN | 0x0F8B ^TtTN</dd>
<dt>Flags</dt>
<dd>tested:<b>......P.</b></dd>
</dl><pre>
IigJNP:: PROC
    MOV CL,1011b
    JMP IigJcc:
 ENDP IigJNP::
</pre>

<dl id="IigJNS">
<dt><a href="#IigJcc">&uarr; JNS</a></dt>
<dd>Jump short if not sign (SF=0)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x79 ^TttN | 0x0F89 ^TttN</dd>
<dt>Flags</dt>
<dd>tested:<b>...S....</b></dd>
</dl><pre>
IigJNS:: PROC
    MOV CL,1001b
    JMP IigJcc:
 ENDP IigJNS::
</pre>

<dl id="IigJNZ">
<dt><a href="#IigJcc">&uarr; JNZ</a></dt>
<dd>Jump short if not zero/not equal (ZF=1)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x75 ^tTtN | 0x0F85 ^tTtN</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
</dl><pre>
IigJNZ:: PROC
    MOV CL,0101b
    JMP IigJcc:
 ENDP IigJNZ::
</pre>

<dl id="IigJO">
<dt><a href="#IigJcc">&uarr; JO</a></dt>
<dd>Jump short if overflow (OF=1)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x70 ^tttn | 0x0F80 ^tttn</dd>
<dt>Flags</dt>
<dd>tested:<b>O.......</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3301.htm">t3301</a>
</dd>
</dl><pre>
IigJO:: PROC
    MOV CL,0000b
    JMP IigJcc:
 ENDP IigJO::
</pre>

<dl id="IigJP">
<dt><a href="#IigJcc">&uarr; JP</a></dt>
<dd>Jump short if parity/parity even (PF=1)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x7A ^TtTn | 0x0F8A ^TtTn</dd>
<dt>Flags</dt>
<dd>tested:<b>......P.</b></dd>
</dl><pre>
IigJP:: PROC
    MOV CL,1010b
    JMP IigJcc:
 ENDP IigJP::
</pre>

<dl id="IigJPE">
<dt><a href="#IigJcc">&uarr; JPE</a></dt>
<dd>Jump short if parity/parity even (PF=1)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x7A ^TtTn | 0x0F8A ^TtTn</dd>
<dt>Flags</dt>
<dd>tested:<b>......P.</b></dd>
</dl><pre>
IigJPE:: PROC
    MOV CL,1010b
    JMP IigJcc:
 ENDP IigJPE::
</pre>

<dl id="IigJPO">
<dt><a href="#IigJcc">&uarr; JPO</a></dt>
<dd>Jump short if not parity/parity odd</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x7B ^TtTN | 0x0F8B ^TtTN</dd>
<dt>Flags</dt>
<dd>tested:<b>......P.</b></dd>
</dl><pre>
IigJPO:: PROC
    MOV CL,1011b
    JMP IigJcc:
 ENDP IigJPO::
</pre>

<dl id="IigJS">
<dt><a href="#IigJcc">&uarr; JS</a></dt>
<dd>Jump short if sign (SF=1)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x78 ^Tttn | 0x0F88 ^Tttn</dd>
<dt>Flags</dt>
<dd>tested:<b>...S....</b></dd>
</dl><pre>
IigJS:: PROC
    MOV CL,1000b
    JMP IigJcc:
 ENDP IigJS::
</pre>

<dl id="IigJZ">
<dt><a href="#IigJcc">&uarr; JZ</a></dt>
<dd>Jump short if zero/equal (ZF=0)</dd>
<dt>Category</dt>
<dd>gen,branch,cond</dd>
<dt>Operands</dt>
<dd>Jbs | Jvds</dd>
<dt>Opcode</dt>
<dd>0x74 ^tTtn | 0x0F84 ^tTtn</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
</dl><pre>
IigJZ:: PROC
    MOV CL,0100b
    JMP IigJcc:
 ENDP IigJZ::
</pre>

<dl id="IigRET">
<dt><a href="#IigHandlers">&uarr; RET</a></dt>
<dd>Return from procedure</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/RET.html">RET</a></dd>
<dt>Category</dt>
<dd>gen,branch stack</dd>
<dt>Operands</dt>
<dd>Iw |</dd>
<dt>Opcode</dt>
<dd>0xC2 | 0xC3 | 0xCA | 0xCB</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3321.htm">t3321</a>
</dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="ctx.htm#CtxPeek">CtxPeek</a>
</dd>
</dl><pre>
IigRET:: PROC
      IiAllowModifier CODE,DIST,DATA,IMM
      SUB EAX,EAX
      IiDispatchFormat none,imm
.imm: CMPD [EDI+II.Operand1.Low],EAX
      JNZ .iw: ; If operand nonzero.
.none:IiDispatchImm   WORD=.iw:
      IiDispatchCode SHORT=.iw:
      IiEncoding CODE=LONG ; Without immediate operand.
      MOV CX,0xC3CB ; Opcode RETN in CH, RETF in CL.
      JMP .dist:
.iw:  IiEncoding CODE=SHORT,IMM=WORD
      MOV CX,0xC2CA ; Opcode RETN imm in CH, RETF imm in CL.
      IiEmitImm Operand1, WORD
.dist:IiDispatchDist NEAR=.near:, FAR=.far: ; Decide the distance by explicit suffix or DIST= modifier.
      Invoke CtxPeek::, ctxPROC | ctxPROC1, EAX ; If no explicit specification, use PROC(1) property DIST=.
      JC .near:  ; If not in PROC context, default to NEAR.
      MOV EDX,[EAX+CTX.ObjPtr] ; Get pointer to the symbol of procedure where this RET lies is.
      TEST EDX
      JZ .near:
      JSt [EDX+SYM.Status],symFar, .far:
.near:IiEncoding DIST=NEAR
      SHR ECX,8
      IiEmitOpcode ECX
      JMP .w:
.far: IiEncoding DIST=FAR ; Either explicit RETF or RET inside PROC DIST=FAR block.
      IiEmitOpcode ECX
 .w:  IiDispatchWidth BITS16=.16:, BITS32=.32:
      JSt [EDI+II.MfgEmitted],iiMfgDIST_NEAR, .n64: ; If encoding DIST=NEAR in 64bit mode.
      IiDispatchData DWORD=.dD:, WORD=.dOW:         ; If encoding DIST=FAR  in 64bit mode.
      IiEmitPrefix REX.W ; Promote RETF in 64bit mode.
 .dQ: IiEncoding DATA=QWORD
      RET
 .n64:IiDispatchData WORD=.dOW:
      JMP .dQ:
 .16: IiDispatchData DWORD=.dOD:
 .dW: IiEncoding DATA=WORD
      RET
 .32: IiDispatchData WORD=.dOW:
 .dD: IiEncoding DATA=DWORD
      RET
 .dOD:IiEmitPrefix OTOGGLE
      JMP .dD:
 .dOW:IiEmitPrefix OTOGGLE
      JMP .dW:
 ENDP IigRET::
</pre>

<dl id="IigRETN">
<dt><a href="#IigRET">&uarr; RETN</a></dt>
<dd>Return from NEAR procedure</dd>
<dt>Category</dt>
<dd>gen,branch stack</dd>
<dt>Operands</dt>
<dd>Iw |</dd>
<dt>Opcode</dt>
<dd>0xC2 | 0xC3</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3321.htm">t3321</a>
</dd>
</dl><pre>
IigRETN:: PROC
    IiSuffixed RET,N
 ENDP IigRETN::
</pre>

<dl id="IigRETF">
<dt><a href="#IigRET">&uarr; RETF</a></dt>
<dd>Return from FAR procedure</dd>
<dt>Category</dt>
<dd>gen,branch stack</dd>
<dt>Operands</dt>
<dd>Iw |</dd>
<dt>Opcode</dt>
<dd>0xCA | 0xCB</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3321.htm">t3321</a>
</dd>
</dl><pre>
IigRETF:: PROC
    IiSuffixed RET,F
 ENDP IigRETF::
</pre>

<dl id="IigIRET">
<dt><a href="#IigHandlers">&uarr; IRET</a></dt>
<dd>Interrupt Return</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/IRET:IRETD.html">IRET</a></dd>
<dt>Category</dt>
<dd>gen,break stack</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: wo, address: F">Fwo</span></i></b> | <b><i><span title="nr: -, group: -, type: wo, address: F">Fwo</span></i></b></dd>
<dt>Opcode</dt>
<dd>0xCF | 0xCF</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3321.htm">t3321</a>
</dd>
</dl><pre>
IigIRET:: PROC
      IiAllowModifier DATA
      IiEmitOpcode 0xCF
      IiDispatchFormat none
.none:IiDispatchWidth BITS64=.64:, BITS32=.32:
      IiDispatchData DWORD=.oD:
 .W:  IiEncoding DIST=FAR,DATA=WORD
      RET
 .oW: IiEmitPrefix OTOGGLE
      JMP .W:
 .32: IiDispatchData WORD=.oW:
 .D:  IiEncoding DIST=FAR,DATA=DWORD
      RET
 .oD: IiEmitPrefix OTOGGLE
      JMP .D:
.64:  IiDispatchData WORD=.oW:, DWORD=.D:
      IiEmitPrefix REX.W
      IiEncoding DIST=FAR,DATA=QWORD
      RET
 ENDP IigIRET::
</pre>

<dl id="IigIRETW">
<dt><a href="#IigIRET">&uarr; IRETW</a></dt>
<dd>Interrupt Return, operand-size WORD</dd>
<dt>Category</dt>
<dd>gen,break stack</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: do, address: F">Fdo</span></i></b> | <b><i><span title="nr: -, group: -, type: do, address: F">Fdo</span></i></b></dd>
<dt>Opcode</dt>
<dd>0xCF</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3321.htm">t3321</a>
</dd>
</dl><pre>
IigIRETW:: PROC
    IiSuffixed IRET,W
 ENDP IigIRETW::
</pre>

<dl id="IigIRETD">
<dt><a href="#IigIRET">&uarr; IRETD</a></dt>
<dd>Interrupt Return, operand-size DWORD</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/IRET:IRETD.html">IRETD</a></dd>
<dt>Category</dt>
<dd>gen,break stack</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: do, address: F">Fdo</span></i></b> | <b><i><span title="nr: -, group: -, type: do, address: F">Fdo</span></i></b></dd>
<dt>Opcode</dt>
<dd>0xCF</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3321.htm">t3321</a>
</dd>
</dl><pre>
IigIRETD:: PROC
    IiSuffixed IRET,D
 ENDP IigIRETD::
</pre>

<dl id="IigIRETQ">
<dt><a href="#IigIRET">&uarr; IRETQ</a></dt>
<dd>Interrupt Return, operand-size QWORD</dd>
<dt>Category</dt>
<dd>gen,break stack</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: qp, address: F">Fqp</span></i></b></dd>
<dt>Opcode</dt>
<dd>0xCF</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3321.htm">t3321</a>
</dd>
</dl><pre>
IigIRETQ:: PROC
    IiSuffixed IRET,Q
 ENDP IigIRETQ::
</pre>

<dl id="IigINT">
<dt><a href="#IigHandlers">&uarr; INT</a></dt>
<dd>Call to Interrupt Procedure</dd>
<dt>Category</dt>
<dd>gen,break stack</dd>
<dt>Operands</dt>
<dd>Ib,<i><span title="nr: -, group: -, type: v, address: F">Fv</span></i></dd>
<dt>Opcode</dt>
<dd>0xCD</dd>
<dt>Flags</dt>
<dd>modified:<b>..I.....</b>, defined:<b>..I.....</b>, values:<b>..I.....</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3325.htm">t3325</a>
</dd>
</dl><pre>
IigINT:: PROC
    IiAllowModifier IMM
    IiEmitOpcode 0xCD
    IiEmitImm Operand1,BYTE
    IiDispatchFormat imm
.imm:RET
 ENDP IigINT::
</pre>

<dl id="IigINT1">
<dt><a href="#IigHandlers">&uarr; INT1</a></dt>
<dd>Call to Interrupt Procedure</dd>
<dt>Category</dt>
<dd>gen,break stack</dd>
<dt>Operands</dt>
<dd><i><span title="nr: -, group: -, type: v, address: F">Fv</span></i></dd>
<dt>Opcode</dt>
<dd>0xF1</dd>
<dt>Flags</dt>
<dd>modified:<b>..I.....</b>, defined:<b>..I.....</b>, values:<b>..I.....</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>U<a href="http://ref.x86asm.net/geek-abc.html#gen_note_u_INT1_ICEBP_F1"><sup>17</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3325.htm">t3325</a>
</dd>
</dl><pre>
IigINT1:: PROC
    IiRequire 386,UNDOC
    IiEmitOpcode 0xF1
    IiDispatchFormat none
.none:RET
 ENDP IigINT1::
</pre>

<dl id="IigSMI">
<dt><a href="#IigINT1">&uarr; SMI</a></dt>
<dd>System Management Interrupt</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0xF1</dd>
<dt>CPU</dt>
<dd>386 AMD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3325.htm">t3325</a>
</dd>
</dl><pre>
IigSMI:: PROC
    IiRequire AMD
    JMP IigINT1:
 ENDP IigSMI::
</pre>

<dl id="IigINT3">
<dt><a href="#IigHandlers">&uarr; INT3</a></dt>
<dd>Breakpoint INT 3 call</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3325.htm">t3325</a>
</dd>
</dl><pre>
IigINT3:: PROC
      IiDispatchFormat none
.none:IiEmitOpcode 0xCC
      RET
 ENDP IigINT3::
</pre>

<dl id="IigINTO">
<dt><a href="#IigHandlers">&uarr; INTO</a></dt>
<dd>Overflow INT 4 call</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/INTn:INTO:INT3.html">INTO</a></dd>
<dt>Category</dt>
<dd>gen,break stack</dd>
<dt>Operands</dt>
<dd><i><span title="nr: -, group: -, type: v, address: F">Fv</span></i></dd>
<dt>Opcode</dt>
<dd>0xCE</dd>
<dt>Flags</dt>
<dd>tested:<b>O.......</b>, modified:<b>..I.....</b>, defined:<b>..I.....</b>, values:<b>..I.....</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3325.htm">t3325</a>
</dd>
</dl><pre>
IigINTO:: PROC
      IiAbortIf64
      IiEmitOpcode 0xCE
      IiDispatchFormat none
.none:RET
 ENDP IigINTO::
</pre>

<dl id="IigSETcc">
<dt><a href="#IigHandlers">&uarr; SETcc</a></dt>
<dd>Set Byte on Condition</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SETcc.html">SETcc</a></dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F9c /0</dd>
<dt>Input</dt>
<dd>AL=condition code 0..15.
<dt>CPU</dt><dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3311.htm">t3311</a>
</dd>
<dt>See also</dt>
<dd><a href="#IigSETA">SETA</a>,
<a href="#IigSETAE">SETAE</a>,
<a href="#IigSETB">SETB</a>,
<a href="#IigSETBE">SETBE</a>,
<a href="#IigSETC">SETC</a>,
<a href="#IigSETE">SETE</a>,
<a href="#IigSETG">SETG</a>,
<a href="#IigSETGE">SETGE</a>,
<a href="#IigSETL">SETL</a>,
<a href="#IigSETLE">SETLE</a>,
<a href="#IigSETNA">SETNA</a>,
<a href="#IigSETNAE">SETNAE</a>,
<a href="#IigSETNB">SETNB</a>,
<a href="#IigSETNBE">SETNBE</a>,
<a href="#IigSETNC">SETNC</a>,
<a href="#IigSETNE">SETNE</a>,
<a href="#IigSETNG">SETNG</a>,
<a href="#IigSETNGE">SETNGE</a>,
<a href="#IigSETNLE">SETNLE</a>,
<a href="#IigSETNL">SETNL</a>,
<a href="#IigSETNO">SETNO</a>,
<a href="#IigSETNP">SETNP</a>,
<a href="#IigSETNS">SETNS</a>,
<a href="#IigSETNZ">SETNZ</a>,
<a href="#IigSETO">SETO</a>,
<a href="#IigSETP">SETP</a>,
<a href="#IigSETPE">SETPE</a>,
<a href="#IigSETPO">SETPO</a>,
<a href="#IigSETS">SETS</a>,
<a href="#IigSETZ">SETZ</a></dd>
</dl><pre>
IigSETcc:: PROC
     IiRequire 386
     IiDataSize BYTE
     OR AL,0x90
     IiEmitOpcode 0x0F,EAX
     IiOpEn  M
     IiModRM /0
     IiDispatchFormat r8:,m8
.r8:
.m8: RET
    ENDP IigSETcc::
</pre>

<dl id="IigSETA">
<dt><a href="#IigSETcc">&uarr; SETA</a></dt>
<dd>Set Byte on Condition - not below or equal/above (CF=0 AND ZF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F97 ^tTTN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z..C</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETA:: PROC
    MOV AL,0111b
    JMP IigSETcc:
 ENDP IigSETA::
</pre>

<dl id="IigSETAE">
<dt><a href="#IigSETcc">&uarr; SETAE</a></dt>
<dd>Set Byte on Condition - not below/above or equal/not carry (CF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F93 ^ttTN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETAE:: PROC
    MOV AL,0011b
    JMP IigSETcc:
 ENDP IigSETAE::
</pre>

<dl id="IigSETB">
<dt><a href="#IigSETcc">&uarr; SETB</a></dt>
<dd>Set Byte on Condition - below/not above or equal/carry (CF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F92 ^ttTn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETB:: PROC
    MOV AL,0010b
    JMP IigSETcc:
 ENDP IigSETB::
</pre>

<dl id="IigSETBE">
<dt><a href="#IigSETcc">&uarr; SETBE</a></dt>
<dd>Set Byte on Condition - below or equal/not above (CF=1 AND ZF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F96 ^tTTn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z..C</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETBE:: PROC
    MOV AL,0110b
    JMP IigSETcc:
 ENDP IigSETBE::
</pre>

<dl id="IigSETC">
<dt><a href="#IigSETcc">&uarr; SETC</a></dt>
<dd>Set Byte on Condition - below/not above or equal/carry (CF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F92 ^ttTn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETC:: PROC
    MOV AL,0010b
    JMP IigSETcc:
 ENDP IigSETC::
</pre>

<dl id="IigSETE">
<dt><a href="#IigSETcc">&uarr; SETE</a></dt>
<dd>Set Byte on Condition - zero/equal (ZF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F94 ^tTtn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETE:: PROC
    MOV AL,0100b
    JMP IigSETcc:
 ENDP IigSETE::
</pre>

<dl id="IigSETG">
<dt><a href="#IigSETcc">&uarr; SETG</a></dt>
<dd>Set Byte on Condition - not less nor equal/greater ((ZF=0) AND (SF=OF))</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F9F ^TTTN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>O..SZ...</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETG:: PROC
    MOV AL,1111b
    JMP IigSETcc:
 ENDP IigSETG::
</pre>

<dl id="IigSETGE">
<dt><a href="#IigSETcc">&uarr; SETGE</a></dt>
<dd>Set Byte on Condition - not less/greater or equal (SF=OF)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F9D ^TTtN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>O..S....</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETGE:: PROC
    MOV AL,1101b
    JMP IigSETcc:
 ENDP IigSETGE::
</pre>

<dl id="IigSETL">
<dt><a href="#IigSETcc">&uarr; SETL</a></dt>
<dd>Set Byte on Condition - less/not greater (SF!=OF)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F9C ^TTtn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>O..S....</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETL:: PROC
    MOV AL,1100b
    JMP IigSETcc:
 ENDP IigSETL::
</pre>

<dl id="IigSETLE">
<dt><a href="#IigSETcc">&uarr; SETLE</a></dt>
<dd>Set Byte on Condition - less or equal/not greater ((ZF=1) OR (SF!=OF))</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F9E ^TTTn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>O..SZ...</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETLE:: PROC
    MOV AL,1110b
    JMP IigSETcc:
 ENDP IigSETLE::
</pre>

<dl id="IigSETNA">
<dt><a href="#IigSETcc">&uarr; SETNA</a></dt>
<dd>Set Byte on Condition - below or equal/not above (CF=1 AND ZF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F96 ^tTTn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z..C</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNA:: PROC
    MOV AL,0110b
    JMP IigSETcc:
 ENDP IigSETNA::
</pre>

<dl id="IigSETNAE">
<dt><a href="#IigSETcc">&uarr; SETNAE</a></dt>
<dd>Set Byte on Condition - below/not above or equal/carry (CF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F92 ^ttTn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNAE:: PROC
    MOV AL,0010b
    JMP IigSETcc:
 ENDP IigSETNAE::
</pre>

<dl id="IigSETNB">
<dt><a href="#IigSETcc">&uarr; SETNB</a></dt>
<dd>Set Byte on Condition - not below/above or equal/not carry (CF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F93 ^ttTN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNB:: PROC
    MOV AL,0011b
    JMP IigSETcc:
 ENDP IigSETNB::
</pre>

<dl id="IigSETNBE">
<dt><a href="#IigSETcc">&uarr; SETNBE</a></dt>
<dd>Set Byte on Condition - not below or equal/above (CF=0 AND ZF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F97 ^tTTN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z..C</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNBE:: PROC
    MOV AL,0111b
    JMP IigSETcc:
 ENDP IigSETNBE::
</pre>

<dl id="IigSETNC">
<dt><a href="#IigSETcc">&uarr; SETNC</a></dt>
<dd>Set Byte on Condition - not below/above or equal/not carry (CF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F93 ^ttTN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNC:: PROC
    MOV AL,0011b
    JMP IigSETcc:
 ENDP IigSETNC::
</pre>

<dl id="IigSETNE">
<dt><a href="#IigSETcc">&uarr; SETNE</a></dt>
<dd>Set Byte on Condition - not zero/not equal (ZF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F95 ^tTtN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNE:: PROC
    MOV AL,0101b
    JMP IigSETcc:
 ENDP IigSETNE::
</pre>

<dl id="IigSETNG">
<dt><a href="#IigSETcc">&uarr; SETNG</a></dt>
<dd>Set Byte on Condition - less or equal/not greater ((ZF=1) OR (SF!=OF))</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F9E ^TTTn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>O..SZ...</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNG:: PROC
    MOV AL,1110b
    JMP IigSETcc:
 ENDP IigSETNG::
</pre>

<dl id="IigSETNGE">
<dt><a href="#IigSETcc">&uarr; SETNGE</a></dt>
<dd>Set Byte on Condition - less/not greater (SF!=OF)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F9C ^TTtn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>O..S....</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNGE:: PROC
    MOV AL,1100b
    JMP IigSETcc:
 ENDP IigSETNGE::
</pre>

<dl id="IigSETNL">
<dt><a href="#IigSETcc">&uarr; SETNL</a></dt>
<dd>Set Byte on Condition - not less/greater or equal (SF=OF)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F9D ^TTtN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>O..S....</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNL:: PROC
    MOV AL,1101b
    JMP IigSETcc:
 ENDP IigSETNL::
</pre>

<dl id="IigSETNLE">
<dt><a href="#IigSETcc">&uarr; SETNLE</a></dt>
<dd>Set Byte on Condition - not less nor equal/greater ((ZF=0) AND (SF=OF))</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F9F ^TTTN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>O..SZ...</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNLE:: PROC
    MOV AL,1111b
    JMP IigSETcc:
 ENDP IigSETNLE::
</pre>

<dl id="IigSETNO">
<dt><a href="#IigSETcc">&uarr; SETNO</a></dt>
<dd>Set Byte on Condition - not overflow (OF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F91 ^tttN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>O.......</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNO:: PROC
    MOV AL,0001b
    JMP IigSETcc:
 ENDP IigSETNO::
</pre>

<dl id="IigSETNP">
<dt><a href="#IigSETcc">&uarr; SETNP</a></dt>
<dd>Set Byte on Condition - not parity/parity odd</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F9B ^TtTN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>......P.</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNP:: PROC
    MOV AL,1011b
    JMP IigSETcc:
 ENDP IigSETNP::
</pre>

<dl id="IigSETNS">
<dt><a href="#IigSETcc">&uarr; SETNS</a></dt>
<dd>Set Byte on Condition - not sign (SF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F99 ^TttN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>...S....</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNS:: PROC
    MOV AL,1001b
    JMP IigSETcc:
 ENDP IigSETNS::
</pre>

<dl id="IigSETNZ">
<dt><a href="#IigSETcc">&uarr; SETNZ</a></dt>
<dd>Set Byte on Condition - not zero/not equal (ZF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F95 ^tTtN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETNZ:: PROC
    MOV AL,0101b
    JMP IigSETcc:
 ENDP IigSETNZ::
</pre>

<dl id="IigSETO">
<dt><a href="#IigSETcc">&uarr; SETO</a></dt>
<dd>Set Byte on Condition - overflow (OF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F90 ^tttn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>O.......</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETO:: PROC
    MOV AL,0000b
    JMP IigSETcc:
 ENDP IigSETO::
</pre>

<dl id="IigSETP">
<dt><a href="#IigSETcc">&uarr; SETP</a></dt>
<dd>Set Byte on Condition - parity/parity even (PF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F9A ^TtTn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>......P.</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETP:: PROC
    MOV AL,1010b
    JMP IigSETcc:
 ENDP IigSETP::
</pre>

<dl id="IigSETPE">
<dt><a href="#IigSETcc">&uarr; SETPE</a></dt>
<dd>Set Byte on Condition - parity/parity even (PF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F9A ^TtTn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>......P.</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETPE:: PROC
    MOV AL,1010b
    JMP IigSETcc:
 ENDP IigSETPE::
</pre>

<dl id="IigSETPO">
<dt><a href="#IigSETcc">&uarr; SETPO</a></dt>
<dd>Set Byte on Condition - not parity/parity odd</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F9B ^TtTN /0</dd>
<dt>Flags</dt>
<dd>tested:<b>......P.</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETPO:: PROC
    MOV AL,1011b
    JMP IigSETcc:
 ENDP IigSETPO::
</pre>

<dl id="IigSETS">
<dt><a href="#IigSETcc">&uarr; SETS</a></dt>
<dd>Set Byte on Condition - sign (SF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F98 ^Tttn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>...S....</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETS:: PROC
    MOV AL,1000b
    JMP IigSETcc:
 ENDP IigSETS::
</pre>

<dl id="IigSETZ">
<dt><a href="#IigSETcc">&uarr; SETZ</a></dt>
<dd>Set Byte on Condition - zero/equal (ZF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Eb</b></dd>
<dt>Opcode</dt>
<dd>0x0F94 ^tTtn /0</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SETcc_0F90-0F9F"><sup>33</sup></a></dd>
</dl><pre>
IigSETZ:: PROC
    MOV AL,0100b
    JMP IigSETcc:
 ENDP IigSETZ::
</pre>

<dl id="IigCMOVcc">
<dt><a href="#IigHandlers">&uarr; CMOVcc</a></dt>
<dd>Conditional Move</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CMOVcc.html">CMOVcc</a></dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F4c /r</dd>
<dt>Input</dt>
<dd>AL=condition code 0..15.
<dt>Flags</dt><dd> tested:<b>....Z..C</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3315.htm">t3315</a>
</dd>
<dt>See also</dt>
<dd><a href="#IigCMOVA">CMOVA</a>,
<a href="#IigCMOVAE">CMOVAE</a>,
<a href="#IigCMOVB">CMOVB</a>,
<a href="#IigCMOVBE">CMOVBE</a>,
<a href="#IigCMOVC">CMOVC</a>,
<a href="#IigCMOVE">CMOVE</a>,
<a href="#IigCMOVG">CMOVG</a>,
<a href="#IigCMOVGE">CMOVGE</a>,
<a href="#IigCMOVL">CMOVL</a>,
<a href="#IigCMOVLE">CMOVLE</a>,
<a href="#IigCMOVNA">CMOVNA</a>,
<a href="#IigCMOVNAE">CMOVNAE</a>,
<a href="#IigCMOVNB">CMOVNB</a>,
<a href="#IigCMOVNBE">CMOVNBE</a>,
<a href="#IigCMOVNC">CMOVNC</a>,
<a href="#IigCMOVNE">CMOVNE</a>,
<a href="#IigCMOVNG">CMOVNG</a>,
<a href="#IigCMOVNGE">CMOVNGE</a>,
<a href="#IigCMOVNLE">CMOVNLE</a>,
<a href="#IigCMOVNL">CMOVNL</a>,
<a href="#IigCMOVNO">CMOVNO</a>,
<a href="#IigCMOVNP">CMOVNP</a>,
<a href="#IigCMOVNS">CMOVNS</a>,
<a href="#IigCMOVNZ">CMOVNZ</a>,
<a href="#IigCMOVO">CMOVO</a>,
<a href="#IigCMOVP">CMOVP</a>,
<a href="#IigCMOVPE">CMOVPE</a>,
<a href="#IigCMOVPO">CMOVPO</a>,
<a href="#IigCMOVS">CMOVS</a>,
<a href="#IigCMOVZ">CMOVZ</a></dd>
</dl><pre>
IigCMOVcc:: PROC
     IiRequire 686
     OR AL,0x40
     IiEmitOpcode 0x0F,EAX
     IiOpEn RM
     IiModRM /r
     IiDataSize
     IiDispatchFormat r16.r16, r16.m16, r32.r32, r32.m32, r64.r64, r64.m64
.r16.r16:
.r16.m16:
.r32.r32:
.r32.m32:
.r64.r64:
.r64.m64:
     RET
    ENDP IigCMOVcc::
</pre>

<dl id="IigCMOVA">
<dt><a href="#IigCMOVcc">&uarr; CMOVA</a></dt>
<dd>Conditional Move - not below or equal/above (CF=0 AND ZF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F47 ^tTTN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z..C</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVA:: PROC
    MOV AL,0111b
    JMP IigCMOVcc:
 ENDP IigCMOVA::
</pre>

<dl id="IigCMOVAE">
<dt><a href="#IigCMOVcc">&uarr; CMOVAE</a></dt>
<dd>Conditional Move - not below/above or equal/not carry (CF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F43 ^ttTN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVAE:: PROC
    MOV AL,0011b
    JMP IigCMOVcc:
 ENDP IigCMOVAE::
</pre>

<dl id="IigCMOVB">
<dt><a href="#IigCMOVcc">&uarr; CMOVB</a></dt>
<dd>Conditional Move - below/not above or equal/carry (CF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F42 ^ttTn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVB:: PROC
    MOV AL,0010b
    JMP IigCMOVcc:
 ENDP IigCMOVB::
</pre>

<dl id="IigCMOVBE">
<dt><a href="#IigCMOVcc">&uarr; CMOVBE</a></dt>
<dd>Conditional Move - below or equal/not above (CF=1 AND ZF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F46 ^tTTn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z..C</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVBE:: PROC
    MOV AL,0110b
    JMP IigCMOVcc:
 ENDP IigCMOVBE::
</pre>

<dl id="IigCMOVC">
<dt><a href="#IigCMOVcc">&uarr; CMOVC</a></dt>
<dd>Conditional Move - below/not above or equal/carry (CF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F42 ^ttTn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVC:: PROC
    MOV AL,0010b
    JMP IigCMOVcc:
 ENDP IigCMOVC::
</pre>

<dl id="IigCMOVE">
<dt><a href="#IigCMOVcc">&uarr; CMOVE</a></dt>
<dd>Conditional Move - zero/equal (ZF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F44 ^tTtn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVE:: PROC
    MOV AL,0100b
    JMP IigCMOVcc:
 ENDP IigCMOVE::
</pre>

<dl id="IigCMOVG">
<dt><a href="#IigCMOVcc">&uarr; CMOVG</a></dt>
<dd>Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F4F ^TTTN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>O..SZ...</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVG:: PROC
    MOV AL,1111b
    JMP IigCMOVcc:
 ENDP IigCMOVG::
</pre>

<dl id="IigCMOVGE">
<dt><a href="#IigCMOVcc">&uarr; CMOVGE</a></dt>
<dd>Conditional Move - not less/greater or equal (SF=OF)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F4D ^TTtN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>O..S....</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVGE:: PROC
    MOV AL,1101b
    JMP IigCMOVcc:
 ENDP IigCMOVGE::
</pre>

<dl id="IigCMOVL">
<dt><a href="#IigCMOVcc">&uarr; CMOVL</a></dt>
<dd>Conditional Move - less/not greater (SF!=OF)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F4C ^TTtn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>O..S....</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVL:: PROC
    MOV AL,1100b
    JMP IigCMOVcc:
 ENDP IigCMOVL::
</pre>

<dl id="IigCMOVLE">
<dt><a href="#IigCMOVcc">&uarr; CMOVLE</a></dt>
<dd>Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F4E ^TTTn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>O..SZ...</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVLE:: PROC
    MOV AL,1110b
    JMP IigCMOVcc:
 ENDP IigCMOVLE::
</pre>

<dl id="IigCMOVNA">
<dt><a href="#IigCMOVcc">&uarr; CMOVNA</a></dt>
<dd>Conditional Move - below or equal/not above (CF=1 AND ZF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F46 ^tTTn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z..C</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNA:: PROC
    MOV AL,0110b
    JMP IigCMOVcc:
 ENDP IigCMOVNA::
</pre>

<dl id="IigCMOVNAE">
<dt><a href="#IigCMOVcc">&uarr; CMOVNAE</a></dt>
<dd>Conditional Move - below/not above or equal/carry (CF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F42 ^ttTn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNAE:: PROC
    MOV AL,0010b
    JMP IigCMOVcc:
 ENDP IigCMOVNAE::
</pre>

<dl id="IigCMOVNB">
<dt><a href="#IigCMOVcc">&uarr; CMOVNB</a></dt>
<dd>Conditional Move - not below/above or equal/not carry (CF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F43 ^ttTN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNB:: PROC
    MOV AL,0011b
    JMP IigCMOVcc:
 ENDP IigCMOVNB::
</pre>

<dl id="IigCMOVNBE">
<dt><a href="#IigCMOVcc">&uarr; CMOVNBE</a></dt>
<dd>Conditional Move - not below or equal/above (CF=0 AND ZF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F47 ^tTTN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z..C</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNBE:: PROC
    MOV AL,0111b
    JMP IigCMOVcc:
 ENDP IigCMOVNBE::
</pre>

<dl id="IigCMOVNC">
<dt><a href="#IigCMOVcc">&uarr; CMOVNC</a></dt>
<dd>Conditional Move - not below/above or equal/not carry (CF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F43 ^ttTN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNC:: PROC
    MOV AL,0011b
    JMP IigCMOVcc:
 ENDP IigCMOVNC::
</pre>

<dl id="IigCMOVNE">
<dt><a href="#IigCMOVcc">&uarr; CMOVNE</a></dt>
<dd>Conditional Move - not zero/not equal (ZF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F45 ^tTtN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNE:: PROC
    MOV AL,0101b
    JMP IigCMOVcc:
 ENDP IigCMOVNE::
</pre>

<dl id="IigCMOVNG">
<dt><a href="#IigCMOVcc">&uarr; CMOVNG</a></dt>
<dd>Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F4E ^TTTn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>O..SZ...</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNG:: PROC
    MOV AL,1110b
    JMP IigCMOVcc:
 ENDP IigCMOVNG::
</pre>

<dl id="IigCMOVNGE">
<dt><a href="#IigCMOVcc">&uarr; CMOVNGE</a></dt>
<dd>Conditional Move - less/not greater (SF!=OF)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F4C ^TTtn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>O..S....</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNGE:: PROC
    MOV AL,1100b
    JMP IigCMOVcc:
 ENDP IigCMOVNGE::
</pre>

<dl id="IigCMOVNL">
<dt><a href="#IigCMOVcc">&uarr; CMOVNL</a></dt>
<dd>Conditional Move - not less/greater or equal (SF=OF)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F4D ^TTtN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>O..S....</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNL:: PROC
    MOV AL,1101b
    JMP IigCMOVcc:
 ENDP IigCMOVNL::
</pre>

<dl id="IigCMOVNLE">
<dt><a href="#IigCMOVcc">&uarr; CMOVNLE</a></dt>
<dd>Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F4F ^TTTN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>O..SZ...</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNLE:: PROC
    MOV AL,1111b
    JMP IigCMOVcc:
 ENDP IigCMOVNLE::
</pre>

<dl id="IigCMOVNO">
<dt><a href="#IigCMOVcc">&uarr; CMOVNO</a></dt>
<dd>Conditional Move - not overflow (OF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F41 ^tttN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>O.......</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNO:: PROC
    MOV AL,0001b
    JMP IigCMOVcc:
 ENDP IigCMOVNO::
</pre>

<dl id="IigCMOVNP">
<dt><a href="#IigCMOVcc">&uarr; CMOVNP</a></dt>
<dd>Conditional Move - not parity/parity odd</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F4B ^TtTN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>......P.</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNP:: PROC
    MOV AL,1011b
    JMP IigCMOVcc:
 ENDP IigCMOVNP::
</pre>

<dl id="IigCMOVNS">
<dt><a href="#IigCMOVcc">&uarr; CMOVNS</a></dt>
<dd>Conditional Move - not sign (SF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F49 ^TttN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>...S....</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNS:: PROC
    MOV AL,1001b
    JMP IigCMOVcc:
 ENDP IigCMOVNS::
</pre>

<dl id="IigCMOVNZ">
<dt><a href="#IigCMOVcc">&uarr; CMOVNZ</a></dt>
<dd>Conditional Move - not zero/not equal (ZF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F45 ^tTtN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVNZ:: PROC
    MOV AL,0101b
    JMP IigCMOVcc:
 ENDP IigCMOVNZ::
</pre>

<dl id="IigCMOVO">
<dt><a href="#IigCMOVcc">&uarr; CMOVO</a></dt>
<dd>Conditional Move - overflow (OF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F40 ^tttn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>O.......</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVO:: PROC
    MOV AL,0000b
    JMP IigCMOVcc:
 ENDP IigCMOVO::
</pre>

<dl id="IigCMOVP">
<dt><a href="#IigCMOVcc">&uarr; CMOVP</a></dt>
<dd>Conditional Move - parity/parity even (PF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F4A ^TtTn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>......P.</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVP:: PROC
    MOV AL,1010b
    JMP IigCMOVcc:
 ENDP IigCMOVP::
</pre>

<dl id="IigCMOVPE">
<dt><a href="#IigCMOVcc">&uarr; CMOVPE</a></dt>
<dd>Conditional Move - parity/parity even (PF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F4A ^TtTn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>......P.</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVPE:: PROC
    MOV AL,1010b
    JMP IigCMOVcc:
 ENDP IigCMOVPE::
</pre>

<dl id="IigCMOVPO">
<dt><a href="#IigCMOVcc">&uarr; CMOVPO</a></dt>
<dd>Conditional Move - not parity/parity odd</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F4B ^TtTN /r</dd>
<dt>Flags</dt>
<dd>tested:<b>......P.</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVPO:: PROC
    MOV AL,1011b
    JMP IigCMOVcc:
 ENDP IigCMOVPO::
</pre>

<dl id="IigCMOVS">
<dt><a href="#IigCMOVcc">&uarr; CMOVS</a></dt>
<dd>Conditional Move - sign (SF=1)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F48 ^Tttn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>...S....</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVS:: PROC
    MOV AL,1000b
    JMP IigCMOVcc:
 ENDP IigCMOVS::
</pre>

<dl id="IigCMOVZ">
<dt><a href="#IigCMOVcc">&uarr; CMOVZ</a></dt>
<dd>Conditional Move - zero/equal (ZF=0)</dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0F44 ^tTtn /r</dd>
<dt>Flags</dt>
<dd>tested:<b>....Z...</b></dd>
<dt>CPU</dt>
<dd>PP+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMOVcc_0F40-0F4F"><sup>32</sup></a></dd>
</dl><pre>
IigCMOVZ:: PROC
    MOV AL,0100b
    JMP IigCMOVcc:
 ENDP IigCMOVZ::
</pre>

<dl id="IigXCHG">
<dt><a href="#IigHandlers">&uarr; XCHG</a></dt>
<dd>Exchange Register/Memory with Register</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XCHG.html">XCHG</a></dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gb</b>,<b>Eb</b> | <b>Gvqp</b>,<b>Evqp</b> | <b>Zvqp</b>,<b><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></b></dd>
<dt>Opcode</dt>
<dd>0x86 ^Dw /r | 0x87 ^DW /r | 0x90 ^+r</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3202.htm">t3202</a>
</dd>
</dl><pre>
IigXCHG:: PROC
    IiAllowLocking Operand1,Operand2
    IiAllowModifier CODE
    IiDataSize
    IiDispatchFormat r8.r8, r8.m8, m8.r8, r16.r16, r16.m16, m16.r16, \
                     r32.r32, r32.m32, m32.r32, r64.r64, r64.m64, m64.r64
.m8.r8:IiEncoding DATA=BYTE,CODE=LONG
    IiEmitOpcode 0x86
    IiOpEn MR
    IiModRM /r
    RET
.r8.r8:IiDispatchCode LONG=.m8.r8:
.r8.m8:IiEncoding DATA=BYTE,CODE=SHORT
    IiEmitOpcode 0x86
    IiOpEn RM
    IiModRM /r
    RET
.m64.r64:    
.m32.r32:    
.m16.r16:IiEncoding DATA=WORD,CODE=LONG
    IiEmitOpcode 0x87
    IiOpEn MR
    IiModRM /r
    RET
.r64.m64:    
.r32.m32:    
.r16.m16:IiEncoding DATA=WORD,CODE=SHORT
    IiEmitOpcode 0x87
    IiOpEn RM
    IiModRM /r
    RET
.r32.r32:
    JSt [EDI+II.SssStatus],sssWidth16|sssWidth32,.r64.r64:
    CMPB [EDI+II.Operand1.Low],iiReg_R32             ;  XCHG EAX,r32 ?
    JNE .r64.r64:
    CMPB [EDI+II.Operand2.Low],iiReg_R32             ;  XCHG r32,EAX ?
    JE .m32.r32: ; XCHG EAX,EAX in 64bit mode is encoded 0x87C0  instead of 0x90.
.r64.r64:
.r16.r16: ; When one operand is AX,EAX or RAX, and the other is r16,r32 or r64 with ord<=7,  >
          ; default to short opcode 90+ord.
    IiDispatchCode LONG=.m16.r16:
    MOV EAX,[EDI+II.Operand2.Low]
    IiDispatchNotAccum Operand1, .20:
.10:BTR EAX,3  ; r8..r15?
    JC .r16.m16:
    AND AL,0x07
    OR AL,0x90 ; XCHG accumulator with legacy register using short opcode.
    IiEmitOpcode EAX
    IiEncoding DATA=WORD,CODE=SHORT
    RET
.20:MOV EAX,[EDI+II.Operand1.Low]
    IiDispatchNotAccum Operand2, .r16.m16:
    JMP .10:
 ENDP IigXCHG::
</pre>

<dl id="IigXLAT">
<dt><a href="#IigHandlers">&uarr; XLAT</a></dt>
<dd>Table Look-up Translation</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XLAT:XLATB.html">XLAT</a></dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b>,<span title="nr: -, group: -, type: b, address: BB">BBb</span></dd>
<dt>Opcode</dt>
<dd>0xD7</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3203.htm">t3203</a>
</dd>
</dl><pre>
IigXLAT:: PROC
      IiAllowPrefix SegAny
      IiAllowModifier DATA
      IiEncoding DATA=BYTE
      IiEmitOpcode 0xD7
      IiDispatchFormat none, mem
.mem: MOV ECX,[EDI+II.Operand1.Status]
      TEST ECX,expScale|expIndex|expScalePres|expIndexPres|expDwidth
.E7541:Msg cc=NZ,'7541' ; XLAT accepts operand in the form [segment:rBX] only.
      JNSt ECX,expSegmPres, .10:
      MOV EAX,expSegm
      AND EAX,ECX
      SHR EAX,24 ; EAX is now Sreg ordinal 0..5.
      CMP AL,3
      JE .10: ; Omit segment override when DS requested.
      ADD AL,20 ; EAX is now 20..25, i.e. iiPfxSEGES..iiPfxSEGGS.
      BTS [EDI+II.PfxEmitted],EAX ; Request for segment override.
  .10:JNSt ECX,expBasePres,.none:
      AND ECX,expBase
      CMP ECX,0x00030000 ; BX,EBX,RBX.
      JNE .E7541:
      MOV ECX,[EDI+II.Operand1.Status] ; Expression address-size in bits 30,31.
      SHR ECX,30 ; ECX is now 0,1,2,3 when basereg was Unknown, BX, EBX, RBX.
      IiDispatchWidth BITS32=.32:, BITS64=.64:
      CMP CL,2
      JB .none:
      JA .E6731: ; Required address width 64 can be used in 64bit segment only.
 .A:  IiEmitPrefix ATOGGLE
      RET      
 .32: JECXZ .none:
      CMP CL,2
      JE .none:
      JB .A:
.E6731:Msg '6731' ; Required address width 64 can be used in 64bit segment only.
 .64:  CMP CL,1
       Msg cc=E,'6733' ; Required address width 16 cannot be used in 64bit segment.
       CMP CL,2
       JE .A:
.none: RET
 ENDP IigXLAT::
</pre>

<dl id="IigXLATB">
<dt><a href="#IigXLAT">&uarr; XLATB</a></dt>
<dd>Table Look-up Translation</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XLAT:XLATB.html">XLATB</a></dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b>,<i><span title="nr: -, group: -, type: b, address: BB">BBb</span></i></dd>
<dt>Opcode</dt>
<dd>0xD7</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3203.htm">t3203</a>
</dd>
</dl><pre>
IigXLATB:: PROC
    IiSuffixed XLAT,B
 ENDP IigXLATB::
</pre>

<dl id="IigXADD">
<dt><a href="#IigHandlers">&uarr; XADD</a></dt>
<dd>Exchange and Add</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XADD.html">XADD</a></dd>
<dt>Category</dt>
<dd>gen,datamov arith,binary</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,<b>Gb</b> | <b>Evqp</b>,<b>Gvqp</b></dd>
<dt>Opcode</dt>
<dd>0x0FC0 ^dw /r | 0x0FC1 ^dW /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>04+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3204.htm">t3204</a>
</dd>
</dl><pre>
IigXADD:: PROC
    IiRequire 486
    IiAllowLocking Operand1
    IiDataSize
    IiEmitOpcode 0x0F
    IiOpEn MR
    IiModRM /r
    IiDispatchFormat r8.r8, m8.r8, r16.r16, m16.r16, r32.r32, m32.r32, r64.r64, m64.r64
.r8.r8:   
.m8.r8:
    IiEmitOpcode 0xC0
    RET
.r64.r64
.m64.r64:    
.r32.r32:
.m32.r32:
.r16.r16:
.m16.r16:
    IiEmitOpcode 0xC1
    RET
 ENDP IigXADD::
</pre>

<dl id="IigCLC">
<dt><a href="#IigHandlers">&uarr; CLC</a></dt>
<dd>Clear Carry Flag</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CLC.html">CLC</a></dd>
<dt>Category</dt>
<dd>gen,flgctrl</dd>
<dt>Opcode</dt>
<dd>0xF8</dd>
<dt>Flags</dt>
<dd>modified:<b>.......C</b>, defined:<b>.......C</b>, values:<b>.......C</b></dd>
</dl><pre>
IigCLC:: PROC
      IiEmitOpcode 0xF8
      IiDispatchFormat none
.none:RET
 ENDP IigCLC::
</pre>

<dl id="IigCLD">
<dt><a href="#IigHandlers">&uarr; CLD</a></dt>
<dd>Clear Direction Flag</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CLD.html">CLD</a></dd>
<dt>Category</dt>
<dd>gen,flgctrl</dd>
<dt>Opcode</dt>
<dd>0xFC</dd>
<dt>Flags</dt>
<dd>modified:<b>.D......</b>, defined:<b>.D......</b>, values:<b>.D......</b></dd>
</dl><pre>
IigCLD:: PROC
      IiEmitOpcode 0xFC
      IiDispatchFormat none
.none:RET
 ENDP IigCLD::
</pre>

<dl id="IigCLI">
<dt><a href="#IigHandlers">&uarr; CLI</a></dt>
<dd>Clear Interrupt Flag</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CLI.html">CLI</a></dd>
<dt>Category</dt>
<dd>gen,flgctrl</dd>
<dt>Opcode</dt>
<dd>0xFA</dd>
<dt>Flags</dt>
<dd>modified:<b>..I.....</b>, defined:<b>..I.....</b>, values:<b>..I.....</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3403.htm">t3403</a>
</dd>
</dl><pre>
IigCLI:: PROC
      IiEmitOpcode 0xFA
      IiDispatchFormat none
.none:RET
 ENDP IigCLI::
</pre>

<dl id="IigCMC">
<dt><a href="#IigHandlers">&uarr; CMC</a></dt>
<dd>Complement Carry Flag</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CMC.html">CMC</a></dd>
<dt>Category</dt>
<dd>gen,flgctrl</dd>
<dt>Opcode</dt>
<dd>0xF5</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b>, modified:<b>.......C</b>, defined:<b>.......C</b></dd>
</dl><pre>
IigCMC:: PROC
      IiEmitOpcode 0xF5
      IiDispatchFormat none
.none:RET
 ENDP IigCMC::
</pre>

<dl id="IigSTC">
<dt><a href="#IigHandlers">&uarr; STC</a></dt>
<dd>Set Carry Flag</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/STC.html">STC</a></dd>
<dt>Category</dt>
<dd>gen,flgctrl</dd>
<dt>Opcode</dt>
<dd>0xF9</dd>
<dt>Flags</dt>
<dd>modified:<b>.......C</b>, defined:<b>.......C</b>, values:<b>.......C</b></dd>
</dl><pre>
IigSTC:: PROC
      IiEmitOpcode 0xF9
      IiDispatchFormat none
.none:RET
 ENDP IigSTC::
</pre>

<dl id="IigSTD">
<dt><a href="#IigHandlers">&uarr; STD</a></dt>
<dd>Set Direction Flag</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/STD.html">STD</a></dd>
<dt>Category</dt>
<dd>gen,flgctrl</dd>
<dt>Opcode</dt>
<dd>0xFD</dd>
<dt>Flags</dt>
<dd>modified:<b>.D......</b>, defined:<b>.D......</b>, values:<b>.D......</b></dd>
</dl><pre>
IigSTD:: PROC
      IiEmitOpcode 0xFD
      IiDispatchFormat none
.none:RET
 ENDP IigSTD::
</pre>

<dl id="IigSTI">
<dt><a href="#IigHandlers">&uarr; STI</a></dt>
<dd>Set Interrupt Flag</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/STI.html">STI</a></dd>
<dt>Category</dt>
<dd>gen,flgctrl</dd>
<dt>Opcode</dt>
<dd>0xFB</dd>
<dt>Flags</dt>
<dd>modified:<b>..I.....</b>, defined:<b>..I.....</b>, values:<b>..I.....</b></dd>
</dl><pre>
IigSTI:: PROC
      IiEmitOpcode 0xFB
      IiDispatchFormat none
.none:RET
 ENDP IigSTI::
</pre>

<dl id="IigHLT">
<dt><a href="#IigHandlers">&uarr; HLT</a></dt>
<dd>Halt</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/HLT.html">HLT</a></dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Opcode</dt>
<dd>0xF4</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3403.htm">t3403</a>
</dd>
</dl><pre>
IigHLT:: PROC
      IiRequire 086,PRIV
      IiEmitOpcode 0xF4
      IiDispatchFormat none
.none:RET     
 ENDP IigHLT::
</pre>

<dl id="IigCPUID">
<dt><a href="#IigHandlers">&uarr; CPUID</a></dt>
<dd>CPU Identification</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CPUID.html">CPUID</a></dd>
<dt>Category</dt>
<dd>gen,control</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 8B, group: msr, type: -, address: -">I...</span></i></b>,<b><i><span title="nr: 0, group: gen, type: d, address: -">EAX</span></i></b>,<b><i><span title="nr: 1, group: gen, type: d, address: -">ECX</span></i></b>,<span title="dst: IA32_BIOS_SIGN_ID dst: EAX dst: ECX dst: EDX dst: EBX ">...</span></dd>
<dt>Opcode</dt>
<dd>0x0FA2</dd>
<dt>CPU</dt>
<dd>04++</dd>
</dl><pre>
IigCPUID:: PROC
      IiRequire 586
      IiEmitOpcode 0x0F,0xA2
      IiDispatchFormat none
.none:RET
 ENDP IigCPUID::
</pre>

<dl id="IigLAHF">
<dt><a href="#IigHandlers">&uarr; LAHF</a></dt>
<dd>Load Status Flags into AH Register</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LAHF.html">LAHF</a></dd>
<dt>Category</dt>
<dd>gen,datamov flgctrl</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 4, group: gen, type: b, address: -">AH</span></i></b></dd>
<dt>Opcode</dt>
<dd>0x9F</dd>
<dt>Flags</dt>
<dd>tested:<b>...SZAPC</b></dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SAHF_9E_LAHF_9F"><sup>5</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3327.htm">t3327</a>
</dd>
</dl><pre>
IigLAHF:: PROC
      IiAbortIf64
      IiEmitOpcode 0x9F
      IiDispatchFormat none
.none:RET
 ENDP IigLAHF::
</pre>

<dl id="IigSAHF">
<dt><a href="#IigHandlers">&uarr; SAHF</a></dt>
<dd>Store AH into Flags</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SAHF.html">SAHF</a></dd>
<dt>Category</dt>
<dd>gen,datamov flgctrl</dd>
<dt>Operands</dt>
<dd><i><span title="nr: 4, group: gen, type: b, address: -">AH</span></i></dd>
<dt>Opcode</dt>
<dd>0x9E</dd>
<dt>Flags</dt>
<dd>modified:<b>...SZAPC</b>, defined:<b>...SZAPC</b></dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SAHF_9E_LAHF_9F"><sup>5</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3327.htm">t3327</a>
</dd>
</dl><pre>
IigSAHF:: PROC
      IiAbortIf64
      IiEmitOpcode 0x9E
      IiDispatchFormat none
.none:RET
 ENDP IigSAHF::
</pre>

<dl id="IigSALC">
<dt><a href='#IigHandlers'>&uarr; SALC</a></dt>
<dd>Set AL If Carry</dd>
<dt>Alias</dt>
<dd><a href="#IigSETALC">IigSETALC</a>
<dt>Category</dt><dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b></dd>
<dt>Opcode</dt>
<dd>0xD6</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>02+</dd>
<dt>Documented</dt>
<dd>U<a href="http://ref.x86asm.net/geek-abc.html#gen_note_u_SALC_D6"><sup>7</sup></a>
<a class="EXTW" href="http://www.rcollins.org/secrets/opcodes/SALC.html">www.rcollins.org/secrets/opcodes/SALC.html</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3327.htm">t3327</a>
</dd>
</dl><pre>
IigSALC:: PROC
      IiAbortIf64
      IiRequire 086,UNDOC
      IiEmitOpcode 0xD6
      IiDispatchFormat none
.none:RET
 ENDP IigSALC::
</pre>

<dl id="IigSETALC">
<dt><a href='#IigSALC'>&uarr; SETALC</a></dt>
<dd>Set AL If Carry</dd>
<dt>Alias</dt>
<dd><a href="#IigSALC">IigSALC</a>
<dt>Category</dt><dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b></dd>
<dt>Opcode</dt>
<dd>0xD6</dd>
<dt>Flags</dt>
<dd>tested:<b>.......C</b></dd>
<dt>CPU</dt>
<dd>02+</dd>
<dt>Documented</dt>
<dd>U<a href="http://ref.x86asm.net/geek-abc.html#gen_note_u_SALC_D6"><sup>7</sup></a>
<a class="EXTW" href="http://www.rcollins.org/secrets/opcodes/SALC.html">www.rcollins.org/secrets/opcodes/SALC.html</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3327.htm">t3327</a>
</dd>
</dl><pre>
IigSETALC:: PROC
      JMP IigSALC:
 ENDP IigSETALC::
</pre>

<dl id="IigCWD">
<dt><a href="#IigHandlers">&uarr; CWD</a></dt>
<dd>Sign-extend AX to DX:AX</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CWD:CDQ:CQO.html">CWD</a></dd>
<dt>Category</dt>
<dd>gen,conver</dd>
<dt>Opcode</dt>
<dd>0x99</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3181.htm">t3181</a>
</dd>
</dl><pre>
IigCWD:: PROC
      IiEncoding DATA=DWORD
      IiEmitOpcode 0x99
      IiDispatchWidth BITS16=.F:
      IiEmitPrefix OTOGGLE
  .F: IiDispatchFormat none
.none:RET
 ENDP IigCWD::
</pre>

<dl id="IigCDQ">
<dt><a href="#IigHandlers">&uarr; CDQ</a></dt>
<dd>Sign-extend EAX to EDX:EAX</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CWD:CDQ:CQO.html">CDQ</a></dd>
<dt>Category</dt>
<dd>gen,conver</dd>
<dt>Opcode</dt>
<dd>0x99</dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3181.htm">t3181</a>
</dd>
</dl><pre>
IigCDQ:: PROC
      IiRequire 386
      IiEncoding DATA=QWORD
      IiEmitOpcode 0x99
      IiDispatchWidth BITS32=.F:, BITS64=.F:
      IiEmitPrefix OTOGGLE
   .F:IiDispatchFormat none
.none:RET
 ENDP IigCDQ::
</pre>

<dl id="IigCQO">
<dt><a href="#IigHandlers">&uarr; CQO</a></dt>
<dd>Sign-extend RAX to RDX:RAX</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CWD:CDQ:CQO.html">CQO</a></dd>
<dt>Category</dt>
<dd>gen,conver</dd>
<dt>Opcode</dt>
<dd>0x99</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3181.htm">t3181</a>
</dd>
</dl><pre>
IigCQO:: PROC
      IiAbortIfNot64
      IiEncoding DATA=OWORD
      IiEmitPrefix REX.W
      IiEmitOpcode 0x99
      IiDispatchFormat none
.none:RET
 ENDP IigCQO::
</pre>

<dl id="IigCBW">
<dt><a href="#IigHandlers">&uarr; CBW</a></dt>
<dd>Sign-extend AL to AX</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CBW:CWDE:CDQE.html">CBW</a></dd>
<dt>Category</dt>
<dd>gen,conver</dd>
<dt>Opcode</dt>
<dd>0x98</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3181.htm">t3181</a>
</dd>
</dl><pre>
IigCBW:: PROC
      IiEncoding DATA=WORD
      IiEmitOpcode 0x98
      IiDispatchWidth BITS16=.F:
      IiEmitPrefix OTOGGLE
  .F: IiDispatchFormat none
.none:RET
 ENDP IigCBW::
</pre>

<dl id="IigCWDE">
<dt><a href="#IigHandlers">&uarr; CWDE</a></dt>
<dd>Sign-extend AX to EAX</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CBW:CWDE:CDQE.html">CWDE</a></dd>
<dt>Category</dt>
<dd>gen,conver</dd>
<dt>Opcode</dt>
<dd>0x98</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3181.htm">t3181</a>
</dd>
</dl><pre>
IigCWDE:: PROC
      IiRequire 386
      IiEncoding DATA=DWORD
      IiEmitOpcode 0x98
      IiDispatchWidth BITS32=.F:, BITS64=.F:
      IiEmitPrefix OTOGGLE
   .F:IiDispatchFormat none
.none:RET
 ENDP IigCWDE::
</pre>

<dl id="IigCDQE">
<dt><a href="#IigHandlers">&uarr; CDQE</a></dt>
<dd>Sign-extend EAX to RAX</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CBW:CWDE:CDQE.html">CDQE</a></dd>
<dt>Category</dt>
<dd>gen,conver</dd>
<dt>Opcode</dt>
<dd>0x98</dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3181.htm">t3181</a>
</dd>
</dl><pre>
IigCDQE:: PROC
      IiAbortIfNot64
      IiEncoding DATA=QWORD
      IiEmitPrefix REX.W
      IiEmitOpcode 0x98
      IiDispatchFormat none
.none:RET
 ENDP IigCDQE::
</pre>

<dl id="IigLEA">
<dt><a href="#IigHandlers">&uarr; LEA</a></dt>
<dd>Load Effective Address</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LEA.html">LEA</a></dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,M</dd>
<dt>Opcode</dt>
<dd>0x8D /r</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3185.htm">t3185</a>
<a class="EXT" href="../eatests/t3186.htm">t3186</a>
</dd>
</dl><pre>
IigLEA:: PROC
    IiDataSize Operand1,SpecifyMem=OFF
    IiEmitOpcode 0x8D
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat r16.mem, r32.mem, r64.mem
.r16.mem:
.r32.mem:
.r64.mem:
    RET
 ENDP IigLEA::
</pre>

<dl id="IigLDS">
<dt><a href="#IigHandlers">&uarr; LDS</a></dt>
<dd>Load Far Pointer</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LDS:LES:LFS:LGS:LSS.html">LDS</a></dd>
<dt>Category</dt>
<dd>gen,datamov segreg</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 3, group: seg, type: w, address: -">DS</span></i></b>,<b>Gv</b>,Mp</dd>
<dt>Opcode</dt>
<dd>0xC5 /r</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3188.htm">t3188</a>
</dd>
</dl><pre>
IigLDS:: PROC
         MOV AL,0xC5
 .op:    IiAbortIf64
         IiEmitOpcode EAX
         IiOpEn RM
         IiModRM /r
         IiDataSize
         IiDispatchFormat r16.m16, r32.m32
.r16.m16:
.r32.m32:RET
 ENDP IigLDS::
</pre>

<dl id="IigLES">
<dt><a href="#IigLDS">&uarr; LES</a></dt>
<dd>Load Far Pointer</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LDS:LES:LFS:LGS:LSS.html">LES</a></dd>
<dt>Category</dt>
<dd>gen,datamov segreg</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: seg, type: w, address: -">ES</span></i></b>,<b>Gv</b>,Mp</dd>
<dt>Opcode</dt>
<dd>0xC4 /r</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3188.htm">t3188</a>
</dd>
</dl><pre>
IigLES:: PROC
         MOV AL,0xC4
         JMP IigLDS.op:
 ENDP IigLES::
</pre>

<dl id="IigLSS">
<dt><a href="#IigHandlers">&uarr; LSS</a></dt>
<dd>Load Far Pointer</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LDS:LES:LFS:LGS:LSS.html">LSS</a></dd>
<dt>Category</dt>
<dd>gen,datamov segreg</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 2, group: seg, type: w, address: S30">SS</span></i></b>,<b>Gvqp</b>,Mptp</dd>
<dt>Opcode</dt>
<dd>0x0FB2 ^sRe /r</dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_LSS_0FB2_LFS_0FB4_LGS_0FB5"><sup>35</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3188.htm">t3188</a>
</dd>
</dl><pre>
IigLSS:: PROC
         MOV AL,0xB2
 .op:    IiRequire 386
         IiEmitOpcode 0x0F,EAX
         IiOpEn RM
         IiModRM /r
         IiDataSize
         IiDispatchFormat r16.m16, r32.m32, r64.m64
.r64.m64:
.r32.m32:
.r16.m16:RET
 ENDP IigLSS::
</pre>

<dl id="IigLFS">
<dt><a href="#IigLSS">&uarr; LFS</a></dt>
<dd>Load Far Pointer</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LDS:LES:LFS:LGS:LSS.html">LFS</a></dd>
<dt>Category</dt>
<dd>gen,datamov segreg</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 4, group: seg, type: w, address: S30">FS</span></i></b>,<b>Gvqp</b>,Mptp</dd>
<dt>Opcode</dt>
<dd>0x0FB4 ^Sre /r</dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_LSS_0FB2_LFS_0FB4_LGS_0FB5"><sup>35</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3188.htm">t3188</a>
</dd>
</dl><pre>
IigLFS:: PROC
         MOV AL,0xB4
         JMP IigLSS.op:
       ENDP IigLFS::
</pre>

<dl id="IigLGS">
<dt><a href="#IigLSS">&uarr; LGS</a></dt>
<dd>Load Far Pointer</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LDS:LES:LFS:LGS:LSS.html">LGS</a></dd>
<dt>Category</dt>
<dd>gen,datamov segreg</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 5, group: seg, type: w, address: S30">GS</span></i></b>,<b>Gvqp</b>,Mptp</dd>
<dt>Opcode</dt>
<dd>0x0FB5 ^SrE /r</dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_LSS_0FB2_LFS_0FB4_LGS_0FB5"><sup>35</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3188.htm">t3188</a>
</dd>
</dl><pre>
IigLGS:: PROC
         MOV AL,0xB5
         JMP IigLSS.op:
 ENDP IigLGS::
</pre>

<dl id="IigAAA">
<dt><a href="#IigHandlers">&uarr; AAA</a></dt>
<dd>ASCII Adjust After Addition</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/AAA.html">AAA</a></dd>
<dt>Category</dt>
<dd>gen,arith,decimal</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b>,<b><i><span title="nr: 4, group: gen, type: b, address: -">AH</span></i></b></dd>
<dt>Opcode</dt>
<dd>0x37</dd>
<dt>Flags</dt>
<dd>tested:<b>.....A..</b>, modified:<b>O..SZAPC</b>, defined:<b>.....A.C</b>, undefined:<b>O..SZ.P.</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3182.htm">t3182</a>
</dd>
</dl><pre>
IigAAA:: PROC
      IiAbortIf64
      IiEmitOpcode 0x37
      IiDispatchFormat none
.none:RET
 ENDP IigAAA::
</pre>

<dl id="IigAAS">
<dt><a href="#IigHandlers">&uarr; AAS</a></dt>
<dd>ASCII Adjust AL After Subtraction</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/AAS.html">AAS</a></dd>
<dt>Category</dt>
<dd>gen,arith,decimal</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b>,<b><i><span title="nr: 4, group: gen, type: b, address: -">AH</span></i></b></dd>
<dt>Opcode</dt>
<dd>0x3F</dd>
<dt>Flags</dt>
<dd>tested:<b>.....A..</b>, modified:<b>O..SZAPC</b>, defined:<b>.....A.C</b>, undefined:<b>O..SZ.P.</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3182.htm">t3182</a>
</dd>
</dl><pre>
IigAAS:: PROC
      IiAbortIf64
      IiEmitOpcode 0x3F
      IiDispatchFormat none
.none:RET
 ENDP IigAAS::
</pre>

<dl id="IigAAM">
<dt><a href="#IigHandlers">&uarr; AAM</a></dt>
<dd>ASCII Adjust AX After Multiply</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/AAM.html">AAM</a></dd>
<dt>Category</dt>
<dd>gen,arith,decimal</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b>,<b><i><span title="nr: 4, group: gen, type: b, address: -">AH</span></i></b></dd>
<dt>Opcode</dt>
<dd>0xD40A</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>...SZ.P.</b>, undefined:<b>O....A.C</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3182.htm">t3182</a>
</dd>
</dl><pre>
IigAAM:: PROC
      IiAbortIf64
      IiEmitOpcode 0xD4
      IiDispatchFormat none,imm
.none:IiAssumeEmpty Operand1, 10
.imm: IiEmitImm Operand1,BYTE
      RET
 ENDP IigAAM::
</pre>

<dl id="IigAAD">
<dt><a href="#IigHandlers">&uarr; AAD</a></dt>
<dd>ASCII Adjust AX Before Division</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/AAD.html">AAD</a></dd>
<dt>Category</dt>
<dd>gen,arith,decimal</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b>,<b><i><span title="nr: 4, group: gen, type: b, address: -">AH</span></i></b></dd>
<dt>Opcode</dt>
<dd>0xD50A</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>...SZ.P.</b>, undefined:<b>O....A.C</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3182.htm">t3182</a>
</dd>
</dl><pre>
IigAAD:: PROC
      IiAbortIf64
      IiEmitOpcode 0xD5
      IiDispatchFormat none,imm
.none:IiAssumeEmpty Operand1, 10
.imm: IiEmitImm Operand1,BYTE
      RET
 ENDP IigAAD::
</pre>

<dl id="IigDAA">
<dt><a href="#IigHandlers">&uarr; DAA</a></dt>
<dd>Decimal Adjust AL after Addition</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/DAA.html">DAA</a></dd>
<dt>Category</dt>
<dd>gen,arith,decimal</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b></dd>
<dt>Opcode</dt>
<dd>0x27</dd>
<dt>Flags</dt>
<dd>tested:<b>.....A.C</b>, modified:<b>O..SZAPC</b>, defined:<b>...SZAPC</b>, undefined:<b>O.......</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3182.htm">t3182</a>
</dd>
</dl><pre>
IigDAA:: PROC
      IiAbortIf64
      IiEmitOpcode 0x27
      IiDispatchFormat none
.none:RET
 ENDP IigDAA::
</pre>

<dl id="IigDAS">
<dt><a href="#IigHandlers">&uarr; DAS</a></dt>
<dd>Decimal Adjust AL after Subtraction</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/DAS.html">DAS</a></dd>
<dt>Category</dt>
<dd>gen,arith,decimal</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b></dd>
<dt>Opcode</dt>
<dd>0x2F</dd>
<dt>Flags</dt>
<dd>tested:<b>.....A.C</b>, modified:<b>O..SZAPC</b>, defined:<b>...SZAPC</b>, undefined:<b>O.......</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3182.htm">t3182</a>
</dd>
</dl><pre>
IigDAS:: PROC
      IiAbortIf64
      IiEmitOpcode 0x2F
      IiDispatchFormat none
.none:RET
 ENDP IigDAS::
</pre>

<dl id="IigBTC">
<dt><a href="#IigHandlers">&uarr; BTC</a></dt>
<dd>Bit Test and Complement</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/BTC.html">BTC</a></dd>
<dt>Category</dt>
<dd>gen,bit</dd>
<dt>Operands</dt>
<dd><b>Evqp</b>,Ib | <b>Evqp</b>,Gvqp</dd>
<dt>Opcode</dt>
<dd>0x0FBA /7 | 0x0FBB /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>.......C</b>, undefined:<b>O..SZAP.</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3336.htm">t3336</a>
</dd>
</dl><pre>
IigBTC:: PROC
     MOV AX,0x07BB
.lop:IiAllowLocking Operand1
 .op:IiRequire 386
     IiDataSize
     IiEmitOpcode 0x0F
     IiDispatchFormat r16.r16, m16.r16, r32.r32, m32.r32, r64.r64, m64.r64, \
     r16.imm, r32.imm, r64.imm, m16.imm, m32.imm, m64.imm
.r16.r16:
.m16.r16:
.r32.r32:
.m32.r32:
.r64.r64:
.m64.r64:
     IiEmitOpcode EAX
     IiOpEn MR
     IiModRM /r
     RET
.r16.imm:
.m16.imm:
.r32.imm:
.m32.imm:
.r64.imm:
.m64.imm
     SHL EAX,20
     AND EAX,iiPpgModDigit
     SetSt EAX,iiPpgModRMd
     IiEmitOpcode 0xBA
     IiOpEn M
     IiModRM EAX
     IiEmitImm Operand2, BYTE
     RET
 ENDP IigBTC::
</pre>

<dl id="IigBTCW">
<dt><a href="#IigBTC">&uarr; BTCW</a></dt>
<dd>Bit Test and Complement WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3336.htm">t3336</a>
</dd>
</dl><pre>
IigBTCW:: PROC
    IiSuffixed BTC,W
 ENDP IigBTCW::
</pre>

<dl id="IigBTCD">
<dt><a href="#IigBTC">&uarr; BTCD</a></dt>
<dd>Bit Test and Complement DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3336.htm">t3336</a>
</dd>
</dl><pre>
IigBTCD:: PROC
    IiSuffixed BTC,D    
 ENDP IigBTCD::
</pre>

<dl id="IigBTCQ">
<dt><a href="#IigBTC">&uarr; BTCQ</a></dt>
<dd>Bit Test and Complement QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3336.htm">t3336</a>
</dd>
</dl><pre>
IigBTCQ:: PROC
    IiSuffixed BTC,Q
 ENDP IigBTCQ::
</pre>

<dl id="IigBT">
<dt><a href="#IigBTC">&uarr; BT</a></dt>
<dd>Bit Test</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/BT.html">BT</a></dd>
<dt>Category</dt>
<dd>gen,bit</dd>
<dt>Operands</dt>
<dd>Evqp,Gvqp | Evqp,Ib</dd>
<dt>Opcode</dt>
<dd>0x0FA3 /r | 0x0FBA /4</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>.......C</b>, undefined:<b>O..SZAP.</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3333.htm">t3333</a>
</dd>
</dl><pre>
IigBT:: PROC
     MOV AX,0x04A3
     JMP IigBTC.op:
 ENDP IigBT::
</pre>

<dl id="IigBTW">
<dt><a href="#IigBT">&uarr; BTW</a></dt>
<dd>Bit Test WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3333.htm">t3333</a>
</dd>
</dl><pre>
IigBTW:: PROC
    IiSuffixed BT,W
 ENDP IigBTW::
</pre>

<dl id="IigBTD">
<dt><a href="#IigBT">&uarr; BTD</a></dt>
<dd>Bit Test DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3333.htm">t3333</a>
</dd>
</dl><pre>
IigBTD:: PROC
    IiSuffixed BT,D    
 ENDP IigBTD::
</pre>

<dl id="IigBTQ">
<dt><a href="#IigBT">&uarr; BTQ</a></dt>
<dd>Bit Test QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3333.htm">t3333</a>
</dd>
</dl><pre>
IigBTQ:: PROC
    IiSuffixed BT,Q    
 ENDP IigBTQ::
</pre>

<dl id="IigBTR">
<dt><a href="#IigBTC">&uarr; BTR</a></dt>
<dd>Bit Test and Reset</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/BTR.html">BTR</a></dd>
<dt>Category</dt>
<dd>gen,bit</dd>
<dt>Operands</dt>
<dd><b>Evqp</b>,Gvqp | <b>Evqp</b>,Ib</dd>
<dt>Opcode</dt>
<dd>0x0FB3 /r | 0x0FBA /6</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>.......C</b>, undefined:<b>O..SZAP.</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3335.htm">t3335</a>
</dd>
</dl><pre>
IigBTR:: PROC
     MOV AX,0x06B3
     JMP IigBTC.lop:
 ENDP IigBTR::
</pre>

<dl id="IigBTRW">
<dt><a href="#IigBTR">&uarr; BTRW</a></dt>
<dd>Bit Test and Reset WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3335.htm">t3335</a>
</dd>
</dl><pre>
IigBTRW:: PROC
    IiSuffixed BTR,W
 ENDP IigBTRW::
</pre>

<dl id="IigBTRD">
<dt><a href="#IigBTR">&uarr; BTRD</a></dt>
<dd>Bit Test and Reset DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3335.htm">t3335</a>
</dd>
</dl><pre>
IigBTRD:: PROC
    IiSuffixed BTR,D
 ENDP IigBTRD::
</pre>

<dl id="IigBTRQ">
<dt><a href="#IigBTR">&uarr; BTRQ</a></dt>
<dd>Bit Test and Reset QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3335.htm">t3335</a>
</dd>
</dl><pre>
IigBTRQ:: PROC
    IiSuffixed BTR,Q
 ENDP IigBTRQ::
</pre>

<dl id="IigBTS">
<dt><a href="#IigBTC">&uarr; BTS</a></dt>
<dd>Bit Test and Set</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/BTS.html">BTS</a></dd>
<dt>Category</dt>
<dd>gen,bit</dd>
<dt>Operands</dt>
<dd><b>Evqp</b>,Gvqp | <b>Evqp</b>,Ib</dd>
<dt>Opcode</dt>
<dd>0x0FAB /r | 0x0FBA /5</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>.......C</b>, undefined:<b>O..SZAP.</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3334.htm">t3334</a>
</dd>
</dl><pre>
IigBTS:: PROC
     MOV AX,0x05AB
     JMP IigBTC.lop:
 ENDP IigBTS::
</pre>

<dl id="IigBTSW">
<dt><a href="#IigBTS">&uarr; BTSW</a></dt>
<dd>Bit Test and Set WORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3334.htm">t3334</a>
</dd>
</dl><pre>
IigBTSW:: PROC
    IiSuffixed BTS,W 
 ENDP IigBTSW::
</pre>

<dl id="IigBTSD">
<dt><a href="#IigBTS">&uarr; BTSD</a></dt>
<dd>Bit Test and Set DWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3334.htm">t3334</a>
</dd>
</dl><pre>
IigBTSD:: PROC
    IiSuffixed BTS,D    
 ENDP IigBTSD::
</pre>

<dl id="IigBTSQ">
<dt><a href="#IigBTS">&uarr; BTSQ</a></dt>
<dd>Bit Test and Set QWORD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3334.htm">t3334</a>
</dd>
</dl><pre>
IigBTSQ:: PROC
    IiSuffixed BTS,Q    
 ENDP IigBTSQ::
</pre>

<dl id="IigBSF">
<dt><a href="#IigHandlers">&uarr; BSF</a></dt>
<dd>Bit Scan Forward</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/BSF.html">BSF</a></dd>
<dt>Category</dt>
<dd>gen,bit</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0FBC /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>....Z...</b>, undefined:<b>O..S.APC</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_BSF_0FBC_BSR_0FBD"><sup>37</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3332.htm">t3332</a>
</dd>
</dl><pre>
IigBSF:: PROC
     MOV AL,0xBC
.op: IiEmitOpcode 0x0F,EAX
     IiRequire 386
     IiDataSize
     IiOpEn RM
     IiModRM /r
     IiDispatchFormat r32.r32,r32.m32,r16.r16,r16.m16,r64.r64,r64.m64
.r32.r32:
.r32.m32:
.r16.r16:
.r16.m16:
.r64.r64:
.r64.m64:
      RET
 ENDP IigBSF::
</pre>

<dl id="IigBSR">
<dt><a href="#IigBSF">&uarr; BSR</a></dt>
<dd>Bit Scan Reverse</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/BSR.html">BSR</a></dd>
<dt>Category</dt>
<dd>gen,bit</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Opcode</dt>
<dd>0x0FBD /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>....Z...</b>, undefined:<b>O..S.APC</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_BSF_0FBC_BSR_0FBD"><sup>37</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3332.htm">t3332</a>
</dd>
</dl><pre>
IigBSR:: PROC
    MOV AL,0xBD
    JMP IigBSF.op:
 ENDP IigBSR::
</pre>

<dl id="IigPOPCNT">
<dt><a href='#IigHandlers'>&uarr; POPCNT</a></dt>
<dd>Bit Population Count - Return the Count of Number of Bits Set to 1</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/POPCNT.html">POPCNT</a></dd>
<dt>Category</dt>
<dd>gen,bit</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Evqp</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>POPCNT r32, r32
</th><td>VEX.128.F3.0F.W0 B8 /r
</td></tr>
<tr><th>POPCNT r64, r64
</th><td>VEX.128.F3.0F.W1 B8 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xF30FB8 /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, values:<b>O..S.APC</b></dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3341.htm">t3341</a>
<a class="EXT" href="../eatests/t6246.htm">t6246</a>
</dd>
</dl><pre>
IigPOPCNT:: PROC
    IiAllowModifier PREFIX
    IiDispatchPrefix VEX=.VEX:
    IiRequire 686,SSE4
    IiEmitPrefix REPE
    MOV AL,0xB8
    JMP IigBSF.op:
.VEX:
    IiRequire AVX512, MVEX, SPEC
    IiOpEn RM
    IiEmitOpcode 0xB8
    IiModRM /r
    IiDispatchFormat  r32.r32, r64.r64
.r32.r32:
    IiEmitPrefix VEX.128.F3.0F.W0
    RET
.r64.r64:
    IiEmitPrefix VEX.128.F3.0F.W1
    RET
 ENDP IigPOPCNT::
</pre>

<dl id="IigLZCNT">
<dt><a href='#IigHandlers'>&uarr; LZCNT</a></dt>
<dd>Count the Number of Leading Zero Bits</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LZCNT.html">LZCNT</a></dd>
<dt>Category</dt>
<dd>gen,bit</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>LZCNT r16, r/m16
</th><td>F3 0F BD /r
</td></tr>
<tr><th>LZCNT r32, r/m32
</th><td>F3 0F BD /r
</td></tr>
<tr><th>LZCNT r64, r/m64
</th><td>REX.W F3 0F BD /r
</td></tr>
<tr><th>LZCNT r32, r32
</th><td>VEX.128.F3.0F.W0 BD /r
</td></tr>
<tr><th>LZCNT r64, r64
</th><td>VEX.128.F3.0F.W1 BD /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0xF30FBD</dd>
<dt>See also</dt>
<dd><a href="#IigBSR">BSR</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3341.htm">t3341</a>
<a class="EXT" href="../eatests/t6246.htm">t6246</a>
</dd>
</dl><pre>
IigLZCNT:: PROC
    IiAllowModifier PREFIX
    IiDispatchPrefix VEX=.VEX:
    IiRequire 686,SSE4
    IiEmitPrefix REPE
    MOV AL,0xBD
    JMP IigBSF.op:
.VEX:IiRequire AVX512, MVEX, ABM
    IiOpEn RM
    IiEmitOpcode 0xBD
    IiModRM /r
    IiDispatchFormat r32.r32, r64.r64
.r32.r32:
    IiEmitPrefix VEX.128.F3.0F.W0
    RET
.r64.r64:
    IiEmitPrefix VEX.128.F3.0F.W1
    RET
 ENDP IigLZCNT::
</pre>

<dl id="IigTZCNT">
<dt><a href="#IigHandlers">&uarr; TZCNT</a></dt>
<dd>Count the Number of Trailing Zero Bits</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/TZCNT.html">TZCNT</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>TZCNT r16, r/m16
</th><td>F3 0F BC /r
</td></tr>
<tr><th>TZCNT r32, r/m32
</th><td>F3 0F BC /r
</td></tr>
<tr><th>TZCNT r64, r/m64
</th><td>REX.W F3 0F BC /r
</td></tr>
<tr><th>TZCNT r32, r32
</th><td>VEX.128.F3.0F.W0 BC /r
</td></tr>
<tr><th>TZCNT r64, r64
</th><td>VEX.128.F3.0F.W1 BC /r
</td></tr>
</table></dd>
<dt>Operands</dt>
<dd>r, r/mem</dd>
<dt>Opcode</dt>
<dd>0xF30FBC</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6246.htm">t6246</a>
</dd>
</dl><pre>
IigTZCNT:: PROC
    IiAllowModifier PREFIX
    IiDispatchPrefix VEX=.VEX:
    IiRequire 686,SSE4
    IiEmitPrefix REPE
    MOV AL,0xBC
    JMP IigBSF.op:
.VEX:IiRequire AVX512, MVEX, ABM
    IiEmitOpcode 0xBC
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat r32.r32, r64.r64
.r32.r32:
    IiEmitPrefix VEX.128.F3.0F.W0
    RET
.r64.r64:
    IiEmitPrefix VEX.128.F3.0F.W1
    RET
  ENDP IigTZCNT::
</pre>

<dl id="IigBOUND">
<dt><a href="#IigHandlers">&uarr; BOUND</a></dt>
<dd>Check Array Index Against Bounds</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/BOUND.html">BOUND</a></dd>
<dt>Category</dt>
<dd>gen,break stack</dd>
<dt>Operands</dt>
<dd>Gv,Ma,<i><span title="nr: -, group: -, type: v, address: F">Fv</span></i></dd>
<dt>Opcode</dt>
<dd>0x62 ^D /r</dd>
<dt>Flags</dt>
<dd>modified:<b>..I.....</b>, defined:<b>..I.....</b>, values:<b>..I.....</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3206.htm">t3206</a>
</dd>
</dl><pre>
IigBOUND:: PROC
    IiRequire 186
    IiAbortIf64
    IiEmitOpcode 0x62
    IiOpEn RM
    IiModRM /r
    IiDataSize
    IiDispatchFormat r16.m16, r32.m32
.r32.m32:
.r16.m16:
    RET
 ENDP IigBOUND::
</pre>

<dl id="IigBSWAP">
<dt><a href="#IigHandlers">&uarr; BSWAP</a></dt>
<dd>Byte Swap</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/BSWAP.html">BSWAP</a></dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Zvqp</b></dd>
<dt>Opcode</dt>
<dd>0x0FC8 ^+r</dd>
<dt>CPU</dt>
<dd>04+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_BSWAP_0FC8"><sup>39</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3205.htm">t3205</a>
</dd>
</dl><pre>
IigBSWAP:: PROC
    IiRequire 486
    IiDataSize Operand1
    IiDispatchFormat r32, r64
.r32:
.r64:
    MOV EAX,[EDI+II.Operand1.Low]
    AND AL,iiReg_Ord16
    BTR EAX,3
    JNC .R:
    IiEmitPrefix REX.B
 .R:ADD AL,0xC8
    IiEmitOpcode 0x0F,EAX
    RET
 ENDP IigBSWAP::
</pre>

<dl id="IigIN">
<dt><a href="#IigHandlers">&uarr; IN</a></dt>
<dd>Input from Port</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/IN.html">IN</a></dd>
<dt>Category</dt>
<dd>gen,inout</dd>
<dt>Operands</dt>
<dd><b><span title="nr: 0, group: gen, type: b, address: -">AL</span></b>,Ib | <b><span title="nr: 0, group: gen, type: v, address: -">eAX</span></b>,Ib | <b><span title="nr: 0, group: gen, type: b, address: -">AL</span></b>,<span title="nr: 2, group: gen, type: w, address: -">DX</span> | <b><span title="nr: 0, group: gen, type: v, address: -">eAX</span></b>,<span title="nr: 2, group: gen, type: w, address: -">DX</span></dd>
<dt>Opcode</dt>
<dd>0xE4 ^w | 0xE5 ^W | 0xEC ^w | 0xED ^W</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3208.htm">t3208</a>
</dd>
</dl><pre>
IigIN:: PROC
    IiRequire PRIV
    IiAllowModifier IMM
    IiDataSize Operand1
    IiDispatchNotAccum Operand1, .E6763:
    IiDispatchFormat r8.r16, r16.r16, r32.r16, r8.imm, r16.imm, r32.imm
.E6763:IiAbort '6763' ; Only AL/AX/EAX can be used in I/O instruction.
.r8.r16:
.r16.r16:
.r32.r16:
    IiAbortIfNot Operand2,DX
    MOV AL,0xEC
    CMP DH,r8:
    JE .D:
    INC EAX
 .D:IiEmitOpcode EAX ; 0xEC or 0xED
    RET
.r8.imm:
.r16.imm:
.r32.imm:
    MOV AL,0xE4
    CMP DH,r8:
    JE .E:
    INC EAX
 .E:IiEmitOpcode EAX ; 0xE4 or 0xE5
    IiEmitImm Operand2,BYTE
    RET
 ENDP IigIN::
</pre>

<dl id="IigOUT">
<dt><a href="#IigHandlers">&uarr; OUT</a></dt>
<dd>Output to Port</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/OUT.html">OUT</a></dd>
<dt>Category</dt>
<dd>gen,inout</dd>
<dt>Operands</dt>
<dd><b>Ib</b>,<span title="nr: 0, group: gen, type: b, address: -">AL</span> | <b>Ib</b>,<span title="nr: 0, group: gen, type: v, address: -">eAX</span> | <b><span title="nr: 2, group: gen, type: w, address: -">DX</span></b>,<span title="nr: 0, group: gen, type: b, address: -">AL</span> | <b><span title="nr: 2, group: gen, type: w, address: -">DX</span></b>,<span title="nr: 0, group: gen, type: v, address: -">eAX</span></dd>
<dt>Opcode</dt>
<dd>0xE6 ^w | 0xE7 ^W | 0xEE ^w | 0xEF ^W</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3208.htm">t3208</a>
</dd>
</dl><pre>
IigOUT:: PROC
    IiRequire PRIV
    IiAllowModifier IMM
    IiDataSize Operand2
    IiDispatchNotAccum Operand2, .E6763:
    IiDispatchFormat r16.r8, r16.r16, r16.r32, imm.r8, imm.r16, imm.r32
.E6763:IiAbort '6763' ; Only AL/AX/EAX can be used in I/O instruction.
.r16.r8:
.r16.r16:
.r16.r32:
    IiAbortIfNot Operand1,DX
    MOV AL,0xEE
    CMP DL,r8:
    JE .D:
    INC EAX
 .D:IiEmitOpcode EAX ; 0xEE or 0xEF
    RET
.imm.r8:
.imm.r16:
.imm.r32:
    MOV AL,0xE6
    CMP DL,r8:
    JE .E:
    INC EAX
 .E:IiEmitOpcode EAX ; 0xE6 or 0xE7.
    IiEmitImm Operand1,BYTE
    RET
 ENDP IigOUT::
</pre>

<dl id="IigCMPS">
<dt><a href="#IigHandlers">&uarr; CMPS</a></dt>
<dd>Compare String Operands</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CMPS:CMPSB:CMPSW:CMPSD:CMPSQ.html">CMPS</a></dd>
<dt>Category</dt>
<dd>gen,arith string,binary</dd>
<dt>Operands</dt>
<dd><span title="nr: -, group: -, type: b, address: Y">Yb</span>,<span title="nr: -, group: -, type: b, address: X">Xb</span> | <span title="nr: -, group: -, type: wo, address: Y">Ywo</span>,<span title="nr: -, group: -, type: wo, address: X">Xwo</span> | <span title="nr: -, group: -, type: v, address: Y">Yv</span>,<span title="nr: -, group: -, type: v, address: X">Xv</span> | <span title="nr: -, group: -, type: vqp, address: Y">Yvqp</span>,<span title="nr: -, group: -, type: vqp, address: X">Xvqp</span></dd>
<dt>Opcode</dt>
<dd>0xA6 ^w | 0xA7 ^W | 0xA7 ^W | 0xA7 ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3214.htm">t3214</a>
</dd>
</dl><pre>
IigCMPS:: PROC
      IiAllowPrefix RepAny,SegAny
      IiDataSize Operand1+Operand2, SpecifyMem=OFF
      MOV AL,0xA6
      IiDispatchData BYTE=.B:
      INC EAX ; 0xA7
 .B:  IiEmitOpcode EAX
      IiDispatchFormat none, mem.mem
.mem.mem:
      IiStringSource Operand1
      IiStringDestination Operand2
      MOV EAX,[EDI+II.Operand1.Status]
      MOV ECX,[EDI+II.Operand2.Status]
      MOV EDX,expAwidth
      AND EAX,EDX
      JZ .none:
      AND ECX,EDX
      JZ .none:
      CMP EAX,ECX
      JE .none:
      Msg '6759' ; Address width of both operands must be the same.
.none:RET
 ENDP IigCMPS::
</pre>

<dl id="IigCMPSB">
<dt><a href="#IigCMPS">&uarr; CMPSB</a></dt>
<dd>Compare BYTE String Operands</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CMPS:CMPSB:CMPSW:CMPSD:CMPSQ.html">CMPSB</a></dd>
<dt>Category</dt>
<dd>gen,arith string,binary</dd>
<dt>Operands</dt>
<dd><i><span title="nr: -, group: -, type: b, address: Y">Yb</span></i>,<i><span title="nr: -, group: -, type: b, address: X">Xb</span></i></dd>
<dt>Opcode</dt>
<dd>0xA6 ^w</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3214.htm">t3214</a>
</dd>
</dl><pre>
IigCMPSB:: PROC
    IiSuffixed CMPS,B
 ENDP IigCMPSB::
</pre>

<dl id="IigCMPSW">
<dt><a href="#IigCMPS">&uarr; CMPSW</a></dt>
<dd>Compare WORD String Operands</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CMPS:CMPSB:CMPSW:CMPSD:CMPSQ.html">CMPSW</a></dd>
<dt>Category</dt>
<dd>gen,arith string,binary</dd>
<dt>Operands</dt>
<dd><i><span title="nr: -, group: -, type: wo, address: Y">Ywo</span></i>,<i><span title="nr: -, group: -, type: wo, address: X">Xwo</span></i> | <i><span title="nr: -, group: -, type: wo, address: Y">Ywo</span></i>,<i><span title="nr: -, group: -, type: wo, address: X">Xwo</span></i></dd>
<dt>Opcode</dt>
<dd>0xA7 ^W | 0xA7 ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3214.htm">t3214</a>
</dd>
</dl><pre>
IigCMPSW:: PROC
    IiSuffixed CMPS,W
 ENDP IigCMPSW::
</pre>

<dl id="IigCMPSD">
<dt><a href="#IigCMPS">&uarr; CMPSD</a></dt>
<dd>Compare DWORD String Operands overloaded with<br/>
<a class="EXT" href="iip.htm#IipCMPSD">Compare Packed Double-FP Values</a></dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CMPSD.html">CMPSD</a></dd>
<dt>Category</dt>
<dd>gen,arith string,binary</dd>
<dt>Operands</dt>
<dd><i><span title="nr: -, group: -, type: do, address: Y">Ydo</span></i>,<i><span title="nr: -, group: -, type: do, address: X">Xdo</span></i> | <i><span title="nr: -, group: -, type: do, address: Y">Ydo</span></i>,<i><span title="nr: -, group: -, type: do, address: X">Xdo</span></i> | <b>Vsd</b>,Wsd,Ib</dd>
<dt>Opcode</dt>
<dd>0xA7 ^W | 0xA7 ^W | 0xF20FC2 /r</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3214.htm">t3214</a>
</dd>
</dl><pre>
IigCMPSD:: PROC
    IiRequire 386
    CMP EDX,xmm.xmm.imm
    JE IipCMPSD::
    CMP EDX,xmm.mem.imm
    JE IipCMPSD::
    IiSuffixed CMPS,D
 ENDP IigCMPSD::
</pre>

<dl id="IigCMPSQ">
<dt><a href="#IigCMPS">&uarr; CMPSQ</a></dt>
<dd>Compare QWORD String Operands</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CMPS:CMPSB:CMPSW:CMPSD:CMPSQ.html">CMPSQ</a></dd>
<dt>Category</dt>
<dd>gen,arith string,binary</dd>
<dt>Operands</dt>
<dd><i><span title="nr: -, group: -, type: qp, address: Y">Yqp</span></i>,<i><span title="nr: -, group: -, type: qp, address: X">Xqp</span></i></dd>
<dt>Opcode</dt>
<dd>0xA7 ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3214.htm">t3214</a>
</dd>
</dl><pre>
IigCMPSQ:: PROC
    IiRequire X64
    IiSuffixed CMPS,Q
 ENDP IigCMPSQ::
</pre>

<dl id="IigLODS">
<dt><a href="#IigHandlers">&uarr; LODS</a></dt>
<dd>Load from String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LODS:LODSB:LODSW:LODSD:LODSQ.html">LODS</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b>,<span title="nr: -, group: -, type: b, address: X">Xb</span> | <b><i><span title="nr: 0, group: gen, type: wo, address: -">AX</span></i></b>,<span title="nr: -, group: -, type: wo, address: X">Xwo</span> | <b><i><span title="nr: 0, group: gen, type: v, address: -">eAX</span></i></b>,<span title="nr: -, group: -, type: v, address: X">Xv</span> | <b><i><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></i></b>,<span title="nr: -, group: -, type: vqp, address: X">Xvqp</span></dd>
<dt>Opcode</dt>
<dd>0xAC ^w | 0xAD ^W | 0xAD ^W | 0xAD ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3211.htm">t3211</a>
</dd>
</dl><pre>
IigLODS:: PROC
      IiAllowPrefix RepAny,SegAny
      IiDataSize SpecifyMem=OFF
      MOV AL,0xAC
      IiDispatchData BYTE=.B:
      INC EAX ; 0xAD
  .B: IiEmitOpcode EAX
      IiDispatchFormat none, mem, r8:, r16, r32, r64, r8.mem, r16.mem, r32.mem, r64.mem
.E6755:Msg '6755',EAX ; Unexpected !1R. Only accumulator register AL/AX/EAX/RAX is accepted here.
      RET
.mem: IiStringSource Operand1
      RET
.r8.mem:
.r16.mem:
.r32.mem:
.r64.mem:
      IiStringSource Operand2
.r8:
.r16:
.r32:
.r64: MOV EAX,[EDI+II.Operand1.Low]
      IiDispatchNotAccum Operand1,.E6755:
.none:RET
     ENDP IigLODS::
</pre>

<dl id="IigLODSB">
<dt><a href="#IigLODS">&uarr; LODSB</a></dt>
<dd>Load BYTE from String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LODS:LODSB:LODSW:LODSD:LODSQ.html">LODSB</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b>,<i><span title="nr: -, group: -, type: b, address: X">Xb</span></i></dd>
<dt>Opcode</dt>
<dd>0xAC ^w</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3211.htm">t3211</a>
</dd>
</dl><pre>
IigLODSB:: PROC
    IiSuffixed LODS,B
 ENDP IigLODSB::
</pre>

<dl id="IigLODSW">
<dt><a href="#IigLODS">&uarr; LODSW</a></dt>
<dd>Load WORD from String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LODS:LODSB:LODSW:LODSD:LODSQ.html">LODSW</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: wo, address: -">AX</span></i></b>,<i><span title="nr: -, group: -, type: wo, address: X">Xwo</span></i> | <b><i><span title="nr: 0, group: gen, type: wo, address: -">AX</span></i></b>,<i><span title="nr: -, group: -, type: wo, address: X">Xwo</span></i></dd>
<dt>Opcode</dt>
<dd>0xAD ^W | 0xAD ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3211.htm">t3211</a>
</dd>
</dl><pre>
IigLODSW:: PROC
    IiSuffixed LODS,W
 ENDP IigLODSW::
</pre>

<dl id="IigLODSD">
<dt><a href="#IigLODS">&uarr; LODSD</a></dt>
<dd>Load DWORD from String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LODS:LODSB:LODSW:LODSD:LODSQ.html">LODSD</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: do, address: -">EAX</span></i></b>,<i><span title="nr: -, group: -, type: do, address: X">Xdo</span></i> | <b><i><span title="nr: 0, group: gen, type: do, address: -">EAX</span></i></b>,<i><span title="nr: -, group: -, type: do, address: X">Xdo</span></i></dd>
<dt>Opcode</dt>
<dd>0xAD ^W | 0xAD ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3211.htm">t3211</a>
</dd>
</dl><pre>
IigLODSD:: PROC
    IiRequire 386
    IiSuffixed LODS,D
 ENDP IigLODSD::
</pre>

<dl id="IigLODSQ">
<dt><a href="#IigLODS">&uarr; LODSQ</a></dt>
<dd>Load QWORD from String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LODS:LODSB:LODSW:LODSD:LODSQ.html">LODSQ</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: gen, type: qp, address: -">RAX</span></i></b>,<i><span title="nr: -, group: -, type: qp, address: X">Xqp</span></i></dd>
<dt>Opcode</dt>
<dd>0xAD ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3211.htm">t3211</a>
</dd>
</dl><pre>
IigLODSQ:: PROC
    IiRequire X64
    IiSuffixed LODS,Q
 ENDP IigLODSQ::
</pre>

<dl id="IigMOVS">
<dt><a href="#IigHandlers">&uarr; MOVS</a></dt>
<dd>Move Data from String to String.</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/MOVS:MOVSB:MOVSW:MOVSD:MOVSQ.html">MOVS</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><span title="nr: -, group: -, type: b, address: Y">Yb</span></b>,<span title="nr: -, group: -, type: b, address: X">Xb</span> | <b><span title="nr: -, group: -, type: wo, address: Y">Ywo</span></b>,<span title="nr: -, group: -, type: wo, address: X">Xwo</span> | <b><span title="nr: -, group: -, type: v, address: Y">Yv</span></b>,<span title="nr: -, group: -, type: v, address: X">Xv</span> | <b><span title="nr: -, group: -, type: vqp, address: Y">Yvqp</span></b>,<span title="nr: -, group: -, type: vqp, address: X">Xvqp</span></dd>
<dt>Opcode</dt>
<dd>0xA4 ^w | 0xA5 ^W | 0xA5 ^W | 0xA5 ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3213.htm">t3213</a>
</dd>
</dl><pre>
IigMOVS:: PROC
      CMP DL,xmm
      JE .SSE:
      CMP DH,xmm
      JE .SSE:
.STR: IiAllowPrefix RepAny,SegAny
      IiDataSize Operand1+Operand2,SpecifyMem=OFF
      MOV AL,0xA4
      IiDispatchData BYTE=.B:
      INC EAX ; 0xA5
  .B: IiEmitOpcode EAX
      IiDispatchFormat none, mem.mem
.mem.mem:
      IiStringDestination Operand1
      IiStringSource      Operand2
      MOV EAX,[EDI+II.Operand1.Status]
      MOV ECX,[EDI+II.Operand2.Status]
      MOV EDX,expAwidth
      AND EAX,EDX
      JZ .none:
      AND ECX,EDX
      JZ .none:
      CMP EAX,ECX
      JE .none:
      Msg '6759' ; Address width of both operands must be the same.
.none:RET
.SSE: JNSt  [EDI+II.MfgSuffix],iiMfgDATA_DWORD, .STR:
      RstSt [EDI+II.MfgSuffix],iiMfgDATA_DWORD
      IiAllowModifier CODE
      IiEmitPrefix REPNE
      IiEmitOpcode 0x0F
      IiModRM /r
      IiDispatchFormat xmm.mem, mem.xmm, xmm.xmm
.mem.xmm:
      IiEmitOpcode 0x11
      IiEncoding CODE=LONG,DATA=QWORD
      IiOpEn MR
      RET
.xmm.xmm:
      IiDispatchCode LONG=.mem.xmm:
.xmm.mem:
      IiEmitOpcode 0x10
      IiEncoding CODE=SHORT,DATA=QWORD
      IiOpEn RM
      RET
 ENDP IigMOVS::
</pre>

<dl id="IigMOVSB">
<dt><a href="#IigMOVS">&uarr; MOVSB</a></dt>
<dd>Move BYTE Data from String to String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/MOVS:MOVSB:MOVSW:MOVSD:MOVSQ.html">MOVSB</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: b, address: Y">Yb</span></i></b>,<i><span title="nr: -, group: -, type: b, address: X">Xb</span></i></dd>
<dt>Opcode</dt>
<dd>0xA4 ^w</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3213.htm">t3213</a>
</dd>
</dl><pre>
IigMOVSB:: PROC
    IiSuffixed MOVS,B
 ENDP IigMOVSB::
</pre>

<dl id="IigMOVSW">
<dt><a href="#IigMOVS">&uarr; MOVSW</a></dt>
<dd>Move WORD Data from String to String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/MOVS:MOVSB:MOVSW:MOVSD:MOVSQ.html">MOVSW</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: wo, address: Y">Ywo</span></i></b>,<i><span title="nr: -, group: -, type: wo, address: X">Xwo</span></i> | <b><i><span title="nr: -, group: -, type: wo, address: Y">Ywo</span></i></b>,<i><span title="nr: -, group: -, type: wo, address: X">Xwo</span></i></dd>
<dt>Opcode</dt>
<dd>0xA5 ^W | 0xA5 ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3213.htm">t3213</a>
</dd>
</dl><pre>
IigMOVSW:: PROC
    IiSuffixed MOVS,W
 ENDP IigMOVSW::
</pre>

<dl id="IigMOVSD">
<dt><a href="#IigMOVS">&uarr; MOVSD</a></dt>
<dd>Move DWORD Data from String to String. Move or Merge Scalar Double-Precision Floating-Point value.</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/MOVS:MOVSB:MOVSW:MOVSD:MOVSQ.html">MOVSB</a>,
<a class="EXTW" href="http://www.felixcloutier.com/x86/MOVSD.html">MOVSD</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: do, address: Y">Ydo</span></i></b>,<i><span title="nr: -, group: -, type: do, address: X">Xdo</span></i> | <b><i><span title="nr: -, group: -, type: do, address: Y">Ydo</span></i></b>,<i><span title="nr: -, group: -, type: do, address: X">Xdo</span></i> | <b>Vsd</b>,Wsd | <b>Wsd</b>,Vsd</dd>
<dt>Opcode</dt>
<dd>0xA5 ^W | 0xA5 ^W | 0xF20F10 /r | 0xF20F11 /r</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3213.htm">t3213</a>
</dd>
</dl><pre>
IigMOVSD:: PROC
    IiRequire 386
    IiSuffixed MOVS,D
 ENDP IigMOVSD::
</pre>

<dl id="IigMOVSQ">
<dt><a href="#IigMOVS">&uarr; MOVSQ</a></dt>
<dd>Move QWORD Data from String to String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/MOVS:MOVSB:MOVSW:MOVSD:MOVSQ.html">MOVSQ</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: qp, address: Y">Yqp</span></i></b>,<i><span title="nr: -, group: -, type: qp, address: X">Xqp</span></i></dd>
<dt>Opcode</dt>
<dd>0xA5 ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3213.htm">t3213</a>
</dd>
</dl><pre>
IigMOVSQ:: PROC
    IiRequire X64
    IiSuffixed MOVS,Q
 ENDP IigMOVSQ::
</pre>

<dl id="IigSCAS">
<dt><a href="#IigHandlers">&uarr; SCAS</a></dt>
<dd>Scan String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SCAS:SCASB:SCASW:SCASD.html">SCAS</a></dd>
<dt>Category</dt>
<dd>gen,arith string,binary</dd>
<dt>Operands</dt>
<dd><span title="nr: -, group: -, type: b, address: Y">Yb</span>,<i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i> | <span title="nr: -, group: -, type: wo, address: Y">Ywo</span>,<i><span title="nr: 0, group: gen, type: wo, address: -">AX</span></i> | <span title="nr: -, group: -, type: v, address: Y">Yv</span>,<i><span title="nr: 0, group: gen, type: v, address: -">eAX</span></i> | <span title="nr: -, group: -, type: vqp, address: Y">Yvqp</span>,<i><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></i></dd>
<dt>Opcode</dt>
<dd>0xAE ^w | 0xAF ^W | 0xAF ^W | 0xAF ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3212.htm">t3212</a>
</dd>
</dl><pre>
IigSCAS:: PROC
    IiAllowPrefix RepAny,SEGES
    IiDataSize SpecifyMem=OFF
    MOV AL,0xAE
    IiDispatchData BYTE=.B:
    INC EAX
 .B:IiEmitOpcode EAX
    IiDispatchFormat none, mem, mem.r8, mem.r16, mem.r32, mem.r64
.E6755:Msg '6755',EAX; Unexpected !1R. Only accumulator register AL/AX/EAX/RAX is accepted here.
    RET
.mem.r8:
.mem.r16:
.mem.r32:
.mem.r64:
      MOV EAX,[EDI+II.Operand2.Low]
      IiDispatchNotAccum Operand2,.E6755:
.mem: IiStringDestination Operand1
.none:RET
 ENDP IigSCAS::
</pre>

<dl id="IigSCASB">
<dt><a href="#IigSCAS">&uarr; SCASB</a></dt>
<dd>Scan BYTE in String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SCAS:SCASB:SCASW:SCASD.html">SCASB</a></dd>
<dt>Category</dt>
<dd>gen,arith string,binary</dd>
<dt>Operands</dt>
<dd><i><span title="nr: -, group: -, type: b, address: Y">Yb</span></i>,<i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></dd>
<dt>Opcode</dt>
<dd>0xAE ^w</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3212.htm">t3212</a>
</dd>
</dl><pre>
IigSCASB:: PROC
    IiSuffixed SCAS,B
 ENDP IigSCASB::
</pre>

<dl id="IigSCASW">
<dt><a href="#IigSCAS">&uarr; SCASW</a></dt>
<dd>Scan WORD in String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SCAS:SCASB:SCASW:SCASD.html">SCASW</a></dd>
<dt>Category</dt>
<dd>gen,arith string,binary</dd>
<dt>Operands</dt>
<dd><i><span title="nr: -, group: -, type: wo, address: Y">Ywo</span></i>,<i><span title="nr: 0, group: gen, type: wo, address: -">AX</span></i> | <i><span title="nr: -, group: -, type: wo, address: Y">Ywo</span></i>,<i><span title="nr: 0, group: gen, type: wo, address: -">AX</span></i></dd>
<dt>Opcode</dt>
<dd>0xAF ^W | 0xAF ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3212.htm">t3212</a>
</dd>
</dl><pre>
IigSCASW:: PROC
    IiSuffixed SCAS,W
 ENDP IigSCASW::
</pre>

<dl id="IigSCASD">
<dt><a href="#IigSCAS">&uarr; SCASD</a></dt>
<dd>Scan DWORD in String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/SCAS:SCASB:SCASW:SCASD.html">SCASD</a></dd>
<dt>Category</dt>
<dd>gen,arith string,binary</dd>
<dt>Operands</dt>
<dd><i><span title="nr: -, group: -, type: do, address: Y">Ydo</span></i>,<i><span title="nr: 0, group: gen, type: do, address: -">EAX</span></i> | <i><span title="nr: -, group: -, type: do, address: Y">Ydo</span></i>,<i><span title="nr: 0, group: gen, type: do, address: -">EAX</span></i></dd>
<dt>Opcode</dt>
<dd>0xAF ^W | 0xAF ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3212.htm">t3212</a>
</dd>
</dl><pre>
IigSCASD:: PROC
    IiRequire 386
    IiSuffixed SCAS,D
 ENDP IigSCASD::
</pre>

<dl id="IigSCASQ">
<dt><a href="#IigSCAS">&uarr; SCASQ</a></dt>
<dd>Scan QWORD in String</dd>
<dt>Category</dt>
<dd>gen,arith string,binary</dd>
<dt>Operands</dt>
<dd><i><span title="nr: -, group: -, type: qp, address: Y">Yqp</span></i>,<i><span title="nr: 0, group: gen, type: qp, address: -">RAX</span></i></dd>
<dt>Opcode</dt>
<dd>0xAF ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b>, modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3212.htm">t3212</a>
</dd>
</dl><pre>
IigSCASQ:: PROC
    IiRequire X64
    IiSuffixed SCAS,Q
 ENDP IigSCASQ::
</pre>

<dl id="IigINS">
<dt><a href="#IigHandlers">&uarr; INS</a></dt>
<dd>Input from Port to String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/INS:INSB:INSW:INSD.html">INS</a></dd>
<dt>Category</dt>
<dd>gen,inout string</dd>
<dt>Operands</dt>
<dd><b><span title="nr: -, group: -, type: b, address: Y">Yb</span></b>,<span title="nr: 2, group: gen, type: w, address: -">DX</span> | <b><span title="nr: -, group: -, type: wo, address: Y">Ywo</span></b>,<span title="nr: 2, group: gen, type: w, address: -">DX</span> | <b><span title="nr: -, group: -, type: v, address: Y">Yv</span></b>,<span title="nr: 2, group: gen, type: w, address: -">DX</span></dd>
<dt>Opcode</dt>
<dd>0x6C ^w | 0x6D ^W | 0x6D ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3215.htm">t3215</a>
</dd>
</dl><pre>
IigINS:: PROC
      IiRequire 186,PRIV
      IiAllowPrefix RepAny,SEGES
      IiDataSize Operand1,SpecifyMem=OFF
      IiRemoveREXW
      MOV AL,0x6C
      IiDispatchData BYTE=.B:
      INC EAX ; 0x6D
  .B: IiEmitOpcode EAX
      IiDispatchFormat none, mem, mem.r16
.mem.r16:IiAbortIfNot Operand2,DX
.mem: IiStringDestination Operand1
.none:RET
 ENDP IigINS::
</pre>

<dl id="IigINSB">
<dt><a href="#IigINS">&uarr; INSB</a></dt>
<dd>Input BYTE from Port to String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/INS:INSB:INSW:INSD.html">INSB</a></dd>
<dt>Category</dt>
<dd>gen,inout string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: b, address: Y">Yb</span></i></b>,<i><span title="nr: 2, group: gen, type: w, address: -">DX</span></i></dd>
<dt>Opcode</dt>
<dd>0x6C ^w</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3215.htm">t3215</a>
</dd>
</dl><pre>
IigINSB:: PROC
    IiSuffixed INS,B
 ENDP IigINSB::
</pre>

<dl id="IigINSW">
<dt><a href="#IigINS">&uarr; INSW</a></dt>
<dd>Input WORD from Port to String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/INS:INSB:INSW:INSD.html">INSW</a></dd>
<dt>Category</dt>
<dd>gen,inout string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: wo, address: Y">Ywo</span></i></b>,<i><span title="nr: 2, group: gen, type: w, address: -">DX</span></i></dd>
<dt>Opcode</dt>
<dd>0x6D ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3215.htm">t3215</a>
</dd>
</dl><pre>
IigINSW:: PROC
    IiSuffixed INS,W
 ENDP IigINSW::
</pre>

<dl id="IigINSD">
<dt><a href="#IigINS">&uarr; INSD</a></dt>
<dd>Input DWORD from Port to String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/INS:INSB:INSW:INSD.html">INSD</a></dd>
<dt>Category</dt>
<dd>gen,inout string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: do, address: Y">Ydo</span></i></b>,<i><span title="nr: 2, group: gen, type: w, address: -">DX</span></i></dd>
<dt>Opcode</dt>
<dd>0x6D ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3215.htm">t3215</a>
</dd>
</dl><pre>
IigINSD:: PROC
    IiRequire 386
    IiSuffixed INS,D
 ENDP IigINSD::
</pre>

<dl id="IigOUTS">
<dt><a href="#IigHandlers">&uarr; OUTS</a></dt>
<dd>Output String to Port</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/OUTS:OUTSB:OUTSW:OUTSD.html">OUTS</a></dd>
<dt>Category</dt>
<dd>gen,inout string</dd>
<dt>Operands</dt>
<dd><b><span title="nr: 2, group: gen, type: w, address: -">DX</span></b>,<span title="nr: -, group: -, type: b, address: X">Xb</span> | <b><span title="nr: 2, group: gen, type: w, address: -">DX</span></b>,<span title="nr: -, group: -, type: wo, address: X">Xwo</span> | <b><span title="nr: 2, group: gen, type: w, address: -">DX</span></b>,<span title="nr: -, group: -, type: v, address: X">Xv</span></dd>
<dt>Opcode</dt>
<dd>0x6E ^w | 0x6F ^W | 0x6F ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3216.htm">t3216</a>
</dd>
</dl><pre>
IigOUTS:: PROC
    IiRequire 186,PRIV
    IiAllowPrefix RepAny,SegAny
    IiDataSize Operand2,SpecifyMem=OFF
    IiRemoveREXW
    MOV AL,0x6E
    IiDispatchData BYTE=.B:
    INC EAX ; 0x6F
 .B:IiEmitOpcode EAX
    IiDispatchFormat none, r16, r16.mem
.r16.mem:IiStringSource Operand2
.r16:IiAbortIfNot Operand1,DX
.none:RET
 ENDP IigOUTS::
</pre>

<dl id="IigOUTSB">
<dt><a href="#IigOUTS">&uarr; OUTSB</a></dt>
<dd>Output BYTE String to Port</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/OUTS:OUTSB:OUTSW:OUTSD.html">OUTSB</a></dd>
<dt>Category</dt>
<dd>gen,inout string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 2, group: gen, type: w, address: -">DX</span></i></b>,<i><span title="nr: -, group: -, type: b, address: X">Xb</span></i></dd>
<dt>Opcode</dt>
<dd>0x6E ^w</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3216.htm">t3216</a>
</dd>
</dl><pre>
IigOUTSB:: PROC
    IiSuffixed OUTS,B
 ENDP IigOUTSB::
</pre>

<dl id="IigOUTSW">
<dt><a href="#IigOUTS">&uarr; OUTSW</a></dt>
<dd>Output WORD String to Port</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/OUTS:OUTSB:OUTSW:OUTSD.html">OUTSW</a></dd>
<dt>Category</dt>
<dd>gen,inout string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 2, group: gen, type: w, address: -">DX</span></i></b>,<i><span title="nr: -, group: -, type: wo, address: X">Xwo</span></i></dd>
<dt>Opcode</dt>
<dd>0x6F ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3216.htm">t3216</a>
</dd>
</dl><pre>
IigOUTSW:: PROC
    IiSuffixed OUTS,W
 ENDP IigOUTSW::
</pre>

<dl id="IigOUTSD">
<dt><a href="#IigOUTS">&uarr; OUTSD</a></dt>
<dd>Output DWORD String to Port</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/OUTS:OUTSB:OUTSW:OUTSD.html">OUTSD</a></dd>
<dt>Category</dt>
<dd>gen,inout string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 2, group: gen, type: w, address: -">DX</span></i></b>,<i><span title="nr: -, group: -, type: do, address: X">Xdo</span></i></dd>
<dt>Opcode</dt>
<dd>0x6F ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3216.htm">t3216</a>
</dd>
</dl><pre>
IigOUTSD:: PROC
    IiRequire 386
    IiSuffixed OUTS,D
 ENDP IigOUTSD::
</pre>

<dl id="IigSTOS">
<dt><a href="#IigSTOS">&uarr; STOS</a></dt>
<dd>Store String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/STOS:STOSB:STOSW:STOSD:STOSQ.html">STOS</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><span title="nr: -, group: -, type: b, address: Y">Yb</span></b>,<i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i> | <b><span title="nr: -, group: -, type: wo, address: Y">Ywo</span></b>,<i><span title="nr: 0, group: gen, type: wo, address: -">AX</span></i> | <b><span title="nr: -, group: -, type: v, address: Y">Yv</span></b>,<i><span title="nr: 0, group: gen, type: v, address: -">eAX</span></i> | <b><span title="nr: -, group: -, type: vqp, address: Y">Yvqp</span></b>,<i><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></i></dd>
<dt>Opcode</dt>
<dd>0xAA ^w | 0xAB ^W | 0xAB ^W | 0xAB ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3210.htm">t3210</a>
</dd>
</dl><pre>
IigSTOS:: PROC
    IiAllowPrefix RepAny,SEGES
    IiDataSize SpecifyMem=OFF
    MOV AL,0xAA
    IiDispatchData BYTE=.B:
    INC EAX
 .B:IiEmitOpcode EAX
    IiDispatchFormat none, mem, mem.r8, mem.r16, mem.r32, mem.r64
.E6755:Msg '6755',EAX; Unexpected !1R. Only accumulator register AL/AX/EAX/RAX is accepted here.
    RET
.mem.r8:
.mem.r16:
.mem.r32:
.mem.r64
     MOV EAX,[EDI+II.Operand2.Low]
     IiDispatchNotAccum Operand2, .E6755:
.mem:IiStringDestination Operand1
.none:RET
     ENDP IigSTOS::
</pre>

<dl id="IigSTOSB">
<dt><a href="#IigSTOS">&uarr; STOSB</a></dt>
<dd>Store BYTE to String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/STOS:STOSB:STOSW:STOSD:STOSQ.html">STOSB</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: b, address: Y">Yb</span></i></b>,<i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></dd>
<dt>Opcode</dt>
<dd>0xAA ^w</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3210.htm">t3210</a>
</dd>
</dl><pre>
IigSTOSB:: PROC
    IiSuffixed STOS,B
 ENDP IigSTOSB::
</pre>

<dl id="IigSTOSW">
<dt><a href="#IigSTOS">&uarr; STOSW</a></dt>
<dd>Store WORD to String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/STOS:STOSB:STOSW:STOSD:STOSQ.html">STOSW</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: wo, address: Y">Ywo</span></i></b>,<i><span title="nr: 0, group: gen, type: wo, address: -">AX</span></i> | <b><i><span title="nr: -, group: -, type: wo, address: Y">Ywo</span></i></b>,<i><span title="nr: 0, group: gen, type: wo, address: -">AX</span></i></dd>
<dt>Opcode</dt>
<dd>0xAB ^W | 0xAB ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3210.htm">t3210</a>
</dd>
</dl><pre>
IigSTOSW:: PROC
    IiSuffixed STOS,W
 ENDP IigSTOSW::
</pre>

<dl id="IigSTOSD">
<dt><a href="#IigSTOS">&uarr; STOSD</a></dt>
<dd>Store DWORD to String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/STOS:STOSB:STOSW:STOSD:STOSQ.html">STOSD</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: do, address: Y">Ydo</span></i></b>,<i><span title="nr: 0, group: gen, type: do, address: -">EAX</span></i> | <b><i><span title="nr: -, group: -, type: do, address: Y">Ydo</span></i></b>,<i><span title="nr: 0, group: gen, type: do, address: -">EAX</span></i></dd>
<dt>Opcode</dt>
<dd>0xAB ^W | 0xAB ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>03+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3210.htm">t3210</a>
</dd>
</dl><pre>
IigSTOSD:: PROC
    IiSuffixed STOS,D
 ENDP IigSTOSD::
</pre>

<dl id="IigSTOSQ">
<dt><a href="#IigSTOS">&uarr; STOSQ</a></dt>
<dd>Store QWORD to String</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/STOS:STOSB:STOSW:STOSD:STOSQ.html">STOSQ</a></dd>
<dt>Category</dt>
<dd>gen,datamov string</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: -, type: qp, address: Y">Yqp</span></i></b>,<i><span title="nr: 0, group: gen, type: qp, address: -">RAX</span></i></dd>
<dt>Opcode</dt>
<dd>0xAB ^W</dd>
<dt>Flags</dt>
<dd>tested:<b>.D......</b></dd>
<dt>CPU</dt>
<dd>P4+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3210.htm">t3210</a>
</dd>
</dl><pre>
IigSTOSQ:: PROC
    IiSuffixed STOS,Q
 ENDP IigSTOSQ::
</pre>

<dl id="IigICEBP">
<dt><a href='#IigHandlers'>&uarr; ICEBP</a></dt>
<dd>Emulator INT 1</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0xF1</dd>
<dt>CPU</dt>
<dd>386</dd>
<dt>Documented</dt>
<dd><a class="EXTW" href="http://asm.inightmare.org/opcodelst/index.php?op=ICEBP">asm.inightmare.org/opcodelst/</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3325.htm">t3325</a>
</dd>
</dl><pre>
IigICEBP:: PROC
    IiAbortIf64
    IiRequire 386,UNDOC
    IiEmitOpcode 0xF1
    IiDispatchFormat none
.none:RET
 ENDP IigICEBP::
</pre>

<dl id="IigPSRAQ">
<dt><a href='#IigHandlers'>&uarr; PSRAQ</a></dt>
<dd>Bit Shift Arithmetic Right</dd>
<dt>Category</dt>
<dd>Undocumented. Format xmm,xmm is not available, as opcode 0x660FE3/r is already occupied by
<a class="EXT" href="iim.htm#IimPAVGW">PAVGW</a>.</dd>
<dt>Operands</dt>
<dd>xmm,imm8</dd>
<dt>Opcode</dt>
<dd>0x660F73 /4 ib</dd>
<dt>Documented</dt>
<dd><a class="EXTW" href="https://github.com/rose-compiler/rose/blob/master/src/frontend/Disassemblers/ExtraInstructions.txt">ExtraInstructions.txt</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3600.htm">t3600</a>
</dd>
</dl><pre>
IigPSRAQ:: PROC
    IiRequire 686,SSE,UNDOC
    IiEmitPrefix OTOGGLE
    IiEmitOpcode 0x0F,0x73
    IiOpEn M
    IiModRM /4
    IiEncoding IMM=BYTE,DATA=OWORD
    IiEmitImm Operand2, BYTE
    IiDispatchFormat xmm.imm
.xmm.imm:RET
 ENDP IigPSRAQ::
</pre>

<dl id="IigCMPXCHG8B">
<dt><a href='#IigHandlers'>&uarr; CMPXCHG8B</a></dt>
<dd>Compare and Exchange 8 Bytes</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CMPXCHG8B:CMPXCHG16B.html">CMPXCHG8B</a></dd>
<dt>Category</dt>
<dd>gen</dd>
<dt>Operands</dt>
<dd>mem64</dd>
<dt>Opcode</dt>
<dd>0x0FC7 /1</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3222.htm">t3222</a>
</dd>
</dl><pre>
IigCMPXCHG8B:: PROC
    IiRequire 586
    IiAllowPrefix LOCK
    IiEmitOpcode 0x0F,0xC7
    IiOpEn M
    IiModRM /1
    IiDispatchFormat mem
.mem:RET
 ENDP IigCMPXCHG8B::
</pre>

<dl id="IigCMPXCHG16B">
<dt><a href='#IigHandlers'>&uarr; CMPXCHG16B</a></dt>
<dd>Compare and Exchange 16 Bytes</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CMPXCHG8B:CMPXCHG16B.html">CMPXCHG16B</a></dd>
<dt>Category</dt>
<dd>gen</dd>
<dt>Operands</dt>
<dd>mem128</dd>
<dt>Opcode</dt>
<dd>REX.W 0x0FC7 /1</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3222.htm">t3222</a>
</dd>
</dl><pre>
IigCMPXCHG16B:: PROC
    IiRequire X64
    IiAbortIfNot64
    IiAllowPrefix LOCK
    IiEmitPrefix REX.W
    IiEmitOpcode 0x0F,0xC7
    IiOpEn M
    IiModRM /1
    IiDispatchFormat mem
.mem:RET
 ENDP IigCMPXCHG16B::
</pre>

<dl id="IigCMPXCHG486">
<dt><a href="#IigHandlers">&uarr; CMPXCHG486</a></dt>
<dd>Compare and Exchange</dd>
<dt>Category</dt>
<dd>deprecated</dd>
<dt>Opcode</dt>
<dd>0xA6 || 0xA7</dd>
<dt>CPU</dt>
<dd>486A only. Use CMPXCHG instead on newer CPUs.</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3221.htm">t3221</a>
</dd>
</dl><pre>
IigCMPXCHG486:: PROC
    IiRequire 486, UNDOC
    IiAllowLocking Operand1
    IiDataSize
    MOV AL,0xA6
    IiDispatchData BYTE=.B:
    INC EAX
 .B:IiEmitOpcode 0x0F,EAX
    IiOpEn MR
    IiModRM /r
    IiDispatchFormat r8.r8,m8.r8,r16.r16,m16.r16,r32.r32,m32.r32
.m32.r32:
.m16.r16:
.r32.r32:
.r16.r16:
.m8.r8:
.r8.r8:
    RET
 ENDP IigCMPXCHG486::
</pre>

<dl id="IigCMPXCHG">
<dt><a href='#IigHandlers'>&uarr; CMPXCHG</a></dt>
<dd>Compare and Exchange</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/CMPXCHG.html">CMPXCHG</a></dd>
<dt>Category</dt>
<dd>gen,datamov arith,binary</dd>
<dt>Operands</dt>
<dd><b>Eb</b>,<b><i><span title="nr: 0, group: gen, type: b, address: -">AL</span></i></b>,Gb | <b>Evqp</b>,<b><i><span title="nr: 0, group: gen, type: vqp, address: -">rAX</span></i></b>,Gvqp</dd>
<dt>Opcode</dt>
<dd>0x0FB0 ^dw /r | 0x0FB1 ^dW /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>04+</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_CMPXCHG_0FB0_0FB1"><sup>34</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3221.htm">t3221</a>
</dd>
</dl><pre>
IigCMPXCHG:: PROC
    IiRequire 486
    IiDataSize
    IiAllowLocking Operand1
    MOV AL,0xB0
    IiDispatchData BYTE=.B:
    INC EAX ; 0xB1
 .B:IiEmitOpcode 0x0F,EAX
    IiOpEn MR
    IiModRM /r
    IiDispatchFormat r8.r8,m8.r8,r16.r16,m16.r16,r32.r32,m32.r32,r64.r64,m64.r64
.m64.r64:
.m32.r32:
.m16.r16:
.r64.r64:
.r32.r32:
.r16.r16:
.m8.r8:
.r8.r8:
    RET
 ENDP IigCMPXCHG::
</pre>

<dl id="IigENTER">
<dt><a href='#IigHandlers'>&uarr; ENTER</a></dt>
<dd>Make Stack Frame for Procedure Parameters</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/ENTER.html">ENTER</a></dd>
<dt>Category</dt>
<dd>gen,stack</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 5, group: gen, type: v, address: -">eBP</span></i></b>,Iw,Ib | <b><i><span title="nr: 5, group: gen, type: vq, address: -">rBP</span></i></b>,Iw,Ib</dd>
<dt>Opcode</dt>
<dd>0xC8 | 0xC8</dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3442.htm">t3442</a>
</dd>
</dl><pre>
IigENTER:: PROC
    IiRequire 186
    IiAllowModifier IMM,DATA
    IiEmitOpcode 0xC8
    IiEmitImm  Operand1, WORD
    IiEmitImm2 Operand2, Max=31
    IiDataSize UseSegment=ON
    IiRemoveREXW
    IiDispatchFormat imm.imm
.E6732:Msg '6732' ; Required operand width 64 can be used in 64bit segment only.    
    RET
.E6736:Msg '6736' ; Required operand width 32 of this instruction cannot be used in 64bit mode.
    IiEncoding DATA=QWORD
    RET    
.imm.imm:
    IiDispatchWidth BITS64=.64
    RET
.64:IiDispatchData DWORD=.E6736:
    RET
 ENDP IigENTER::
</pre>

<dl id="IigENTERW">
<dt><a href='#IigENTER'>&uarr; ENTERW</a></dt>
<dd>Make Stack Frame for Procedure Parameters, WORD pointers</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3442.htm">t3442</a>
</dd>
</dl><pre>
IigENTERW:: PROC
    IiSuffixed ENTER,W
 ENDP IigENTERW::
</pre>

<dl id="IigENTERD">
<dt><a href='#IigHandlers'>&uarr; ENTERD</a></dt>
<dd>Make Stack Frame for Procedure Parameter, DWORD pointers</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3442.htm">t3442</a>
</dd>
</dl><pre>
IigENTERD:: PROC
    IiSuffixed ENTER,D
 ENDP IigENTERD::
</pre>

<dl id="IigENTERQ">
<dt><a href='#IigENTER'>&uarr; ENTERQ</a></dt>
<dd>Make Stack Frame for Procedure Parameter, QWORD pointers</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3442.htm">t3442</a>
</dd>
</dl><pre>
IigENTERQ:: PROC
    IiSuffixed ENTER,Q
 ENDP IigENTERQ::
</pre>

<dl id="IigLEAVE">
<dt><a href='#IigHandlers'>&uarr; LEAVE</a></dt>
<dd>High Level Procedure Exit</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/LEAVE.html">LEAVE</a></dd>
<dt>Category</dt>
<dd>gen,stack</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 5, group: gen, type: v, address: -">eBP</span></i></b> | <b><i><span title="nr: 5, group: gen, type: vq, address: -">rBP</span></i></b></dd>
<dt>Opcode</dt>
<dd>0xC9 | 0xC9</dd>
<dt>CPU</dt>
<dd>01+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3442.htm">t3442</a>
</dd>
</dl><pre>
IigLEAVE:: PROC
    IiRequire 186
    IiAllowModifier DATA
    IiEmitOpcode 0xC9
    IiDataSize UseSegment=ON
    IiRemoveREXW
    IiDispatchFormat none
.E6736:Msg '6736' ; Required operand width 32 of this instruction cannot be used in 64bit mode.
    IiEncoding DATA=QWORD
    RET
.none:
    IiDispatchWidth BITS64=.64
    RET
.64:IiDispatchData DWORD=.E6736:
    RET 
 ENDP IigLEAVE::
</pre>

<dl id="IigLEAVEW">
<dt><a href='#IigLEAVE'>&uarr; LEAVEW</a></dt>
<dd>High Level Procedure Exit, WORD pointers</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3442.htm">t3442</a>
</dd>
</dl><pre>
IigLEAVEW:: PROC
    IiSuffixed LEAVE,W
 ENDP IigLEAVEW::
</pre>

<dl id="IigLEAVED">
<dt><a href='#IigLEAVE'>&uarr; LEAVED</a></dt>
<dd>High Level Procedure Exit, DWORD pointers</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3442.htm">t3442</a>
</dd>
</dl><pre>
IigLEAVED:: PROC
    IiSuffixed LEAVE,D
 ENDP IigLEAVED::
</pre>

<dl id="IigLEAVEQ">
<dt><a href='#IigLEAVE'>&uarr; LEAVEQ</a></dt>
<dd>High Level Procedure Exit, QWORD pointers</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3442.htm">t3442</a>
</dd>
</dl><pre>
IigLEAVEQ:: PROC
    IiSuffixed LEAVE,Q
 ENDP IigLEAVEQ::
</pre>

<!--IigEpilogue--><pre>
  ENDPROGRAM iig
</pre><!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
