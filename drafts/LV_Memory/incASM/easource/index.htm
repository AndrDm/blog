<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='index.htm source file'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>index.htm source file</title>
</head>
<body class='EASOURCE' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>EuroAssembler source
<br/><a href="#Architecture">Architecture</a>
<br/><a href="#Building">Building EuroAssembler</a>
<br/><a href="#CallingConvention">Calling convention</a>
<br/><a href="#DataRepresentation">Data representation</a>
<br/><a href="#DOM">Document Object Model</a>
<br/><a href="#Extensibility">Extensibility</a>
<br/><a href="#FileAccess">File access method</a>
<br/><a href="#Files">Files</a>
<br/><a href="#OsInteractions">Interaction with OS</a>
<br/><a href="#MemoryManagement">Memory management</a>
<br/><a href="#NamingConvention">Naming convention</a>
<br/><a href="#Optimisation">Optimisation</a>
<br/><a href="#SourceAudit">Source audit</a>
</h1>

<h2 id="Architecture"><a href="#top">&uarr; Architecture</a></h2>
<p>EuroAssembler is written in EuroAssembler in a static pseudo object-oriented paradigma (OOP).
<br/>Programming <dfn>object</dfn> is represented by a collection of related memory variables
described by an assembler structure (object <dfn>class</dfn>) <code>STRUC..ENDSTRUC</code>.</p>
<p>The data are manipulated with procedures &ndash; object <dfn>methods</dfn>. Objects are bound
with their methods only by <a href="#NamingConvention">naming convention</a>.
Inheritance and cascading of methods is not utilized.</p>
<p>Each &euro;ASM object and its methods are encapsulated in a separate source file
which is assembled to a COFF module file. All modules are then linked into the final executable
file <q>euroasm.exe</q> (32bit console application for MS Windows).</p>

<br id='Files' class='CLEAR'/>
<!--SRC_ALL-->
<!--Contents between markers {!==SRC_ALL==} and {!==/SRC_ALL==} was generated by "generate.php".-->
<br class='CLEAR'/><div class='FLOATING'>
<table><caption>General object modules</caption>
<tr><th>Class</th><th>Representation</th><th>Module file</th></tr>
<tr><th>CHUNK</th><td><small>Chunk of assembled source text.</small></td><td><a class='EXT' href='../easource/chunk.htm'>chunk.htm</a></td></tr>
<tr><th></th><td><small>DOS stub program for PE executables.</small></td><td><a class='EXT' href='../easource/coffstub.htm'>coffstub.htm</a></td></tr>
<tr><th>CTX</th><td><small>Assembly block context.</small></td><td><a class='EXT' href='../easource/ctx.htm'>ctx.htm</a></td></tr>
<tr><th>DICT</th><td><small>Language dictionary.</small></td><td><a class='EXT' href='../easource/dict.htm'>dict.htm</a></td></tr>
<tr><th>EA</th><td><small>EuroAssembler main object.</small></td><td><a class='EXT' href='../easource/ea.htm'>ea.htm</a></td></tr>
<tr><th>EAOPT</th><td><small>EUROASM options.</small></td><td><a class='EXT' href='../easource/eaopt.htm'>eaopt.htm</a></td></tr>
<tr><th class='DIMMED'></th><td><small>EuroAssembler linker script.</small></td><td><a class='EXT' href='../easource/euroasm.htm'>euroasm.htm</a></td></tr>
<tr><th>EXP</th><td><small>Expression evaluator.</small></td><td><a class='EXT' href='../easource/exp.htm'>exp.htm</a></td></tr>
<tr><th>LST</th><td><small>Assembly listing.</small></td><td><a class='EXT' href='../easource/lst.htm'>lst.htm</a></td></tr>
<tr><th>MAC</th><td><small>Macroinstruction handler.</small></td><td><a class='EXT' href='../easource/mac.htm'>mac.htm</a></td></tr>
<tr><th>MEMBER</th><td><small>Member of structure or library.</small></td><td><a class='EXT' href='../easource/member.htm'>member.htm</a></td></tr>
<tr><th>MSG</th><td><small>EuroAssembler message.</small></td><td><a class='EXT' href='../easource/msg.htm'>msg.htm</a></td></tr>
<tr><th>PASS</th><td><small>Assembly pass through the source.</small></td><td><a class='EXT' href='../easource/pass.htm'>pass.htm</a></td></tr>
<tr><th>PGM</th><td><small>The assembled module.</small></td><td><a class='EXT' href='../easource/pgm.htm'>pgm.htm</a></td></tr>
<tr><th>PGMOPT</th><td><small>PROGRAM options.</small></td><td><a class='EXT' href='../easource/pgmopt.htm'>pgmopt.htm</a></td></tr>
<tr><th class='DIMMED'>PSEUDO</th><td><small>Pseudoinstruction handlers.</small></td><td><a class='EXT' href='../easource/pseudo.htm'>pseudo.htm</a></td></tr>
<tr><th>RELOC</th><td><small>Relocation.</small></td><td><a class='EXT' href='../easource/reloc.htm'>reloc.htm</a></td></tr>
<tr><th>SRC</th><td><small>Input source file.</small></td><td><a class='EXT' href='../easource/src.htm'>src.htm</a></td></tr>
<tr><th>SSS</th><td><small>Structure/section/segment/group.</small></td><td><a class='EXT' href='../easource/sss.htm'>sss.htm</a></td></tr>
<tr><th>STM</th><td><small>Statement.</small></td><td><a class='EXT' href='../easource/stm.htm'>stm.htm</a></td></tr>
<tr><th>SYM</th><td><small>Symbol.</small></td><td><a class='EXT' href='../easource/sym.htm'>sym.htm</a></td></tr>
<tr><th class='DIMMED'>SYS</th><td><small>System calls of Linux functions.</small></td><td><a class='EXT' href='../easource/syslin.htm'>syslin.htm</a></td></tr>
<tr><th class='DIMMED'>SYS</th><td><small>System calls of MS Windows functions.</small></td><td><a class='EXT' href='../easource/syswin.htm'>syswin.htm</a></td></tr>
<tr><th>VAR</th><td><small>Preprocessing %variable.</small></td><td><a class='EXT' href='../easource/var.htm'>var.htm</a></td></tr>
</table>
<table><caption>Machine instruction modules</caption>
<tr><th colspan='2'>Instruction category</th><th>Uses registers</th><th>Module file</th></tr>
<tr><th><em class='DIMMED'>all</em></th><td><small>Machine instruction handlers support</small></td>
<td><code>-</code></td><td><code><a class='EXT' href='../easource/ii.htm'>ii.htm</a></code></td></tr>
<tr><th>A</th><td><small>Vendor specific (AMD)</small></td>
<td><code>RAX..YMM15</code></td><td><code><a class='EXT' href='../easource/iia.htm'>iia.htm</a></code></td></tr>
<tr><th>B</th><td><small>Intel Fused Multiply-Add (FMA)</small></td>
<td><code>XMM0..ZMM31</code></td><td><code><a class='EXT' href='../easource/iib.htm'>iib.htm</a></code></td></tr>
<tr><th>C</th><td><small>Vendor-specific (CYRIX)</small></td>
<td><code>MM0..MM7</code></td><td><code><a class='EXT' href='../easource/iic.htm'>iic.htm</a></code></td></tr>
<tr><th>D</th><td><small>3DNow! specific (AMD, D3NOW)</small></td>
<td><code>XMM0..XMM15</code></td><td><code><a class='EXT' href='../easource/iid.htm'>iid.htm</a></code></td></tr>
<tr><th>F</th><td><small>Floating-point (FPU)</small></td>
<td><code>ST0..ST7</code></td><td><code><a class='EXT' href='../easource/iif.htm'>iif.htm</a></code></td></tr>
<tr><th>G</th><td><small>General instructions</small></td>
<td><code>RAX..R15</code></td><td><code><a class='EXT' href='../easource/iig.htm'>iig.htm</a></code></td></tr>
<tr><th>K</th><td><small>Mask-registers manipulation (AVX512)</small></td>
<td><code>K0..K7</code></td><td><code><a class='EXT' href='../easource/iik.htm'>iik.htm</a></code></td></tr>
<tr><th>M</th><td><small>Multimedia (MMX)</small></td>
<td><code>MM0..MM7</code></td><td><code><a class='EXT' href='../easource/iim.htm'>iim.htm</a></code></td></tr>
<tr><th>P</th><td><small>Packed (SSE)</small></td>
<td><code>XMM0..XMM15</code></td><td><code><a class='EXT' href='../easource/iip.htm'>iip.htm</a></code></td></tr>
<tr><th>S</th><td><small>System special (SPEC, UNDOC, PROT, PRIV, MPX, SGX, CET)</small></td>
<td><code>special</code></td><td><code><a class='EXT' href='../easource/iis.htm'>iis.htm</a></code></td></tr>
<tr><th>T</th><td><small>Transactional &amp; other extensions (TSX, RTM, VMX, SVM)</small></td>
<td><code>-</code></td><td><code><a class='EXT' href='../easource/iit.htm'>iit.htm</a></code></td></tr>
<tr><th>V</th><td><small>Advanced Vector extension (AVX)</small></td>
<td><code>XMM0..YMM15</code></td><td><code><a class='EXT' href='../easource/iiv.htm'>iiv.htm</a></code></td></tr>
<tr><th>X</th><td><small>XOP-encodable AMD</small></td>
<td><code>XMM0..YMM15</code></td><td><code><a class='EXT' href='../easource/iix.htm'>iix.htm</a></code></td></tr>
<tr><th>Y</th><td><small>Advanced Vector extension (AVX2)</small></td>
<td><code>XMM0..YMM15</code></td><td><code><a class='EXT' href='../easource/iiy.htm'>iiy.htm</a></code></td></tr>
<tr><th>Z</th><td><small>Advanced Vector extension (AVX512)</small></td>
<td><code>XMM0..ZMM31</code></td><td><code><a class='EXT' href='../easource/iiz.htm'>iiz.htm</a></code></td></tr>
</table>
<br class='CLEAR'/>
<table><caption>Program formats modules</caption>
<tr><th>Format</th><th>Platform</th><th>Module file</th></tr>
<tr><th class='DIMMED'><em class='DIMMED'>all</em></th><td><small>Linker for all &euro;ASM format output files</small></td><td><a class='EXT' href='../easource/pf.htm'>pf.htm</a></td></tr>
<tr><th>BIN</th><td><small>Binary output file</small></td><td><a class='EXT' href='../easource/pfbin.htm'>pfbin.htm</a></td></tr>
<tr><th>BOOT</th><td><small>Boot sector file</small></td><td><a class='EXT' href='../easource/pfboot.htm'>pfboot.htm</a></td></tr>
<tr><th>COFF</th><td><small>16|32|64bit Common Object Format module</small></td><td><a class='EXT' href='../easource/pfcoff.htm'>pfcoff.htm</a></td></tr>
<tr><th>COM</th><td><small>16bit DOS executable</small></td><td><a class='EXT' href='../easource/pfcom.htm'>pfcom.htm</a></td></tr>
<tr><th>DLL</th><td><small>32|64bit Dynamically Linked Library</small></td><td><a class='EXT' href='../easource/pfdll.htm'>pfdll.htm</a></td></tr>
<tr><th>ELF</th><td><small>32|64bit linkable module</small></td><td><a class='EXT' href='../easource/pfelf.htm'>pfelf.htm</a></td></tr>
<tr><th>ELFSO</th><td><small>32|64bit Linux shared object</small></td><td><a class='EXT' href='../easource/pfelfso.htm'>pfelfso.htm</a></td></tr>
<tr><th>ELFX</th><td><small>32|64bit Linux executable</small></td><td><a class='EXT' href='../easource/pfelfx.htm'>pfelfx.htm</a></td></tr>
<tr><th>LIBCOF</th><td><small>Library of COFF modules</small></td><td><a class='EXT' href='../easource/pflibcof.htm'>pflibcof.htm</a></td></tr>
<tr><th>LIBOMF</th><td><small>Library of OMF modules</small></td><td><a class='EXT' href='../easource/pflibomf.htm'>pflibomf.htm</a></td></tr>
<tr><th>MZ</th><td><small>16bit DOS executable</small></td><td><a class='EXT' href='../easource/pfmz.htm'>pfmz.htm</a></td></tr>
<tr><th>OMF</th><td><small>16|32bit Object Module Format</small></td><td><a class='EXT' href='../easource/pfomf.htm'>pfomf.htm</a></td></tr>
<tr><th>PE</th><td><small>32|64bit Windows Portable Executable</small></td><td><a class='EXT' href='../easource/pfpe.htm'>pfpe.htm</a></td></tr>
<tr><th>RSRC</th><td><small>Compiled Windows resource (input only)</small></td><td><a class='EXT' href='../easource/pfrsrc.htm'>pfrsrc.htm</a></td></tr>
</table>
<table><caption>Includable libraries used in &euro;ASM sources</caption>
<tr><th>Realm</th><th>OS</th><th>Support</th><th>Maclib file</th></tr>
<tr><th>EUROASM</th><td>any</td><td><small>Extensions of CPU machine instructions</small></td><td><a class='EXT' href='../maclib/cpuext.htm'>cpuext.htm</a></td></tr>
<tr><th>EUROASM</th><td>any</td><td><small>Extensions of CPU machine instructions</small></td><td><a class='EXT' href='../maclib/cpuext32.htm'>cpuext32.htm</a></td></tr>
<tr><th>EUROASM</th><td>Lin</td><td><small>Linux 32bit INT 0x80 API interface.</small></td><td><a class='EXT' href='../maclib/linapi.htm'>linapi.htm</a></td></tr>
<tr><th>PROGRAM</th><td>Lin</td><td><small>Wrappers of 32bit Linux file functions.</small></td><td><a class='EXT' href='../maclib/linf32.htm'>linf32.htm</a></td></tr>
<tr><th>PROGRAM</th><td>Lin</td><td><small>Struc+symbols for base functions in Linux.</small></td><td><a class='EXT' href='../maclib/lins.htm'>lins.htm</a></td></tr>
<tr><th>PROGRAM</th><td>Lin</td><td><small>Struc+symbols for file access in LinAPI.</small></td><td><a class='EXT' href='../maclib/linsfile.htm'>linsfile.htm</a></td></tr>
<tr><th>EUROASM</th><td>any</td><td><small>Memory management macros.</small></td><td><a class='EXT' href='../maclib/memory32.htm'>memory32.htm</a></td></tr>
<tr><th>EUROASM</th><td>any</td><td><small>Data sorting.</small></td><td><a class='EXT' href='../maclib/sort32.htm'>sort32.htm</a></td></tr>
<tr><th>EUROASM</th><td>any</td><td><small>Boolean flag manipulation.</small></td><td><a class='EXT' href='../maclib/status32.htm'>status32.htm</a></td></tr>
<tr><th>EUROASM</th><td>any</td><td><small>StdCall 32bit calling-convention macros.</small></td><td><a class='EXT' href='../maclib/stdcal32.htm'>stdcal32.htm</a></td></tr>
<tr><th>EUROASM</th><td>any</td><td><small>Operations with zero-terminated strings.</small></td><td><a class='EXT' href='../maclib/string32.htm'>string32.htm</a></td></tr>
<tr><th>EUROASM</th><td>Win</td><td><small>List of MS Windows API functions with ANSI+WIDE variants.</small></td><td><a class='EXT' href='../maclib/winansi.htm'>winansi.htm</a></td></tr>
<tr><th>EUROASM</th><td>Win</td><td><small>Macros for core 32bit MS Windows functions.</small></td><td><a class='EXT' href='../maclib/winapi.htm'>winapi.htm</a></td></tr>
<tr><th>PROGRAM</th><td>Win</td><td><small>Wrappers of 32bit MS Windows file functions.</small></td><td><a class='EXT' href='../maclib/winf32.htm'>winf32.htm</a></td></tr>
</table>
</div><br class='CLEAR'/>
<!--/SRC_ALL-->
<h2 id="DOM"><a href="#top">&uarr; Document Object Model</a></h2>
<dl><dt>EA</dt><dd><a class="EXT" href="ea.htm#EA">EA</a> is the main object class with global &euro;ASM data. It exists as one and only
static instance named <code>Ea</code> as long as the process <q>euroasm.exe</q> is running.
<dl>
<dt>SRC</dt><dd>This object class <a class="EXT" href="src.htm#SRC">SRC</a> describes one source file which was submitted to <q>euroasm.exe</q>
as a command-line parameter. It exists in one and only static instance named <code>Src</code>.
&euro;ASM will open the file + its included file(s),
create an object Src, assemble, link, close the source, write the output and listing and
then destroy the object Src.
<br/>If more then one source were submitted to <q>euroasm.exe</q>, the object <code>Src</code> is reinitialized
and its assembly repeats.
<dl><dt>PGM</dt><dd>Object of class <a class="EXT" href="pgm.htm#PGM">PGM</a> represents a program module, i. e. an autonomous unit,
which can be assembled, linked and which creates one target (executable file or linkable object file).
Its instance is created when &euro;ASM first meets pseudoinstruction
<a class="EXT" href="../easource/pseudo.htm#PseudoPROGRAM">PROGRAM</a>,
and it is destroyed when it encounters the corresponding pseudoinstruction
<a class="EXT" href="../easource/pseudo.htm#PseudoENDPROGRAM">ENDPROGRAM</a> in the last pass.
<dl><dt>PASS</dt><dd>Object of class <a class="EXT" href="pass.htm#PASS">PASS</a>
keeps data of an assembly pass through the <code>PROGRAM..ENDPROGRAM</code> block
in the source file.
It is created at the start of each assembly pass when the pseudoinstruction
<a class="EXT" href="../easource/pseudo.htm#PseudoPROGRAM">PROGRAM</a> is assembled,
and it is destroyed in <a class="EXT" href="pseudo.htm#PseudoENDPROGRAM">ENDPROGRAM</a> handler.
</dd></dl></dd></dl></dd></dl></dd></dl>
<p>Some information about mutual relation between objects (&euro;ASM source procedures
and macros) is scatterred throughout the source files:
<br/><a class="EXT" href="ea.htm#EaObj">Main &euro;ASM execution and termination</a>
<br/><a class="EXT" href="src.htm#SrcAssemble">Source statement processing</a>
<br/><a class="EXT" href="pgm.htm#PGM">Program processing</a>
<br/><a class="EXT" href="pf.htm#PfModel">Linkage processing procedures </a>
<br/><a class="EXT" href="ii.htm#IiModel">Machine instruction assembly</a>
<br/><a class="EXT" href="mac.htm#MacObj">Macro expansion</a>
</p>

<h2 id="DataRepresentation"><a href="#top">&uarr; Data representation</a></h2>
<p><strong>Boolean</strong> data are implemented as 1 bit flag in object's DWORD member usually named <code>.Status</code>.
</p>
<p><strong>Integer numbers</strong> with 64 bits (QWORD type) are usually accessible as two DWORD variables postfixed Low and High,
e.g. <code>STM.OffsetLow</code> and <code>STM.OffsetHigh</code>. When loaded into two 32bit registers,
such pair is referred in comments as colon-separated, e.g. <code>EDX:EAX</code>.
</p>
<p><strong>Pointers</strong> are referred in comments as <code>Ptr</code> or as a carret sign <kbd>^</kbd>.
for instance <code>^Name</code> represents 32bit offset of the Name.</p>
<p>Reference to <strong>strings</strong> is implemented with several methods:
<br/><dfn>Pointer and size</dfn> where the first register or variable keeps pointer to the first byte of the string,
and the second register or variable keeps the string size in bytes. They are referred in comments
as comma-separated pairs, e.g. <code>ESI,ECX</code>.
<br/><dfn>Begin and end</dfn> where the first register points to the first string byte,
and the second register points right behind the last string byte.
They are referred in comments as ellipsis-separated pairs, e.g. <code>ESI..EDX</code>.
Size of such string can be computed by subtraction of two registers.
<br/><dfn>ASCIIZ termination</dfn> where the string is referred with one and only pointer.
The string ends with NULL control character 0x00 (<em>C&nbsp;string</em>).  This convention is mostly used when
the string specifies file name.
<br/><dfn>Size prefixed</dfn> strings have their size encoded in their first byte.
Size of such string cannot exceed 255 bytes. This <em>Pascal</em> convention is employed in some older file formats (OMF).
</p>

<h2 id="NamingConvention"><a href="#top">&uarr; Naming convention</a></h2>
<p>Project of such magnitude requires strict discipline in choosing symbol names.
They always begin with abbreviated object identification (object shortcut, for instance
<code>Stm</code> is shortcut of the <dfn>statement</dfn> object), so it is easy to tell
the class where a method or symbol belongs to, ergo in which source file it is defined.
The character case indicates what kind of data the identifier represents:</p>
<p>Class/structure names are all in uppercase (<em>C&nbsp;convention</em>), for instance <code>STM</code>.</p>
<p>Boolean flag names begin with lowercase shortcut (<em>camel&nbsp;convention</em>), for instance
<code>stmPrefixPresent</code>.</p>
<p>Procedures and methods have the first letter of object shortcut capitalized (<em>lochness&nbsp;convention</em>),
for instance <code>StmParse</code>.</p>
<p>Local labels in procedures usually do not have mnemonic names. Monotonous numeric sequence
is used instead, e.g. <code>.10:, .20:, .30:</code> (<em>Basic convention</em>).</p>
<p>The verb, which follows object shortcut in method name, indicates the function of the method.
Object constructors &amp; destructors are named Create &amp; Destroy, e.g. <code>StmCreate, StmDestroy</code>.</p>
<p>Boolean flags (max.32 per class) are kept in an object DWORD variable named <code>.Status</code> and manipulated
with macros <code>SetSt, RstSt, JSt, JNSt</code> from library
<a class="EXT" href="../maclib/status32.htm">status32.htm</a>.</p>
<p>Zero-terminated (ASCIIZ) strings and macros which operate with such strings have their name
terminated with the dollar character <kbd>$</kbd>, see macrolibrary
<a class="EXT" href="../maclib/string32.htm">string32.htm</a>.</p>
<p>Objects which have the property <em>name</em>, such as symbol, %variable, structure, program etc.,
usually keep their name in their first two DWORD members: pointer to the object name
<code>.NamePtr</code> and size of the name <code>.NameSize</code>.</p>
<p>All case-insensitive names (registers, prefixes, machine instructions, pseudoinstructions, keywords etc.)
are written in upper case here in EuroAssembler sources. Names of variables, procedures, macroinstructions are in mixed case.</p>
<p>If a special character is part of the &euro;ASM term and should be embedded in an identifier or in HTML anchor,
it is replaced with two lowercase letters:</p>
<table><tr><th>Char</th><th>Replacement</th><th>Char</th><th>Replacement</th></tr>
<tr><td><kbd>%</kbd></td><td>pc</td><td><kbd>&amp;</kbd></td><td>am</td></tr>
<tr><td><kbd>$</kbd></td><td>do</td><td><kbd>:</kbd></td><td>co</td></tr>
<tr><td><kbd>#</kbd></td><td>ha</td><td><kbd>*</kbd></td><td>as</td></tr>
<tr><td><kbd>=</kbd></td><td>eq</td><td><kbd>.</kbd></td><td>pt</td></tr>
</table>
<p>For instance the handler of pseudoinstruction %SHIFT has the label <code>PseudopcSHIFT</code>
and URL <a class="EXT" href="pseudo.htm#PseudopcSHIFT">pseudo.htm#PseudopcSHIFT</a>.</p>

<h2 id="CallingConvention"><a href="#top">&uarr; Calling convention</a></h2>
<p>EuroAsembler uses three kinds of subprogrammes:</p>
<ol><li>expandable macros,</li>
<li>callable native blocks <code>PROC..ENDPROC</code>,</li>
<li>invokable procedures implemented by macros <a class="EXT" href="../maclib/stdcal32.htm#Procedure">
Procedure..EndProcedure</a> from the macrolibrary <a class="EXT" href="../maclib/stdcal32.htm">stdcal32.htm</a>.</li>
</ol>
<p><b>Ad 1.:</b> Beside ad-hoc macroinstructions defined in the same source which uses it (for instance
macros in <a class="EXT" href="../easource/ii.htm">ii.htm</a>), &euro;ASM hires some
generally usable macros from <a class="EXT" href="../maclib/">libraries</a> shipped with EuroAssembler.</p>
<p><b>Ad 2.:</b> PROC .. ENDPROC blocks are used only sporadically as local subroutines in large procedures.
They are called with <dfn>register calling convention</dfn>, using input/output registers
described in their header.</p>
<p><b>Ad 3.:</b> &euro;ASM extensively employs subprograms defined with macroinstructions
<code>Procedure, LocalVar, EndProcedure, Invoke</code>.
Those four macros encapsulate their <dfn>StdCall calling convention</dfn>,
register preservation, local stack variables reservation, maintenance of stack frame and the final return.
Another advantage is that they can be invoked with an arbitrary number of arguments. Nevertheless,
the number of arguments provided by Invoke must exactly match the Procedure declaration.
Where a variable number of arguments was required, the subprogram was implemented as a macro
(see <a class='EXT' href='msg.htm#Msg'>Msg</a> as an example).</p>

<p>Procedures used in &euro;ASM <strong>preserve all registers</strong> except those which return the result.
Usually it is EAX but the result is sometimes returned in other register(s), too.
For instance the macro <a class="EXT" href="../maclib/memory32.htm#BufferRetrieve">BufferRetrieve</a>
returns the contents of the buffer as a string in registers ESI,ECX.</p>
<p>Arithmetic CPU <strong>flags are not preserved</strong> by subprogrammes.
The exceptions are macros <a class="EXT" href="../easource/msg.htm#Msg">Msg</a>
<a class="EXT" href="../easource/msg.htm#MsgUnexpected">MsgUnexpected</a>, which
preserve all CPU flags and registers.
Nonetheless, many procedures use Carry flag to signalize error, or Zero flag to signalize emptiness.</p>
<p>All procedures expect <strong>clear Direction flag</strong> on input,
and they return it reset on output (DF=0).</p>
<p>Calling convention of operating system functions is hidden in system macros in the file
<a class="EXT" href="../easource/syswin.htm">sys*.htm</a>.</p>

<h2 id="FileAccess"><a href="#top">&uarr; File access method</a></h2>
<p><strong>Configuration files</strong> <q>euroasm.ini</q> are loaded to memory, assembled and immediately released.</p>
<p><strong>Input files</strong> (the actually assembled source file and its included files)
are mapped to memory and kept open with sharing access <em>allow read, deny write</em>
until the assembler/linker ends and output file is completed in a memory stream.</p>
<blockquote>Actually assembled source files may be kept open by the text editor
in which they are being written, but you won't be able to save them until the assembly terminates.
</blockquote>
<p><strong>Output files</strong> (the target object|executable file and listing)
are compiled in memory. When they are complete, input files are closed and only then
is the output compilation flushed at once to an output disk file.</p>
<blockquote>This method allows to create output listing with the same name as input source,
overwriting the source with its listing (or even with the assembled output file).</blockquote>.

<h2 id="OsInteractions"><a href="#top">&uarr; Interaction with OS</a></h2>
<p>Requests for service from the operating system are encapsulated in macroinstructions
gathered in <code>easource/sys???.htm</code>. In Windows version of EuroAssembler
it is the source file <a class="EXT" href="syswin.htm">easource/syswin.htm</a> which imports the
following API services from system library <q>kernel32.dll</q>:</p>
<dfn>CloseHandle, CreateDirectory, CreateFile, CreateFileMapping, ExitProcess,
FileTimeToDosDateTime, FindClose, FindFirstFile, FindNextFile, GetCommandLine,
GetEnvironmentVariable, GetLastError, GetModuleFileName,
GetModuleHandle, GetSystemInfo, GetSystemTime, GlobalFree, MapViewOfFile,
MultiByteToWideChar, SetFilePointer, SystemTimeToFileTime, UnmapViewOfFile,
VirtualAlloc, VirtualFree, WriteFile</dfn>.
<p>See <a class="EXT" href="../easource/syswin.htm#top">syswin.htm</a> for their description.</p>
<p>Encapsulation of OS calls by <a class="EXT" href="syswin.htm">Sys*</a> macroinstructions
facilitates future <a href="#Extensibility">porting</a> of EuroAssembler
from MS Windows to other operating systems.</p>

<h2 id="MemoryManagement"><a href="#top">&uarr; Memory management</a></h2>
<p>Unique objects <a class="EXT" href="ea.htm#EA">Ea</a>, <a class="EXT" href="src.htm#SRC">Src</a>,
<a class="EXT" href="dict.htm">dictionary</a> of enumerated tokens used by EuroAssembler language,
text of &euro;ASM <a class="EXT" href="msg.htm#MsgTexts">messages</a>,
literal strings and some ad hoc local tables are allocated
<strong>statically</strong>, in [.data] or [.bss] segments.</p>
<p>All other &euro;ASM objects are allocated <strong>dynamically</strong> at run time,
either on machine stack, or in the memory provided on request from the operating system.
<br/>Recursively invokable procedures protect themselves from stack overflow with macro
<a class="EXT" href="ea.htm#EaStackCheck">EaStackCheck</a>.</p>

<p>EuroAssembler does not use the system heap. It allocates dynamic memory in portions called
<a class="EXT" href="../maclib/memory32.htm#POOL">pool</a>, implemented as a linked list of pool blocks with typical size 64 KB (or larger, if requested so).
In MS Windows it is provided by API functions <code>VirtualAlloc(), VirtualFree()</code>.</p>
<p>Memory once allocated from the pool is not returned to OS at the moment when the object is discarded,
there is no garbage collection.
Instead, the pool memory is returned as a whole to the operating system when the pool's owner is destroyed.
<br/>There are four classes in &euro;ASM which maintain their own pools: EA, SRC, PGM, PASS.
Object methods choose the appropriate pool depending on the lifetime of each stored object,
see also <a href="#DOM">DOM</a>.</p>
<p>Although the memory can be allocated from the pool directly (using macros <a class="EXT" href="../maclib/memory32.htm#PoolNew">PoolNew</a>
or <a class="EXT" href="../maclib/memory32.htm#PoolStore">PoolStore</a>), the pool serves mainly
as a container for more sofisticated access methods:</p>

<p><a class="EXT" href="../maclib/memory32.htm#STACK">STACK</a> keeps a table of objects of the same size.
It has nothing common with CPU stack SS:ESP except its name and access method LIFO (Last In = First Out).
<br/>STACK is used by &euro;ASM to reflect the structure of nested block objects <a class="EXT" href="ctx.htm#CTX">CTX</a>,
<a class="EXT" href="chunk.htm#CHUNK_HEAD">CHUNK_HEAD</a>,
<a class="EXT" href="eaopt.htm#EAOPT">EAOPT</a>.</p>

<p><a class="EXT" href="../maclib/memory32.htm#LIST">LIST</a> keeps the bidirectionally linked list of objects of the same size,
which are not kept together in memory. Listed objects can be accessed only sequentionally,
either forward (FIFO | LILO) or backward (FILO | LIFO).
<br/>This method is used to store &euro;ASM objects whose number cannot be reliably estimated at the beginning,
such as symbols, %variables, macros, sections.</p>

<p><a class="EXT" href="../maclib/memory32.htm#STREAM">STREAM</a> is a write-only memory class
which stores unformated data string sequentionally to a collection of memory blocks.
StreamStore access method is similar to FileWrite. When the stream is completed, it may be flushed
to a disk file at once with macro <a class="EXT" href="../maclib/memory32.htm#StreamDump">StreamDump</a>.
<br/>This method is used in &euro;ASM when output files are formated.</p>

<p><a class="EXT" href="../maclib/memory32.htm#BUFFER">BUFFER</a> is used to store data items (strings)
of variable size. Unlike the stream or list method, all data in buffer are stored continuously.
If the estimated initial buffer size specified on <a class="EXT" href="../maclib/memory32.htm#BufferCreate">BufferCreate</a>
was underestimated and is exhausted, the buffer silently allocates from its pool another block of memory with doubled size,
and copies the whole previous contents to the new location. Thus the entire buffer contents
returned by <a class="EXT" href="../maclib/memory32.htm#BufferRetrieve">BufferRetrieve</a>
is always continuous.</p>
<p>Buffers are extensively used by &euro;ASM. Leaving their contents abandoned, until
the termination of parent PASS or PGM, would have negative impact on total memory consumption.
Therefore buffers can also be borrowed from the stack of preallocated buffers
<code>Ea.BufferStack</code> by the invocation of <a class="EXT" href="../easource/ea.htm#EaBufferReserve">
EaBufferReserve</a> and returned with <a class="EXT" href="../easource/ea.htm#EaBufferRelease">
EaBufferRelease</a>, not wasting the once allocated memory.</p>
<blockquote>When the requested dynamic memory size exceeds usual values, for which are buffers preallocated,
the buffer or stack will automatically request additional memory portion from its pool,
and if there is no more free memory on the pool, its manager requests another block from the operating system.
Thus dynamic memory management works transparently for the programmer and it is limited only
by the amount of OS virtual memory,
no matter how big identifiers, expressions, nesting level etc. may occur in the assembled source.
</blockquote>

<h2 id="Building"><a href="#top">&uarr; Building EuroAssembler</a></h2>
<p>Executable file of EuroAssembler can be recompiled in <q>easource</q> subdirectory
with the command <code>eamake.cmd</code> (in Windows) or <code>./eamake.sh</code> (in Linux),
assuming that the stable executable version was not moved yet from EuroAssembler home directory
somewhere to system %PATH%.</p>

<p>Target <q>euroasm.exe</q> or <q>euroasm.x</q> is created in subdirectory <q>easource</q>.</p>
<p>EuroAssembler can also be built from browser at the page <code>generate.php</code>.</p>
<blockquote>On my Intel Pentium machine running at 3 GHz with 8 GB RAM the complete rebuild
takes 2 to 3 minutes and ends with errorlevel 0.</blockquote>

<h2 id="Extensibility"><a href="#top">&uarr; Extensibility</a></h2>
<p>Hints and technique how to extend EuroAssembler source are scatterred throughout the source files:
<br/><a class="EXT" href="eaopt.htm#ExtendEAOPT">Add a new EUROASM option</a>
<br/><a class="EXT" href="pgmopt.htm#ExtendPGMOPT">Add a new PROGRAM option</a>
<br/><a class="EXT" href="exp.htm#ExtendOPERATION">Add a new operator</a>
<br/><a class="EXT" href="ii.htm#ExtendII">Add a new machine instruction</a>
<br/><a class="EXT" href="pf.htm#ExtendFORMAT">Add a new output format</a>
<br/><a class="EXT" href="syswin.htm#ExtendEUROASMOS">Porting EuroAssembler to other OS</a>
</p>
<blockquote>If you want to modify EuroAssembler, I recommend to follow these steps:
<ol><li>Copy the latest downloaded stable <q>euroasm.exe</q> both to &euro;ASM home
and to its source subdirectory (<q>easource\euroasm.exe</q>).</li>
<li>Using <q>testman.php</q> or <q>generate.php</q> assure that all tests
of <q>easource\euroasm.exe</q> pass without error.</li>
<li>Using <q>generate.php#Build</q> assure that all modules can be rebuilt
without errors. Or change to <q>easource\</q>, delete old modules with
<code>del *.obj</code> and then rebuild all with
<code>..\euroasm.exe euroasm.htm</code>. The build should terminate with errorlevel&nbsp;0.</li>
<li>Modify the EuroAssembler sources (<q>easource\*.htm</q>) with your enhancements.</li>
<li>Rebuild the modified sources with downloaded stable version from &euro;ASM home
(repeat step 3).</li>
<li>Perform all tests with the new <q>easource\euroasm.exe</q> (repeat step 2).</li>
<li>If all passed, you can copy the modified <q>easource\euroasm.exe</q>
to %PATH% and use it on your computer.</li>
</ol>
<p>See also <a class="EXT" href="../eadoc/#Licence">Licence</a> for information
concerning the modification of EuroAssembler sources.</p>
</blockquote>

<h2 id="Optimisation"><a href="#top">&uarr; Optimisation of <q>euroasm</q></a></h2>
<p>&euro;ASM assembler and linker is not optimised for speed, it has plenty of issues
which could make it run faster:</p>
<ul><li>Procedures save all registers with PUSHA/POPA regardless if those registers are
clobbered in the procedure or not.</li>
<li>Some subprograms are detached as Procedures even when they are invoked only once
and therefore they could be unrolled inline.</li>
<li>Loops are sometimes iterated with <code>LOOP Target</code> although it is usually slower then
<code>SUB ECX,1 ; JNZ Target</code>.</li>
<li>&euro;ASM itself does not use new machine instructions and features
(FPU, MMX, SSE, AVX etc.) which are available on modern CPUs.</li>
</ul><blockquote>My goal was an application which gets along with processor 486
and any 32bit version of MS Windows. Order of optimalisation criteria was:
<ol><li>Maintainability and extensibility,</li>
<li>readability and understandability,</li>
<li>debugability and stability (proper treatment of errors),</li>
<li>size of the code,</li>
<li>speed of assembly,</li>
<li>economical usage of memory.</li>
</ol></blockquote>

<h2 id="SourceAudit"><a href="#top">&uarr; Source audit</a></h2>
<p>Computer users should never trust executable files downloaded from Internet.
It is a good practice to download the project in the form of source files and recompile it
on your own PC with a compiler which you trust.</p>
<p>In case of self-compiled program it is complicated, because you don't have a trusted compiler yet.
Suggested <em>sandbox</em> solution for paranoid EuroAssembler users in Windows follows:</p>
<ol><li>Download <q>euroasm.zip</q>, compute its hash (<code>md5 euroasm.zip</code>)
and compare obtained value with the hash published on the <a class="EXTW"
href="https://euroassembler.eu/download/">distribution site</a>. Hash of each &euro;ASM release
is also published on <a class="EXTW" href="https://euroassembler.eu/forum/">discussion forum</a>,
on Twitter account <a class="EXTW" href="https://twitter.com/EuroAsm">@EuroAsm</a>,
or, in reasoned case, you can try to ask the author for confirmation.</li>
<li>Unzip the downloaded archive in a sandbox, such as isolated PC not connected to network,
or in virtual PC.</li>
<li>Assume for this moment, that the downloaded and unzipped executable <q>euroasm.exe</q> is trustworthy.</li>
<li>Change to subdirectory <code>easource</code> and rebuild the source with the downloaded executable.
Be sure to provide the same forged timestamp which was used when the original source was released, e. g.
<code>eamake.cmd timestamp=1512345678</code>. Otherwise the compiled file
couldn't be binary-identical with the downloaded version.</li>
<li>Make an audit check of the sources and assure that it does not contain any vulnerabilities, backdoors
or other malicious code. You may also want to compare the assembled code in dump column of listing file
<q>easource\euroasm.htm.lst</q> with the code in COFF objects or in the PE itself.</li>
<li>You are now assured that, if the downloaded executable was trustworthy, the compiled executable is trustworthy as well.</li>
<li>Binary compare the downloaded and the just compiled executables, e. g.
<code>fc ..\euroasm.exe euroasm.exe</code>.
When both files are identical, the assumption made in step 3 is true and <q>euroasm.exe</q>
was succesfully audited.</li></ol>
<!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
