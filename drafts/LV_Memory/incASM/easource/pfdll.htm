<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='pfdll.htm source file'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>pfdll.htm source file</title>
</head>
<body class='EASOURCE' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>pfdll.htm
<br/><i>Procedures</i>
<br/><a href="#PfdllCompile">PfdllCompile</a>
<br/><a href="#PfdllLoadPgm">PfdllLoadPgm</a>
</h1>
<p>This source PFDLL generates and imports EuroAssembler output object file in program format DLL
<!---->(COFF Dynamic Linked Library).
</p>
<br class="CLEAR"/>
<pre>
pfdll PROGRAM FORMAT=COFF,MODEL=FLAT,WIDTH=32
      INCLUDEHEAD euroasm.htm, \  Interface (structures, symbols and macros) of other modules used in this source.
                  ea.htm,eaopt.htm,exp.htm,msg.htm,pf.htm,pfcoff.htm,pfmz.htm,pfpe.htm,pgm.htm,pgmopt.htm, \
                  reloc.htm,sss.htm,stm.htm,sym.htm
</pre><pre>
 pfdll HEAD ; Start module interface.
 ; Program pfdll exports nothing.
 ENDHEAD pfdll  ; End of module interface.
</pre>

<dl id="PfdllCompile">
<dt><a href="#top">&uarr; PfdllCompile</a> OutputStream, Pgm</dt>
<dd><dfn>PfdllCompile</dfn> is constructor of output file image in format DLL.
<br/>It is almost identical with file format PE, the only difference is filename extension, voluntary entry point,
<!---->different image base and binary flag <code>PFCOFF_FILE_HEADER.Characteristics:pfcoffFILE_DLL
</code> set by <a class="EXT" href="pfcoff.htm#PfcoffFileHeader">PfcoffFileHeader</a>.</dd>
<dt>Input</dt>
<dd><b>OutputStream</b> is pointer to an empty
<a class="EXT" href="../maclib/memory32.htm#STREAM">STREAM</a> for the output image contents.
<br/><b>Pgm</b> is pointer to <a class="EXT" href="pgm.htm#PGM">PGM
</a> representing the completely assembled program, optionally combined with other linked modules.</dd>
<dt>Output</dt>
<dd>OutputStream is filled with output file contents.</dd>
<dt>Error</dt>
<dd>Errors are reported with macro <a class="EXT" href="msg.htm#Msg">Msg</a>.</dd>
<dt>Invoked from</dt>
<dd><a class="EXT" href="pf.htm#PfOutput">PfOutput</a></dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="pfpe.htm#PfpeCompile">PfpeCompile</a>
</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t9485.htm">t9485</a>
<a class="EXT" href="../eatests/t9536.htm">t9536</a>
</dd>
</dl><pre>
PfdllCompile Procedure OutputStream, Pgm
   Invoke PfpeCompile::,[%OutputStream],[%Pgm]
   EndProcedure PfdllCompile
</pre>

<dl id="PfdllLoadPgm">
<dt><a href="#top">&uarr; PfdllLoadPgm</a> BasePgm, ObjBegin, ObjSize, FileNamePtr</dt>
<dd><dfn>PfdllLoadPgm</dfn> reads the exports from one DLL file (32bit or 64bit) mapped in memory,
<!---->and creates imported symbols from them, as if statements
<code>IMPORT ExportedName,LIB=DllName</code> were written in BasePgm.</dd>
<dt>Input</dt>
<dd><b>BasePgm</b> is pointer to an existing <a class="EXT" href="pgm.htm#PGM">PGM
</a> to which the library is being imported.
<br/><b>ObjBegin</b> is pointer to the contents of imported file mapped in memory by the caller.
<br/><b>ObjSize</b> is number of bytes in the file.
<br/><b>FileNamePtr</b> is pointer to zero-terminated library file name (used in error reports).</dd>
<dt>Output</dt>
<dd>Symbols which are exported from the loaded DLL file were imported to the BasePgm.</dd>
<dt>Error</dt>
<dd>Errors are reported with macro <a class="EXT" href="msg.htm#Msg">Msg</a>.</dd>
<dt>Invoked from</dt>
<dd><a class="EXT" href="pf.htm#PfLoad">PfLoad</a></dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="pgm.htm#PgmCreateImportModule">PgmCreateImportModule</a>
</dd>
</dl><pre>
PfdllLoadPgm Procedure BasePgm, ObjBegin, ObjSize, FileNamePtr
NumberOfSections    LocalVar ; As specified in file header.
RVA2Ptr             LocalVar ; Difference of mapped address from RVA.
DLLPtr              LocalVar ; Ptr to volatile DLL name.
DLLSize             LocalVar ; Number of bytes in DLL name.
    MOV ESI,[%ObjBegin] ; Pointer to the start of file in mapped memory. FileAddress FA=0.
    MOV ECX,[%ObjSize]
    LEA EDX,[ESI+ECX] ; ObjEnd in mapped memory. Procedure may read only data below EDX.
    ADD ESI,[ESI+PFMZ_DOS_HEADER.e_lfanew] ; Add FA of PE signature.
    CMP ESI,EDX
    JNB .E8535: ; Report error if file too short.
    LODSD
    CMP EAX,'PE' ; Check the PE/DLL signature.
    JNE .E8535:
    MOVZXW ECX,[ESI+PFCOFF_FILE_HEADER.NumberOfSections]
    MOVZXW EBX,[ESI+PFCOFF_FILE_HEADER.SizeOfOptionalHeader]
    MOVZXW EAX,[ESI+PFCOFF_FILE_HEADER.Characteristics]
    MOV [%NumberOfSections],ECX
    JECXZ .E8535: ; If no sections in file.
    ADD ESI,SIZE# PFCOFF_FILE_HEADER ; Skip the file header.
    ADD EBX,ESI
    CMP EBX,EDX
    JNB .E8535:
    MOV EDI,[ESI+PFPE_OPTIONAL_HEADER32.DataDirectory+pfpeDIRECTORY_ENTRY_EXPORT*SIZE#PFPE_DATA_DIRECTORY+PFPE_DATA_DIRECTORY.VirtualAddress]
    MOV ECX,[ESI+PFPE_OPTIONAL_HEADER32.DataDirectory+pfpeDIRECTORY_ENTRY_EXPORT*SIZE#PFPE_DATA_DIRECTORY+PFPE_DATA_DIRECTORY.Size]
    JNSt EAX,pfcoffFILE_LARGE_ADDRESS_AWARE,.15:
    MOV EDI,[ESI+PFPE_OPTIONAL_HEADER64.DataDirectory+pfpeDIRECTORY_ENTRY_EXPORT*SIZE#PFPE_DATA_DIRECTORY+PFPE_DATA_DIRECTORY.VirtualAddress]
    MOV ECX,[ESI+PFPE_OPTIONAL_HEADER64.DataDirectory+pfpeDIRECTORY_ENTRY_EXPORT*SIZE#PFPE_DATA_DIRECTORY+PFPE_DATA_DIRECTORY.Size]
.15:MOV ESI,EBX ; ESI now points to the first section header.
    JECXZ .E8535:
    ; Enumerate sections and <b>find FA of ExportTable</b> in the loop .20: .. .30:.
    MOV ECX,[%NumberOfSections]
.20:MOV EAX,[ESI+PFCOFF_SECTION_HEADER.VirtualAddress]
    CMP EDI,EAX
    JB .30:
    ADD EAX,[ESI+PFCOFF_SECTION_HEADER.VirtualSize]
    CMP EDI,EAX ; Does the export table lay in section with header ESI?
    JB .40: ; If section found. Usually it is [.edata] or [.text].
.30:ADD ESI,SIZE#PFCOFF_SECTION_HEADER ; Otherwise try the next section.
    LOOP .20:
.E8535:Msg '8535',[%FileNamePtr] ; Format of file "!1$" is not importable.
    JMP .90:
.40:MOV EAX,EDI ; EDI is RVA of export table residing in section whose header is mapped with ESI.
    SUB EDI,[ESI+PFCOFF_SECTION_HEADER.VirtualAddress] ; EDI is now offset of export directory table.
    ADD EDI,[ESI+PFCOFF_SECTION_HEADER.PointerToRawData] ; EDI is now FA of import tables.
    ADD EDI,[%ObjBegin] ; EDI is now ptr to import table mapped in memory.
    MOV ESI,EDI ; ESI now points to mapped PFPE_EXPORT_DIRECTORY.
    SUB EDI,EAX
    MOV [%RVA2Ptr],EDI ; Keep the difference of mapped address from its RVA.
    ; <b>Find and store DLL name</b>.
    MOV EDX,[ESI+PFPE_EXPORT_DIRECTORY.Name]
    ADD EDX,[%RVA2Ptr]
    GetLength$ EDX
    MOV [%DLLPtr],EDX
    MOV [%DLLSize],ECX
    SUB EDX,EDX ; Index of export (0,1,2,3,4...).
    MOV ECX,[ESI+PFPE_EXPORT_DIRECTORY.AddressOfNames] ; RVA of Name ptr table (NPT).
    ADD ECX,[%RVA2Ptr] ; Pointer to NPT in memory.
    MOV EAX,[ESI+PFPE_EXPORT_DIRECTORY.AddressOfOrdinals]
    ADD EAX,[%RVA2Ptr] ; Pointer to ONT in memory.
    ; Create import module of each export.
    ; EDX=zero-based index, EAX=^ONT,  ECX=^NPT, ESI=^PFPE_EXPORT_DIRECTORY.
.50:CMP EDX,[ESI+PFPE_EXPORT_DIRECTORY.NumberOfNames]
    JAE .90:
    PUSH EAX,ECX
      LEA EAX,[EAX+2*EDX] ; EAX is now pointer to word ordinal number.
      MOVZXW EDI,[EAX] ; Ordinal number.
      ADD EDI,[ESI+PFPE_EXPORT_DIRECTORY.Base]
      LEA EAX,[ECX+4*EDX] ; EAX is now pointer to RVA of ASCIIZ symbol name.
      MOV EBX,[EAX] ; RVA of ASCIIZ name.
      ADD EBX,[%RVA2Ptr] ; Convert RVA to memory pointer.
      GetLength$ EBX
      Invoke PgmCreateImportModule::,[%BasePgm],[%DLLPtr],[%DLLSize],EDI, \
             symImport+'A',EBX,ECX,EBX,ECX
    POP ECX,EAX
    INC EDX
    JMP .50:
.90:EndProcedure PfdllLoadPgm
</pre>

<pre>
  ENDPROGRAM pfdll
</pre><!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
