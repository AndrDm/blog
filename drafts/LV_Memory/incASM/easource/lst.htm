<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='lst.htm source file'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>lst.htm source file</title>
</head>
<body class='EASOURCE' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>lst.htm
<br/><i>Class</i>
<br/><a href="#LST">LST</a>
<br/><i>Encodings</i>
<br/><a href="#LstEnc">LstEnc</a>
<br/><i>Procedures</i>
<br/><a href="#LstBoolean">LstBoolean</a>
<br/><a href="#LstCreate">LstCreate</a>
<br/><a href="#LstGetFileName">LstGetFileName</a>
<br/><a href="#LstSet">LstSet</a>
</h1>
<p>Listing is a plain text file with two columns where EuroAssembler logs its activity. See also
<a class="EXT" href="../eadoc/index.htm#ListingFile">manual</a>.</p>
<p>This module yields only auxilliary methods ad formating the listing line. Most of work is done by
<a class="EXT" href="stm.htm#StmListing">StmListing</a>.</p>
<br class="CLEAR"/>
<pre>
lst PROGRAM FORMAT=COFF,MODEL=FLAT,WIDTH=32
    INCLUDEHEAD euroasm.htm, \  Interface (structures, symbols and macros) of other modules used in this source.
                ea.htm,eaopt.htm,exp.htm,msg.htm,pgm.htm,pgmopt.htm
</pre><pre>
lst HEAD ; Start of module interface.
</pre>

<dl id="LST"><dt><a href="#top">&uarr; LST</a></dt>
<dd>Object Lst represents the source listing, i.e. the text file with two columns:
<ol><li>hexadecimal dump of emitted machine code</li>
<li>copy of source text</li></ol>
<p>Dump lines may be accompanied with expanded lines, diagnostic and error messages.
<br/>The object <dfn>Lst</dfn> is allocated statically as a part of object 
<a class="EXT" href="src.htm#SRC">Src</a>.</p>
<p>The listing line is compiled by procedure
<a class="EXT" href="stm.htm#StmListing">StmListing</a>.</p> </dl><pre>
LST STRUC
.Stream        D D ; ^<a class="EXT" href="../maclib/memory32.htm#STREAM">STREAM</a> of the listing file contents.
.SetBuffer     D D ; ^<a class="EXT" href="../maclib/memory32.htm#BUFFER">BUFFER</a> for %variable contents presented in dump column.
.Section       D D ; ^<a class="EXT" href="sss.htm#SSS">SSS</a> with current section used in listing.
.Status        D D ; Flags in <a href="#LstEnc">LstEncoding</a> which control the listing. LSB contains character used as separator.
  ENDSTRUC LST
</pre>
<dl id="LstEnc"><dt><a href="#top">&uarr; LstEnc</a></dt>
<dd>Encoding of flags used in LST.Status: </dd></dl><pre>  
lstSeparator   EQU 0x000000FF ; Mask of <a class="EXT" href="../eadoc/#DumpSeparators">separating character</a> in end-dump column: | ! + - *
lstNoList      EQU 0x00010000 ; Do not list current statement.
lstNoData      EQU 0x00020000 ; Dump column contains no data.
lstTRUE        EQU 0x00040000 ; Dump the token TRUE  to listing Data column instead of emitted data.
lstFALSE       EQU 0x00080000 ; Dump the token FALSE to listing Data column instead of emitted data.
lstNothingExp  EQU 0x00100000 ; Nothing to expand, Stm.ExpBuffer doesn't differ from Stm.SrcBuffer, or LISTVAR=OFF.
lstSet         EQU 0x00200000 ; Dump .SetBuffer as hexa instead of emitted data. Set by LstSet.
lstAsRepeated  EQU 0x00400000 ; Use '+' as lstSeparator for this statement.
lstExpSrc      EQU 0x00800000 ; Expanded source is listed. Supress offset if no more dump bytes.
lstSectInline  EQU 0x01000000 ; [sect] in dump column is on the same line as SEGMENT,STRUC,[Sect] statement.
lstSectKeep    EQU 0x02000000 ; Do not display [sect] change in dump column.
lstLiteral     EQU 0x04000000 ; Dump as literal, use '=' as lstSeparator.
lstEQU         EQU 0x08000000 ; Dump Stm.Offset as numeric symbol value instead of address.
lstEnvelope    EQU 0x10000000 ; Use space as lstSeparator for this statement, which is envelope PROGRAM/ENDPROGRAM.
lstListOn      EQU 0x20000000 ; List this statement even when <code>EUROASM LIST=OFF</code>.
lstTilde       EQU 0x80000000 ; ~ as the last char in dump column indicates that not all dump bytes were listed.
lstVolMask     EQU 0xFFFF0000 ; Volatile flags. Set in PseudoHandlers, reset in StmListing.
</pre><pre>
 ENDHEAD lst ; End of module interface.
</pre>

<dl id="LstCreate">
<dt><a href="#top">&uarr; LstCreate</a></dt>
<dd><dfn>LstCreate</dfn> will initialize the <code>Src.Lst</code> object and create its buffers.
<!----></dd>
<dt>Input</dt>
<dd><b>-</b></dd>
<dt>Output</dt>
<dd><b>-</b></dd>
<dt>Invoked by</dt>
<dd><a class="EXT" href="src.htm#SrcCreate">SrcCreate</a>
</dd>
</dl><pre>
LstCreate Procedure
     LEA EBX,[Src.Lst::]
     MOV EDX,[Src.Pool::]
     StreamCreate EDX,BufSize=32K
     MOV [EBX+LST.Stream],EAX
     BufferCreate EDX,Size=2K
     MOV [EBX+LST.SetBuffer],EAX
     SUB EAX,EAX
     MOV [EBX+LST.Status],EAX
     MOV [EBX+LST.Section],EAX
    EndProcedure LstCreate
</pre>

<dl id="LstSet">
<dt><a href="#top">&uarr; LstSet</a> DataPtr, DataSize</dt>
<dd><dfn>LstSet</dfn> stores Data to <code>Lst.SetBuffer</code> and flags lstSet. This indicates that
<!---->Data should be presented as hexa in dump column during <a class="EXT" href="stm.htm#StmListing">StmListing</a>.
<br/>It is used in execution of SET* statements.</dd>
<dt>Input</dt>
<dd><b>DataPtr</b> Data contents of preprocessing %variable.  
<br/><b>DataSize</b> Number of bytes in Data.</dd>
<dt>Output</dt>
<dd>Data will be stored in <code>Src.Lst.SetBuffer</code>. Flag <code>Src.Lst.Status:lstSet</code> will be set.</dd>
<dt>Error</dt>
<dd><b>-</b></dd>
<dt>Invoked by</dt>
<dd><a class="EXT" href="pseudo.htm#PseudoEQU">PseudoEQU</a>
<a class="EXT" href="pseudo.htm#PseudopcFOR">PseudopcFOR</a>
<a class="EXT" href="pseudo.htm#PseudopcSET">PseudopcSET</a>
<a class="EXT" href="pseudo.htm#PseudopcSET2">PseudopcSET2</a>
<a class="EXT" href="pseudo.htm#PseudopcSETA">PseudopcSETA</a>
<a class="EXT" href="pseudo.htm#PseudopcSETB">PseudopcSETB</a>
<a class="EXT" href="pseudo.htm#PseudopcSETC">PseudopcSETC</a>
<a class="EXT" href="pseudo.htm#PseudopcSETE">PseudopcSETE</a>
<a class="EXT" href="pseudo.htm#PseudopcSETL">PseudopcSETL</a>
<a class="EXT" href="pseudo.htm#PseudopcSETS">PseudopcSETS</a>
<a class="EXT" href="pseudo.htm#PseudopcSETX">PseudopcSETX</a>
</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t2810.htm">t2810</a>
</dd>
</dl><pre>
LstSet Procedure DataPtr, DataSize
      MOV EDI,Src.Lst::
      MOV EBX,[EDI+LST.SetBuffer]
      BufferClear EBX
      BufferStore EBX,[%DataPtr],[%DataSize]
      SetSt [EDI+LST.Status],lstSet
     EndProcedure LstSet
</pre>

<dl id="LstBoolean">
<dt><a href="#top">&uarr; LstBoolean</a></dt>
<dd>Procedure <dfn>LstBoolean</dfn> will set lstTRUE or lstFALSE flag in <code>LST.Status</code>.
<!---->Listing of this statement will display boolean value (TRUE or FALSE) in the dump column.</dd>
<dt>Input</dt>
<dd><b>CF=0, ZF=0</b> to set lstTRUE
<br/><b>CF=0, ZF=1</b> to set lstFALSE.</dd>
<dt>Output</dt>
<dd><b>EAX=</b>lstFALSE or lstTRUE. Other registers and flags are preserved.</dd>
<dt>Error</dt>
<dd><b>-</b></dd>
<dt>Example</dt><dd class="PRE"> Invoke ExpEvalBoolOp1, EBX
<!----> Invoke LstBoolean</dd>
<dt>Invoked by</dt>
<dd><a class="EXT" href="pseudo.htm#PseudopcELSE">PseudopcELSE</a>
<a class="EXT" href="pseudo.htm#PseudopcENDREPEAT">PseudopcENDREPEAT</a>
<a class="EXT" href="pseudo.htm#PseudopcIF">PseudopcIF</a>
<a class="EXT" href="pseudo.htm#PseudopcWHILE">PseudopcWHILE</a>
</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t2600.htm">t2600</a>
<a class="EXT" href="../eatests/t2602.htm">t2602</a>
</dd>
</dl><pre>
LstBoolean Procedure
     PUSHFD
      JC .90:
      MOV EAX,lstFALSE
      JZ .50:
      MOV EAX,lstTRUE
 .50: SetSt [Src.Lst.Status::],EAX
 .90:POPFD
     EndProcedure LstBoolean
</pre>

<dl id="LstGetFileName">
<dt><a href="#top">&uarr; LstGetFileName</a></dt>
<dd>Procedure <dfn>LstGetFileName</dfn> will return file name of the listing.
<!---->The name is specified either explicitly with option
<code>EUROASM LISTFILE=</code>,
<!---->or it is constructed from source file name appended with extension <q>.lst</q>.</dd>
<dt>Input</dt>
<dd>-</dd>
<dt>Output</dt>
<dd><b>ESI=</b> pointer to the listing file name (volatile).
<br/><b>ECX=</b> size of the file name.</dd>
<dt>Error</dt>
<dd><b>E8020</b> Filename "!1$" is too long.</dd>
<dt>Invoked by</dt>
<dd><a class="EXT" href="src.htm#SrcDestroy">SrcDestroy</a>
<a class="EXT" href="var.htm#VarExpand">VarExpand</a>
</dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="ea.htm#EaBufferRelease">EaBufferRelease</a>
<a class="EXT" href="ea.htm#EaBufferReserve">EaBufferReserve</a>
</dd>
</dl><pre>
LstGetFileName Procedure
     MOV ECX,[Ea.Eaopt.ListFileSize::]
     MOV ESI,[Ea.Eaopt.ListFilePtr::]
     TEST ECX
     JNZ .80:       ; If explicitly specified with LISTFILE= option.
     ; Otherwise use the default "%^SourceName%^SourceExt.lst".
     LEA EBX,[Ea.SrcFile.Name::] ; Pointer to the zero-terminated filename.
     GetLength$ EBX              ; EBX,ECX now specifies source file name.
     Invoke EaBufferReserve::,%^PROC
     BufferStore EAX,EBX,ECX
     BufferStore EAX,=B".lst",5
     BufferRetrieve EAX
     Invoke EaBufferRelease::,EAX
     DEC ECX
     CMP ECX,256
     JNA .80:
     Msg '8020',ESI              ; Filename "!1$" is too long.
     MOV ECX,256
 .80:MOV [%ReturnESI],ESI
     MOV [%ReturnECX],ECX
  EndProcedure LstGetFileName
</pre>
<pre>
 ENDPROGRAM lst
</pre><!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
