<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='iik.htm source file'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>iik.htm source file</title>
</head>
<body class='EASOURCE' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>iik.htm
<br/><i>Enumerations</i>
<br/><a href="#IikList">IikList</a>
<br/><i>Instruction handlers</i><br/><span class="ILIST">
<a href="#IikJKNZD">JKNZD</a>
<a href="#IikJKZD">JKZD</a>
<a href="#IikKADDB">KADDB</a>
<a href="#IikKADDD">KADDD</a>
<a href="#IikKADDQ">KADDQ</a>
<a href="#IikKADDW">KADDW</a>
<a href="#IikKAND">KAND</a>
<a href="#IikKANDB">KANDB</a>
<a href="#IikKANDD">KANDD</a>
<a href="#IikKANDN">KANDN</a>
<a href="#IikKANDNB">KANDNB</a>
<a href="#IikKANDND">KANDND</a>
<a href="#IikKANDNQ">KANDNQ</a>
<a href="#IikKANDNR">KANDNR</a>
<a href="#IikKANDNW">KANDNW</a>
<a href="#IikKANDQ">KANDQ</a>
<a href="#IikKANDW">KANDW</a>
<a href="#IikKCONCATH">KCONCATH</a>
<a href="#IikKCONCATL">KCONCATL</a>
<a href="#IikKEXTRACT">KEXTRACT</a>
<a href="#IikKMERGE2L1H">KMERGE2L1H</a>
<a href="#IikKMERGE2L1L">KMERGE2L1L</a>
<a href="#IikKMOV">KMOV</a>
<a href="#IikKMOVB">KMOVB</a>
<a href="#IikKMOVD">KMOVD</a>
<a href="#IikKMOVQ">KMOVQ</a>
<a href="#IikKMOVW">KMOVW</a>
<a href="#IikKNOT">KNOT</a>
<a href="#IikKNOTB">KNOTB</a>
<a href="#IikKNOTD">KNOTD</a>
<a href="#IikKNOTQ">KNOTQ</a>
<a href="#IikKNOTW">KNOTW</a>
<a href="#IikKOR">KOR</a>
<a href="#IikKORB">KORB</a>
<a href="#IikKORD">KORD</a>
<a href="#IikKORQ">KORQ</a>
<a href="#IikKORTEST">KORTEST</a>
<a href="#IikKORTESTB">KORTESTB</a>
<a href="#IikKORTESTD">KORTESTD</a>
<a href="#IikKORTESTQ">KORTESTQ</a>
<a href="#IikKORTESTW">KORTESTW</a>
<a href="#IikKORW">KORW</a>
<a href="#IikKSHIFTLB">KSHIFTLB</a>
<a href="#IikKSHIFTLD">KSHIFTLD</a>
<a href="#IikKSHIFTLQ">KSHIFTLQ</a>
<a href="#IikKSHIFTLW">KSHIFTLW</a>
<a href="#IikKSHIFTRB">KSHIFTRB</a>
<a href="#IikKSHIFTRD">KSHIFTRD</a>
<a href="#IikKSHIFTRQ">KSHIFTRQ</a>
<a href="#IikKSHIFTRW">KSHIFTRW</a>
<a href="#IikKTESTB">KTESTB</a>
<a href="#IikKTESTD">KTESTD</a>
<a href="#IikKTESTQ">KTESTQ</a>
<a href="#IikKTESTW">KTESTW</a>
<a href="#IikKUNPCKBW">KUNPCKBW</a>
<a href="#IikKUNPCKDQ">KUNPCKDQ</a>
<a href="#IikKUNPCKWD">KUNPCKWD</a>
<a href="#IikKXNOR">KXNOR</a>
<a href="#IikKXNORB">KXNORB</a>
<a href="#IikKXNORD">KXNORD</a>
<a href="#IikKXNORQ">KXNORQ</a>
<a href="#IikKXNORW">KXNORW</a>
<a href="#IikKXOR">KXOR</a>
<a href="#IikKXORB">KXORB</a>
<a href="#IikKXORD">KXORD</a>
<a href="#IikKXORQ">KXORQ</a>
<a href="#IikKXORW">KXORW</a>
</span><!--IikAList-->
</h1>
<dl id="IikHandlers"><dt><a href="#top">&uarr; <em>IikHandlers</em></a> </dt>
<dd> assemble <b>AVX-512</b> machine instructions
<!---->which manipulate with <b>opmask registers K0..K7</b>.</dd>
<dt>See also</dt><dd><a class="EXT" href="ii.htm#IiHandlers">IiHandlers</a>,
<a class="EXTL" href="../eadoc/links.htm#IntelAVX512">[IntelAVX512]</a>.
</dd></dl><pre>
iik PROGRAM FORMAT=COFF,MODEL=FLAT,WIDTH=32
    INCLUDEHEAD euroasm.htm, \  Interface (structures, symbols and macros) of other modules used in this source.
                ea.htm,eaopt.htm,exp.htm,ii.htm,msg.htm,pgm.htm,pgmopt.htm,sss.htm,stm.htm,sym.htm
</pre><br class="CLEAR"/><pre>
iik HEAD ; Start of module interface.
</pre>

<dl id="IikList"><dt><a href="#top">&uarr; %IikList</a></dt><dd> enumerates machine instructions
<!---->of this family which &euro;ASM can assemble.
<br/>Each instruction declared in <code>%IikList</code> requires the corresponding
<a href="#IikHandlers">handler</a> in this file.</dd>
<dt>See also</dt><dd><a class="EXT" href="dict.htm#DictLookupIi">DictLookupIi</a></dd></dl><pre>
%IikList %SET \
JKZD, \
JKNZD, \
KMOV, \
KMOVB, \
KMOVD, \
KMOVQ, \
KMOVW, \
KSHIFTRB, \
KSHIFTRD, \
KSHIFTLB, \
KSHIFTLD, \
KSHIFTRW, \
KSHIFTRQ, \
KSHIFTLW, \
KSHIFTLQ, \
KORTESTB, \
KORTESTW, \
KORTESTD, \
KORTESTQ, \
KTESTB, \
KTESTW, \
KTESTD, \
KTESTQ, \
KNOTB, \
KNOTW, \
KNOTD, \
KNOTQ, \
KORB, \
KORW, \
KORD, \
KORQ, \
KADDB, \
KADDW, \
KADDQ, \
KADDD, \
KANDB, \
KANDW, \
KANDD, \
KANDQ, \
KANDNB, \
KANDNW, \
KANDND, \
KANDNQ, \
KXNORB, \
KXNORW, \
KXNORD, \
KXNORQ, \
KXORB, \
KXORW, \
KXORD, \
KXORQ, \
KUNPCKBW, \
KUNPCKWD, \
KUNPCKDQ, \
KAND, \
KANDN, \
KANDNR, \
KNOT, \
KOR, \
KXNOR, \
KXOR, \
KMERGE2L1H, \
KMERGE2L1L, \
KORTEST, \
KCONCATH, \
KCONCATL, \
KEXTRACT, \
<!--IikList-->
;
  ENDHEAD iik  ; End of module interface.
</pre>

<dl id="IikKMOVB">
<dt><a href="#IikHandlers">&uarr; KMOVB</a></dt>
<dd>Move from and to Mask Registers BYTE</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KMOVB k1, k2/m8
</th><td>VEX.L0.66.0F.W0 90 /r 
</td></tr>
<tr><th>KMOVB m8, k1
</th><td>VEX.L0.66.0F.W0 91 /r  
</td></tr>
<tr><th>KMOVB k1, r32
</th><td>VEX.L0.66.0F.W0 92 /r
</td></tr>
<tr><th>KMOVB r32, k1
</th><td>VEX.L0.66.0F.W0 93 /r  
</td></tr>
</table></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6200.htm">t6200</a>
</dd>
</dl><pre>
IikKMOVB:: PROC
    IiEncoding DATA=BYTE
    IiEmitPrefix VEX.L0.66.0F.W0
.df:IiModRM /r
    IiRequire EVEX
    IiDispatchFormat  krg.krg, krg.mem, mem.krg, krg.r32, r32.krg
.krg.mem:
.krg.krg:
    IiEmitOpcode 0x90
    IiOpEn RM
    RET
.mem.krg:
    IiEmitOpcode 0x91
    IiOpEn MR 
    RET
.krg.r32:
    IiEmitOpcode 0x92
    IiOpEn RM
    RET
.r32.krg:
    IiEmitOpcode 0x93
    IiOpEn RM
    RET
  ENDP IikKMOVB::
</pre>

<dl id="IikKMOVW">
<dt><a href="#IikKMOVB">&uarr; KMOVW</a></dt>
<dd>Move from and to Mask Registers WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KMOVW k1, k2/m16
</th><td>VEX.L0.0F.W0 90 /r
</td></tr>
<tr><th>KMOVW m16, k1
</th><td>VEX.L0.0F.W0 91 /r
</td></tr>
<tr><th>KMOVW k1, r32
</th><td>VEX.L0.0F.W0 92 /r
</td></tr>
<tr><th>KMOVW r32, k1
</th><td>VEX.L0.0F.W0 93 /r
</td></tr>
</table></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6200.htm">t6200</a>
</dd>
</dl><pre>
IikKMOVW:: PROC
    IiEncoding DATA=WORD
    IiEmitPrefix VEX.L0.0F.W0
    JMP IikKMOVB.df:
  ENDP IikKMOVW::
</pre>

<dl id="IikKMOVD">
<dt><a href="#IikHandlers">&uarr; KMOVD</a></dt>
<dd>Move from and to Mask Registers DWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KMOVD k1, k2/m32
</th><td>VEX.L0.66.0F.W1 90 /r  
</td></tr>
<tr><th>KMOVD m32, k1
</th><td>VEX.L0.66.0F.W1 91 /r  
</td></tr>
<tr><th>KMOVD k1, r32
</th><td>VEX.L0.F2.0F.W0 92 /r
</td></tr>
<tr><th>KMOVD r32, k1
</th><td>VEX.L0.F2.0F.W0 93 /r  
</td></tr>
</table></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6200.htm">t6200</a>
</dd>
</dl><pre>
IikKMOVD:: PROC
    IiRequire EVEX
    IiEncoding DATA=DWORD
    IiModRM /r
    IiDispatchFormat  krg.krg, krg.mem, mem.krg, krg.r32, r32.krg
.krg.krg:
.krg.mem:
    IiEmitOpcode 0x90
    IiOpEn RM
.km:IiEmitPrefix VEX.L0.66.0F.W1
    RET
.mem.krg:
    IiEmitOpcode 0x91
    IiOpEn MR
    JMP .km:
.krg.r32:
    IiEmitOpcode 0x92
.kr:IiOpEn RM
    IiEmitPrefix VEX.L0.F2.0F.W0
    RET
.r32.krg:
    IiEmitOpcode 0x93
    JMP .kr:
  ENDP IikKMOVD::
</pre>

<dl id="IikKMOVQ">
<dt><a href="#IikHandlers">&uarr; KMOVQ</a></dt>
<dd>Move from and to Mask Registers QWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KMOVQ k1, k2/m64
</th><td>VEX.L0.0F.W1 90 /r  
</td></tr>
<tr><th>KMOVQ m64, k1
</th><td>VEX.L0.0F.W1 91 /r  
</td></tr>
<tr><th>KMOVQ k1, r64
</th><td>VEX.L0.F2.0F.W1 92 /r  
</td></tr>
<tr><th>KMOVQ r64, k1
</th><td>VEX.L0.F2.0F.W1 93 /r  
</td></tr>
</table></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6200.htm">t6200</a>
</dd>
</dl><pre>
IikKMOVQ:: PROC
    IiRequire EVEX
    IiEncoding DATA=QWORD
    IiModRM /r
    IiDispatchFormat  krg.krg, krg.mem, mem.krg, krg.r64, r64.krg
.krg.krg:
.krg.mem:
    IiEmitOpcode 0x90
    IiOpEn RM
.km:IiEmitPrefix VEX.L0.0F.W1
    RET
.mem.krg:
    IiEmitOpcode 0x91
    IiOpEn MR
    JMP .km:
.krg.r64:
    IiEmitOpcode 0x92
.kr:IiOpEn RM
    IiEmitPrefix VEX.L0.F2.0F.W1
    RET
.r64.krg:
    IiEmitOpcode 0x93
    JMP .kr:
  ENDP IikKMOVQ::
</pre>

<dl id="IikKSHIFTRB">
<dt><a href="#IikHandlers">&uarr; KSHIFTRB</a></dt>
<dd>Shift Right Mask Registers BYTE</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KSHIFTRB k1, k2, imm8
</th><td>VEX.L0.66.0F3A.W0 30 /r R
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x30</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6202.htm">t6202</a>
</dd>
</dl><pre>
IikKSHIFTRB:: PROC
    IiEmitOpcode 0x30
.op:IiEncoding DATA=BYTE
.en:IiOpEn RM
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiRequire EVEX
    IiDispatchFormat  krg.krg.imm
.krg.krg.imm:
    IiEmitPrefix VEX.L0.66.0F3A.W0
    RET
  ENDP IikKSHIFTRB::
</pre>

<dl id="IikKSHIFTRD">
<dt><a href="#IikKSHIFTRB">&uarr; KSHIFTRD</a></dt>
<dd>Shift Right Mask Registers DWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KSHIFTRD k1, k2, imm8
</th><td>VEX.L0.66.0F3A.W0 31 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x31</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6202.htm">t6202</a>
</dd>
</dl><pre>
IikKSHIFTRD:: PROC
    IiEmitOpcode 0x31
    IiEncoding DATA=DWORD
    JMP IikKSHIFTRB.en:
  ENDP IikKSHIFTRD::
</pre>

<dl id="IikKSHIFTLB">
<dt><a href="#IikKSHIFTRB">&uarr; KSHIFTLB</a></dt>
<dd>Shift Left Mask Registers BYTE</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KSHIFTLB k1, k2, imm8
</th><td>VEX.L0.66.0F3A.W0 32 /r R
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x32</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6202.htm">t6202</a>
</dd>
</dl><pre>
IikKSHIFTLB:: PROC
    IiEmitOpcode 0x32
    JMP IikKSHIFTRB.op:
  ENDP IikKSHIFTLB::
</pre>

<dl id="IikKSHIFTLD">
<dt><a href="#IikKSHIFTRB">&uarr; KSHIFTLD</a></dt>
<dd>Shift Left Mask Registers DWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KSHIFTLD k1, k2, imm8
</th><td>VEX.L0.66.0F3A.W0 33 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x33</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6202.htm">t6202</a>
</dd>
</dl><pre>
IikKSHIFTLD:: PROC
    IiEmitOpcode 0x33
    IiEncoding DATA=DWORD
    JMP IikKSHIFTRB.en:
  ENDP IikKSHIFTLD::
</pre>

<dl id="IikKSHIFTRW">
<dt><a href="#IikHandlers">&uarr; KSHIFTRW</a></dt>
<dd>Shift Right Mask Registers WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KSHIFTRW k1, k2, imm8
</th><td>VEX.L0.66.0F3A.W1 30 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x30</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6202.htm">t6202</a>
</dd>
</dl><pre>
IikKSHIFTRW:: PROC
    IiEmitOpcode 0x30
.op:IiEncoding DATA=WORD    
.en:IiOpEn RM
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiRequire EVEX    
    IiDispatchFormat  krg.krg.imm
.krg.krg.imm:
    IiEmitPrefix VEX.L0.66.0F3A.W1
    RET
  ENDP IikKSHIFTRW::
</pre>

<dl id="IikKSHIFTRQ">
<dt><a href="#IikKSHIFTRW">&uarr; KSHIFTRQ</a></dt>
<dd>Shift Right Mask Registers QWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KSHIFTRQ k1, k2, imm8
</th><td>VEX.L0.66.0F3A.W1 31 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x31</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6202.htm">t6202</a>
</dd>
</dl><pre>
IikKSHIFTRQ:: PROC
    IiEmitOpcode 0x31
    IiEncoding DATA=QWORD
    JMP IikKSHIFTRW.en:
  ENDP IikKSHIFTRQ::
</pre>

<dl id="IikKSHIFTLW">
<dt><a href="#IikKSHIFTRW">&uarr; KSHIFTLW</a></dt>
<dd>Shift Left Mask Registers WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KSHIFTLW k1, k2, imm8
</th><td>VEX.L0.66.0F3A.W1 32 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x32</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6202.htm">t6202</a>
</dd>
</dl><pre>
IikKSHIFTLW:: PROC
    IiEmitOpcode 0x32
    JMP IikKSHIFTRW.op:
  ENDP IikKSHIFTLW::
</pre>

<dl id="IikKSHIFTLQ">
<dt><a href="#IikKSHIFTRW">&uarr; KSHIFTLQ</a></dt>
<dd>Shift Left Mask Registers QWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KSHIFTLQ k1, k2, imm8
</th><td>VEX.L0.66.0F3A.W1 33 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x33</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6202.htm">t6202</a>
</dd>
</dl><pre>
IikKSHIFTLQ:: PROC
    IiEmitOpcode 0x33
    IiEncoding DATA=QWORD
    JMP IikKSHIFTRW.en:
  ENDP IikKSHIFTLQ::
</pre>

<dl id="IikKORTESTB">
<dt><a href="#IikHandlers">&uarr; KORTESTB</a></dt>
<dd>OR Masks And Set Flags BYTE</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KORTESTB k1, k2
</th><td>VEX.L0.66.0F.W0 98 /r R
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x98</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6204.htm">t6204</a>
</dd>
</dl><pre>
IikKORTESTB:: PROC
    IiEmitOpcode 0x98
.op:IiEncoding DATA=BYTE
    IiOpEn RM
    IiModRM /r
    IiRequire EVEX
    IiEmitPrefix VEX.L0.66.0F.W0
    IiDispatchFormat  krg.krg
.krg.krg:
    RET
  ENDP IikKORTESTB::
</pre>

<dl id="IikKORTESTW">
<dt><a href="#IikHandlers">&uarr; KORTESTW</a></dt>
<dd>OR Masks And Set Flags WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KORTESTW k1, k2
</th><td>VEX.L0.0F.W0 98 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x98</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6204.htm">t6204</a>
</dd>
</dl><pre>
IikKORTESTW:: PROC
    IiEmitOpcode 0x98
.op:IiEncoding DATA=WORD    
    IiOpEn RM
    IiModRM /r
    IiRequire EVEX
    IiEmitPrefix VEX.L0.0F.W0
    IiDispatchFormat  krg.krg
.krg.krg:
    RET
  ENDP IikKORTESTW::
</pre>

<dl id="IikKORTESTD">
<dt><a href="#IikHandlers">&uarr; KORTESTD</a></dt>
<dd>OR Masks And Set Flags DWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KORTESTD k1, k2
</th><td>VEX.L0.66.0F.W1 98 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x98</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6204.htm">t6204</a>
</dd>
</dl><pre>
IikKORTESTD:: PROC
    IiEmitOpcode 0x98
.op:IiEncoding DATA=DWORD    
    IiOpEn RM
    IiModRM /r
    IiRequire EVEX
    IiEmitPrefix VEX.L0.66.0F.W1
    IiDispatchFormat  krg.krg
.krg.krg:
    RET
  ENDP IikKORTESTD::
</pre>

<dl id="IikKORTESTQ">
<dt><a href="#IikHandlers">&uarr; KORTESTQ</a></dt>
<dd>OR Masks And Set Flags QWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KORTESTQ k1, k2
</th><td>VEX.L0.0F.W1 98 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x98</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6204.htm">t6204</a>
</dd>
</dl><pre>
IikKORTESTQ:: PROC
    IiEmitOpcode 0x98
.op:IiEncoding DATA=QWORD
    IiOpEn RM
    IiModRM /r
    IiRequire EVEX    
    IiEmitPrefix VEX.L0.0F.W1
    IiDispatchFormat  krg.krg
.krg.krg:
    RET
  ENDP IikKORTESTQ::
</pre>

<dl id="IikKTESTB">
<dt><a href="#IikKORTESTB">&uarr; KTESTB</a></dt>
<dd>Packed Bit Test Masks and Set Flags BYTE</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KTESTB k1, k2
</th><td>VEX.L0.66.0F.W0 99 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x99</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6206.htm">t6206</a>
</dd>
</dl><pre>
IikKTESTB:: PROC
    IiEmitOpcode 0x99
    JMP IikKORTESTB.op:
  ENDP IikKTESTB::
</pre>

<dl id="IikKTESTW">
<dt><a href="#IikKORTESTW">&uarr; KTESTW</a></dt>
<dd>Packed Bit Test Masks and Set Flags WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KTESTW k1, k2
</th><td>VEX.L0.0F.W0 99 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x99</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6206.htm">t6206</a>
</dd>
</dl><pre>
IikKTESTW:: PROC
    IiEmitOpcode 0x99
    JMP IikKORTESTW.op:
  ENDP IikKTESTW::
</pre>

<dl id="IikKTESTD">
<dt><a href="#IikKORTESTD">&uarr; KTESTD</a></dt>
<dd>Packed Bit Test Masks and Set Flags DWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KTESTD k1, k2
</th><td>VEX.L0.66.0F.W1 99 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x99</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6206.htm">t6206</a>
</dd>
</dl><pre>
IikKTESTD:: PROC
    IiEmitOpcode 0x99
    JMP IikKORTESTD.op:
  ENDP IikKTESTD::
</pre>

<dl id="IikKTESTQ">
<dt><a href="#IikKORTESTQ">&uarr; KTESTQ</a></dt>
<dd>Packed Bit Test Masks and Set Flags QWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KTESTQ k1, k2
</th><td>VEX.L0.0F.W1 99 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x99</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6206.htm">t6206</a>
</dd>
</dl><pre>
IikKTESTQ:: PROC
    IiEmitOpcode 0x99
    JMP IikKORTESTQ.op:
  ENDP IikKTESTQ::
</pre>

<dl id="IikKNOTB">
<dt><a href="#IikKORTESTB">&uarr; KNOTB</a></dt>
<dd>NOT Mask Register BYTE</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KNOTB k1, k2
</th><td>VEX.L0.66.0F.W0 44 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x44</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6206.htm">t6206</a>
</dd>
</dl><pre>
IikKNOTB:: PROC
    IiEmitOpcode 0x44
    JMP IikKORTESTB.op:
  ENDP IikKNOTB::
</pre>

<dl id="IikKNOTW">
<dt><a href="#IikKORTESTW">&uarr; KNOTW</a></dt>
<dd>NOT Mask Register WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KNOTW k1, k2
</th><td>VEX.L0.0F.W0 44 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x44</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6206.htm">t6206</a>
</dd>
</dl><pre>
IikKNOTW:: PROC
    IiEmitOpcode 0x44
    JMP IikKORTESTW.op:
  ENDP IikKNOTW::
</pre>

<dl id="IikKNOTD">
<dt><a href="#IikKORTESTD">&uarr; KNOTD</a></dt>
<dd>NOT Mask Register DWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KNOTD k1, k2
</th><td>VEX.L0.66.0F.W1 44 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x44</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6206.htm">t6206</a>
</dd>
</dl><pre>
IikKNOTD:: PROC
    IiEmitOpcode 0x44
    JMP IikKORTESTD.op:
  ENDP IikKNOTD::
</pre>

<dl id="IikKNOTQ">
<dt><a href="#IikKORTESTQ">&uarr; KNOTQ</a></dt>
<dd>NOT Mask Register QWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KNOTQ k1, k2
</th><td>VEX.L0.0F.W1 44 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x44</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6206.htm">t6206</a>
</dd>
</dl><pre>
IikKNOTQ:: PROC
    IiEmitOpcode 0x44
    JMP IikKORTESTQ.op:
  ENDP IikKNOTQ::
</pre>

<dl id="IikKORB">
<dt><a href="#IikHandlers">&uarr; KORB</a></dt>
<dd>Bitwise Logical OR Masks BYTE</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KORB k1, k2, k3
</th><td>VEX.L1.66.0F.W0 45 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x45</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6212.htm">t6212</a>
</dd>
</dl><pre>
IikKORB:: PROC
    IiEmitOpcode 0x45
.op:IiEncoding DATA=BYTE
    IiOpEn RVM
    IiModRM /r
    IiRequire EVEX    
    IiEmitPrefix VEX.L1.66.0F.W0
    IiDispatchFormat  krg.krg.krg
.krg.krg.krg:
    RET
  ENDP IikKORB::
</pre>

<dl id="IikKORW">
<dt><a href="#IikHandlers">&uarr; KORW</a></dt>
<dd>Bitwise Logical OR Masks WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KORW k1, k2, k3
</th><td>VEX.NDS.L1.0F.W0 45 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x45</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6212.htm">t6212</a>
</dd>
</dl><pre>
IikKORW:: PROC
    IiEmitOpcode 0x45
.op:IiEncoding DATA=WORD    
    IiOpEn RVM
    IiModRM /r
    IiRequire EVEX    
    IiEmitPrefix VEX.NDS.L1.0F.W0
    IiDispatchFormat  krg.krg.krg
.krg.krg.krg:
    RET
  ENDP IikKORW::
</pre>

<dl id="IikKORD">
<dt><a href="#IikHandlers">&uarr; KORD</a></dt>
<dd>Bitwise Logical OR Masks DWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KORD k1, k2, k3
</th><td>VEX.L1.66.0F.W1 45 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x45</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6212.htm">t6212</a>
</dd>
</dl><pre>
IikKORD:: PROC
    IiEmitOpcode 0x45
.op:IiEncoding DATA=DWORD
    IiOpEn RVM
    IiModRM /r
    IiRequire EVEX    
    IiEmitPrefix VEX.L1.66.0F.W1
    IiDispatchFormat  krg.krg.krg
.krg.krg.krg:
    RET
  ENDP IikKORD::
</pre>

<dl id="IikKORQ">
<dt><a href="#IikHandlers">&uarr; KORQ</a></dt>
<dd>Bitwise Logical OR Masks QWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KORQ k1, k2, k3
</th><td>VEX.L1.0F.W1 45 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x45</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6212.htm">t6212</a>
</dd>
</dl><pre>
IikKORQ:: PROC
    IiEmitOpcode 0x45
.op:IiEncoding DATA=QWORD
    IiOpEn RVM
    IiModRM /r
    IiRequire EVEX    
    IiEmitPrefix VEX.L1.0F.W1
    IiDispatchFormat  krg.krg.krg
.krg.krg.krg:
    RET
  ENDP IikKORQ::
</pre>

<dl id="IikKADDB">
<dt><a href="#IikKORB">&uarr; KADDB</a></dt>
<dd>ADD Two Masks BYTE</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KADDB k1, k2, k3
</th><td>VEX.L1.66.0F.W0 4A /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x4A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6210.htm">t6210</a>
</dd>
</dl><pre>
IikKADDB:: PROC
    IiEmitOpcode 0x4A
    JMP IikKORB.op:
  ENDP IikKADDB::
</pre>

<dl id="IikKADDW">
<dt><a href="#IikKORW">&uarr; KADDW</a></dt>
<dd>ADD Two Masks WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KADDW k1, k2, k3
</th><td>VEX.L1.0F.W0 4A /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x4A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6210.htm">t6210</a>
</dd>
</dl><pre>
IikKADDW:: PROC
    IiEmitOpcode 0x4A
    JMP IikKORW.op:
  ENDP IikKADDW::
</pre>

<dl id="IikKADDD">
<dt><a href="#IikKORD">&uarr; KADDD</a></dt>
<dd>ADD Two Masks DWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KADDD k1, k2, k3
</th><td>VEX.L1.66.0F.W1 4A /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x4A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6210.htm">t6210</a>
</dd>
</dl><pre>
IikKADDD:: PROC
    IiEmitOpcode 0x4A
    JMP IikKORD.op:
  ENDP IikKADDD::
</pre>

<dl id="IikKADDQ">
<dt><a href="#IikKORQ">&uarr; KADDQ</a></dt>
<dd>ADD Two Masks QWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KADDQ k1, k2, k3
</th><td>VEX.L1.0F.W1 4A /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x4A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6210.htm">t6210</a>
</dd>
</dl><pre>
IikKADDQ:: PROC
    IiEmitOpcode 0x4A
    JMP IikKORQ.op:
  ENDP IikKADDQ::
</pre>

<dl id="IikKANDB">
<dt><a href="#IikKORB">&uarr; KANDB</a></dt>
<dd>Bitwise Logical AND Masks BYTE</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KANDB k1, k2, k3
</th><td>VEX.L1.66.0F.W0 41 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x41</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6210.htm">t6210</a>
</dd>
</dl><pre>
IikKANDB:: PROC
    IiEmitOpcode 0x41
    JMP IikKORB.op:
  ENDP IikKANDB::
</pre>

<dl id="IikKANDW">
<dt><a href="#IikKORW">&uarr; KANDW</a></dt>
<dd>Bitwise Logical AND Masks WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KANDW k1, k2, k3
</th><td>VEX.NDS.L1.0F.W0 41 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x41</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6210.htm">t6210</a>
</dd>
</dl><pre>
IikKANDW:: PROC
    IiEmitOpcode 0x41
    JMP IikKORW.op:
  ENDP IikKANDW::
</pre>

<dl id="IikKANDD">
<dt><a href="#IikKORD">&uarr; KANDD</a></dt>
<dd>Bitwise Logical AND Masks DWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KANDD k1, k2, k3
</th><td>VEX.L1.66.0F.W1 41 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x41</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6210.htm">t6210</a>
</dd>
</dl><pre>
IikKANDD:: PROC
    IiEmitOpcode 0x41
    JMP IikKORD.op:
  ENDP IikKANDD::
</pre>

<dl id="IikKANDQ">
<dt><a href="#IikKORQ">&uarr; KANDQ</a></dt>
<dd>Bitwise Logical AND Masks QWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KANDQ k1, k2, k3
</th><td>VEX.L1.0F.W1 41 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x41</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6210.htm">t6210</a>
</dd>
</dl><pre>
IikKANDQ:: PROC
    IiEmitOpcode 0x41
    JMP IikKORQ.op:
  ENDP IikKANDQ::
</pre>

<dl id="IikKANDNB">
<dt><a href="#IikKORB">&uarr; KANDNB</a></dt>
<dd>Bitwise Logical AND NOT Masks BYTE</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KANDNB k1, k2, k3
</th><td>VEX.L1.66.0F.W0 42 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x42</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6212.htm">t6212</a>
</dd>
</dl><pre>
IikKANDNB:: PROC
    IiEmitOpcode 0x42
    JMP IikKORB.op:
  ENDP IikKANDNB::
</pre>

<dl id="IikKANDNW">
<dt><a href="#IikKORW">&uarr; KANDNW</a></dt>
<dd>Bitwise Logical AND NOT Masks WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KANDNW k1, k2, k3
</th><td>VEX.NDS.L1.0F.W0 42 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x42</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6212.htm">t6212</a>
</dd>
</dl><pre>
IikKANDNW:: PROC
    IiEmitOpcode 0x42
    JMP IikKORW.op:
  ENDP IikKANDNW::
</pre>

<dl id="IikKANDND">
<dt><a href="#IikKORD">&uarr; KANDND</a></dt>
<dd>Bitwise Logical AND NOT Masks DWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KANDND k1, k2, k3
</th><td>VEX.L1.66.0F.W1 42 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x42</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6212.htm">t6212</a>
</dd>
</dl><pre>
IikKANDND:: PROC
    IiEmitOpcode 0x42
    JMP IikKORD.op:
  ENDP IikKANDND::
</pre>

<dl id="IikKANDNQ">
<dt><a href="#IikKORQ">&uarr; KANDNQ</a></dt>
<dd>Bitwise Logical AND NOT Masks QWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KANDNQ k1, k2, k3
</th><td>VEX.L1.0F.W1 42 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x42</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6212.htm">t6212</a>
</dd>
</dl><pre>
IikKANDNQ:: PROC
    IiEmitOpcode 0x42
    JMP IikKORQ.op:
  ENDP IikKANDNQ::
</pre>

<dl id="IikKXNORB">
<dt><a href="#IikKORB">&uarr; KXNORB</a></dt>
<dd>Bitwise Logical XNOR Masks BYTE</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KXNORB k1, k2, k3
</th><td>VEX.L1.66.0F.W0 46 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x46</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6214.htm">t6214</a>
</dd>
</dl><pre>
IikKXNORB:: PROC
    IiEmitOpcode 0x46
    JMP IikKORB.op:
  ENDP IikKXNORB::
</pre>

<dl id="IikKXNORW">
<dt><a href="#IikKORW">&uarr; KXNORW</a></dt>
<dd>Bitwise Logical XNOR Masks WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KXNORW k1, k2, k3
</th><td>VEX.NDS.L1.0F.W0 46 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x46</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6214.htm">t6214</a>
</dd>
</dl><pre>
IikKXNORW:: PROC
    IiEmitOpcode 0x46
    JMP IikKORW.op:
  ENDP IikKXNORW::
</pre>

<dl id="IikKXNORD">
<dt><a href="#IikKORD">&uarr; KXNORD</a></dt>
<dd>Bitwise Logical XNOR Masks DWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KXNORD k1, k2, k3
</th><td>VEX.L1.66.0F.W1 46 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x46</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6214.htm">t6214</a>
</dd>
</dl><pre>
IikKXNORD:: PROC
    IiEmitOpcode 0x46
    JMP IikKORD.op:
  ENDP IikKXNORD::
</pre>

<dl id="IikKXNORQ">
<dt><a href="#IikKORQ">&uarr; KXNORQ</a></dt>
<dd>Bitwise Logical XNOR Masks QWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KXNORQ k1, k2, k3
</th><td>VEX.L1.0F.W1 46 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x46</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6214.htm">t6214</a>
</dd>
</dl><pre>
IikKXNORQ:: PROC
    IiEmitOpcode 0x46
    JMP IikKORQ.op:
  ENDP IikKXNORQ::
</pre>

<dl id="IikKXORB">
<dt><a href="#IikKORB">&uarr; KXORB</a></dt>
<dd>Bitwise Logical XOR Masks BYTE</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KXORB k1, k2, k3
</th><td>VEX.L1.66.0F.W0 47 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x47</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6214.htm">t6214</a>
</dd>
</dl><pre>
IikKXORB:: PROC
    IiEmitOpcode 0x47
    JMP IikKORB.op:
  ENDP IikKXORB::
</pre>

<dl id="IikKXORW">
<dt><a href="#IikKORW">&uarr; KXORW</a></dt>
<dd>Bitwise Logical XOR Masks WORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KXORW k1, k2, k3
</th><td>VEX.NDS.L1.0F.W0 47 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x47</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6214.htm">t6214</a>
</dd>
</dl><pre>
IikKXORW:: PROC
    IiEmitOpcode 0x47
    JMP IikKORW.op:
  ENDP IikKXORW::
</pre>

<dl id="IikKXORD">
<dt><a href="#IikKORD">&uarr; KXORD</a></dt>
<dd>Bitwise Logical XOR Masks DWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KXORD k1, k2, k3
</th><td>VEX.L1.66.0F.W1 47 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x47</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6214.htm">t6214</a>
</dd>
</dl><pre>
IikKXORD:: PROC
    IiEmitOpcode 0x47
    JMP IikKORD.op:
  ENDP IikKXORD::
</pre>

<dl id="IikKXORQ">
<dt><a href="#IikKORQ">&uarr; KXORQ</a></dt>
<dd>Bitwise Logical XOR Masks QWORD</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KXORQ k1, k2, k3
</th><td>VEX.L1.0F.W1 47 /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x47</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6214.htm">t6214</a>
</dd>
</dl><pre>
IikKXORQ:: PROC
    IiEmitOpcode 0x47
    JMP IikKORQ.op:
  ENDP IikKXORQ::
</pre>

<dl id="IikKUNPCKBW">
<dt><a href="#IikKORB">&uarr; KUNPCKBW</a></dt>
<dd>Unpack for Mask Registers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KUNPCKBW k1, k2, k3
</th><td>VEX.NDS.L1.66.0F.W0 4B /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x4B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6208.htm">t6208</a>
</dd>
</dl><pre>
IikKUNPCKBW:: PROC
    IiEmitOpcode 0x4B
    JMP IikKORB.op:
  ENDP IikKUNPCKBW::
</pre>

<dl id="IikKUNPCKWD">
<dt><a href="#IikKORW">&uarr; KUNPCKWD</a></dt>
<dd>Unpack for Mask Registers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KUNPCKWD k1, k2, k3
</th><td>VEX.NDS.L1.0F.W0 4B /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x4B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6208.htm">t6208</a>
</dd>
</dl><pre>
IikKUNPCKWD:: PROC
    IiEmitOpcode 0x4B
    JMP IikKORW.op:
  ENDP IikKUNPCKWD::
</pre>

<dl id="IikKUNPCKDQ">
<dt><a href="#IikKORQ">&uarr; KUNPCKDQ</a></dt>
<dd>Unpack for Mask Registers</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KUNPCKDQ k1, k2, k3
</th><td>VEX.NDS.L1.0F.W1 4B /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x4B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6208.htm">t6208</a>
</dd>
</dl><pre>
IikKUNPCKDQ:: PROC
    IiEmitOpcode 0x4B
    IiEncoding DATA=DWORD
    JMP IikKORQ.op:
  ENDP IikKUNPCKDQ::
</pre>

<dl id="IikKAND">
<dt><a href="#IikHandlers">&uarr; KAND</a></dt>
<dd>AND Vector Mask</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KAND k1, k2
</th><td>VEX.128.0F.W0 41 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x41</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6220.htm">t6220</a>
</dd>
</dl><pre>
IikKAND:: PROC
    IiEmitOpcode 0x41
.op:IiRequire MVEX
    IiOpEn RM
    IiModRM /r
    IiEmitPrefix VEX.128.0F.W0
    IiDispatchFormat  krg.krg
.krg.krg:
    RET
  ENDP IikKAND::
</pre>

<dl id="IikKANDN">
<dt><a href="#IikKAND">&uarr; KANDN</a></dt>
<dd>AND NOT Vector Mask</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KANDN k1, k2
</th><td>VEX.128.0F.W0 42 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x42</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6220.htm">t6220</a>
</dd>
</dl><pre>
IikKANDN:: PROC
    IiEmitOpcode 0x42
    JMP IikKAND.op:
  ENDP IikKANDN::
</pre>

<dl id="IikKANDNR">
<dt><a href="#IikKAND">&uarr; KANDNR</a></dt>
<dd>Reverse AND NOT Vector Mask</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KANDNR k1, k2
</th><td>VEX.128.0F.W0 43 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x43</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6220.htm">t6220</a>
</dd>
</dl><pre>
IikKANDNR:: PROC
    IiEmitOpcode 0x43
    JMP IikKAND.op:
  ENDP IikKANDNR::
</pre>

<dl id="IikKNOT">
<dt><a href="#IikKAND">&uarr; KNOT</a></dt>
<dd>Not Vector Mask</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KNOT k1, k2
</th><td>VEX.128.0F.W0 44 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x44</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6220.htm">t6220</a>
</dd>
</dl><pre>
IikKNOT:: PROC
    IiEmitOpcode 0x44
    JMP IikKAND.op:
  ENDP IikKNOT::
</pre>

<dl id="IikKOR">
<dt><a href="#IikKAND">&uarr; KOR</a></dt>
<dd>OR Vector Masks</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KOR k1, k2
</th><td>VEX.128.0F.W0 45 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x45</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6220.htm">t6220</a>
</dd>
</dl><pre>
IikKOR:: PROC
    IiEmitOpcode 0x45
    JMP IikKAND.op:
  ENDP IikKOR::
</pre>

<dl id="IikKXNOR">
<dt><a href="#IikKAND">&uarr; KXNOR</a></dt>
<dd>XNOR Vector Masks</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KXNOR k1, k2
</th><td>VEX.128.0F.W0 46 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x46</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6220.htm">t6220</a>
</dd>
</dl><pre>
IikKXNOR:: PROC
    IiEmitOpcode 0x46
    JMP IikKAND.op:
  ENDP IikKXNOR::
</pre>

<dl id="IikKXOR">
<dt><a href="#IikKAND">&uarr; KXOR</a></dt>
<dd>XOR Vector Masks</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KXOR k1, k2
</th><td>VEX.128.0F.W0 47 /r 
</td></tr>
</table></dd>
<dt>Operands</dt>
<dd>0x47</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6220.htm">t6220</a>
</dd>
</dl><pre>
IikKXOR:: PROC
    IiEmitOpcode 0x47
    JMP IikKAND.op:
  ENDP IikKXOR::
</pre>

<dl id="IikKMERGE2L1H">
<dt><a href="#IikKAND">&uarr; KMERGE2L1H</a></dt>
<dd>Swap and Merge High Element Portion and Low Portion of Vector Masks</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KMERGE2L1H k1, k2
</th><td>VEX.128.0F.W0 48 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x48</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6222.htm">t6222</a>
</dd>
</dl><pre>
IikKMERGE2L1H:: PROC
    IiEmitOpcode 0x48
    JMP IikKAND.op:
  ENDP IikKMERGE2L1H::
</pre>

<dl id="IikKMERGE2L1L">
<dt><a href="#IikKAND">&uarr; KMERGE2L1L</a></dt>
<dd>Move Low Element Portion into High Portion of Vector Mask</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KMERGE2L1L k1, k2
</th><td>VEX.128.0F.W0 49 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x49</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6222.htm">t6222</a>
</dd>
</dl><pre>
IikKMERGE2L1L:: PROC
    IiEmitOpcode 0x49
    JMP IikKAND.op:
  ENDP IikKMERGE2L1L::
</pre>

<dl id="IikKORTEST">
<dt><a href="#IikKAND">&uarr; KORTEST</a></dt>
<dd>OR Vector Mask And Set EFLAGS</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KORTEST k1, k2
</th><td>VEX.128.0F.W0 98 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x98</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6222.htm">t6222</a>
</dd>
</dl><pre>
IikKORTEST:: PROC
    IiEmitOpcode 0x98
    JMP IikKAND.op:
  ENDP IikKORTEST::
</pre>

<dl id="IikKCONCATH">
<dt><a href="#IikHandlers">&uarr; KCONCATH</a></dt>
<dd>Pack and Move High Vector Mask</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KCONCATH r64, k1, k2
</th><td>VEX.NDS.128.0F.W0 95 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x95</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6224.htm">t6224</a>
</dd>
</dl><pre>
IikKCONCATH:: PROC
    IiEmitOpcode 0x95
.op:IiRequire MVEX
    IiOpEn RVM
    IiModRM /r
    IiEmitPrefix VEX.NDS.128.0F.W0
    IiDispatchFormat  r64.krg.krg
.r64.krg.krg:
    RET
  ENDP IikKCONCATH::
</pre>

<dl id="IikKCONCATL">
<dt><a href="#IikKCONCATH">&uarr; KCONCATL</a></dt>
<dd>Pack and Move Low Vector Mask</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KCONCATL r64, k1, k2
</th><td>VEX.NDS.128.0F.W0 97 /r 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x97</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6224.htm">t6224</a>
</dd>
</dl><pre>
IikKCONCATL:: PROC
    IiEmitOpcode 0x97
    JMP IikKCONCATH.op:
  ENDP IikKCONCATL::
</pre>

<dl id="IikKEXTRACT">
<dt><a href="#IikHandlers">&uarr; KEXTRACT</a></dt>
<dd>Extract Vector Mask From Register</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KEXTRACT k1, r64, imm8
</th><td>VEX.128.66.0F3A.W0 3E /r ib 
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x3E</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6224.htm">t6224</a>
</dd>
</dl><pre>
IikKEXTRACT:: PROC
    IiEmitOpcode 0x3E
    IiRequire MVEX
    IiOpEn RM
    IiModRM /r
    IiEmitImm Operand3, BYTE, Max=3
    IiEmitPrefix VEX.128.66.0F3A.W0
    IiDispatchFormat  krg.r64.imm
.krg.r64.imm:
    RET
  ENDP IikKEXTRACT::
</pre>

<dl id="IikKMOV">
<dt><a href="#IikHandlers">&uarr; KMOV</a></dt>
<dd>Move Vector Mask</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>KMOV k1, k2 
</th><td>VEX.128.0F.W0 90 /r 
</td></tr>
<tr><th>KMOV r32, k2 
</th><td>VEX.128.0F.W0 93 /r 
</td></tr>
<tr><th>KMOV k1, r32
</th><td>VEX.128.0F.W0 92 /r 
</td></tr>
</table></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6226.htm">t6226</a>
</dd>
</dl><pre>
IikKMOV:: PROC
    IiRequire MVEX
    IiEncoding DATA=WORD
    IiEmitPrefix VEX.128.0F.W0 
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  krg.krg, r32.krg, krg.r32
.krg.krg:
    IiEmitOpcode 0x90
    RET
.r32.krg:
    IiEmitOpcode 0x93
    RET
.krg.r32:
    IiEmitOpcode 0x92
    RET
  ENDP IikKMOV::
</pre>

<dl id="IikJKZD">
<dt><a href="#IikHandlers">&uarr; JKZD</a></dt>
<dd>Jump near if mask is zero</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>JKZD k1, rel32
</th><td>VEX.NDS.128.0F.W0 84 id 
</td></tr>
<tr><th>JKZD k1, rel8</th><td>VEX.NDS.128.W0 74 ib 
</td></tr>
</table></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6230.htm">t6230</a>
</dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="ii.htm#IiRelocSizeRIP">IiRelocSizeRIP</a>
</dd>
</dl><pre>
IikJKZD:: PROC
    MOV CL,0x74 ; Opcode SHORT.
    MOV CH,0x84 ; Opcode NEAR.
.op:IiRequire MVEX
    IiAllowModifier DIST,DATA,IMM,ADDR
    IiOpEn V
    IiDispatchFormat krg.imm
.krg.imm:
     MOV EAX,[EDI+II.Operand2+EXP.Low]
     MOV EDX,[EDI+II.Operand2+EXP.High]
     MOV [EDI+II.ImmLow],EAX
     MOV [EDI+II.ImmHigh],EDX
     MOV EAX,[EDI+II.Operand2+EXP.Sym]
     MOV EDX,[EBX+STM.Section] ; Current section.
     MOV [EDI+II.ImmRelocSym],EAX
     MOV EBP,[EDI+II.Operand2+EXP.Seg] ; Target segment.
     MOV EAX,[EDX+SSS.SegmPtr] ; Segment of the current JKZD instruction.
     MOV [EDI+II.ImmRelocSeg],EBP
     CMP EBP,EAX
     JE .I: ; If EBP=EAX, use intrasegment jump, no RELOC record.
     SetSt [EDI+II.Reloc],iiRelocImmRel ; Otherwise use NEAR jump with relocation.
.N:  IiEmitPrefix VEX.NDS.128.0F.W0 ; Use NEAR jump.
     SHR ECX,8
     IiEmitOpcode ECX
     IiDispatchWidth BITS64=.N64:, BITS32=.N32:
     IiEmitPrefix OTOGGLE ; This may cause #UD in 16bit mode due to 66h prefix conflict with VEX.
     Msg '6743' ; NEAR mask jump cannot be used in 16bit addressing mode.
.N32:IiEncoding DIST=NEAR,ADDR=REL,DATA=DWORD,IMM=DWORD
     RET
.N64:IiEncoding DIST=NEAR,ADDR=REL,DATA=QWORD,IMM=DWORD
     RET
.I: ; Segments match. Jump is relative without RELOC, it could be short.
     SetSt [EDI+II.Reloc],iiRelocImmRIP ; RIP relative relocation will be solved in IiFlush.
     JSt [EDI+II.MfgExplicit], \ ; Explicit modifiers force NEAR jump, regardless of actual distance.
       iiMfgDIST_NEAR|iiMfgIMM_WORD|iiMfgIMM_DWORD|iiMfgDATA_WORD|iiMfgDATA_DWORD|iiMfgDATA_QWORD,.N:
     Invoke IiRelocSizeRIP::,EDI,EBX ; Inspect Imm-RIP magnitude and set iiMfgIMM_Mask to EAX.
     JNSt EAX,iiMfgIMM_BYTE,.N: ; If the distance is not short, use NEAR dword jump.
     IiEmitPrefix VEX.NDS.128.W0 ; Use SHORT jump.
     IiEmitOpcode ECX 
     IiDispatchWidth BITS64=.S64:
     IiEncoding DIST=SHORT,ADDR=REL,IMM=BYTE,DATA=DWORD
     RET
.S64:IiEncoding DIST=SHORT,ADDR=REL,IMM=BYTE,DATA=QWORD
     RET
  ENDP IikJKZD::
</pre>

<dl id="IikJKNZD">
<dt><a href="#IikJKZD">&uarr; JKNZD</a></dt>
<dd>Jump near if mask is not zero</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>JKNZD k1, rel32
</th><td>VEX.NDS.128.0F.W0 85 id 
</td></tr>
<tr><th>JKNZD k1, rel8
</th><td>VEX.NDS.128.W0 75 ib 
</td></tr>
</table></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t6230.htm">t6230</a>
</dd>
</dl><pre>
IikJKNZD:: PROC
    MOV CL,0x75
    MOV CH,0x85
    JMP IikJKZD.op:
  ENDP IikJKNZD::
</pre>
<!--IikEpilogue--><pre>
  ENDPROGRAM iik
</pre><!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
