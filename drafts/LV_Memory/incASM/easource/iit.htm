<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='iit.htm source file'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>iit.htm source file</title>
</head>
<body class='EASOURCE' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>iit.htm
<br/><i>Enumerations</i>
<br/><a href="#IitList">IitList</a>
<br/><i>Instruction groups</i>
<br/><a href="#IitGroupInvalidate">IitGroupInvalidate</a>
<br/><a href="#IitGroupPadlock">IitGroupPadlock</a>
<br/><a href="#IitGroupSHA">IitGroupSHA</a>
<br/><a href="#IitGroupVMX">IitGroupVMX</a>
<br/><a href="#IitGroupXstate">IitGroupXstate</a>
<br/><i>Instruction handlers</i><br/><span class="ILIST">
<a href="#IitCLGI">CLGI</a>
<a href="#IitINVEPT">INVEPT</a>
<a href="#IitINVLPGA">INVLPGA</a>
<a href="#IitINVPCID">INVPCID</a>
<a href="#IitINVVPID">INVVPID</a>
<a href="#IitMONTMUL">MONTMUL</a>
<a href="#IitSHA1MSG1">SHA1MSG1</a>
<a href="#IitSHA1MSG2">SHA1MSG2</a>
<a href="#IitSHA1NEXTE">SHA1NEXTE</a>
<a href="#IitSHA1RNDS4">SHA1RNDS4</a>
<a href="#IitSHA256MSG1">SHA256MSG1</a>
<a href="#IitSHA256MSG2">SHA256MSG2</a>
<a href="#IitSHA256RNDS2">SHA256RNDS2</a>
<a href="#IitSKINIT">SKINIT</a>
<a href="#IitSTGI">STGI</a>
<a href="#IitVMCALL">VMCALL</a>
<a href="#IitVMCLEAR">VMCLEAR</a>
<a href="#IitVMFUNC">VMFUNC</a>
<a href="#IitVMLAUNCH">VMLAUNCH</a>
<a href="#IitVMLOAD">VMLOAD</a>
<a href="#IitVMMCALL">VMMCALL</a>
<a href="#IitVMPTRLD">VMPTRLD</a>
<a href="#IitVMPTRST">VMPTRST</a>
<a href="#IitVMREAD">VMREAD</a>
<a href="#IitVMRESUME">VMRESUME</a>
<a href="#IitVMRUN">VMRUN</a>
<a href="#IitVMSAVE">VMSAVE</a>
<a href="#IitVMWRITE">VMWRITE</a>
<a href="#IitVMXOFF">VMXOFF</a>
<a href="#IitVMXON">VMXON</a>
<a href="#IitXABORT">XABORT</a>
<a href="#IitXBEGIN">XBEGIN</a>
<a href="#IitXCRYPTCBC">XCRYPTCBC</a>
<a href="#IitXCRYPTCFB">XCRYPTCFB</a>
<a href="#IitXCRYPTCTR">XCRYPTCTR</a>
<a href="#IitXCRYPTECB">XCRYPTECB</a>
<a href="#IitXCRYPTOFB">XCRYPTOFB</a>
<a href="#IitXEND">XEND</a>
<a href="#IitXGETBV">XGETBV</a>
<a href="#IitXRSTOR">XRSTOR</a>
<a href="#IitXRSTOR64">XRSTOR64</a>
<a href="#IitXRSTORS">XRSTORS</a>
<a href="#IitXRSTORS64">XRSTORS64</a>
<a href="#IitXSAVE">XSAVE</a>
<a href="#IitXSAVE64">XSAVE64</a>
<a href="#IitXSAVEC">XSAVEC</a>
<a href="#IitXSAVEC64">XSAVEC64</a>
<a href="#IitXSAVEOPT">XSAVEOPT</a>
<a href="#IitXSAVEOPT64">XSAVEOPT64</a>
<a href="#IitXSAVES">XSAVES</a>
<a href="#IitXSAVES64">XSAVES64</a>
<a href="#IitXSETBV">XSETBV</a>
<a href="#IitXSHA1">XSHA1</a>
<a href="#IitXSHA256">XSHA256</a>
<a href="#IitXSTORE">XSTORE</a>
<a href="#IitXTEST">XTEST</a>
</span><!--IitAList-->
</h1>
<dl id="IitHandlers"><dt><a href="#top">&uarr; IitHandlers</a> </dt>
<dd> assemble  <b>TSX, RTM, VMX, SVM</b> extensions of standard instruction set.</dd>
<dt>See also</dt><dd><a class="EXT" href="ii.htm#IiHandlers">IiHandlers</a>,
<a class="EXTL" href="../eadoc/links.htm#RoseCompiler">[RoseCompiler]</a>
</dd></dl><pre>
iit PROGRAM FORMAT=COFF,MODEL=FLAT,WIDTH=32
    INCLUDEHEAD euroasm.htm, \  Interface (structures, symbols and macros) of other modules used in this source.
                ea.htm,eaopt.htm,exp.htm,ii.htm,msg.htm,pgm.htm,pgmopt.htm,sss.htm,stm.htm,sym.htm
</pre><br class="CLEAR"/><pre>
iit HEAD ; Start of module interface.
</pre>

<dl id="IitList"><dt><a href="#top">&uarr; %IitList</a></dt><dd> enumerates machine instructions
<!---->of this family which &euro;ASM can assemble.
<br/>Each instruction declared in <code>%IitList</code> requires the corresponding
<a href="#IitHandlers">handler</a> in this file.</dd>
<dt>See also</dt><dd><a class="EXT" href="dict.htm#DictLookupIi">DictLookupIi</a></dd></dl><pre>
%IitList %SET \
CLGI, \
INVEPT, \
INVLPGA, \
INVPCID, \
INVVPID, \
SKINIT, \
STGI, \
VMCALL, \
VMCLEAR, \
VMFUNC, \
VMLAUNCH, \
VMLOAD, \
VMMCALL, \
VMPTRLD, \
VMPTRST, \
VMREAD, \
VMRESUME, \
VMRUN, \
VMSAVE, \
VMWRITE, \
VMXOFF, \
VMXON, \
XABORT, \
XBEGIN, \
XEND, \
XGETBV, \
XRSTOR, \
XRSTOR64, \
XRSTORS, \
XRSTORS64, \
XSAVE, \
XSAVE64, \
XSAVEC, \
XSAVEC64, \
XSAVEOPT, \
XSAVEOPT64, \
XSAVES, \
XSAVES64, \
XSETBV, \
XTEST, \
MONTMUL, \
XSTORE, \
XCRYPTECB, \
XCRYPTCBC, \
XCRYPTCTR, \
XCRYPTCFB, \
XCRYPTOFB, \
XSHA1, \
XSHA256, \
SHA1NEXTE, \
SHA1MSG1, \
SHA1MSG2, \
SHA256MSG1, \
SHA256MSG2, \
SHA1RNDS4, \
SHA256RNDS2, \
<!--IitList-->
;
</pre><pre>
  ENDHEAD iit ; End of module interface.
</pre>

<dl id="IitXBEGIN">
<dt><a href='#IitHandlers'>&uarr; XBEGIN</a></dt>
<dd>Transactional Begin</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XBEGIN.html">XBEGIN</a></dd>
<dt>Category</dt>
<dd>RTM</dd>
<dt>Operands</dt>
<dd>rel16/rel32</dd>
<dt>Opcode</dt>
<dd>0xC7F8rel</dd>
<dt>See also</dt>
<dd><a class="EXT" href="iis.htm#IisJMPE">IisJMPE</a>.</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4150.htm">t4150</a>
</dd>
</dl><pre>
IitXBEGIN:: PROC
    IiRequire 686,TSX
    IiAllowPrefix TsxAny
    IiAllowModifier DIST,DATA,IMM
    IiEmitOpcode 0xC7,0xF8
    JMP IisJMPE.rel::
 ENDP IitXBEGIN::
</pre>

<dl id="IitXTEST">
<dt><a href='#IitHandlers'>&uarr; XTEST</a></dt>
<dd>Test If In Transactional Execution</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XTEST.html">XTEST</a></dd>
<dt>Category</dt>
<dd>RTM</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0x0F01D6</dd>
<dt>Flags</dt>
<dd>ZF</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4150.htm">t4150</a>
</dd>
</dl><pre>
IitXTEST:: PROC
    IiRequire 686,TSX
    IiAllowPrefix TsxAny
    IiEmitOpcode 0x0F,0x01,0xD6
    IiDispatchFormat none
.none:RET
 ENDP IitXTEST::
</pre>

<dl id="IitXABORT">
<dt><a href='#IitHandlers'>&uarr; XABORT</a></dt>
<dd>Transactional Abort</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XABORT.html">XABORT</a></dd>
<dt>Category</dt>
<dd>RTM</dd>
<dt>Operands</dt>
<dd>imm8</dd>
<dt>Opcode</dt>
<dd>0xC6F8 ib</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4150.htm">t4150</a>
</dd>
</dl><pre>
IitXABORT:: PROC
    IiRequire 686,TSX
    IiAllowPrefix TsxAny
    IiEmitOpcode 0xC6,0xF8
    IiEmitImm Operand1, BYTE
    IiDispatchFormat imm
.imm:RET
 ENDP IitXABORT::
</pre>

<dl id="IitXEND">
<dt><a href='#IitHandlers'>&uarr; XEND</a></dt>
<dd>Transactional End</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XEND.html">XEND</a></dd>
<dt>Category</dt>
<dd>RTM</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0F 01 D5</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4150.htm">t4150</a>
</dd>
</dl><pre>
IitXEND:: PROC
    IiRequire 686,TSX
    IiAllowPrefix TsxAny
    IiEmitOpcode 0x0F,0x01,0xD5
    IiDispatchFormat none
.none:RET
 ENDP IitXEND::
</pre>

<dl id="IitXGETBV">
<dt><a href='#IitHandlers'>&uarr; XGETBV</a></dt>
<dd>Get Value of Extended Control Register specified by ECX into EDX:EAX.</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XGETBV.html">XGETBV</a></dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 2, group: gen, type: d, address: -">EDX</span></i></b>,<b><i><span title="nr: 0, group: gen, type: d, address: -">EAX</span></i></b>,<i><span title="nr: 1, group: gen, type: d, address: -">ECX</span></i>,<i><span title="nr: -, group: xcr, type: -, address: -">XCR</span></i></dd>
<dt>Opcode</dt>
<dd>0x0F01D0</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4155.htm">t4155</a>
</dd>
</dl><pre>
IitXGETBV:: PROC
    IiRequire 386
    IiEmitOpcode 0x0F,0x01,0xD0
    IiDispatchFormat none
.none:RET
 ENDP IitXGETBV::
</pre>

<dl id="IitXSETBV">
<dt><a href='#IitHandlers'>&uarr; XSETBV</a></dt>
<dd>Set Extended Control Register specified by ECX from EDX:EAX.</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XSETBV.html">XSETBV</a></dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: -, group: xcr, type: -, address: -">XCR</span></i></b>,<i><span title="nr: 1, group: gen, type: d, address: -">ECX</span></i>,<i><span title="nr: 2, group: gen, type: d, address: -">EDX</span></i>,<i><span title="nr: 0, group: gen, type: d, address: -">EAX</span></i></dd>
<dt>Opcode</dt>
<dd>0x0F01D1</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4155.htm">t4155</a>
</dd>
</dl><pre>
IitXSETBV:: PROC
    IiRequire 386,PRIV
    IiEmitOpcode 0x0F,0x01,0xD1
    IiDispatchFormat none
.none:RET
 ENDP IitXSETBV::
</pre>

<dl id="IitGroupXstate">
<dt><a href="#IitHandlers">&uarr; <em>IitGroupXstate</em></a></dt>
<dd>IitGroupXstate is a common handler for Processor Extended States save/restore instructions.</dd>
<dt>Input</dt>
<dd><b>ECX</b> has <code>iiXs64</code> flag set if 64bit version of instruction is required.
<br/><b>CL</b> is the opcode second byte 0xAE or 0xC7.
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.
<br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>.</dd>
<dt>See also</dt>
<dd><a href="#IitXSAVE">XSAVE</a>,     
<a href="#IitXSAVE64">XSAVE64</a>,
<a href="#IitXRSTOR">XRSTOR</a>,    
<a href="#IitXRSTOR64">XRSTOR64</a>,
<a href="#IitXSAVEOPT">XSAVEOPT</a>,
<a href="#IitXSAVEOPT64">XSAVEOPT64</a>,
<a href="#IitXRSTORS">XRSTORS</a>,
<a href="#IitXRSTORS64">XRSTORS64</a>,   
<a href="#IitXSAVEC">XSAVEC</a>,
<a href="#IitXSAVEC64">XSAVEC64</a>,        
<a href="#IitXSAVES">XSAVES</a>,
<a href="#IitXSAVES64">XSAVES64</a>.</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4155.htm">t4155</a>
<a class="EXT" href="../eatests/t4160.htm">t4160</a>
</dd>
</dl><pre>
IitGroupXstate:: PROC
    IiRequire 686,SPEC
    IiEmitOpcode 0x0F,ECX
    IiOpEn M
    IiDispatchFormat mem
.64:IiRequire X64     ; Entry for 64bit Xstate instructions.    
    IiEmitPrefix REX.W
    JMP IitGroupXstate:
.mem:RET
 ENDP IitGroupXstate::
</pre>

<dl id="IitXSAVE">
<dt><a href='#IitGroupXstate'>&uarr; XSAVE</a></dt>
<dd>Save Processor Extended States</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XSAVE.html">XSAVE</a></dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd>mem</dd>
<dt>Opcode</dt>
<dd>0x0FAE /4</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4155.htm">t4155</a>
</dd>
</dl><pre>
IitXSAVE:: PROC
    IiModRM /4
    MOV CL,0xAE
    JMP IitGroupXstate:
 ENDP IitXSAVE::
</pre>

<dl id="IitXRSTOR">
<dt><a href='#IitGroupXstate'>&uarr; XRSTOR</a></dt>
<dd>Restore Processor Extended States</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XRSTOR.html">XRSTOR</a></dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd>mem</dd>
<dt>Opcode</dt>
<dd>0x0FAE /5</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4155.htm">t4155</a>
</dd>
</dl><pre>
IitXRSTOR:: PROC
    IiModRM /5
    MOV CL,0xAE
    JMP IitGroupXstate:
 ENDP IitXRSTOR::
</pre>

<dl id="IitXSAVEOPT">
<dt><a href='#IitGroupXstate'>&uarr; XSAVEOPT</a></dt>
<dd>Save Processor Extended States Optimized</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XSAVEOPT.html">XSAVEOPT</a></dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd>mem</dd>
<dt>Opcode</dt>
<dd>0x0FAE /6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4155.htm">t4155</a>
</dd>
</dl><pre>
IitXSAVEOPT:: PROC
    IiModRM /6
    MOV CL,0xAE
    JMP IitGroupXstate:
 ENDP IitXSAVEOPT::
</pre>

<dl id="IitXRSTORS">
<dt><a href='#IitGroupXstate'>&uarr; XRSTORS</a></dt>
<dd>Restore Processor Extended States Supervisor</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XRSTORS.html">XRSTORS</a></dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd>mem</dd>
<dt>Opcode</dt>
<dd>0x0FC7 /3</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4155.htm">t4155</a>
</dd>
</dl><pre>
IitXRSTORS:: PROC
    IiRequire PRIV
    IiModRM /3
    MOV CL,0xC7
    JMP IitGroupXstate:
 ENDP IitXRSTORS::
</pre>

<dl id="IitXSAVEC">
<dt><a href='#IitGroupXstate'>&uarr; XSAVEC</a></dt>
<dd>Save Processor Extended States with Compaction</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XSAVEC.html">XSAVEC</a></dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd>mem</dd>
<dt>Opcode</dt>
<dd>0x0FC7 /4</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4155.htm">t4155</a>
</dd>
</dl><pre>
IitXSAVEC:: PROC
    IiModRM /4
    MOV CL,0xC7
    JMP IitGroupXstate:
 ENDP IitXSAVEC::
</pre>

<dl id="IitXSAVES">
<dt><a href='#IitGroupXstate'>&uarr; XSAVES</a></dt>
<dd>Save Processor Extended States Supervisor</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/XSAVES.html">XSAVES</a></dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd>mem</dd>
<dt>Opcode</dt>
<dd>0x0FC7 /5</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4155.htm">t4155</a>
</dd>
</dl><pre>
IitXSAVES:: PROC
    IiRequire PRIV
    IiModRM /5
    MOV CL,0xC7
    JMP IitGroupXstate:
 ENDP IitXSAVES::
</pre>

<dl id="IitXSAVE64">
<dt><a href='#IitGroupXstate'>&uarr; XSAVE64</a></dt>
<dd>Save Processor Extended64 States</dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd>mem</dd>
<dt>Opcode</dt>
<dd>0x480FAE /4</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4160.htm">t4160</a>
</dd>
</dl><pre>
IitXSAVE64:: PROC
    IiModRM /4
    MOV CL,0xAE
    JMP IitGroupXstate.64:
 ENDP IitXSAVE64::
</pre>

<dl id="IitXRSTOR64">
<dt><a href='#IitGroupXstate'>&uarr; XRSTOR64</a></dt>
<dd>Restore Processor Extended64 States</dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd>mem</dd>
<dt>Opcode</dt>
<dd>0x480FAE /5</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4160.htm">t4160</a>
</dd>
</dl><pre>
IitXRSTOR64:: PROC
    IiModRM /5
    MOV CL,0xAE
    JMP IitGroupXstate.64:
 ENDP IitXRSTOR64::
</pre>

<dl id="IitXSAVEOPT64">
<dt><a href='#IitGroupXstate'>&uarr; XSAVEOPT64</a></dt>
<dd>Save Processor Extended64 States Optimized</dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd>mem</dd>
<dt>Opcode</dt>
<dd>0x480FAE /6</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4160.htm">t4160</a>
</dd>
</dl><pre>
IitXSAVEOPT64:: PROC
    IiModRM /6
    MOV CL,0xAE
    JMP IitGroupXstate.64:
 ENDP IitXSAVEOPT64::
</pre>

<dl id="IitXRSTORS64">
<dt><a href='#IitGroupXstate'>&uarr; XRSTORS64</a></dt>
<dd>Restore Processor Extended64 States Supervisor</dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd>mem</dd>
<dt>Opcode</dt>
<dd>0x480FC7 /3</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4160.htm">t4160</a>
</dd>
</dl><pre>
IitXRSTORS64:: PROC
    IiRequire PRIV
    IiModRM /3
    MOV CL,0xC7
    JMP IitGroupXstate.64:
 ENDP IitXRSTORS64::
</pre>

<dl id="IitXSAVEC64">
<dt><a href='#IitGroupXstate'>&uarr; XSAVEC64</a></dt>
<dd>Save Processor Extended64 States with Compaction</dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd>mem</dd>
<dt>Opcode</dt>
<dd>0x480FC7 /4</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4160.htm">t4160</a>
</dd>
</dl><pre>
IitXSAVEC64:: PROC
    IiModRM /4
    MOV CL,0xC7
    JMP IitGroupXstate.64:
 ENDP IitXSAVEC64::
</pre>

<dl id="IitXSAVES64">
<dt><a href='#IitGroupXstate'>&uarr; XSAVES64</a></dt>
<dd>Save Processor Extended64 States Supervisor</dd>
<dt>Category</dt>
<dd>system</dd>
<dt>Operands</dt>
<dd>mem</dd>
<dt>Opcode</dt>
<dd>0x480FC7 /5</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4160.htm">t4160</a>
</dd>
</dl><pre>
IitXSAVES64:: PROC
    IiRequire PRIV
    IiModRM /5
    MOV CL,0xC7
    JMP IitGroupXstate.64:
 ENDP IitXSAVES64::
</pre>

<dl id="IitGroupVMX">
<dt><a href="#IitHandlers">&uarr; <em>IitGroupVMX</em></a></dt>
<dd>IitGroupVMX is a common handler for operandless VMX (Virtual Machine Extensions) instructions.</dd>
<dt>Input</dt>
<dd><b>CL</b> is the opcode third byte.
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.
<br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>.</dd>
<dt>See also</dt>
<dd><a href="#IitVMCALL">VMCALL</a>
<a href="#IitVMLAUNCH">VMLAUNCH</a>
<a href="#IitVMRESUME">VMRESUME</a>
<a href="#IitVMXOFF">VMXOFF</a>
<a href="#IitVMFUNC">VMFUNC</a>
<a href="#IitVMRUN">VMRUN</a>
<a href="#IitVMMCALL">VMMCALL</a>
<a href="#IitVMLOAD">VMLOAD</a>
<a href="#IitVMSAVE">VMSAVE</a>
<a href="#IitSTGI">STGI</a>
<a href="#IitCLGI">CLGI</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4170.htm">t4170</a>
<a class="EXT" href="../eatests/t4180.htm">t4180</a>
</dd>
</dl><pre>
IitGroupVMX:: PROC
      IiEmitOpcode 0x0F,0x01,ECX
      IiDispatchFormat none
.none:RET
 ENDP IitGroupVMX::
</pre>

<dl id="IitVMCALL">
<dt><a href='#IitGroupVMX'>&uarr; VMCALL</a></dt>
<dd>Call to VM Monitor</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Opcode</dt>
<dd>0x0F01C1</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_VMX_vs_SVM"><sup>42</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4170.htm">t4170</a>
</dd>
</dl><pre>
IitVMCALL:: PROC
    IiRequire 686,VMX
    MOV CL,0xC1
    JMP IitGroupVMX:
 ENDP IitVMCALL::
</pre>

<dl id="IitVMLAUNCH">
<dt><a href='#IitGroupVMX'>&uarr; VMLAUNCH</a></dt>
<dd>Launch Virtual Machine</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Opcode</dt>
<dd>0x0F01C2</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_VMX_vs_SVM"><sup>42</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4170.htm">t4170</a>
</dd>
</dl><pre>
IitVMLAUNCH:: PROC
    IiRequire 686,VMX,PROT
    MOV CL,0xC2
    JMP IitGroupVMX:
 ENDP IitVMLAUNCH::
</pre>

<dl id="IitVMRESUME">
<dt><a href='#IitGroupVMX'>&uarr; VMRESUME</a></dt>
<dd>Resume Virtual Machine</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Opcode</dt>
<dd>0x0F01C3</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_VMX_vs_SVM"><sup>42</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4170.htm">t4170</a>
</dd>
</dl><pre>
IitVMRESUME:: PROC
    IiRequire 686,VMX,PROT
    MOV CL,0xC3
    JMP IitGroupVMX:
 ENDP IitVMRESUME::
</pre>

<dl id="IitVMXOFF">
<dt><a href='#IitGroupVMX'>&uarr; VMXOFF</a></dt>
<dd>Leave VMX Operation</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Opcode</dt>
<dd>0x0F01C4</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_VMX_vs_SVM"><sup>42</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4170.htm">t4170</a>
</dd>
</dl><pre>
IitVMXOFF:: PROC
    IiRequire 686,VMX,PROT
    MOV CL,0xC4
    JMP IitGroupVMX:
 ENDP IitVMXOFF::
</pre>

<dl id="IitVMFUNC">
<dt><a href='#IitGroupVMX'>&uarr; VMFUNC</a></dt>
<dd>Invoke VM function</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0x0F01D4</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4170.htm">t4170</a>
</dd>
</dl><pre>
IitVMFUNC:: PROC
    IiRequire 686,VMX
    MOV CL,0xD4
    JMP IitGroupVMX:
 ENDP IitVMFUNC::
</pre>

<dl id="IitVMRUN">
<dt><a href='#IitGroupVMX'>&uarr; VMRUN</a></dt>
<dd>Run Virtual Machine</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0x0F01D8</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4170.htm">t4170</a>
</dd>
</dl><pre>
IitVMRUN:: PROC
    IiRequire 686,VMX,AMD,PRIV
    MOV CL,0xD8
    JMP IitGroupVMX:
 ENDP IitVMRUN::
</pre>

<dl id="IitVMMCALL">
<dt><a href='#IitGroupVMX'>&uarr; VMMCALL</a></dt>
<dd>Call VMM</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0x0F01D9</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4170.htm">t4170</a>
</dd>
</dl><pre>
IitVMMCALL:: PROC
    IiRequire 686,VMX,AMD
    MOV CL,0xD9
    JMP IitGroupVMX:
 ENDP IitVMMCALL::
</pre>

<dl id="IitVMLOAD">
<dt><a href='#IitGroupVMX'>&uarr; VMLOAD</a></dt>
<dd>Load State from VMCB</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0x0F01DA</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4170.htm">t4170</a>
</dd>
</dl><pre>
IitVMLOAD:: PROC
    IiRequire 686,VMX,AMD
    MOV CL,0xDA
    JMP IitGroupVMX:
 ENDP IitVMLOAD::
</pre>

<dl id="IitVMSAVE">
<dt><a href='#IitGroupVMX'>&uarr; VMSAVE</a></dt>
<dd>Save State to VMCB</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0x0F01DB</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4170.htm">t4170</a>
</dd>
</dl><pre>
IitVMSAVE:: PROC
    IiRequire 686,VMX,AMD
    MOV CL,0xDB
    JMP IitGroupVMX:
 ENDP IitVMSAVE::
</pre>

<dl id="IitCLGI">
<dt><a href='#IitHandlers'>&uarr; CLGI</a></dt>
<dd>Clear Global Interrupt Flag</dd>
<dt>Category</dt>
<dd>system, AMD, SVM</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0x0F01DD</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4170.htm">t4170</a>
</dd>
</dl><pre>
IitCLGI:: PROC
    IiRequire 686,VMX,AMD,PRIV
    MOV CL,0xDD
    JMP IitGroupVMX:
 ENDP IitCLGI::
</pre>

<dl id="IitSTGI">
<dt><a href='#IitGroupVMX'>&uarr; STGI</a></dt>
<dd>Set Global Interrupt Flag</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>CPU</dt>
<dd>0x0F01DC</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4170.htm">t4170</a>
</dd>
</dl><pre>
IitSTGI:: PROC
    IiRequire 686,VMX,AMD,PRIV
    MOV CL,0xDC
    JMP IitGroupVMX:
 ENDP IitSTGI::
</pre>

<dl id="IitVMPTRLD">
<dt><a href='#IitHandlers'>&uarr; VMPTRLD</a></dt>
<dd>Load Pointer to Virtual-Machine Control Structure</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd>Mq</dd>
<dt>Opcode</dt>
<dd>0x0FC7 /6</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_VMX_vs_SVM"><sup>42</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4180.htm">t4180</a>
</dd>
</dl><pre>
IitVMPTRLD:: PROC
     IiRequire 686,VMX,PRIV,PROT
     IiEmitOpcode 0x0F,0xC7
     IiOpEn M
     IiModRM /6
     IiDispatchFormat mem
.mem:RET
 ENDP IitVMPTRLD::
</pre>

<dl id="IitVMPTRST">
<dt><a href='#IitHandlers'>&uarr; VMPTRST</a></dt>
<dd>Store Pointer to Virtual-Machine Control Structure</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd><b>Mq</b></dd>
<dt>Opcode</dt>
<dd>0x0FC7 /7</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_VMX_vs_SVM"><sup>42</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4180.htm">t4180</a>
</dd>
</dl><pre>
IitVMPTRST:: PROC
     IiRequire 686,VMX,PRIV,PROT
     IiEmitOpcode 0x0F,0xC7
     IiOpEn M
     IiModRM /7
     IiDispatchFormat mem
.mem:RET 
    ENDP IitVMPTRST::
</pre>

<dl id="IitVMCLEAR">
<dt><a href='#IitHandlers'>&uarr; VMCLEAR</a></dt>
<dd>Clear Virtual-Machine Control Structure</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd><b>Mq</b></dd>
<dt>Opcode</dt>
<dd>0x660FC7 /6</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_VMX_vs_SVM"><sup>42</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4180.htm">t4180</a>
</dd>
</dl><pre>
IitVMCLEAR:: PROC
 IiRequire 686,VMX,PRIV,PROT
     IiEmitPrefix OTOGGLE
     IiEmitOpcode 0x0F,0xC7
     IiOpEn M
     IiModRM /6
     IiDispatchFormat mem
.mem:RET 
    ENDP IitVMCLEAR::
</pre>

<dl id="IitVMXON">
<dt><a href='#IitHandlers'>&uarr; VMXON</a></dt>
<dd>Enter VMX Operation</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd>Mq</dd>
<dt>Opcode</dt>
<dd>0xF30FC7 /6</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_VMX_vs_SVM"><sup>42</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4180.htm">t4180</a>
</dd>
</dl><pre>
IitVMXON:: PROC
 IiRequire 686,VMX,PROT
     IiEmitPrefix REPE
     IiEmitOpcode 0x0F,0xC7
     IiOpEn M
     IiModRM /6
     IiDispatchFormat mem
.mem:RET 
    ENDP IitVMXON::
</pre>

<dl id="IitVMREAD">
<dt><a href='#IitHandlers'>&uarr; VMREAD</a></dt>
<dd>Read Field from Virtual-Machine Control Structure</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd><b>Ed</b>,Gd | <b>Eq</b>,Gq</dd>
<dt>Opcode</dt>
<dd>0x0F78 /r | 0x0F78 /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_VMX_vs_SVM"><sup>42</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4180.htm">t4180</a>
</dd>
</dl><pre>
IitVMREAD:: PROC
    IiRequire 686,VMX,PRIV,PROT
    IiEmitOpcode 0x0F,0x78
    IiOpEn MR
    IiModRM /r
    IiDispatchFormat r32.r32,mem.r32,r64.r64,mem.r64
.r32.r32:
.mem.r32:IiEncoding DATA=DWORD
     RET
.r64.r64:
.mem.r64:IiEncoding DATA=QWORD
    RET
 ENDP IitVMREAD::
</pre>

<dl id="IitVMWRITE">
<dt><a href='#IitHandlers'>&uarr; VMWRITE</a></dt>
<dd>Write Field to Virtual-Machine Control Structure</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd>Gd,Ed | Gq,Eq</dd>
<dt>Opcode</dt>
<dd>0x0F79 /r | 0x0F79 /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>P4++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_VMX_vs_SVM"><sup>42</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4180.htm">t4180</a>
</dd>
</dl><pre>
IitVMWRITE:: PROC
    IiRequire 686,VMX,PRIV,PROT
    IiEmitOpcode 0x0F,0x79
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat r32.r32,r32.mem,r64.r64,r64.mem
.r32.r32:
.r32.mem:IiEncoding DATA=DWORD
    RET
.r64.r64:
.r64.mem:IiEncoding DATA=QWORD
    RET
 ENDP IitVMWRITE::
</pre>

<dl id="IitGroupInvalidate">
<dt><a href="#IitHandlers">&uarr; <em>IitGroupInvalidate</em></a></dt>
<dd>IitGroupInvalidate is a common handler of invalidating CPU structures instructions
<!---->with format <b>reg,mem</b> and opcode 0x660F38xx.</dd>
<dt>Input</dt>
<dd><b>CL</b> is the opcode last byte.
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.
<br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>.</dd>
<dt>See also</dt>
<dd><a href="#IitINVEPT">INVEPT</a>
<a href="#IitINVVPID">INVVPID</a>
<a href="#IitINVPCID">INVPCID</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4190.htm">t4190</a>
</dd>
</dl><pre>
IitGroupInvalidate:: PROC
    IiEmitPrefix OTOGGLE
    IiEmitOpcode 0x0F,0x38,ECX
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat r32.mem, r64.mem
.r64.mem:
    IiAbortIfNot64
    RET    
.r32.mem:
    IiAbortIf64
    RET
 ENDP IitGroupInvalidate::
</pre>

<dl id="IitINVEPT">
<dt><a href='#IitGroupInvalidate'>&uarr; INVEPT</a></dt>
<dd>Invalidate Translations Derived from EPT</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd>Gd,Mdq | Gq,Mdq</dd>
<dt>Opcode</dt>
<dd>0x660F3880 /r | 0x660F3880 /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_VMX_vs_SVM"><sup>42</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4190.htm">t4190</a>
</dd>
</dl><pre>
IitINVEPT:: PROC
    MOV CL,0x80
    IiRequire VMX,PRIV
    JMP IitGroupInvalidate
 ENDP IitINVEPT::
</pre>

<dl id="IitINVVPID">
<dt><a href='#IitGroupInvalidate'>&uarr; INVVPID</a></dt>
<dd>Invalidate Translations Based on VPID</dd>
<dt>Category</dt>
<dd>vmx</dd>
<dt>Operands</dt>
<dd>Gd,Mdq | Gq,Mdq</dd>
<dt>Opcode</dt>
<dd>0x660F3881 /r | 0x660F3881 /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b></dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_VMX_vs_SVM"><sup>42</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4190.htm">t4190</a>
</dd>
</dl><pre>
IitINVVPID:: PROC
    MOV CL,0x81
    IiRequire VMX,PRIV
    JMP IitGroupInvalidate
 ENDP IitINVVPID::
</pre>

<dl id="IitINVPCID">
<dt><a href='#IitGroupInvalidate'>&uarr; INVPCID</a></dt>
<dd>Invalidate Process-Context Identifier</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/INVPCID.html">INVPCID</a></dd>
<dt>Category</dt>
<dd>Context</dd>
<dt>Operands</dt>
<dd>reg, mem</dd>
<dt>Opcode</dt>
<dd>0x660F3882 /r</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3403.htm">t3403</a>
<a class="EXT" href="../eatests/t4190.htm">t4190</a>
</dd>
</dl><pre>
IitINVPCID:: PROC
    MOV CL,0x82
    IiRequire PRIV,SPEC
    JMP IitGroupInvalidate
 ENDP IitINVPCID::
</pre>

<dl id="IitINVLPGA">
<dt><a href='#IitHandlers'>&uarr; INVLPGA</a></dt>
<dd>Invalidate TLB Entry in a Specified ASID</dd>
<dt>Operands</dt>
<dd>rAX,ECX or none</dd>
<dt>Opcode</dt>
<dd>0x0F01DF</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4190.htm">t4190</a>
</dd>
</dl><pre>
IitINVLPGA:: PROC
    IiRequire 686,VMX,AMD,PRIV
    IiEmitOpcode 0x0F,0x01,0xDF
    IiDispatchFormat none,r16.r32,r32.r32,r64.r32
.67:IiEmitPrefix ATOGGLE
.none:RET    
.r64.r32:
    IiAbortIfNot64
    IiAbortIfNot Operand1, RAX
    IiAbortIfNot Operand2, ECX
    RET
.r32.r32:    
    IiAbortIf64
    IiAbortIfNot Operand1, EAX
    IiAbortIfNot Operand2, ECX
    IiDispatchWidth BITS16=.67: 
    RET
.r16.r32:
    IiAbortIf64
    IiAbortIfNot Operand1, AX
    IiAbortIfNot Operand2, ECX
    IiDispatchWidth BITS32=.67:
    RET
 ENDP IitINVLPGA::
</pre>

<dl id="IitSKINIT">
<dt><a href='#IitHandlers'>&uarr; SKINIT</a></dt>
<dd>Secure Init and Jump with Attestation</dd>
<dt>Category</dt>
<dd>VMX</dd>
<dt>Operands</dt>
<dd>- or EAX</dd>
<dt>Opcode</dt>
<dd>0x0F01DE</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4180.htm">t4180</a>
</dd>
</dl><pre>
IitSKINIT:: PROC
    IiRequire 686,VMX,AMD,PRIV,PROT
    IiEncoding DATA=DWORD
    IiEmitOpcode 0x0F,0x01,0xDE
    IiDispatchFormat none,r32
.r32:IiAbortIfNot Operand1,EAX
.none:RET
   ENDP IitSKINIT::
</pre>

<dl id="IitGroupPadlock">
<dt><a href="#IitHandlers">&uarr; <em>IitGroupPadlock</em></a></dt>
<dd>IitGroupPadlock is a common handler of operandless cryptographic instructions 
<!---->of VIA Nano CPU as specified in
<a class="EXTW" href="http://hackipedia.org/Hardware/CPU/x86/chip,%20VIA/Nano/Padlock%2c%20quick%20reference%20v0.95%20%28July%2025th%2c%202008%29.pdf">Padlock
</a> document.</dd>
<dt>Input</dt>
<dd><b>AL</b> is the opcode 2nd byte.
<br/><b>CL</b> is the opcode 3rd (last) byte.
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.
<br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>.</dd>
<dt>See also</dt>
<dd><a href="#IitMONTMUL">MONTMUL</a>
<a href="#IitXCRYPTCBC">XCRYPTCBC</a>
<a href="#IitXCRYPTCFB">XCRYPTCFB</a>
<a href="#IitXCRYPTCTR">XCRYPTCTR</a>
<a href="#IitXCRYPTECB">XCRYPTECB</a>
<a href="#IitXCRYPTOFB">XCRYPTOFB</a>
<a href="#IitXSHA1">XSHA1</a>
<a href="#IitXSHA256">XSHA256</a>
<a href="#IitXSTORE">XSTORE</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4110.htm">t4110</a>
</dd>
</dl><pre>
IitGroupPadlock:: PROC
    IiRequire 686,CYRIX,SPEC
    IiAllowPrefix REP,ATOGGLE,SEGES
    IiEmitOpcode 0x0F,EAX,ECX
    MOV CH,AL
    CMP CX,0xA7C0 ; XSTORE does not need prefix F3.
    JE .N:
    IiEmitPrefix REP
 .N:IiDispatchFormat none
.none:RET
 ENDP IitGroupPadlock::
</pre>

<dl id="IitMONTMUL">
<dt><a href='#IitGroupPadlock'>&uarr; MONTMUL</a></dt>
<dd>Montgomery Multiplier</dd>
<dt>Category</dt>
<dd>crypto</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0xF30FA6C0</dd>
<dt>Documented</dt>
<dd><a class="EXTW" href="http://hackipedia.org/Hardware/CPU/x86/chip,%20VIA/Nano/Padlock%2c%20quick%20reference%20v0.95%20%28July%2025th%2c%202008%29.pdf">Padlock</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4110.htm">t4110</a>
</dd>
</dl><pre>
IitMONTMUL:: PROC
    MOV AL,0xA6
    MOV CL,0xC0
    JMP IitGroupPadlock:
 ENDP IitMONTMUL::
</pre>

<dl id="IitXSTORE">
<dt><a href='#IitGroupPadlock'>&uarr; XSTORE</a></dt>
<dd>Store random bytes</dd>
<dt>Category</dt>
<dd>crypto</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0xF30FA7C0</dd>
<dt>Documented</dt>
<dd><a class="EXTW" href="http://hackipedia.org/Hardware/CPU/x86/chip,%20VIA/Nano/Padlock%2c%20quick%20reference%20v0.95%20%28July%2025th%2c%202008%29.pdf">Padlock</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4110.htm">t4110</a>
</dd>
</dl><pre>
IitXSTORE:: PROC
    MOV AL,0xA7
    MOV CL,0xC0
    JMP IitGroupPadlock:
 ENDP IitXSTORE::
</pre>

<dl id="IitXCRYPTECB">
<dt><a href='#IitGroupPadlock'>&uarr; XCRYPTECB</a></dt>
<dd>Encrypt/decrypt using electronic code book</dd>
<dt>Category</dt>
<dd>crypto</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0xF30FA7C8</dd>
<dt>Documented</dt>
<dd><a class="EXTW" href="http://hackipedia.org/Hardware/CPU/x86/chip,%20VIA/Nano/Padlock%2c%20quick%20reference%20v0.95%20%28July%2025th%2c%202008%29.pdf">Padlock</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4110.htm">t4110</a>
</dd>
</dl><pre>
IitXCRYPTECB:: PROC
    MOV AL,0xA7
    MOV CL,0xC8
    JMP IitGroupPadlock:
 ENDP IitXCRYPTECB::
</pre>

<dl id="IitXCRYPTCBC">
<dt><a href='#IitGroupPadlock'>&uarr; XCRYPTCBC</a></dt>
<dd>Encrypt/decrypt using cipher block chaining</dd>
<dt>Category</dt>
<dd>crypto</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0xF30FA7D0</dd>
<dt>Documented</dt>
<dd><a class="EXTW" href="http://hackipedia.org/Hardware/CPU/x86/chip,%20VIA/Nano/Padlock%2c%20quick%20reference%20v0.95%20%28July%2025th%2c%202008%29.pdf">Padlock</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4110.htm">t4110</a>
</dd>
</dl><pre>
IitXCRYPTCBC:: PROC
    MOV AL,0xA7
    MOV CL,0xD0
    JMP IitGroupPadlock:
 ENDP IitXCRYPTCBC::
</pre>

<dl id="IitXCRYPTCTR">
<dt><a href='#IitGroupPadlock'>&uarr; XCRYPTCTR</a></dt>
<dd>Encrypt/decrypt using counter mode</dd>
<dt>Category</dt>
<dd>crypto</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0xF30FA7D8</dd>
<dt>Documented</dt>
<dd><a class="EXTW" href="http://hackipedia.org/Hardware/CPU/x86/chip,%20VIA/Nano/Padlock%2c%20quick%20reference%20v0.95%20%28July%2025th%2c%202008%29.pdf">Padlock</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4110.htm">t4110</a>
</dd>
</dl><pre>
IitXCRYPTCTR:: PROC
    MOV AL,0xA7
    MOV CL,0xD8
    JMP IitGroupPadlock:
 ENDP IitXCRYPTCTR::
</pre>

<dl id="IitXCRYPTCFB">
<dt><a href='#IitGroupPadlock'>&uarr; XCRYPTCFB</a></dt>
<dd>Encrypt/decrypt using cipher feedback</dd>
<dt>Category</dt>
<dd>crypto</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0xF30FA7E0</dd>
<dt>Documented</dt>
<dd><a class="EXTW" href="http://hackipedia.org/Hardware/CPU/x86/chip,%20VIA/Nano/Padlock%2c%20quick%20reference%20v0.95%20%28July%2025th%2c%202008%29.pdf">Padlock</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4110.htm">t4110</a>
</dd>
</dl><pre>
IitXCRYPTCFB:: PROC
    MOV AL,0xA7
    MOV CL,0xE0
    JMP IitGroupPadlock:
 ENDP IitXCRYPTCFB::
</pre>

<dl id="IitXCRYPTOFB">
<dt><a href='#IitGroupPadlock'>&uarr; XCRYPTOFB</a></dt>
<dd>Encrypt/decrypt using output feedback</dd>
<dt>Category</dt>
<dd>crypto</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0xF30FA7E8</dd>
<dt>Documented</dt>
<dd><a class="EXTW" href="http://hackipedia.org/Hardware/CPU/x86/chip,%20VIA/Nano/Padlock%2c%20quick%20reference%20v0.95%20%28July%2025th%2c%202008%29.pdf">Padlock</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4110.htm">t4110</a>
</dd>
</dl><pre>
IitXCRYPTOFB:: PROC
    MOV AL,0xA7
    MOV CL,0xE8
    JMP IitGroupPadlock:
 ENDP IitXCRYPTOFB::
</pre>

<dl id="IitXSHA1">
<dt><a href='#IitGroupPadlock'>&uarr; XSHA1</a></dt>
<dd>Calculate SHA1 as speciﬁed by FIPS 180-2</dd>
<dt>Category</dt>
<dd>crypto</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0xF30FA6C8</dd>
<dt>Documented</dt>
<dd><a class="EXTW" href="http://hackipedia.org/Hardware/CPU/x86/chip,%20VIA/Nano/Padlock%2c%20quick%20reference%20v0.95%20%28July%2025th%2c%202008%29.pdf">Padlock</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4110.htm">t4110</a>
</dd>
</dl><pre>
IitXSHA1:: PROC
    MOV AL,0xA6
    MOV CL,0xC8
    JMP IitGroupPadlock:
 ENDP IitXSHA1::
</pre>

<dl id="IitXSHA256">
<dt><a href='#IitGroupPadlock'>&uarr; XSHA256</a></dt>
<dd>Calculate SHA256 as speciﬁed by FIPS 180-2</dd>
<dt>Category</dt>
<dd>crypto</dd>
<dt>Operands</dt>
<dd>-</dd>
<dt>Opcode</dt>
<dd>0xF30FA6D0</dd>
<dt>Documented</dt>
<dd><a class="EXTW" href="http://hackipedia.org/Hardware/CPU/x86/chip,%20VIA/Nano/Padlock%2c%20quick%20reference%20v0.95%20%28July%2025th%2c%202008%29.pdf">Padlock</a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4110.htm">t4110</a>
</dd>
</dl><pre>
IitXSHA256:: PROC
    MOV AL,0xA6
    MOV CL,0xD0
    JMP IitGroupPadlock:
 ENDP IitXSHA256::
</pre>

<dl id="IitGroupSHA">
<dt><a href="#IitHandlers">&uarr; <em>IitGroupSHA</em></a></dt>
<dd>IitGroupSHA is a common handler of cryptographic instructions with format <b>xmm, xmm/m128</b>.</dd>
<dt>Input</dt>
<dd><b>CL</b> is the opcode 3rd (last) byte.
<br/><b>EDI</b> is pointer to <a class='EXT' href='ii.htm#II'>II</a> structure with parsed operands.
<br/><b>EDX</b> has operand types as set by <a class='EXT' href='ii.htm#IiAssemble'>IiAssemble</a>.</dd>
<dt>See also</dt>
<dd><a href="#IitSHA1NEXTE">SHA1NEXTE</a>
<a href="#IitSHA1MSG1">SHA1MSG1</a>
<a href="#IitSHA1MSG2">SHA1MSG2</a>
<a href="#IitSHA256MSG1">SHA256MSG1</a>
<a href="#IitSHA256MSG2">SHA256MSG2</a></dd>
</dl><pre>
IitGroupSHA:: PROC
    IiRequire 686,SSE2,SHA
    IiEncoding DATA=OWORD
    IiEmitOpcode 0x0F,0x38,ECX
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat xmm.xmm, xmm.mem
.xmm.mem:
.xmm.xmm:
    RET
 ENDP IitGroupSHA::
</pre>

<dl id="IitSHA1NEXTE">
<dt><a href='#IitGroupSHA'>&uarr; SHA1NEXTE</a></dt>
<dd>Calculate SHA1 State Variable E after Four Rounds</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4120.htm">t4120</a>
</dd>
</dl><pre>
IitSHA1NEXTE:: PROC
    MOV CL,0xC8
    JMP IitGroupSHA:
 ENDP IitSHA1NEXTE::
</pre>

<dl id="IitSHA1MSG1">
<dt><a href='#IitGroupSHA'>&uarr; SHA1MSG1</a></dt>
<dd>Perform an Intermediate Calculation for the Next Four SHA1 Message Dwords</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4120.htm">t4120</a>
</dd>
</dl><pre>
IitSHA1MSG1:: PROC
    MOV CL,0xC9
    JMP IitGroupSHA:
 ENDP IitSHA1MSG1::
</pre>

<dl id="IitSHA1MSG2">
<dt><a href='#IitGroupSHA'>&uarr; SHA1MSG2</a></dt>
<dd>Perform a Final Calculation for the Next Four SHA1 Message Dwords</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4120.htm">t4120</a>
</dd>
</dl><pre>
IitSHA1MSG2:: PROC
    MOV CL,0xCA
    JMP IitGroupSHA:
 ENDP IitSHA1MSG2::
</pre>

<dl id="IitSHA256MSG1">
<dt><a href='#IitGroupSHA'>&uarr; SHA256MSG1</a></dt>
<dd>Perform an Intermediate Calculation for the Next Four SHA256 Message</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4120.htm">t4120</a>
</dd>
</dl><pre>
IitSHA256MSG1:: PROC
    MOV CL,0xCC
    JMP IitGroupSHA:
 ENDP IitSHA256MSG1::
</pre>

<dl id="IitSHA256MSG2">
<dt><a href='#IitGroupSHA'>&uarr; SHA256MSG2</a></dt>
<dd>Perform a Final Calculation for the Next Four SHA256 Message Dwords</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4120.htm">t4120</a>
</dd>
</dl><pre>
IitSHA256MSG2:: PROC
    MOV CL,0xCD
    JMP IitGroupSHA:
 ENDP IitSHA256MSG2::
</pre>

<dl id="IitSHA1RNDS4">
<dt><a href='#IitHandlers'>&uarr; SHA1RNDS4</a></dt>
<dd>Perform Four Rounds of SHA1 Operation</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4120.htm">t4120</a>
</dd>
</dl><pre>
IitSHA1RNDS4:: PROC
    IiRequire 686,SSE2,SHA
    IiEncoding DATA=OWORD
    IiEmitOpcode 0x0F,0x3A,0xCC
    IiOpEn RM
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiDispatchFormat xmm.xmm.imm, xmm.mem.imm
.xmm.mem.imm:
.xmm.xmm.imm:
    RET
 ENDP IitSHA1RNDS4::
</pre>

<dl id="IitSHA256RNDS2">
<dt><a href='#IitHandlers'>&uarr; SHA256RNDS2</a></dt>
<dd>Perform Two Rounds of SHA256 Operation</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4120.htm">t4120</a>
</dd>
</dl><pre>
IitSHA256RNDS2:: PROC
    IiRequire 686,SSE2,SHA
    IiEncoding DATA=OWORD
    IiEmitOpcode 0x0F,0x38,0xCB
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat xmm.xmm, xmm.mem, xmm.xmm.xmm, xmm.mem.xmm
.xmm.xmm.xmm:
.xmm.mem.xmm:
    IiAbortIfNot Operand3,XMM0
.xmm.mem:
.xmm.xmm:
    RET
 ENDP IitSHA256RNDS2::
</pre>
<!--IitEpilogue--><pre>
  ENDPROGRAM iit
</pre><!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
