<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='iia.htm source file'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>iia.htm source file</title>
</head>
<body class='EASOURCE' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>iia.htm
<br/><i>Enumerations</i>
<br/><a href="#IiaList">IiaList</a>
<br/><i>Instruction handlers</i><br/><span class="ILIST">
<a href="#IiaANDN">ANDN</a>
<a href="#IiaMOVBE">MOVBE</a>
<a href="#IiaVAESDEC">VAESDEC</a>
<a href="#IiaVAESDECLAST">VAESDECLAST</a>
<a href="#IiaVAESENC">VAESENC</a>
<a href="#IiaVAESENCLAST">VAESENCLAST</a>
<a href="#IiaVAESIMC">VAESIMC</a>
<a href="#IiaVAESKEYGENASSIST">VAESKEYGENASSIST</a>
<a href="#IiaVFMADDPD">VFMADDPD</a>
<a href="#IiaVFMADDPS">VFMADDPS</a>
<a href="#IiaVFMADDSD">VFMADDSD</a>
<a href="#IiaVFMADDSS">VFMADDSS</a>
<a href="#IiaVFMADDSUBPD">VFMADDSUBPD</a>
<a href="#IiaVFMADDSUBPS">VFMADDSUBPS</a>
<a href="#IiaVFMSUBADDPD">VFMSUBADDPD</a>
<a href="#IiaVFMSUBADDPS">VFMSUBADDPS</a>
<a href="#IiaVFMSUBPD">VFMSUBPD</a>
<a href="#IiaVFMSUBPS">VFMSUBPS</a>
<a href="#IiaVFMSUBSD">VFMSUBSD</a>
<a href="#IiaVFMSUBSS">VFMSUBSS</a>
<a href="#IiaVFNMADDPD">VFNMADDPD</a>
<a href="#IiaVFNMADDPS">VFNMADDPS</a>
<a href="#IiaVFNMADDSD">VFNMADDSD</a>
<a href="#IiaVFNMADDSS">VFNMADDSS</a>
<a href="#IiaVFNMSUBPD">VFNMSUBPD</a>
<a href="#IiaVFNMSUBPS">VFNMSUBPS</a>
<a href="#IiaVFNMSUBSD">VFNMSUBSD</a>
<a href="#IiaVFNMSUBSS">VFNMSUBSS</a>
<a href="#IiaVPCMPESTRI">VPCMPESTRI</a>
<a href="#IiaVPCMPESTRM">VPCMPESTRM</a>
<a href="#IiaVPCMPISTRI">VPCMPISTRI</a>
<a href="#IiaVPCMPISTRM">VPCMPISTRM</a>
<a href="#IiaVPERMILMO2PD">VPERMILMO2PD</a>
<a href="#IiaVPERMILMO2PS">VPERMILMO2PS</a>
<a href="#IiaVPERMILMV2PD">VPERMILMV2PD</a>
<a href="#IiaVPERMILMV2PS">VPERMILMO2PS</a>
<a href="#IiaVPERMILTD2PD">VPERMILTD2PD</a>
<a href="#IiaVPERMILTD2PS">VPERMILTD2PS</a>
<a href="#IiaVPHMINPOSUW">VPHMINPOSUW</a>
<a href="#IiaVPSIGNB">VPSIGNB</a>
<a href="#IiaVPSIGND">VPSIGND</a>
<a href="#IiaVPSIGNW">VPSIGNW</a>
<a href="#IiaVPTEST">VPTEST</a>
<a href="#IiaVTESTPD">VTESTPD</a>
<a href="#IiaVTESTPS">VTESTPS</a>
<a href="#IiaVZEROALL">VZEROALL</a>
<a href="#IiaVZEROUPPER">VZEROUPPER</a>
</span><!--IiaAList-->
</h1>
<dl id="IiaHandlers"><dt><a href="#top">&uarr; IiaHandlers</a> </dt>
<dd> assemble <b>AMD</b>-specific instruction in legacy or VEX encoding.
<br/>For XOP-encoded instructions see <a class="EXT" href="iix.htm">iix.htm</a>.
<br/>For 3DNow! instructions see <a class="EXT" href="iid.htm">iid.htm</a>.</dd>
<dt>See also</dt><dd><a class="EXT" href="ii.htm#IiHandlers">IiHandlers</a>,
<a class="EXT" href="../eadoc/links.htm#AMDVol3">[AMDVol3]</a>
<a class="EXT" href="../eadoc/links.htm#AMDVol6">[AMDVol6]</a>.</dd>
</dl><pre>
iia PROGRAM FORMAT=COFF,MODEL=FLAT,WIDTH=32
    INCLUDEHEAD euroasm.htm, \  Interface (structures, symbols and macros) of other modules used in this source.
                ea.htm,eaopt.htm,exp.htm,ii.htm,msg.htm,pgm.htm,pgmopt.htm,sss.htm,stm.htm,sym.htm
</pre><br class="CLEAR"/><pre>
iia HEAD ; Start of module interface.
</pre>

<dl id="IiaList"><dt><a href="#top">&uarr; %IiaList</a></dt><dd> enumerates machine instructions
<!---->of this family which &euro;ASM can assemble.
<br/>Each instruction declared in <code>%IiaList</code> requires the corresponding
<a href="#IiaHandlers">handler</a> in this file.</dd>
<dt>See also</dt><dd><a class="EXT" href="dict.htm#DictLookupIi">DictLookupIi</a></dd></dl><pre>
%IiaList %SET \
MOVBE, \
ANDN, \
VAESENC, \
VAESENCLAST, \
VAESDEC, \
VAESDECLAST, \
VAESIMC, \
VAESKEYGENASSIST, \
VPCMPESTRI, \
VPCMPESTRM, \
VPCMPISTRI, \
VPCMPISTRM, \
VPSIGNB, \
VPSIGNW, \
VPSIGND, \
VPTEST, \
VTESTPS, \
VTESTPD, \
VPHMINPOSUW, \
VZEROALL, \
VZEROUPPER, \
VPERMILTD2PS, \
VPERMILMO2PS, \
VPERMILMV2PS, \
VPERMILTD2PD, \
VPERMILMO2PD, \
VPERMILMV2PD, \
VFMADDPS, \
VFMADDPD, \
VFMADDSUBPS, \
VFMADDSUBPD, \
VFMSUBADDPS, \
VFMSUBADDPD, \
VFMSUBPS, \
VFMSUBPD, \
VFNMADDPD, \
VFNMADDPS, \
VFNMSUBPS, \
VFNMSUBPD, \
VFNMADDSS, \
VFNMADDSD, \
VFNMSUBSS, \
VFNMSUBSD, \
VFMADDSS, \
VFMADDSD, \
VFMSUBSS, \
VFMSUBSD, \
<!--IiaList-->
;</pre><pre>
  ENDHEAD iia ; End of module interface.
[.text]
</pre>

<dl id="IiaMOVBE">
<dt><a href="#IiaHandlers">&uarr; MOVBE</a></dt>
<dd>MovBig Endian (Move Data After Swapping Bytes)</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/MOVBE.html">MOVBE</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>MOVBE reg16, mem16 
</th><td>0F 38 F0 /r
</td></tr>
<tr><th> MOVBE reg32, mem32 
</th><td>0F 38 F0 /r
</td></tr>
<tr><th> MOVBE reg64, mem64 
</th><td>0F 38 F0 /r
</td></tr>
<tr><th> MOVBE mem16, reg16 
</th><td>0F 38 F1 /r
</td></tr>
<tr><th> MOVBE mem32, reg32 
</th><td>0F 38 F1 /r
</td></tr>
<tr><th> MOVBE mem64, reg64 
</th><td>0F 38 F1 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>gen,datamov</dd>
<dt>Operands</dt>
<dd><b>Gvqp</b>,Mvqp | <b>Mvqp</b>,Gvqp</dd>
<dt>Opcode</dt>
<dd>0x0F38F0 /r | 0x0F38F1 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t3780.htm">t3780</a>
</dd>
</dl><pre>
IiaMOVBE:: PROC
    IiRequire AMD,SPEC
    IiDataSize SpecifyMem=OFF
    IiEmitOpcode 0x0F,0x38
    IiModRM /r
    IiDispatchFormat  r16.mem, r32.mem, r64.mem, mem.r16, mem.r32, mem.r64
.r16.mem:
.r32.mem:
.r64.mem:
    IiOpEn RM
    IiEmitOpcode 0xF0
    RET
.mem.r16:
.mem.r32:
.mem.r64:
    IiOpEn MR
    IiEmitOpcode 0xF1
    RET
  ENDP IiaMOVBE::
</pre>

<dl id="IiaANDN">
<dt><a href="#IiaHandlers">&uarr; ANDN</a></dt>
<dd>Logical And-Not</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/ANDN.html">ANDN</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>ANDN reg32, reg32, reg/mem32 
</th><td>VEX.NDS.LZ.0F38.W0 F2 /r
</td></tr>
<tr><th>ANDN reg64, reg64, reg/mem64 
</th><td>C4 RXB.02 1.src1.0.00 F2 /r</td></tr>
</table></dd>
</dl><pre>
IiaANDN:: PROC
    IiEmitOpcode 0xF2
    IiRequire ABM
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  r32.r32.r32, r32.r32.mem, r64.r64.r64, r64.r64.mem
.r32.r32.r32:
.r32.r32.mem:
    IiEmitPrefix VEX.NDS.LZ.0F38.W0
    RET
.r64.r64.r64:
.r64.r64.mem:
    IiEmitPrefix VEX.NDS.LZ.0F38.W1
    RET
  ENDP IiaANDN::
</pre>

<dl id="IiaVAESENC">
<dt><a href="#IiaHandlers">&uarr; VAESENC</a></dt>
<dd>AES Encryption round</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VAESENC xmm1, xmm2, xmm3/mem128 
</th><td>C4 RXB.00010 X.src.0.01 DC /r
</td></tr>
</table></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4600.htm">t4600</a>
</dd>
</dl><pre>
IiaVAESENC:: PROC
    IiEmitOpcode 0xDC
.op:IiRequire AES
    IiOpEn RVM
    IiModRM /r
    IiEncoding DATA=OWORD
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEmitPrefix VEX.NDS.128.66.0F38.WIG
    RET
  ENDP IiaVAESENC::
</pre>

<dl id="IiaVAESENCLAST">
<dt><a href="#IiaVAESENC">&uarr; VAESENCLAST</a></dt>
<dd>AES Last Encryption Round</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VAESENCLAST xmm1, xmm2, xmm3/mem128 
</th><td>C4 RXB.00010 X.src.0.01 DD /r
</td></tr>
</table></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4600.htm">t4600</a>
</dd>
</dl><pre>
IiaVAESENCLAST:: PROC
    IiEmitOpcode 0xDD
    JMP IiaVAESENC.op:
    RET
  ENDP IiaVAESENCLAST::
</pre>

<dl id="IiaVAESDEC">
<dt><a href="#IiaVAESENC">&uarr; VAESDEC</a></dt>
<dd>AES Decryption Round</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VAESDEC xmm1, xmm2, xmm3/mem128 
</th><td>C4 RXB.00010 X.src.0.01 DE /r
</td></tr>
</table></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4600.htm">t4600</a>
</dd>
</dl><pre>
IiaVAESDEC:: PROC
    IiEmitOpcode 0xDE
    JMP IiaVAESENC.op:
  ENDP IiaVAESDEC::
</pre>

<dl id="IiaVAESDECLAST">
<dt><a href="#IiaVAESENC">&uarr; VAESDECLAST</a></dt>
<dd>AES Last Decryption Round</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VAESDECLAST xmm1, xmm2, xmm3/mem128 
</th><td>C4 RXB.00010 X.src.0.01 DF /r
</td></tr>
</table></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4600.htm">t4600</a>
</dd>
</dl><pre>
IiaVAESDECLAST:: PROC
    IiEmitOpcode 0xDF
    JMP IiaVAESENC.op:
  ENDP IiaVAESDECLAST::
</pre>

<dl id="IiaVAESIMC">
<dt><a href="#IiaVAESENC">&uarr; VAESIMC</a></dt>
<dd>AES InvMixColumn Transformation</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VAESIMC xmm1, xmm2/mem128
</th><td>VEX.128.66.0F38.WIG DB /r
</td></tr>
</table></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4600.htm">t4600</a>
</dd>
</dl><pre>
IiaVAESIMC:: PROC
    IiRequire AES
    IiEmitOpcode 0xDB
    IiOpEn RM
    IiModRM /r
    IiEncoding DATA=OWORD
    IiDispatchFormat xmm.xmm, xmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.66.0F38.WIG
    RET
  ENDP IiaVAESIMC::
</pre>

<dl id="IiaVAESKEYGENASSIST">
<dt><a href="#IiaHandlers">&uarr; VAESKEYGENASSIST</a></dt>
<dd>AES Assist Round Key Generation</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VAESKEYGENASSIST xmm1, xmm2/mem128, imm8
</th><td>VEX.128.66.0F3A.WIG DF /r ib
</td></tr>
</table></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4600.htm">t4600</a>
</dd>
</dl><pre>
IiaVAESKEYGENASSIST:: PROC
    IiRequire AES
    IiEmitOpcode 0xDF
    IiOpEn RM
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiEncoding DATA=OWORD
    IiDispatchFormat  xmm.xmm.imm, xmm.mem.imm
.xmm.xmm.imm:
.xmm.mem.imm:
    IiEmitPrefix VEX.128.66.0F3A.WIG
    RET
  ENDP IiaVAESKEYGENASSIST::
</pre>

<dl id="IiaVPCMPESTRM">
<dt><a href="#IiaHandlers">&uarr; VPCMPESTRM</a></dt>
<dd>Packed Compare Explicit Length Strings, Return Mask.
<br/>Modifier DATA=D | DATA=Q specifies if the implicit length registers are EAX,EDX | RAX,RDX.</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPCMPESTRM xmm1, xmm2/mem128, imm8
</th><td>C4 RXB.00011 X.1111.0.01 60 /r ib
</td></tr>
</table></dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/PCMPESTRM.html">PCMPESTRM</a></dd>
<dt>Category</dt>
<dd>sse42,strtxt</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: xmm, type: -, address: -">XMM0</span></i></b>,Vdq,Wdq,<span title="dst: XMM0 src: Vdq src: Wdq src: Ib src: rAX src: rDX ">...</span></dd>
<dt>Opcode</dt>
<dd>0x660F3A60 /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b>, values:<b>.....AP.</b></dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4610.htm">t4610</a>
</dd>
</dl><pre>
IiaVPCMPESTRM:: PROC
    IiEmitOpcode 0x60
.op:IiRequire AMD,SSE4.2
    IiAllowModifier DATA
    IiOpEn RM
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiDispatchFormat  xmm.xmm.imm, xmm.mem.imm
.xmm.xmm.imm:
.xmm.mem.imm:
    JSt [EDI+II.MfgExplicit],iiMfgDATA_QWORD,.r64:
    IiEncoding DATA=DWORD
    IiEmitPrefix VEX.128.66.0F3A.W0
    RET
.r64:IiEncoding DATA=QWORD
    IiEmitPrefix VEX.128.66.0F3A.W1
    RET
  ENDP IiaVPCMPESTRM::
</pre>

<dl id="IiaVPCMPESTRI">
<dt><a href="#IiaVPCMPESTRM">&uarr; VPCMPESTRI</a></dt>
<dd>Packed Compare Explicit Length Strings, Return Index.
<br/>Modifier DATA=D | DATA=Q specifies if the implicit length registers are EAX,EDX | RAX,RDX.</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/PCMPESTRI.html">PCMPESTRI</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPCMPESTRI xmm1, xmm2/mem128, imm8 
</th><td>C4 RXB.00011 X.1111.0.01 61 /r ib
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse42,strtxt</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 1, group: gen, type: dqp, address: -">rCX</span></i></b>,Vdq,Wdq,<span title="dst: rCX src: Vdq src: Wdq src: Ib src: rAX src: rDX ">...</span></dd>
<dt>Opcode</dt>
<dd>0x660F3A61 /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b>, values:<b>.....AP.</b></dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4610.htm">t4610</a>
</dd>
</dl><pre>
IiaVPCMPESTRI:: PROC
    IiEmitOpcode 0x61
    JMP IiaVPCMPESTRM.op
  ENDP IiaVPCMPESTRI::
</pre>

<dl id="IiaVPCMPISTRM">
<dt><a href="#IiaVPCMPESTRI">&uarr; VPCMPISTRM</a></dt>
<dd>Packed Compare Implicit Length Strings, Return Mask</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/PCMPISTRM.html">PCMPISTRM</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPCMPISTRM xmm1, xmm2/mem128, imm8
</th><td>C4 RXB.03 X.1111.0.01 62 /r ib
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse42,strtxt</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 0, group: xmm, type: -, address: -">XMM0</span></i></b>,Vdq,Wdq,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F3A62 /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b>, values:<b>.....AP.</b></dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4610.htm">t4610</a>
</dd>
</dl><pre>
IiaVPCMPISTRM:: PROC
    IiEmitOpcode 0x62
.op:IiRequire AMD,SSE4.2
    IiOpEn RM
    IiModRM /r
    IiEmitImm Operand3, BYTE
    IiDispatchFormat  xmm.xmm.imm, xmm.mem.imm
.xmm.xmm.imm:
.xmm.mem.imm:
    IiEmitPrefix VEX.128.66.0F3A.WIG
    RET
  ENDP IiaVPCMPISTRM::
</pre>

<dl id="IiaVPCMPISTRI">
<dt><a href="#IiaHandlers">&uarr; VPCMPISTRI</a></dt>
<dd>Packed Compare Implicit Length Strings, Return Index</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/PCMPISTRI.html">PCMPISTRI</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPCMPISTRI xmm1, xmm2/mem128, imm8 
</th><td>C4 RXB.03 X.1111.0.01 63 /r ib
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse42,strtxt</dd>
<dt>Operands</dt>
<dd><b><i><span title="nr: 1, group: gen, type: dqp, address: -">rCX</span></i></b>,Vdq,Wdq,Ib</dd>
<dt>Opcode</dt>
<dd>0x660F3A63 /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b>, values:<b>.....AP.</b></dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4610.htm">t4610</a>
</dd>
</dl><pre>
IiaVPCMPISTRI:: PROC
    IiEmitOpcode 0x63
    JMP IiaVPCMPISTRM.op:
  ENDP IiaVPCMPISTRI::
</pre>

<dl id="IiaVPSIGNB">
<dt><a href="#IiaHandlers">&uarr; VPSIGNB</a></dt>
<dd>Packed SIGN Byte</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSIGNB xmm1, xmm2, xmm2/mem128 
</th><td>C4 RXB.02 X.src1.0.01 08 /r
</td></tr>
<tr><th>VPSIGNB ymm1, ymm2, ymm2/mem256 
</th><td>C4 RXB.02 X.src1.1.01 08 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>ssse3,simdint</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F3808 /r | 0x660F3808 /r</dd>
<dt>CPU</dt>
<dd>C2+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4620.htm">t4620</a>
</dd>
</dl><pre>
IiaVPSIGNB:: PROC
    IiEmitOpcode 0x08
.op:IiRequire AMD, SSSE3
    IiOpEn RVM
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm, xmm.xmm.mem, ymm.ymm.ymm, ymm.ymm.mem
.xmm.xmm.xmm:
.xmm.xmm.mem:
    IiEncoding DATA=OWORD
    IiEmitPrefix VEX.NDS.128.66.0F38.WIG
    RET
.ymm.ymm.ymm:
.ymm.ymm.mem:
    IiEncoding DATA=YWORD
    IiEmitPrefix VEX.NDS.256.66.0F38.WIG
    RET
  ENDP IiaVPSIGNB::
</pre>

<dl id="IiaVPSIGNW">
<dt><a href="#IiaVPSIGNB">&uarr; VPSIGNW</a></dt>
<dd>Packed SIGN Wird</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSIGNW xmm1, xmm2, xmm3/mem128 
</th><td>C4 RXB.02 X.src1.0.01 09 /r
</td></tr>
<tr><th>VPSIGNW ymm1, ymm2, ymm3/mem256 
</th><td>C4 RXB.02 X.src1.1.01 09 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>ssse3,simdint</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F3809 /r | 0x660F3809 /r</dd>
<dt>CPU</dt>
<dd>C2+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4620.htm">t4620</a>
</dd>
</dl><pre>
IiaVPSIGNW:: PROC
    IiEmitOpcode 0x09
    JMP IiaVPSIGNB.op:
  ENDP IiaVPSIGNW::
</pre>

<dl id="IiaVPSIGND">
<dt><a href="#IiaVPSIGNB">&uarr; VPSIGND</a></dt>
<dd>Packed SIGN Dword</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPSIGND xmm1, xmm2, xmm3/mem128 
</th><td>C4 RXB.02 X.src1.0.01 0A /r
</td></tr>
<tr><th>VPSIGND ymm1, ymm2, ymm3/mem256 
</th><td>C4 RXB.02 X.src1.1.01 0A /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>ssse3,simdint</dd>
<dt>Operands</dt>
<dd><b>Pq</b>,Qq | <b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x0F380A /r | 0x660F380A /r</dd>
<dt>CPU</dt>
<dd>C2+</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4620.htm">t4620</a>
</dd>
</dl><pre>
IiaVPSIGND:: PROC
    IiEmitOpcode 0x0A
    JMP IiaVPSIGNB.op:
  ENDP IiaVPSIGND::
</pre>

<dl id="IiaVPTEST">
<dt><a href="#IiaHandlers">&uarr; VPTEST</a></dt>
<dd>Logical Compare</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPTEST xmm1, xmm2/mem128 
</th><td>C4 RXB.00010 X.1111.0.01 17 /r
</td></tr>
<tr><th>VPTEST ymm1, ymm2/mem256
</th><td>C4 RXB.00010 X.1111.1.01 17 /r
</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41</dd>
<dt>Operands</dt>
<dd>Vdq,Wdq</dd>
<dt>Opcode</dt>
<dd>0x660F3817 /r</dd>
<dt>Flags</dt>
<dd>modified:<b>O..SZAPC</b>, defined:<b>O..SZAPC</b>, values:<b>O..S.AP.</b></dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4630.htm">t4630</a>
</dd>
</dl><pre>
IiaVPTEST:: PROC
    IiEmitOpcode 0x17
.op:IiRequire AMD
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem, ymm.ymm, ymm.mem
.xmm.xmm:
.xmm.mem:
    IiEncoding DATA=OWORD
    IiEmitPrefix VEX.128.66.0F38.WIG
    RET
.ymm.ymm:
.ymm.mem:
    IiEncoding DATA=YWORD
    IiEmitPrefix VEX.256.66.0F38.WIG
    RET
  ENDP IiaVPTEST::
</pre>

<dl id="IiaVTESTPS">
<dt><a href="#IiaVPTEST">&uarr; VTESTPS</a></dt>
<dd>Packed Bit Test</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VTESTPD:VTESTPS.html">VTESTPS</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VTESTPS xmm1, xmm2/mem128 
</th><td>C4 RXB.02 0.1111.0.01 0E /r
</td></tr>
<tr><th>VTESTPS ymm1, ymm2/mem256 
</th><td>C4 RXB.02 0.1111.1.01 0E /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x0E</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4630.htm">t4630</a>
</dd>
</dl><pre>
IiaVTESTPS:: PROC
    IiEmitOpcode 0x0E
    JMP IiaVPTEST.op:
  ENDP IiaVTESTPS::
</pre>

<dl id="IiaVTESTPD">
<dt><a href="#IiaVPTEST">&uarr; VTESTPD</a></dt>
<dd>Packed Bit Test</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VTESTPD:VTESTPS.html">VTESTPD</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VTESTPD xmm1, xmm2/mem128 
</th><td>C4 RXB.02 0.1111.0.01 0F /r
</td></tr>
<tr><th>VTESTPD ymm1, ymm2/mem256 
</th><td>C4 RXB.02 0.1111.1.01 0F /r
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x0F</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4630.htm">t4630</a>
</dd>
</dl><pre>
IiaVTESTPD:: PROC
    IiEmitOpcode 0x0F
    JMP IiaVPTEST.op:
  ENDP IiaVTESTPD::
</pre>

<dl id="IiaVPHMINPOSUW">
<dt><a href="#IiaHandlers">&uarr; VPHMINPOSUW</a></dt>
<dd>Packed Horizontal Word Minimum</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPHMINPOSUW xmm1, xmm2/mem128 
</th><td>C4 RXB.02 X.1111.0.01 41 /r</td></tr>
</table></dd>
<dt>Category</dt>
<dd>sse41,simdint,compar</dd>
<dt>Operands</dt>
<dd><b>Vdq</b>,Wdq</dd>
<dt>Opcode</dt>
<dd>0x660F3841 /r</dd>
<dt>CPU</dt>
<dd>C2++</dd>
<dt>Documented</dt>
<dd>D<a class="EXTW" href="http://ref.x86asm.net/geek-abc.html#gen_note_SSE4_amd"><sup>43</sup></a></dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4635.htm">t4635</a>
</dd>
</dl><pre>
IiaVPHMINPOSUW:: PROC
    IiRequire AMD
    IiEmitOpcode 0x41
    IiOpEn RM
    IiModRM /r
    IiDispatchFormat  xmm.xmm, xmm.mem
.xmm.xmm:
.xmm.mem:
    IiEmitPrefix VEX.128.66.0F38.WIG
    RET
  ENDP IiaVPHMINPOSUW::
</pre>

<dl id="IiaVZEROALL">
<dt><a href="#IiaHandlers">&uarr; VZEROALL</a></dt>
<dd>Zero All YMM Registers</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VZEROALL.html">VZEROALL</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VZEROALL 
</th><td>C4 RXB.01 X.1111.1.00 77
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x77</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4635.htm">t4635</a>
</dd>
</dl><pre>
IiaVZEROALL:: PROC
    IiEmitPrefix VEX.256.0F.WIG
.pf:IiRequire AMD
    IiEmitOpcode 0x77
    IiDispatchFormat none
.none:RET
  ENDP IiaVZEROALL::
</pre>

<dl id="IiaVZEROUPPER">
<dt><a href="#IiaVZEROALL">&uarr; VZEROUPPER</a></dt>
<dd>Zero All YMM Registers Upper</dd>
<dt>Description</dt>
<dd><a class="EXTW" href="http://www.felixcloutier.com/x86/VZEROUPPER.html">VZEROUPPER</a></dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VZEROUPPER 
</th><td>C4 RXB.01 X.1111.0.00 77
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x77</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4635.htm">t4635</a>
</dd>
</dl><pre>
IiaVZEROUPPER:: PROC
    IiEmitPrefix VEX.128.0F.WIG
    JMP IiaVZEROALL.pf:
  ENDP IiaVZEROUPPER::
</pre>

<dl id="IiaVPERMILTD2PS">
<dt><a href="#IiaHandlers">&uarr; VPERMILTD2PS</a></dt>
<dd>Permute Two-Source Single-Precision  Floating-Point Values,  MatchToZero=0</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPERMILTD2PS xmm1, xmm2, xmm3/mem128, xmm4
</th><td>C4 RXB.03 0.xsrc1.0.00 48 /r imm8
</td></tr>
<tr><th>VPERMILTD2PS xmm1, xmm2, xmm3, xmm4/mem128
</th><td>C4 RXB.03 1.xsrc1.0.00 48 /r imm8
</td></tr>
<tr><th>VPERMILTD2PS ymm1, ymm2, ymm3/mem256, ymm4
</th><td>C4 RXB.03 0.ysrc1.1.00 48 /r imm8
</td></tr>
<tr><th>VPERMILTD2PS ymm1, ymm2, ymm3, ymm4/mem256
</th><td>C4 RXB.03 1.ysrc1.1.00 48 /r imm8</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x48</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4640.htm">t4640</a>
</dd>
</dl><pre>
IiaVPERMILTD2PS:: PROC
    IiEmitOpcode 0x48
.op:IiRequire AMD
    IiAllowModifier CODE
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm.xmm, xmm.xmm.mem.xmm, xmm.xmm.xmm.mem, \
                      ymm.ymm.ymm.ymm, ymm.ymm.mem.ymm, ymm.ymm.ymm.mem
.xmm.xmm.xmm.mem:
    IiEmitPrefix VEX.128.0F3A.W1
.L: IiEncoding CODE=LONG
    IiSwap Operand3, Operand4
    IiOpEn RVM
    IiIs4 Operand4
    RET
.ymm.ymm.ymm.mem:
    IiEmitPrefix VEX.256.0F3A.W1
    JMP .L:
.xmm.xmm.xmm.xmm:
    IiDispatchCode LONG=.xmm.xmm.xmm.mem:
.xmm.xmm.mem.xmm:
    IiEmitPrefix VEX.128.0F3A.W0
.S: IiEncoding CODE=SHORT
    IiOpEn RVM
    IiIs4 Operand4
    RET
.ymm.ymm.ymm.ymm:
    IiDispatchCode LONG=.ymm.ymm.ymm.mem:
.ymm.ymm.mem.ymm:
    IiEmitPrefix VEX.256.0F3A.W0
    JMP .S:
  ENDP IiaVPERMILTD2PS::
</pre>

<dl id="IiaVPERMILMO2PS">
<dt><a href="#IiaVPERMILTD2PS">&uarr; VPERMILMO2PS</a></dt>
<dd>Permute Two-Source Single-Precision  Floating-Point Values,  MatchToZero=2</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPERMILMO2PS xmm1, xmm2, xmm3/mem128, xmm4
</th><td>C4 RXB.03 0.xsrc1.0.00 48 /r imm8
</td></tr>
<tr><th>VPERMILMO2PS xmm1, xmm2, xmm3, xmm4/mem128
</th><td>C4 RXB.03 1.xsrc1.0.00 48 /r imm8
</td></tr>
<tr><th>VPERMILMO2PS ymm1, ymm2, ymm3/mem256, ymm4
</th><td>C4 RXB.03 0.ysrc1.1.00 48 /r imm8
</td></tr>
<tr><th>VPERMILMO2PS ymm1, ymm2, ymm3, ymm4/mem256
</th><td>C4 RXB.03 1.ysrc1.1.00 48 /r imm8
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x48</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4640.htm">t4640</a>
</dd>
</dl><pre>
IiaVPERMILMO2PS:: PROC
    IiEmitOpcode 0x48
    ORB [EDI+II.Imm2],2
    JMP IiaVPERMILTD2PS.op:
  ENDP IiaVPERMILMO2PS::
</pre>

<dl id="IiaVPERMILMV2PS">
<dt><a href="#IiaVPERMILTD2PS">&uarr; VPERMILMV2PS</a></dt>
<dd>Permute Two-Source Single-Precision  Floating-Point Values,  MatchToZero=3</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPERMILMV2PS xmm1, xmm2, xmm3/mem128, xmm4
</th><td>C4 RXB.03 0.xsrc1.0.00 48 /r imm8
</td></tr>
<tr><th>VPERMILMV2PS xmm1, xmm2, xmm3, xmm4/mem128
</th><td>C4 RXB.03 1.xsrc1.0.00 48 /r imm8
</td></tr>
<tr><th>VPERMILMV2PS ymm1, ymm2, ymm3/mem256, ymm4
</th><td>C4 RXB.03 0.ysrc1.1.00 48 /r imm8
</td></tr>
<tr><th>VPERMILMV2PS ymm1, ymm2, ymm3, ymm4/mem256
</th><td>C4 RXB.03 1.ysrc1.1.00 48 /r imm8
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x48</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4640.htm">t4640</a>
</dd>
</dl><pre>
IiaVPERMILMV2PS:: PROC
    IiEmitOpcode 0x48
    ORB [EDI+II.Imm2],3
    JMP IiaVPERMILTD2PS.op:
  ENDP IiaVPERMILMV2PS::
</pre>

<dl id="IiaVPERMILTD2PD">
<dt><a href="#IiaVPERMILTD2PS">&uarr; VPERMILTD2PD</a></dt>
<dd>Permute Two-Source Double-Precision Floating- Point Values, MatchToZero=0</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPERMILTD2PD xmm1, xmm2, xmm3/mem128, xmm4
</th><td>C4 RXB.03 0.xsrc1.0.00 49 /r imm8
</td></tr>
<tr><th>VPERMILTD2PD xmm1, xmm2, xmm3, xmm4/mem128
</th><td>C4 RXB.03 1.xsrc1.0.00 49 /r imm8
</td></tr>
<tr><th>VPERMILTD2PD ymm1, ymm2, ymm3/mem256, ymm4
</th><td>C4 RXB.03 0.ysrc1.1.00 49 /r imm8
</td></tr>
<tr><th>VPERMILTD2PD ymm1, ymm2, ymm3, ymm4/mem256
</th><td>C4 RXB.03 1.ysrc1.1.00 49 /r imm8
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x49</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4640.htm">t4640</a>
</dd>
</dl><pre>
IiaVPERMILTD2PD:: PROC
    IiEmitOpcode 0x49
    JMP IiaVPERMILTD2PS.op:
  ENDP IiaVPERMILTD2PD::
</pre>

<dl id="IiaVPERMILMO2PD">
<dt><a href="#IiaVPERMILTD2PS">&uarr; VPERMILMO2PD</a></dt>
<dd>Permute Two-Source Double-Precision Floating- Point Values, MatchToZero=2</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPERMILMO2PD xmm1, xmm2, xmm3/mem128, xmm4
</th><td>C4 RXB.03 0.xsrc1.0.00 49 /r imm8
</td></tr>
<tr><th>VPERMILMO2PD xmm1, xmm2, xmm3, xmm4/mem128
</th><td>C4 RXB.03 1.xsrc1.0.00 49 /r imm8
</td></tr>
<tr><th>VPERMILMO2PD ymm1, ymm2, ymm3/mem256, ymm4
</th><td>C4 RXB.03 0.ysrc1.1.00 49 /r imm8
</td></tr>
<tr><th>VPERMILMO2PD ymm1, ymm2, ymm3, ymm4/mem256
</th><td>C4 RXB.03 1.ysrc1.1.00 49 /r imm8
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x49</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4640.htm">t4640</a>
</dd>
</dl><pre>
IiaVPERMILMO2PD:: PROC
    IiEmitOpcode 0x49
    ORB [EDI+II.Imm2],2
    JMP IiaVPERMILTD2PS.op:
  ENDP IiaVPERMILMO2PD::
</pre>

<dl id="IiaVPERMILMV2PD">
<dt><a href="#IiaVPERMILTD2PS">&uarr; VPERMILMV2PD</a></dt>
<dd>Permute Two-Source Double-Precision Floating- Point Values, MatchToZero=3</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VPERMILMV2PD xmm1, xmm2, xmm3/mem128, xmm4
</th><td>C4 RXB.03 0.xsrc1.0.00 49 /r imm8
</td></tr>
<tr><th>VPERMILMV2PD xmm1, xmm2, xmm3, xmm4/mem128
</th><td>C4 RXB.03 1.xsrc1.0.00 49 /r imm8
</td></tr>
<tr><th>VPERMILMV2PD ymm1, ymm2, ymm3/mem256, ymm4
</th><td>C4 RXB.03 0.ysrc1.1.00 49 /r imm8
</td></tr>
<tr><th>VPERMILMV2PD ymm1, ymm2, ymm3, ymm4/mem256
</th><td>C4 RXB.03 1.ysrc1.1.00 49 /r imm8
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x49</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4640.htm">t4640</a>
</dd>
</dl><pre>
IiaVPERMILMV2PD:: PROC
    IiEmitOpcode 0x49
    ORB [EDI+II.Imm2],3
    JMP IiaVPERMILTD2PS.op:
  ENDP IiaVPERMILMV2PD::
</pre>

<dl id="IiaVFMADDPS">
<dt><a href="#IiaHandlers">&uarr; VFMADDPS</a></dt>
<dd>Multiply and Add Packed Single-Precision  Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFMADDPS xmm1, xmm2, xmm3/mem128, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 68 /r /is4
</td></tr>
<tr><th>VFMADDPS ymm1, ymm2, ymm3/mem256, ymm4 
</th><td>C4 RXB.03 0.ysrc1.1.01 68 /r /is4
</td></tr>
<tr><th>VFMADDPS xmm1, xmm2, xmm3, xmm4/mem128 
</th><td>C4 RXB.03 1.xsrc1.0.01 68 /r /is4
</td></tr>
<tr><th>VFMADDPS ymm1, ymm2, ymm3, ymm4/mem256 
</th><td>C4 RXB.03 1.ysrc1.1.01 68 /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x68</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4650.htm">t4650</a>
</dd>
</dl><pre>
IiaVFMADDPS:: PROC
    IiEmitOpcode 0x68
.op:IiRequire AMD,FMA
    IiAllowModifier CODE
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm.xmm, xmm.xmm.mem.xmm, xmm.xmm.xmm.mem, \
                      ymm.ymm.ymm.ymm, ymm.ymm.mem.ymm, ymm.ymm.ymm.mem
.xmm.xmm.xmm.mem:
    IiEmitPrefix VEX.128.66.0F3A.W1
.L: IiEncoding CODE=LONG
    IiSwap Operand3, Operand4
    IiOpEn RVM
    IiIs4 Operand4
    RET
.ymm.ymm.ymm.mem:
    IiEmitPrefix VEX.256.66.0F3A.W1
    JMP .L:
.xmm.xmm.xmm.xmm:
    IiDispatchCode LONG=.xmm.xmm.xmm.mem:
.xmm.xmm.mem.xmm:
    IiEmitPrefix VEX.128.66.0F3A.W0
.S: IiEncoding CODE=SHORT
    IiOpEn RVM
    IiIs4 Operand4
    RET
.ymm.ymm.ymm.ymm:
    IiDispatchCode LONG=.ymm.ymm.ymm.mem:
.ymm.ymm.mem.ymm:
    IiEmitPrefix VEX.256.66.0F3A.W0
    JMP .S:
  ENDP IiaVFMADDPS::
</pre>

<dl id="IiaVFMADDPD">
<dt><a href="#IiaVFMADDPS">&uarr; VFMADDPD</a></dt>
<dd>Multiply and Add Packed Double-Precision  Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFMADDPD xmm1, xmm2, xmm3/mem128, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 69 /r /is4
</td></tr>
<tr><th>VFMADDPD ymm1, ymm2, ymm3/mem256, ymm4 
</th><td>C4 RXB.03 0.ysrc1.1.01 69 /r /is4
</td></tr>
<tr><th>VFMADDPD xmm1, xmm2, xmm3, xmm4/mem128 
</th><td>C4 RXB.03 1.xsrc1.0.01 69 /r /is4
</td></tr>
<tr><th>VFMADDPD ymm1, ymm2, ymm3, ymm4/mem256 
</th><td>C4 RXB.03 1.ysrc1.1.01 69 /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x69</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4650.htm">t4650</a>
</dd>
</dl><pre>
IiaVFMADDPD:: PROC
    IiEmitOpcode 0x69
    JMP IiaVFMADDPS.op:
  ENDP IiaVFMADDPD::
</pre>

<dl id="IiaVFMADDSUBPS">
<dt><a href="#IiaVFMADDPS">&uarr; VFMADDSUBPS</a></dt>
<dd>Multiply with Alternating Add/Subtract of  Packed Single-Precision Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFMADDSUBPS xmm1, xmm2, xmm3/mem128, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 5C /r /is4
</td></tr>
<tr><th>VFMADDSUBPS ymm1, ymm2, ymm3/mem256, ymm4 
</th><td>C4 RXB.03 0.ysrc1.1.01 5C /r /is4
</td></tr>
<tr><th>VFMADDSUBPS xmm1, xmm2, xmm3, xmm4/mem128 
</th><td>C4 RXB.03 1.xsrc1.0.01 5C /r /is4
</td></tr>
<tr><th>VFMADDSUBPS ymm1, ymm2, ymm3, ymm4/mem256 
</th><td>C4 RXB.03 1.ysrc1.1.01 5C /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x5C</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4650.htm">t4650</a>
</dd>
</dl><pre>
IiaVFMADDSUBPS:: PROC
    IiEmitOpcode 0x5C
    JMP IiaVFMADDPS.op:
  ENDP IiaVFMADDSUBPS::
</pre>

<dl id="IiaVFMADDSUBPD">
<dt><a href="#IiaVFMADDPS">&uarr; VFMADDSUBPD</a></dt>
<dd>Multiply with Alternating Add/Subtract of  Packed Double-Precision Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFMADDSUBPD xmm1, xmm2, xmm3/mem128, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 5D /r /is4
</td></tr>
<tr><th>VFMADDSUBPD ymm1, ymm2, ymm3/mem256, ymm4 
</th><td>C4 RXB.03 0.ysrc1.1.01 5D /r /is4
</td></tr>
<tr><th>VFMADDSUBPD xmm1, xmm2, xmm3, xmm4/mem128 
</th><td>C4 RXB.03 1.xsrc1.0.01 5D /r /is4
</td></tr>
<tr><th>VFMADDSUBPD ymm1, ymm2, ymm3, ymm4/mem256 
</th><td>C4 RXB.03 1.ysrc1.1.01 5D /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x5D</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4650.htm">t4650</a>
</dd>
</dl><pre>
IiaVFMADDSUBPD:: PROC
    IiEmitOpcode 0x5D
    JMP IiaVFMADDPS.op:
  ENDP IiaVFMADDSUBPD::
</pre>

<dl id="IiaVFMSUBADDPS">
<dt><a href="#IiaVFMADDPS">&uarr; VFMSUBADDPS</a></dt>
<dd>Multiply with Alternating Subtract/Add of  Packed Single-Precision Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFMSUBADDPS xmm1, xmm2, xmm3/mem128, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 5E /r /is4
</td></tr>
<tr><th>VFMSUBADDPS ymm1, ymm2, ymm3/mem256, ymm4 
</th><td>C4 RXB.03 0.ysrc1.1.01 5E /r /is4
</td></tr>
<tr><th>VFMSUBADDPS xmm1, xmm2, xmm3, xmm4/mem128 
</th><td>C4 RXB.03 1.xsrc1.0.01 5E /r /is4
</td></tr>
<tr><th>VFMSUBADDPS ymm1, ymm2, ymm3, ymm4/mem256 
</th><td>C4 RXB.03 1.ysrc1.1.01 5E /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x5E</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4655.htm">t4655</a>
</dd>
</dl><pre>
IiaVFMSUBADDPS:: PROC
    IiEmitOpcode 0x5E
    JMP IiaVFMADDPS.op:
  ENDP IiaVFMSUBADDPS::
</pre>

<dl id="IiaVFMSUBADDPD">
<dt><a href="#IiaVFMADDPS">&uarr; VFMSUBADDPD</a></dt>
<dd>Multiply with Alternating Subtract/Add of  Packed Double-Precision Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFMSUBADDPD xmm1, xmm2, xmm3/mem128, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 5F /r /is4
</td></tr>
<tr><th>VFMSUBADDPD ymm1, ymm2, ymm3/mem256, ymm4 
</th><td>C4 RXB.03 0.ysrc1.1.01 5F /r /is4
</td></tr>
<tr><th>VFMSUBADDPD xmm1, xmm2, xmm3, xmm4/mem128 
</th><td>C4 RXB.03 1.xsrc1.0.01 5F /r /is4
</td></tr>
<tr><th>VFMSUBADDPD ymm1, ymm2, ymm3, ymm4/mem256 
</th><td>C4 RXB.03 1.ysrc1.1.01 5F /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x5F</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4655.htm">t4655</a>
</dd>
</dl><pre>
IiaVFMSUBADDPD:: PROC
    IiEmitOpcode 0x5F
    JMP IiaVFMADDPS.op:
  ENDP IiaVFMSUBADDPD::
</pre>

<dl id="IiaVFMSUBPS">
<dt><a href="#IiaVFMADDPS">&uarr; VFMSUBPS</a></dt>
<dd>Multiply and Subtract Packed Single-Precision  Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFMSUBPS xmm1, xmm2, xmm3/mem128, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 6C /r /is4
</td></tr>
<tr><th>VFMSUBPS ymm1, ymm2, ymm3/mem256, ymm4 
</th><td>C4 RXB.03 0.ysrc1.1.01 6C /r /is4
</td></tr>
<tr><th>VFMSUBPS xmm1, xmm2, xmm3, xmm4/mem128 
</th><td>C4 RXB.03 1.xsrc1.0.01 6C /r /is4
</td></tr>
<tr><th>VFMSUBPS ymm1, ymm2, ymm3, ymm4/mem256 
</th><td>C4 RXB.03 1.ysrc1.1.01 6C /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x6C</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4655.htm">t4655</a>
</dd>
</dl><pre>
IiaVFMSUBPS:: PROC
    IiEmitOpcode 0x6C
    JMP IiaVFMADDPS.op:
  ENDP IiaVFMSUBPS::
</pre>

<dl id="IiaVFMSUBPD">
<dt><a href="#IiaVFMADDPS">&uarr; VFMSUBPD</a></dt>
<dd>Multiply and Subtract Packed Double-Precision  Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFMSUBPD xmm1, xmm2, xmm3/mem128, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 6D /r /is4
</td></tr>
<tr><th>VFMSUBPD ymm1, ymm2, ymm3/mem256, ymm4 
</th><td>C4 RXB.03 0.ysrc1.1.01 6D /r /is4
</td></tr>
<tr><th>VFMSUBPD xmm1, xmm2, xmm3, xmm4/mem128 
</th><td>C4 RXB.03 1.xsrc1.0.01 6D /r /is4
</td></tr>
<tr><th>VFMSUBPD ymm1, ymm2, ymm3, ymm4/mem256 
</th><td>C4 RXB.03 1.ysrc1.1.01 6D /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x6D</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4655.htm">t4655</a>
</dd>
</dl><pre>
IiaVFMSUBPD:: PROC
    IiEmitOpcode 0x6D
    JMP IiaVFMADDPS.op:
  ENDP IiaVFMSUBPD::
</pre>

<dl id="IiaVFNMADDPD">
<dt><a href="#IiaVFMADDPS">&uarr; VFNMADDPD</a></dt>
<dd>Negative Multiply and Add Packed  Double-Precision Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFNMADDPD xmm1, xmm2, xmm3/mem128, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 79 /r /is4
</td></tr>
<tr><th>VFNMADDPD ymm1, ymm2, ymm3/mem256, ymm4 
</th><td>C4 RXB.03 0.ysrc1.1.01 79 /r /is4
</td></tr>
<tr><th>VFNMADDPD xmm1, xmm2, xmm3, xmm4/mem128 
</th><td>C4 RXB.03 1.xsrc1.0.01 79 /r /is4
</td></tr>
<tr><th>VFNMADDPD ymm1, ymm2, ymm3, ymm4/mem256 
</th><td>C4 RXB.03 1.ysrc1.1.01 79 /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x79</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4660.htm">t4660</a>
</dd>
</dl><pre>
IiaVFNMADDPD:: PROC
    IiEmitOpcode 0x79
    JMP IiaVFMADDPS.op:
  ENDP IiaVFNMADDPD::
</pre>

<dl id="IiaVFNMADDPS">
<dt><a href="#IiaVFMADDPS">&uarr; VFNMADDPS</a></dt>
<dd>Negative Multiply and Add Packed  Single-Precision Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFNMADDPS xmm1, xmm2, xmm3/mem128, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 78 /r /is4
</td></tr>
<tr><th>VFNMADDPS ymm1, ymm2, ymm3/mem256, ymm4 
</th><td>C4 RXB.03 0.ysrc1.1.01 78 /r /is4
</td></tr>
<tr><th>VFNMADDPS xmm1, xmm2, xmm3, xmm4/mem128 
</th><td>C4 RXB.03 1.xsrc1.0.01 78 /r /is4
</td></tr>
<tr><th>VFNMADDPS ymm1, ymm2, ymm3, ymm4/mem256 
</th><td>C4 RXB.03 1.ysrc1.1.01 78 /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x78</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4660.htm">t4660</a>
</dd>
</dl><pre>
IiaVFNMADDPS:: PROC
    IiEmitOpcode 0x78
    JMP IiaVFMADDPS.op:
  ENDP IiaVFNMADDPS::
</pre>

<dl id="IiaVFNMSUBPS">
<dt><a href="#IiaVFMADDPS">&uarr; VFNMSUBPS</a></dt>
<dd>Negative Multiply and Subtract Packed  Single-Precision Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFNMSUBPS xmm1, xmm2, xmm3/mem128, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 7C /r /is4
</td></tr>
<tr><th>VFNMSUBPS ymm1, ymm2, ymm3/mem256, ymm4 
</th><td>C4 RXB.03 0.ysrc1.1.01 7C /r /is4
</td></tr>
<tr><th>VFNMSUBPS xmm1, xmm2, xmm3, xmm4/mem128 
</th><td>C4 RXB.03 1.xsrc1.0.01 7C /r /is4
</td></tr>
<tr><th>VFNMSUBPS ymm1, ymm2, ymm3, ymm4/mem256 
</th><td>C4 RXB.03 1.ysrc1.1.01 7C /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x7C</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4660.htm">t4660</a>
</dd>
</dl><pre>
IiaVFNMSUBPS:: PROC
    IiEmitOpcode 0x7C
    JMP IiaVFMADDPS.op:
  ENDP IiaVFNMSUBPS::
</pre>

<dl id="IiaVFNMSUBPD">
<dt><a href="#IiaVFMADDPS">&uarr; VFNMSUBPD</a></dt>
<dd>Negative Multiply and Subtract Packed  Double-Precision Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFNMSUBPD xmm1, xmm2, xmm3/mem128, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 7D /r /is4
</td></tr>
<tr><th>VFNMSUBPD ymm1, ymm2, ymm3/mem256, ymm4 
</th><td>C4 RXB.03 0.ysrc1.1.01 7D /r /is4
</td></tr>
<tr><th>VFNMSUBPD xmm1, xmm2, xmm3, xmm4/mem128 
</th><td>C4 RXB.03 1.xsrc1.0.01 7D /r /is4
</td></tr>
<tr><th>VFNMSUBPD ymm1, ymm2, ymm3, ymm4/mem256 
</th><td>C4 RXB.03 1.ysrc1.1.01 7D /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x7D</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4660.htm">t4660</a>
</dd>
</dl><pre>
IiaVFNMSUBPD:: PROC
    IiEmitOpcode 0x7D
    JMP IiaVFMADDPS.op:
  ENDP IiaVFNMSUBPD::
</pre>

<dl id="IiaVFMADDSS">
<dt><a href="#IiaHandlers">&uarr; VFMADDSS</a></dt>
<dd>Multiply and Add Scalar Single-Precision  Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFMADDSS xmm1, xmm2, xmm3/mem32, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 6A /r /is4
</td></tr>
<tr><th>VFMADDSS xmm1, xmm2, xmm3, xmm4/mem32 
</th><td>C4 RXB.03 1.xsrc1.0.01 6A /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x6A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4670.htm">t4670</a>
</dd>
</dl><pre>
IiaVFMADDSS:: PROC
    IiEmitOpcode 0x6A
.op:IiRequire AMD, FMA
    IiAllowModifier CODE
    IiModRM /r
    IiDispatchFormat  xmm.xmm.xmm.xmm, xmm.xmm.mem.xmm, xmm.xmm.xmm.mem
.xmm.xmm.xmm.mem:
    IiEncoding CODE=LONG
    IiSwap Operand3, Operand4    
    IiOpEn RVM
    IiEmitPrefix VEX.128.66.0F3A.W1
    IiIs4 Operand4
    RET
.xmm.xmm.xmm.xmm:
    IiDispatchCode LONG=.xmm.xmm.xmm.mem:
.xmm.xmm.mem.xmm:
    IiEncoding CODE=SHORT    
    IiOpEn RVM
    IiEmitPrefix VEX.128.66.0F3A.W0
    IiIs4 Operand4
    RET
  ENDP IiaVFMADDSS::
</pre>

<dl id="IiaVFMADDSD">
<dt><a href="#IiaVFMADDSS">&uarr; VFMADDSD</a></dt>
<dd>Multiply and Add Scalar  Double-Precision Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFMADDSD xmm1, xmm2, xmm3/mem64, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 6B /r /is4
</td></tr>
<tr><th>VFMADDSD xmm1, xmm2, xmm3, xmm4/mem64 
</th><td>C4 RXB.03 1.xsrc1.0.01 6B /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x6B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4670.htm">t4670</a>
</dd>
</dl><pre>
IiaVFMADDSD:: PROC
    IiEmitOpcode 0x6B
    JMP IiaVFMADDSS.op:
  ENDP IiaVFMADDSD::
</pre>

<dl id="IiaVFMSUBSS">
<dt><a href="#IiaVFMADDSS">&uarr; VFMSUBSS</a></dt>
<dd>Multiply and Subtract Scalar Single-Precision  Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFMSUBSS xmm1, xmm2, xmm3/mem32, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 6E /r /is4
</td></tr>
<tr><th>VFMSUBSS xmm1, xmm2, xmm3, xmm4/mem32
</th><td>C4 RXB.03 1.xsrc1.0.01 6E /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x6E</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4670.htm">t4670</a>
</dd>
</dl><pre>
IiaVFMSUBSS:: PROC
    IiEmitOpcode 0x6E
    JMP IiaVFMADDSS.op:
  ENDP IiaVFMSUBSS::
</pre>

<dl id="IiaVFMSUBSD">
<dt><a href="#IiaVFMADDSS">&uarr; VFMSUBSD</a></dt>
<dd>Multiply and Subtract Scalar Double-Precision  Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFMSUBSD xmm1, xmm2, xmm3/mem64, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 6F /r /is4
</td></tr>
<tr><th>VFMSUBSD xmm1, xmm2, xmm3, xmm4/mem64 
</th><td>C4 RXB.03 1.xsrc1.0.01 6F /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x6F</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4670.htm">t4670</a>
</dd>
</dl><pre>
IiaVFMSUBSD:: PROC
    IiEmitOpcode 0x6F
    JMP IiaVFMADDSS.op:
  ENDP IiaVFMSUBSD::
</pre>

<dl id="IiaVFNMADDSS">
<dt><a href="#IiaVFMADDSS">&uarr; VFNMADDSS</a></dt>
<dd>Negative Multiply and Add Scalar Single-Precision Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFNMADDSS xmm1, xmm2, xmm3/mem32, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 7A /r /is4
</td></tr>
<tr><th>VFNMADDSS xmm1, xmm2, xmm3, xmm4/mem32 
</th><td>C4 RXB.03 1.xsrc1.0.01 7A /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x7A</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4675.htm">t4675</a>
</dd>
</dl><pre>
IiaVFNMADDSS:: PROC
    IiEmitOpcode 0x7A
    JMP IiaVFMADDSS.op:
  ENDP IiaVFNMADDSS::
</pre>

<dl id="IiaVFNMADDSD">
<dt><a href="#IiaVFMADDSS">&uarr; VFNMADDSD</a></dt>
<dd>Negative Multiply and Add Scalar  Double-Precision Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFNMADDSD xmm1, xmm2, xmm3/mem64, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 7B /r /is4
</td></tr>
<tr><th>VFNMADDSD xmm1, xmm2, xmm3, xmm4/mem64 
</th><td>C4 RXB.03 1.xsrc1.0.01 7B /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x7B</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4675.htm">t4675</a>
</dd>
</dl><pre>
IiaVFNMADDSD:: PROC
    IiEmitOpcode 0x7B
    JMP IiaVFMADDSS.op:
  ENDP IiaVFNMADDSD::
</pre>

<dl id="IiaVFNMSUBSS">
<dt><a href="#IiaVFMADDSS">&uarr; VFNMSUBSS</a></dt>
<dd>Negative Multiply and Subtract Scalar  Single-Precision Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFNMSUBSS xmm1, xmm2, xmm3/mem32, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 7E /r /is4
</td></tr>
<tr><th>VFNMSUBSS xmm1, xmm2, xmm3, xmm4/mem32 
</th><td>C4 RXB.03 1.xsrc1.0.01 7E /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x7E</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4675.htm">t4675</a>
</dd>
</dl><pre>
IiaVFNMSUBSS:: PROC
    IiEmitOpcode 0x7E
    JMP IiaVFMADDSS.op:
  ENDP IiaVFNMSUBSS::
</pre>

<dl id="IiaVFNMSUBSD">
<dt><a href="#IiaVFMADDSS">&uarr; VFNMSUBSD</a></dt>
<dd>Negative Multiply and Subtract Scalar  Double-Precision Floating-Point</dd>
<dt>Intel reference</dt>
<dd><table>
<tr><th>VFNMSUBSD xmm1, xmm2, xmm3/mem64, xmm4 
</th><td>C4 RXB.03 0.xsrc1.0.01 7F /r /is4
</td></tr>
<tr><th>VFNMSUBSD xmm1, xmm2, xmm3, xmm4/mem64 
</th><td>C4 RXB.03 1.xsrc1.0.01 7F /r /is4
</td></tr>
</table></dd>
<dt>Opcode</dt>
<dd>0x7F</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t4675.htm">t4675</a>
</dd>
</dl><pre>
IiaVFNMSUBSD:: PROC
    IiEmitOpcode 0x7F
    JMP IiaVFMADDSS.op:
  ENDP IiaVFNMSUBSD::
</pre>

<!--IiaEpilogue--><pre>
  ENDPROGRAM iia
</pre><!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
