<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='pass.htm source file'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>pass.htm source file</title>
</head>
<body class='EASOURCE' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>pass.htm
<br/><i>Class</i>
<br/><a href="#PASS">PASS</a>
<br/><i>Procedures</i>
<br/><a href="#PassCreate">PassCreate</a>
<br/><a href="#PassDestroy">PassDestroy</a>
<br/><a href="#PassInspect">PassInspect</a>
</h1>
<p>Object PASS represents one pass through the assembled program. The PASS structure is allocated on Pgm.Pool in
<a class="EXT" href="pgm.htm#PgmCreateProgram">PgmCreateProgram</a>. The object is initialized in
<a href="#PassCreate">PassCreate</a> and destroyed in <a href="#PassDestroy">PassDestroy
</a>.</p><p>Pass has its own memory pool.</p>
<br class="CLEAR"/>
<pre>
     EUROASM NOWARN=2101
pass PROGRAM FORMAT=COFF,MODEL=FLAT,WIDTH=32
     INCLUDEHEAD euroasm.htm, \  Interface (structures, symbols and macros) of other modules used in this source.
                 ea.htm,eaopt.htm,exp.htm,mac.htm,msg.htm,pgm.htm,pgmopt.htm,sss.htm,sym.htm,var.htm
</pre><pre>
pass HEAD ; Start of module interface.
</pre>

<dl id="PASS"><dt><a href="#top">&uarr; PASS</a></dt>
<dd>Information concerning an assembler pass is kept in this structure.
</dd></dl><pre>
PASS STRUC
.Pool        D D ; Memory pool for objects with pass-lifetime.
.VarList     D D ; Ptr to LIST structure which contains VAR objects with the name and value of %variables.
.MacList     D D ; Ptr to LIST structure which contains DICT objects with macro name and LinePtr.
.ExpansionNr D D ; Initialized to 0 in PassCreate, incremented by <a class="EXT" href="ctx.htm#CtxExpansionNrUpdate">CtxExpansionNrUpdate</a>.
 ENDSTRUC PASS
</pre><pre>
  ENDHEAD pass ; End of module interface.                       7
</pre>

<dl id="PassCreate">
<dt><a href="#top">&uarr; PassCreate</a> PgmPtr</dt>
<dd><dfn>PassCreate</dfn> initializes Pass object with empty VarList and MacList, resets ExpansionNr.
<br/>It also resets <code>symDefInPass </code> and sets <code>symFixed</code> for all symbols.
<br/>It also resets <code>sssDefinedInPass</code> and <code>sssUsed</code> for all sections, segments, structures (except for [PSP]).
<br/>It also resets the contents of SSS.EmitBuffer but leaves SSS.Top (virtual section size) unchanged.
<br/>PassCreate is invoked when pseudoinstruction PROGRAM is handled at the start of each pass.</dd>
<dt>Input</dt>
<dd><b>PgmPtr</b> pointer to Pgm object which must have
<!---->allocated room for PASS object and stored its pointer to Pgm.PassPtr.</dd>
<dt>Output</dt>
<dd>PgmPtr.PassPtr initialized.</dd>
<dt>Invoked by</dt>
<dd><a class="EXT" href="pseudo.htm#PseudoPROGRAM">PseudoPROGRAM</a>
</dd>
</dl><pre>
PassCreate Procedure PgmPtr
     MOV ECX,[%PgmPtr]
     MOV EAX,'0310'                         ; I0310 Assembling source pass !1D. EAX=0x30313330
     JSt [ECX+PGM.Status],pgmEnvelope,.10:
     MOV EAX,'0510'                         ; I0510 Assembling program pass !1D. EAX=0x30313530
.10: JNSt [ECX+PGM.Status],pgmFixingPass,.20:
     ADD EAX,0x00010000                     ; Change MsgId to I0320 or I0520.
.20: JNSt [ECX+PGM.Status],pgmLastPass,.30:
     ADD EAX,0x00020000                     ; Change MsgId to I0330 or I0530.
.30: Msg EAX,[ECX+PGM.PassNr]               ; <b>Report information about the start of pass.</b>.
     RstSt [ECX+PGM.Status],pgmPassInit
     MOV EBX,[ECX+PGM.PassPtr]
     LEA ESI,[ECX+PGM.Eaopt]
     MOV EAX,Ea.Eaopt::
     CopyTo EAX,ESI,Size=SIZE#EAOPT         ; Reinitialize EUROASM options from snapshot taken at the beginning of program.
     PoolCreate Size=%EaPoolSize, ErrorHandler=EaMallocError::
     MOV [EBX+PASS.Pool],EAX                ; <b>Create the pass memory pool.</b>
     MOV EDX,EAX
     SUB EAX,EAX
     MOV [EBX+PASS.ExpansionNr],EAX         ; <b>Reset expansion number.</b>
     ListCreate EDX, SIZE#VAR
     MOV [EBX+PASS.VarList],EAX
     ListCreate EDX, SIZE#MAC
     MOV [EBX+PASS.MacList],EAX
     MOV EAX,[ECX+PGM.SssList]              ; <b>Enumerate SSS objects</b> and reset <code>sssDefinedInPass</code>
     TEST EAX                               ;   and <code>sssUsed</code> in sections and segments.
     JZ .50:
     ListGetFirst EAX
     JZ .50:
.40: RstSt [EAX+SSS.Status],sssDefinedInPass
     JSt [EAX+SSS.Status],sssGroup|sssStructure|sssImagePrefix,.45:
     RstSt [EAX+SSS.Status],sssUsed
     BufferClear [EAX+SSS.EmitBuffer]
     JNSt [EAX+SSS.Purpose],sssPurposeCODE,.45:
     JSt [ECX+PGM.Status],pgmPassInit,.45:
     SetSt [ECX+PGM.Status],pgmPassInit
.45: ListGetNext EAX
     JNZ .40:                               ; The next segment or section.
.50: MOV EAX,[ECX+PGM.SymList]
     TEST EAX
     JZ .80:
     ListGetFirst EAX                       ; <b>Reset</b> <code>Status:symDefInPass</code>
     JZ .80:                                ;    and set <code>symFixed</code> for all symbols.
.60: RstSt [EAX+SYM.Status],symDefInPass
     SetSt [EAX+SYM.Status],symFixed
     ListGetNext EAX
     JNZ .60:                               ; The next symbol.
.80: MOVD [ECX+PGM.CurrentSect],0           ; <b>Reset the current section at the start of each pass</b>.
.90:EndProcedure PassCreate
</pre>

<dl id="PassDestroy">
<dt><a href="#top">&uarr; PassDestroy</a> PgmPtr</dt>
<dd><dfn>PassDestroy</dfn> ends the assembly of a program pass.
<!---->Pass.Pool is destroyed but the Pass object itself is not freed and may be reused for the next pass.
<br/>PassDestroy removes unused implicit segments.
<!---->Then it resolves scope of defined global symbols to public and undefined global to external.
<!---->If the external symbol does not have an external pseudosegment attached, it will be created here.
<br/>PassDestroy is invoked from PseudoENDPROGRAM at the end of each pass (when ENDPROGRAM is encounterred).</dd>
<dt>Input</dt>
<dd><b>PgmPtr</b> pointer to PGM structure of a program, whose Pass terminates.</dd>
<dt>Output</dt>
<dd><b>EAX=</b> memory deallocated from Pass.Pool.
<br>Current pass of the program is destroyed.</dd>
<dt>Error</dt>
<dd>Errors are reported with macro <a class="EXT" href="msg.htm#Msg">Msg</a>.</dd>
<dt>Invokes</dt>
<dd><a class="EXT" href="sss.htm#SssCheckDirty">SssCheckDirty</a>
<a class="EXT" href="sss.htm#SssCreateExtern">SssCreateExtern</a>
</dd>
<dt>Invoked by</dt>
<dd><a class="EXT" href="pseudo.htm#PseudoENDPROGRAM">PseudoENDPROGRAM</a>
</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t2291.htm">t2291</a>
</dd>
</dl><pre>
PassDestroy Procedure PgmPtr
BaseSect LocalVar Size=SIZE#SSS
    MOV EBX,[%PgmPtr]
    StackPop [Src.EaoptStack::]                  ; Check if the [Src.EaoptStack] is balanced inside PROGRAM..ENDPROGRAM.
    Msg cc=NC,'3811'                             ; Unbalanced option stack. EUROASM POP missing.
    JNSt [EBX+PGM.Status],pgmLastPass,.25:       ; <b>Remove unused implicit segments</b> and their symSe in the final pass.
.10:ListGetFirst [EBX+PGM.SssList]
    JZ .40:
.15:MOV ECX,[EAX+SSS.Status]
    JNSt ECX,sssSegment|sssGroup,.20:
    JNSt ECX,sssImplicit,.20:
    Invoke SssCheckDirty::,EAX,EBX
    JC .20:                                      ; Skip when segment|group EAX is dirty (something was emitted to it)
    MOV EDX,[EAX+SSS.SymPtr]                     ;  or when its associated symbol was used.
    JSt [EDX+SYM.Status],symUsed,.20:
    ListRemove [EBX+PGM.SymList],[EAX+SSS.SymPtr]; Remove segment's associated symSe.
    ListRemove [EBX+PGM.SssList],EAX             ; Remove unused implicit segment.
    JMP .10:                                     ; Start from the 1st object again, because the list was modified.
.20:ListGetNext EAX                              ; The next segment.
    JNZ .15:
.25:XOR EDX,EDX                                  ; <b>Reset origin of each section</b> to the bottom, i. e. to the offset 0 at asm-time.
    ListGetFirst [EBX+PGM.SssList]
.30:JNSt [EAX+SSS.Status],sssSection,.35:
    MOV [EAX+SSS.OrgLow],EDX
    MOV [EAX+SSS.OrgHigh],EDX
.35:ListGetNext EAX
    JNZ .30:
.40:ListGetFirst [EBX+PGM.SymList]               ; <b>Update scope of global symbols</b>.
    JZ .60:
.45:JNSt [EAX+SYM.Status],symGlobal|symGlobalRef, .55:
    JSt  [EAX+SYM.Status],symDefInPass,.50:      ; If the symbol EAX was defined, its scope will be symPublic.
    SetSt [EAX+SYM.Status],symExtern             ; Global symbol was not defined in pass, it will be <b>external</b> or imported or forwarded.
    RstSt [EAX+SYM.Status],symEstimated
    MOV [EAX+SYM.OffsetLow],EDX
    Invoke SssCreateExtern::,EAX,EBX             ; Create external pseudosegment if it didn't exist yet.
    JMPS .55:
.50:SetSt [EAX+SYM.Status],symPublic             ; Global symbol was defined, it will be <b>published</b>.
.55:ListGetNext EAX                              ; The next symbol.
    JNZ .45:
.60:MOV ESI,[EBX+PGM.PassPtr]                    ; <b>Clear the PASS object.</b>
.70:PoolDestroy [ESI+PASS.Pool]                  ; The pass which ends right now. PASS.VarList and PASS.MacList are deallocated.
    MOV [%ReturnEAX],EAX
    Msg cc=C,'2575','Pass',EDX                   ; Deallocation of virtual memory !1C.Pool !2Hh failed.
.80:Clear ESI,Size=SIZE# PASS                    ; Erase object PASS including its lists.
.90:EndProcedure PassDestroy
</pre>

<dl id="PassInspect">
<dt><a href="#top">&uarr; PassInspect</a> PgmPtr</dt>
<dd><dfn>PassInspect</dfn> decides if more passes are necessary.
<!---->It will increment <code>Pgm.PassNr</code> and set flag <code>Pgm.Status:pgmLastPass</code> or <code>:pgmFixingPass</code>.</dd>
<dt>Input</dt>
<dd><b>PgmPtr</b> Pointer to the current program.</dd>
<dt>Output</dt>
<dd><b>CF=</b>0 if the last pass just ended.
<br/><b>CF=</b>1 when the next pass is necessary (not all symbols are fixed).</dd>
<dt>Error</dt>
<dd>Errors are reported with macro <a class="EXT" href="msg.htm#Msg">Msg</a>.</dd>
<dt>Invoked by</dt>
<dd><a class="EXT" href="pseudo.htm#PseudoENDPROGRAM">PseudoENDPROGRAM</a>
</dd>
<dt>Tested by</dt>
<dd><a class="EXT" href="../eatests/t7181.htm">t7181</a>
</dd>
</dl><pre>
PassInspect Procedure PgmPtr
    MOV EBX,[%PgmPtr]
    JSt [EBX+PGM.Status],pgmLastPass, .90: ; If <b>the final pass has just ended</b>, return CF=0, no more passes needed.
    JNSt [EBX+PGM.Status],pgmFixingPass, .10:
    RstSt [EBX+PGM.Status],pgmFixingPass   ; <b>Last but one pass has just ended</b>. Prepare for the final pass.
    JMP .Final:
.10:MOV EAX,[EBX+PGM.PassNr]
    INC EAX,EAX
    CMP EAX,[EBX+PGM.Pgmopt.MaxPasses]
    JNB .Fixing:                           ; <b>MaxPasses approached</b>, so this pass must be fixing
.20:; An <b>ordinary pass is ending</b>. If all symbols are fixed, goto .Final.
    ListGetFirst [EBX+PGM.SymList]
    JZ .Final:
.30:JNSt [EAX+SYM.Status],symFixed,.More:  ; If any symbol is unfixed, more passes are needed.
.40:ListGetNext EAX
    JZ .Final:
    JMP .30:                               ; <b>All symbols are fixed</b>. Prepare for the final pass.
.Fixing:                                   ; <b>The fixing (last but one) pass is required</b>.
    SetSt [EBX+PGM.Status],pgmFixingPass
    JMP .More:
.Final:                                    ; CF=1, <b>the final pass is required</b>.
    SetSt [EBX+PGM.Status],pgmLastPass
.More:INC [EBX+PGM.PassNr]                 ; CF=1, <b>at least one more pass is necessary</b>.
    STC
.90:EndProcedure PassInspect
</pre>

<pre>
  ENDPROGRAM pass
</pre><!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
