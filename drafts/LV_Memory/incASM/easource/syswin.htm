<!doctype html><html lang='en'><head>
<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=yes'>
<meta name='robots' content='ALL,FOLLOW'/>
<meta name='description' content='syswin.htm source file'/>
<meta name='version' content='20250318'/>
<meta name='author' content='Pavel vitsoft Šrubař'/>
<link rel='stylesheet' href='../euroasm.css' type='text/css'/>
<link rel='shortcut icon' href='../favicon.ico'/>
<title>syswin.htm source file</title>
</head>
<body class='EASOURCE' id='top'><div class='HEADMENU'><table>
<tr><td rowspan='2' title='&euro;ASM - assembler and linker'><img src='../favicon.ico' alt='EuroAssembler' />
<td><a href='../index.htm' title='Alphabetical index of all &euro;ASM elements, directives and instructions'>Index</a></td>
<td><a href='../eadoc/' class='EADOC' title='Documentation of EuroAssembler'>Manual</a></td>
<td><a href='https://euroassembler.eu/download/' title='History &amp; download of the latest and previous versions'>Download</a></td>
<td><a href='../easource/' class='EASOURCE' title='Source files of EuroAssembler itself'>Source</a></td>
<td><a href='../maclib/' class='MACLIB' title='Macro libraries shipped with &euro;ASM'>Macros</a></td>
<td rowspan='2' title='Find the searched token in any text file on this site'>
<form method='post' action='../search.php' enctype='multipart/form-data' accept-charset='utf-8'>
<input type='text' id='q' placeholder='Searched word(s)' name='q' value=''/>
<br/><label title='Check the box to find the expression even if it is surrounded by other letters | digits.'>
<input type='checkbox' name='EW'/><small>Embedded word</small></label>
<br/><label title='Check the box for case-insensitive search.'>
<input type='checkbox' name='CI'/><small>Case ins.</small></label>
<input type='submit' title='Search for the specified word|expression in all site files.' name='find' value='Search'/>
</form></td></tr><tr>
<td><a href='../sitemap.htm' title='List of directories and files on this site'>Sitemap</a></td>
<td><a href='../eadoc/links.htm' class='EADOC' title='References and external links to resources used in EuroAssembler developement'>Links</a></td>
<td><a href='https://euroassembler.eu/forum/' title='Discussion forum concerning EuroAssembler'>Forum</a></td>
<td><a href='../eatests/' class='EATESTS' title='Program snippets for testing the function of &euro;ASM'>Tests</a></td>
<td><a href='../objlib/' class='OBJLIB' title='Skeletons and sample objects and projects shipped with &euro;ASM'>Projects</a></td>
</tr></table></div>
<!--Contents above the marker {!==/HEADMENU==} was generated by "generate.php".-->
<!--/HEADMENU-->
<h1>syswin.htm
<br/><i>Macros</i>
<br/><a href="#SysANSI2Wide">SysANSI2Wide</a>
<br/><a href="#SysAssignFile">SysAssignFile</a>
<br/><a href="#SysCloseFile">SysCloseFile</a>
<br/><a href="#SysCreateFile">SysCreateFile</a>
<br/><a href="#SysEachFile">SysEachFile</a>
<br/><a href="#SysExitProcess">SysExitProcess</a>
<br/><a href="#SysGetArg">SysGetArg</a>
<br/><a href="#SysGetCurrentDirectory">SysGetCurrentDirectory</a>
<br/><a href="#SysGetEnvironment">SysGetEnvironment</a>
<br/><a href="#SysGetEuroasmOS">SysGetEuroasmOS</a>
<br/><a href="#SysGetFileSize">SysGetFileSize</a>
<br/><a href="#SysGetFileTime">SysGetFileTime</a>
<br/><a href="#SysGetStackSize">SysGetStackSize</a>
<br/><a href="#SysGetUTC">SysGetUTC</a>
<br/><a href="#SysOpenFileMap">SysOpenFileMap</a>
<br/><a href="#SysMkDir">SysMkDir</a>
<br/><a href="#SysWriteFile">SysWriteFile</a>
</h1>
<p>This macrolibrary <q>syswin.htm</q> is MS Windows version of macroinstructions which encapsulate system calls in EuroAssembler.</p>
<p id="UsedOsAPI">List of services hired from Windows API:<br/>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/c/closehandle.html">CloseHandle</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/c/createdirectory.html">CreateDirectory</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/c/createfile.html">CreateFile</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/c/createfilemapping.html">CreateFileMapping</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/e/exitprocess.html">ExitProcess</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/f/filetimetodosdatetime.html">FileTimeToDosDateTime</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/f/findclose.html">FindClose</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/f/findfirstfile.html">FindFirstFile</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/f/findnextfile.html">FindNextFile</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/g/getcommandline.html">GetCommandLine</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/g/getenvironmentvariable.html">GetEnvironmentVariable</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/g/getlasterror.html">GetLastError</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/g/getmodulefilename.html">GetModuleFileName</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/g/getmodulefilename.html">GetModuleFileName</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/g/getmodulehandle.html">GetModuleHandle</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/g/getsysteminfo.html">GetSystemInfo</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/g/getsystemtime.html">GetSystemTime</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/g/globalfree.html">GlobalFree</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/m/mapviewoffile.html">MapViewOfFile</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/m/multibytetowidechar.html">MultiByteToWideChar</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/s/setfilepointer.html">SetFilePointer</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/s/systemtimetofiletime.html">SystemTimeToFileTime</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/u/unmapviewoffile.html">UnmapViewOfFile</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/v/virtualalloc.html">VirtualAlloc</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/v/virtualfree.html">VirtualFree</a>
<a class="EXTW" href="http://www.jasinskionline.com/windowsapi/ref/w/writefile.html">WriteFile</a>
</p><br/>
<blockquote id="ExtendEUROASMOS">In order to port EuroAssembler to a different operating system:
<ol><li>Specify 1..4 character shortcut of the system, e.g. <code>Lin, BSD, OS2, Sol,...</code>.</li>
<li>Create source file <q>sys%^EuroasmOS.htm</q>, similar to this <q>syswin.htm</q>.</li>
<li>Rewrite all macros in this source file, exactly keeping their parameters, input, output and functionality.</li>
<li>Rebuild EuroAssembler.</li>
<li>Update documentation.</li>
</ol></blockquote><br class="CLEAR"/>
<pre>
syswin  HEAD ; Start of interface, which is included to other modules.
</pre>

<dl id="SysANSI2Wide"><dt><a href="#top">&uarr; SysANSI2Wide</a> CodePage, ANSIPtr, ANSISize, WidePtr, WideSize</dt>
<dd>SysANSI2Wide converts 8bit ANSI characters to 16bit Wide characters using the specified CodePage.
</dd><dt>Input</dt><dd><b>CodePage</b> Integer codepage identifier, see
<a class="EXTL" href="../eadoc/links.htm#CodePageMS">[CodePageMS]</a>.
<br/><b>ANSIPtr</b> Pointer to the input byte string.
<br/><b>ANSISize</b> Number of bytes in input string.
<br/><b>WidePtr</b> Pointer to the output buffer.
<br/><b>WideSize</b> Size of the output buffer in 16bit UNICHARs.
</dd><dt>Output</dt><dd><b>ZF=</b>0, output buffer written.
</dd><dt>Error</dt><dd><b>ZF=</b>1 if insuffucuent buffer, invalid translation etc.
</dd><dt>Invoked from</dt><dd> <a class="EXT" href="./exp.htm#ExpStoreUString">ExpStoreUString</a>.
</dd></dl><pre>
SysANSI2Wide %MACRO Codepage, ANSIPtr, ANSISize, WidePtr, WideSize
      PUSH EAX,ECX,EDX
       WinAPI MultiByteToWideChar, %Codepage, MB_PRECOMPOSED, %ANSIPtr, %ANSISize, %WidePtr, %WideSize
       TEST EAX
      POP EDX,ECX,EAX
   %ENDMACRO SysANSI2Wide
</pre>

<dl id="SysAssignFile"><dt><a href="#top">&uarr; SysAssignFile</a> File, FilenamePtr, FilenameSize</dt>
<dd>Assign filename to the FILE structure.
</dd><dt>Input</dt><dd><b>File</b>  Pointer to a <a href="../maclib/winf32.htm#FILE">FILE</a> object.
<br/><b>FilenamePtr</b> ASCII filename without quotes. Not zero terminated.
<br/><b>FilenameSize</b> in bytes. Must not exceed 256.
</dd><dt>Output</dt><dd><b>CF=</b>0</dd>
<dt>Error</dt><dd><b>CF=</b>1</dd></dl><pre>
SysAssignFile %MACRO File, FilenamePtr, FilenameSize
       FileAssign %File, %FilenamePtr,Size=%FilenameSize, Unicode=0
     %ENDMACRO SysAssignFile
</pre>

<dl id="SysCloseFile"><dt><a href="#top">&uarr; SysCloseFile</a> File</dt>
<dd>Close the opened file, its memory mapping, free its buffers.
</dd><dt>Input</dt><dd><b>File</b> Pointer to a <a href="../maclib/winf32.htm#FILE">FILE</a>.
</dd><dt>Output</dt><dd>N/A</dd>
<dt>Uses</dt><dd><a class="EXT" href="../maclib/winf32.htm#FileClose">FileClose</a></dd>
</dl><pre>
SysCloseFile %MACRO File
      FileClose %File
    %ENDMACRO SysCloseFile
</pre>

<dl id="SysMkDir"><dt><a href="#top">&uarr; SysMkDir</a> theFile</dt>
<dd> will parse the file name and create all directories in its path if they didn't exist.
<br/>The last portion of assigned name is treated as directory only if
<!--->it is terminated with slash.</dd>
<dt>Input</dt><dd><b>theFile</b> is pointer to <a class="EXT" href="../maclib/winf32.htm#FILE">FILE
</a> object with assigned name.</dd>
<dt>Output</dt><dd><b>CF</b>=0
<br/><b>EAX</b>=0 if the directory was created or it existed before.</dd>
<dt>Error</dt><dd><br><b>CF</b>=1
<br/><b>EAX</b>=last error if CreateDirectory failed.</dd>
</dl><pre>
SysMkDir %MACRO theFile
    FileMkDir %theFile
 %ENDMACRO SysMkDir
</pre>

<dl id="SysCreateFile"><dt><a href="#top">&uarr; SysCreateFile</a> File, FileName$</dt>
<dd>Open the file for writing.
</dd><dt>Input</dt><dd><b>File</b> Pointer to a <a href="../maclib/winf32.htm#FILE">FILE</a>.
<br/><b>FileName$</b> Pointer to zero-terminated file name.
</dd><dt>Output</dt><dd><b>CF=</b>0
<br/><b>EAX=</b>0</dd>
<dt>Error</dt><dd><b>CF=</b>1
<br/><b>EAX=</b> error code</dd>
<dt>Uses</dt><dd><a class="EXT" href="../maclib/winf32.htm#FileAssign">FileAssign</a>,
<a class="EXT" href="../maclib/winf32.htm#FileCreate">FileCreate</a></dd></dl><pre>
SysCreateFile %MACRO File, FileName$
     FileAssign %File,%FileName$
     FileMkDir  %File
     FileCreate %File
    %ENDMACRO SysCreateFile
</pre>

<dl id="SysEachFile"><dt><a href="#top">&uarr; SysEachFile</a> File, Callback</dt>
<dd>Searches a directory for a file whose name matches the mask assigned to the file,
<!---->and performs Callback procedure with each such filename.
<!---->If no file matches the mask, %CallbackProc is never called.
</dd><dt>Input</dt><dd><b>File</b> ^<a class="EXT" href="../maclib/winf32.htm#FILE">FILE</a>
<!---->with filename and path assigned to it. The filename may contain wildcards.
<br/><b>Callback</b> is the address of callback procedure performed with each file, see
<a class="EXT" href="../maclib/winf32.htm#FileEach">FileEach</a>.
</dd><dt>Output</dt><dd><b>EAX=</b> EAX=content of EAX at the last CallbackProc call exit
<!---->or 0 if the CallbackProc was never called.</dd>
<dt>Uses</dt><dd><a class="EXT" href="../maclib/winf32.htm#FileEach">FileEach</a></dd></dl><pre>
SysEachFile %MACRO File, Callback
              FileEach %File, %Callback
            %ENDMACRO SysEachFile
</pre>

<dl id="SysExitProcess"><dt><a href="#top">&uarr; SysExitProcess  Errorlevel</a></dt>
<dd>Terminate the euroasm program with specified errorlevel.</dd>
<dt>Input</dt><dd><b>Errorlevel</b> is a plain number 0..9.</dd>
<dt>Output</dt><dd>N/A</dd></dl><pre>
SysExitProcess %MACRO Errorlevel
                 TerminateProgram %Errorlevel
               %ENDMACRO SysExitProcess
</pre>

<dl id="SysGetArg"><dt><a href="#top">&uarr; SysGetArg</a> ArgNr</dt>
<dd>Get AgrNr-th argument from the command line.</dd>
<dt>Input</dt><dd><b>ArgNr</b> is ordinal number of argument (1,2,,,).</dd>
<dt>Output</dt><dd><b>CF=</b>0
<br/><b>ESI=</b> pointer to the argument
<br/><b>ECX=</b> size of argument. It is readonly and not zero-terminated.
</dd><dt>Error</dt><dd><b>CF=</b>1 if the argument was not provided.
<br/><b>ESI=</b>0
<br/><b>ECX=</b>0
</dd>
<dt>Uses</dt><dd><a class='EXT' href='../maclib/winapi.htm#GetArg'>GetArg</a></dd>
</dl><pre>
SysGetArg %MACRO ArgNr
            GetArg %ArgNr
          %ENDMACRO SysGetArg
</pre>

<dl id="SysGetCurrentDirectory"><dt><a href="#top">&uarr; SysGetCurrentDirectory</a> DirNamePtr</dt>
<dd>Macro will fill the room reserved at DirNamePtr with full path to the current directory.
<!---->The buffer must be at least MAX_PATH_SIZE=260 bytes long.</dd>
<dt>Input</dt><dd><b>DirNamePtr</b> Points to the reserved space for the directory name.
</dd><dt>Output</dt><dd><b>CF=</b>0
</dd><dt>Error</dt><dd><b>CF=</b>1</dd>
<dt>Invoked from</dt><dd> <a class="EXT" href="ea.htm#EaMain">EaMaiate</a>.
</dd></dl><pre>
SysGetCurrentDirectory %MACRO DirNamePtr
      PUSH EAX,ECX,EDX
        WinAPI GetCurrentDirectoryA, MAX_PATH_SIZE, %DirNamePtr
        CMP EAX,1 ; Set CF if EAX=0 on return.
      POP EDX,ECX,EAX
     %ENDMACRO SysGetCurrentDirectory
</pre>

<dl id="SysGetEnvironment"><dt><a href="#top">&uarr; SysGetEnvironment</a> NamePtr, NameSize, OutEnvBuffer</dt>
<dd>This macro retrieves environment variable value from the hosting operation system at assembly time.</dd>
<dt>Input</dt><dd><b>NamePtr</b> Points to the name of required environment variable.
<br/><b>NameSize</b> Size of variable name in bytes.
<br/><b>OutEnvBuffer</b> Pointer to a <a class="EXT" href="../maclib/memory32.htm">BUFFER
</a> where the contents of environment variable will be written to. The value is not zero-terminated.</dd>
<dt>Output</dt><dd><b>ZF=</b>0 if at least one byte was written to OutBuffer.</dd>
<dt>Error</dt><dd><b>ZF=</b>1 if the environment variable was not found or it was empty.</dd>
<dt>Invoked from</dt><dd> <a class="EXT" href="pseudo.htm#PseudopcSETE">Stm_pcSETE</a>.
</dd></dl><pre>
SysGetEnvironment %MACRO NamePtr, NameSize, OutEnvBuffer
     PUSHD %OutEnvBuffer, %NameSize,%NamePtr
     CALL SysGetEnvironment@RT:
SysGetEnvironment@RT: PROC1
     PUSHAD
:     Invoke EaBufferReserve::,SysGetEnvironment@RT
      MOV EBX,EAX
      MOV ESI,[ESP+36]                     ; NamePtr
      MOV ECX,[ESP+40]                     ; NameSize
      BufferStore EBX,ESI,ECX
      Msg cc=C,'9314',SysGetEnvironment@RT ; Allocation error storing to buffer in !1H.
      BufferStore EBX,=W(0),2
      BufferRetrieve EBX
:     Invoke EaBufferRelease::,EBX
      ; ESI is pointer to ASCIIZ variable name.
      SUB ECX,ECX
      WinAPI GetEnvironmentVariableA,ESI,ECX,ECX
      MOV ECX,EAX                           ; Required value size.
      TEST EAX
      JZ .99:
      MOV EDI,[ESP+44]                      ; OutEnvBuffer
      BufferNew EDI,ECX
      Msg cc=C,'9314',SysGetEnvironment@RT  ; Allocation error storing to buffer in !1H.
      JC .99:
      WinAPI GetEnvironmentVariableA,ESI,EAX,ECX
      BufferDecrement EDI
      TEST EAX                              ; ZF=0 on success.
.99: POPAD
     RET 12
     ENDPROC1 SysGetEnvironment@RT:
  %ENDMACRO SysGetEnvironment
</pre>

<dl id="SysGetEuroasmOS"><dt><a href="#top">&uarr; SysGetEuroasmOS</a></dt>
<dd>Macro returns NUL-padded 1..4 byte string <code>Win</code> (or <code>Lin</code> etc)
<!---->depending on OS which the EuroAssembler is compiled for.</dd>
<dt>Input</dt><dd><b>-</b>
<dt>Output</dt><dd><b>EAX=</b> Operating system identifier.
</dd></dl><pre>
SysGetEuroasmOS %MACRO EuroasmOSPtr
     MOV EAX,"Win" ; OS version is hardwired here. Change it in ported versions.
     %ENDMACRO SysGetEuroasmOS
</pre>

<dl id="SysGetStackSize"><dt><a href="#top">&uarr; SysGetStackSize</a> </dt>
<dd><p>Macro <dfn>SysGetStackSize</dfn> returns the amount of memory in bytes
<!---->reserved during linkage of the actually running <q>euroasm.exe
</q>. Obtained value will be used for protection from stack overflow error.</p>
<blockquote>Stack in the loaded PECOFF executable is allocated in virtual address space
<!---->somewhere below ImageBase but I didn't find a reliable way how to get its VA,
<!---->so I read it from optional header in the loaded executable module.</blockquote>
</dd><dt>Input</dt><dd><b>-</b>
</dd><dt>Output</dt><dd><b>CF=</b>0, <b>EAX=</b> reserved stack size in bytes.
</dd><dt>Error</dt><dd><b>CF=</b>1, <b>EAX=</b> default (1M).</dd>
</dl><pre>
SysGetStackSize %MACRO
     PUSHAD
      MOV EBX,1M ; Initialize SizeOfStackReserve with default value.
      WinAPI GetModuleHandle,0
      TEST EAX
      STC
      JZ .R%.:
      CMPW [EAX+PFMZ_DOS_HEADER.e_magic],'MZ'
      STC
      JNE .R%.:
      ADD EAX,[EAX+PFMZ_DOS_HEADER.e_lfanew] ; Get pointer to PE signature.
      CMPD [EAX],'PE' ; EAX points to PE signature, file header and optional header.
      STC
      JNE .R%.:
      CLC
      MOV EBX,[EAX+4+SIZE#PFCOFF_FILE_HEADER+PFPE_OPTIONAL_HEADER32.SizeOfStackReserve]
.R%.: MOV [ESP+28],EBX ; %ReturnEAX.
     POPAD
    %ENDMACRO SysGetStackSize
</pre>

<dl id="SysGetUTC"><dt><a href="#top">&uarr; SysGetUTC</a> </dt>
<dd>Macro returns current system time as the number of seconds since midnight 1.1.1970 UTC.</dd>
<dt>Input</dt><dd><b>-</b></dd>
<dt>Output</dt><dd><b>EAX</b> number of seconds since January 1st 1970 0:0:0 UTC.</dd></dl><pre>
SysGetUTC %MACRO
    CALL SysGetUTC@RT:
SysGetUTC@RT: PROC1
    PUSH ECX,EDX,ESI,EDI
     SUB ESP,8 + 16                    ; 8 + SIZE# SYSTEMTIME
     MOV EDI,ESP                       ; EDI is pointer to FILETIME (QWORD).
     LEA ESI,[ESP+8]                   ; ESI is pointer to <a class='EXT' href='../maclib/winstime.htm#SYSTEMTIME'>SYSTEMTIME</a>.
     WinAPI GetSystemTime,ESI
     WinAPI SystemTimeToFileTime,ESI,EDI
     ; FILETIME at EDI is now an unsigned integer QWORD with 100ns intervals elapsed since midnight 1.1.1601.
     ; 134774 days elapsed between 1.1.1601 and 1.1.1970,
     ; i.e. 134774*24*60*60*10000000=0x019DB1DE_D53E8000 must be subtracted from FILETIME at EDI.
     MOV EAX,[EDI+0]
     MOV EDX,[EDI+4]
     SUB EAX,0xD53E8000
     SBB EDX,0x019DB1DE
     MOV ECX,10000000
     DIV ECX
     ADD ESP,8 + 16                    ; 8 + SIZE# SYSTEMTIME
    POP EDI,ESI,EDX,ECX
    RET
   ENDPROC1 SysGetUTC@RT:
 %ENDMACRO SysGetUTC
</pre>

<dl id="SysOpenFileMap"><dt><a href="#top">&uarr; SysOpenFileMap</a> File, FileNamePtr, FileNameSize=-1</dt>
<dd>Open the file for reading and map it to memory.</dd>
<dt>Input</dt><dd><b>File</b> Pointer to a <a href="../maclib/winf32.htm#FILE">FILE</a>.
<!---->The object will be assigned with the FileName and opened for reading.
<br/><b>FileNamePtr</b> is pointer to the file name (unquoted ASCII byte string).
<br/><b>FileNameSize=</b> is the number of bytes in file name.
<!---->It may be omitted if the file name is zero-terminated.
</dd><dt>Output</dt><dd><b>CF=</b>0
<br/><b>ESI=</b> is pointer to memory mapped file contents.
<br/><b>EAX=</b> is file size.
<dt>On error</dt><dd><b>CF=</b>1
<br/><b>ESI=</b>0
<br/><b>EAX=</b> error code.</dd>
<dt>Uses</dt><dd><a class="EXT" href="../maclib/winf32.htm#FileAssign">FileAssign</a>,
<a class="EXT" href="../maclib/winf32.htm#FileMapOpen">FileMapOpen</a></dd>
</dl><pre>
SysOpenFileMap %MACRO File, FileNamePtr, FileNameSize=-1
      FileAssign %File, %FileNamePtr, Size=%FileNameSize
      FileMapOpen %File
     %ENDMACRO SysOpenFileMap
</pre>

<dl id="SysWriteFile"><dt><a href="#top">&uarr; SysWriteFile</a> File, DataPtr, DataSize</dt>
<dd>Write data. The file must have been opened with SysCreateFile.
</dd><dt>Input</dt><dd><b>File</b> Pointer to a <a href="../maclib/winf32.htm#FILE">FILE</a>.
<br/><b>DataPtr</b> Pointer to the data to be written.
<br/><b>DataSize</b> size of the data.</dd>
<dt>Output</dt><dd><b>CF=</b>0
<br/><b>EAX=</b> number of bytes written to the file.</dd>
<dt>On error</dt><dd><b>CF=</b>1
<br/><b>EAX=</b> error code.</dd>
<dt>Uses</dt><dd><a class="EXT" href="../maclib/winf32.htm#FileWrite">FileWrite</a></dd>
</dl><pre>
SysWriteFile %MACRO File, DataPtr, DataSize
      FileWrite %File,%DataPtr,%DataSize
     %ENDMACRO SysWriteFile
</pre>

<dl id="SysGetFileTime"><dt><a href="#top">&uarr; SysGetFileTime</a> FileNamePtr</dt>
<dd>Macro returns the time when the file was last written to as a number of seconds since midnight 1.1.1970 UTC.
<!---->If the file is not found or not accessible,  0 is returned.
</dd><dt>Input</dt><dd><b>File</b> Pointer to ASCIIZ file name without quotes.
</dd><dt>Output</dt><dd><b>EAX=</b>timestamp.
</dd><dt>On error</dt><dd><b>EAX=</b>0.</dd></dl><pre>
SysGetFileTime %MACRO FileNamePtr
     MOV EAX,%FileNamePtr
     CALL SysGetFileTime@RT:
SysGetFileTime@RT: PROC1
   PUSH EBX,ECX,EDX,EDI
     SUB ESP,8 ; Make room for FILETIME structure (QWORD).
     MOV EDI,ESP
     WinAPI CreateFile,EAX,GENERIC_READ,FILE_SHARE_READ,0,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,0
     MOV EBX,EAX
     WinAPI GetFileTime,EBX,0,0,EDI
     TEST EAX
     JZ .80:
     ; FILETIME at EDI is now an unsigned integer QWORD with 100ns since midnight 1.1.1601.
     ; 134774 days elapsed between 1.1.1601 and 1.1.1970,
     ; i.e. 134774*24*60*60*10_000_000=0x019D_B1DE_D53E_8000 must be subtracted from FileTime at EDI.
     MOV EAX,[EDI+0]
     MOV EDX,[EDI+4]
     SUB EAX,0xD53_E8000
     SBB EDX,0x019_DB1DE
     MOV ECX,10_000_000
     DIV ECX
.80: ADD ESP,8
     PUSH EAX
       WinAPI CloseHandle,EBX
     POP EAX
   POP EDI,EDX,ECX,EBX
   RET
  ENDP1 SysGetFileTime@RT:
 %ENDMACRO SysGetFileTime
</pre>

<dl id="SysGetFileSize"><dt><a href="#top">&uarr; SysGetFileSize</a> FileNamePtr</dt>
<dd>Macro returns the size of input file in bytes.
<!---->If the file is not found or not accessible, 0 is returned.
</dd><dt>Input</dt><dd><b>File</b> Pointer to ASCIIZ file name without quotes.
</dd><dt>Output</dt><dd><b>EDX:EAX=</b>filesize.
</dd><dt>On error</dt><dd><b>EDX:EAX=</b>0.</dd></dl><pre>
SysGetFileSize %MACRO FileNamePtr
     MOV EAX,%FileNamePtr
     CALL SysGetFileSize@RT:
SysGetFileSize@RT: PROC1
   PUSH EBX,ECX,EDI
     SUB ESP,8 ; Make room for FileSize (QWORD).
     LEA EDI,[ESP+4]
     WinAPI CreateFile,EAX,GENERIC_READ,FILE_SHARE_READ,0,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,0
     MOV EBX,EAX
     WinAPI GetFileSize,EBX,EDI
     SUB EDI,4
     MOV [EDI],EAX
     INC EAX
     JNZ .80:
     WinAPI GetLastError
     TEST EAX
     JZ .80:
     SUB EAX,EAX
     MOV [EDI+0],EAX
     MOV [EDI+4],EAX
.80: WinAPI CloseHandle,EBX
     MOV EAX,[EDI+0]
     MOV EDX,[EDI+4]
     ADD ESP,8
   POP EDI,ECX,EBX
   RET
  ENDP1 SysGetFileSize@RT:
 %ENDMACRO SysGetFileSize
</pre>

<pre>
   ENDHEAD syswin
</pre>
<!--TAILMENU-->
<!--Contents below the marker {!==TAILMENU==} was generated by "generate.php".-->
<br class='CLEAR'/><a id='bottom' href='#top'>&#x25B2;Back to the top&#x25B2;</a>
</body></html>
